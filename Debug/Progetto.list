
Progetto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007988  08007988  00020528  2**0
                  CONTENTS
  4 .ARM          00000008  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007990  08007990  00020528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000528  20000000  080079a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000528  08007ec8  00020528  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  08007ec8  00020cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020528  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020558  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025081  00000000  00000000  0002059b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005350  00000000  00000000  0004561c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000eb9a  00000000  00000000  0004a96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a08  00000000  00000000  00059508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001434  00000000  00000000  0005af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b893  00000000  00000000  0005c344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a883  00000000  00000000  00087bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fd697  00000000  00000000  000b245a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d20  00000000  00000000  001afaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001b4814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000528 	.word	0x20000528
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007858 	.word	0x08007858

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000052c 	.word	0x2000052c
 80001cc:	08007858 	.word	0x08007858

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <blink>:


uint8_t blinkStatus = 0;

void blink()
{
 800057c:	b508      	push	{r3, lr}
	blinkStatus = !blinkStatus;
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <blink+0x18>)
 8000580:	7819      	ldrb	r1, [r3, #0]
 8000582:	fab1 f181 	clz	r1, r1
 8000586:	0949      	lsrs	r1, r1, #5
 8000588:	7019      	strb	r1, [r3, #0]
	setDigital(MF_led1,blinkStatus);
 800058a:	2002      	movs	r0, #2
 800058c:	f000 ff98 	bl	80014c0 <setDigital>
}
 8000590:	bd08      	pop	{r3, pc}
 8000592:	bf00      	nop
 8000594:	20000544 	.word	0x20000544

08000598 <ble_check_enter>:

void ble_check_enter()
{
 8000598:	b508      	push	{r3, lr}

	setDigital(MF_led1,GPIO_PIN_SET);
 800059a:	2101      	movs	r1, #1
 800059c:	2002      	movs	r0, #2
 800059e:	f000 ff8f 	bl	80014c0 <setDigital>

    setTimer(TF_Main, blink, 500);
 80005a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005a6:	2300      	movs	r3, #0
 80005a8:	4906      	ldr	r1, [pc, #24]	; (80005c4 <ble_check_enter+0x2c>)
 80005aa:	2000      	movs	r0, #0
 80005ac:	f002 f9a2 	bl	80028f4 <setTimer>

    setDigital(MF_led2, GPIO_PIN_RESET);
 80005b0:	2100      	movs	r1, #0
 80005b2:	2003      	movs	r0, #3
 80005b4:	f000 ff84 	bl	80014c0 <setDigital>

    setExitCondition(ST_IDLE, buttonToggled);
 80005b8:	4903      	ldr	r1, [pc, #12]	; (80005c8 <ble_check_enter+0x30>)
 80005ba:	2002      	movs	r0, #2
 80005bc:	f001 fed0 	bl	8002360 <setExitCondition>


}
 80005c0:	bd08      	pop	{r3, pc}
 80005c2:	bf00      	nop
 80005c4:	0800057d 	.word	0x0800057d
 80005c8:	080012b9 	.word	0x080012b9

080005cc <ble_check_beforeLoop>:


void ble_check_beforeLoop(uint8_t deltaMs)
{

}
 80005cc:	4770      	bx	lr
	...

080005d0 <ble_check_loop>:

void ble_check_loop(uint8_t deltaMs)
{
 80005d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005d4:	b08a      	sub	sp, #40	; 0x28




	  int distanceComplete=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	9309      	str	r3, [sp, #36]	; 0x24
	  int16_t magx,magy,magz;

	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){//if an event occurs let's catch it
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	484f      	ldr	r0, [pc, #316]	; (800071c <ble_check_loop+0x14c>)
 80005de:	f003 f9a9 	bl	8003934 <HAL_GPIO_ReadPin>
 80005e2:	b928      	cbnz	r0, 80005f0 <ble_check_loop+0x20>
		  catchBLE();

	  }else{

		  if(update){
 80005e4:	4b4e      	ldr	r3, [pc, #312]	; (8000720 <ble_check_loop+0x150>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	b92b      	cbnz	r3, 80005f6 <ble_check_loop+0x26>
	  }




}
 80005ea:	b00a      	add	sp, #40	; 0x28
 80005ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  catchBLE();
 80005f0:	f000 f9f6 	bl	80009e0 <catchBLE>
 80005f4:	e7f9      	b.n	80005ea <ble_check_loop+0x1a>
			  update=0;
 80005f6:	4b4a      	ldr	r3, [pc, #296]	; (8000720 <ble_check_loop+0x150>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
			  getDistance(&distanceComplete);
 80005fc:	a809      	add	r0, sp, #36	; 0x24
 80005fe:	f001 fc07 	bl	8001e10 <getDistance>
			  updateSignedMillesimal(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,TOF_VALUE,13,distanceComplete);
 8000602:	4c48      	ldr	r4, [pc, #288]	; (8000724 <ble_check_loop+0x154>)
 8000604:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	230d      	movs	r3, #13
 800060c:	4a46      	ldr	r2, [pc, #280]	; (8000728 <ble_check_loop+0x158>)
 800060e:	4947      	ldr	r1, [pc, #284]	; (800072c <ble_check_loop+0x15c>)
 8000610:	4620      	mov	r0, r4
 8000612:	f000 fcb3 	bl	8000f7c <updateSignedMillesimal>
			  HAL_Delay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f002 ff88 	bl	800352c <HAL_Delay>
			  getTemperature(&temp);
 800061c:	a806      	add	r0, sp, #24
 800061e:	f001 fb9d 	bl	8001d5c <getTemperature>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,VALUE_TEMP,9,temp);
 8000622:	ed9d 0a06 	vldr	s0, [sp, #24]
 8000626:	2309      	movs	r3, #9
 8000628:	4a41      	ldr	r2, [pc, #260]	; (8000730 <ble_check_loop+0x160>)
 800062a:	4942      	ldr	r1, [pc, #264]	; (8000734 <ble_check_loop+0x164>)
 800062c:	4620      	mov	r0, r4
 800062e:	f000 fd71 	bl	8001114 <updateSignedFloat>
			  HAL_Delay(10);
 8000632:	200a      	movs	r0, #10
 8000634:	f002 ff7a 	bl	800352c <HAL_Delay>
			  getHumidity(&hum);
 8000638:	a807      	add	r0, sp, #28
 800063a:	f001 fb49 	bl	8001cd0 <getHumidity>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,VALUE_HUM,8,hum);
 800063e:	ed9d 0a07 	vldr	s0, [sp, #28]
 8000642:	2308      	movs	r3, #8
 8000644:	4a3c      	ldr	r2, [pc, #240]	; (8000738 <ble_check_loop+0x168>)
 8000646:	493d      	ldr	r1, [pc, #244]	; (800073c <ble_check_loop+0x16c>)
 8000648:	4620      	mov	r0, r4
 800064a:	f000 fd63 	bl	8001114 <updateSignedFloat>
			  HAL_Delay(10);
 800064e:	200a      	movs	r0, #10
 8000650:	f002 ff6c 	bl	800352c <HAL_Delay>
			  getAxisAccelerometer(&accx,&accy,&accz);
 8000654:	f10d 0212 	add.w	r2, sp, #18
 8000658:	a905      	add	r1, sp, #20
 800065a:	f10d 0016 	add.w	r0, sp, #22
 800065e:	f001 fc1d 	bl	8001e9c <getAxisAccelerometer>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,X_VALUE,10,accx);
 8000662:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8000774 <ble_check_loop+0x1a4>
 8000666:	4d36      	ldr	r5, [pc, #216]	; (8000740 <ble_check_loop+0x170>)
 8000668:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	230a      	movs	r3, #10
 8000670:	4642      	mov	r2, r8
 8000672:	4934      	ldr	r1, [pc, #208]	; (8000744 <ble_check_loop+0x174>)
 8000674:	4628      	mov	r0, r5
 8000676:	f000 fc81 	bl	8000f7c <updateSignedMillesimal>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,Y_VALUE,10,accy);
 800067a:	4f33      	ldr	r7, [pc, #204]	; (8000748 <ble_check_loop+0x178>)
 800067c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	230a      	movs	r3, #10
 8000684:	463a      	mov	r2, r7
 8000686:	4931      	ldr	r1, [pc, #196]	; (800074c <ble_check_loop+0x17c>)
 8000688:	4628      	mov	r0, r5
 800068a:	f000 fc77 	bl	8000f7c <updateSignedMillesimal>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,Z_VALUE,10,accz);
 800068e:	4e30      	ldr	r6, [pc, #192]	; (8000750 <ble_check_loop+0x180>)
 8000690:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	230a      	movs	r3, #10
 8000698:	4632      	mov	r2, r6
 800069a:	492e      	ldr	r1, [pc, #184]	; (8000754 <ble_check_loop+0x184>)
 800069c:	4628      	mov	r0, r5
 800069e:	f000 fc6d 	bl	8000f7c <updateSignedMillesimal>
			  getPressure(&press);
 80006a2:	a808      	add	r0, sp, #32
 80006a4:	f001 f95c 	bl	8001960 <getPressure>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,VALUE_PRESS,10,press);
 80006a8:	ed9d 0a08 	vldr	s0, [sp, #32]
 80006ac:	230a      	movs	r3, #10
 80006ae:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <ble_check_loop+0x188>)
 80006b0:	492a      	ldr	r1, [pc, #168]	; (800075c <ble_check_loop+0x18c>)
 80006b2:	4620      	mov	r0, r4
 80006b4:	f000 fd2e 	bl	8001114 <updateSignedFloat>
			  HAL_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f002 ff37 	bl	800352c <HAL_Delay>
			  getAxisMagnetometer(&magx,&magy,&magz);
 80006be:	aa03      	add	r2, sp, #12
 80006c0:	f10d 010e 	add.w	r1, sp, #14
 80006c4:	a804      	add	r0, sp, #16
 80006c6:	f001 fca5 	bl	8002014 <getAxisMagnetometer>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,X_VALUE,10,magx);
 80006ca:	4c25      	ldr	r4, [pc, #148]	; (8000760 <ble_check_loop+0x190>)
 80006cc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	230a      	movs	r3, #10
 80006d4:	4642      	mov	r2, r8
 80006d6:	4923      	ldr	r1, [pc, #140]	; (8000764 <ble_check_loop+0x194>)
 80006d8:	4620      	mov	r0, r4
 80006da:	f000 fc4f 	bl	8000f7c <updateSignedMillesimal>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,Y_VALUE,10,magy);
 80006de:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	230a      	movs	r3, #10
 80006e6:	463a      	mov	r2, r7
 80006e8:	491f      	ldr	r1, [pc, #124]	; (8000768 <ble_check_loop+0x198>)
 80006ea:	4620      	mov	r0, r4
 80006ec:	f000 fc46 	bl	8000f7c <updateSignedMillesimal>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,Z_VALUE,10,magz);
 80006f0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	230a      	movs	r3, #10
 80006f8:	4632      	mov	r2, r6
 80006fa:	491c      	ldr	r1, [pc, #112]	; (800076c <ble_check_loop+0x19c>)
 80006fc:	4620      	mov	r0, r4
 80006fe:	f000 fc3d 	bl	8000f7c <updateSignedMillesimal>
			  startToF();
 8000702:	f001 fb71 	bl	8001de8 <startToF>
			  pwm=distanceComplete;
 8000706:	9b09      	ldr	r3, [sp, #36]	; 0x24
			  if(distanceComplete>500){
 8000708:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800070c:	dd01      	ble.n	8000712 <ble_check_loop+0x142>
				  pwm=500;
 800070e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
			  	  __HAL_TIM_SetCompare(&htim15,TIM_CHANNEL_1,pwm);
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <ble_check_loop+0x1a0>)
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000718:	e767      	b.n	80005ea <ble_check_loop+0x1a>
 800071a:	bf00      	nop
 800071c:	48001000 	.word	0x48001000
 8000720:	20000544 	.word	0x20000544
 8000724:	20000664 	.word	0x20000664
 8000728:	200001ac 	.word	0x200001ac
 800072c:	20000678 	.word	0x20000678
 8000730:	20000144 	.word	0x20000144
 8000734:	2000066c 	.word	0x2000066c
 8000738:	20000168 	.word	0x20000168
 800073c:	20000670 	.word	0x20000670
 8000740:	2000067c 	.word	0x2000067c
 8000744:	20000684 	.word	0x20000684
 8000748:	200002d0 	.word	0x200002d0
 800074c:	20000688 	.word	0x20000688
 8000750:	200002f4 	.word	0x200002f4
 8000754:	2000068c 	.word	0x2000068c
 8000758:	20000188 	.word	0x20000188
 800075c:	20000674 	.word	0x20000674
 8000760:	20000690 	.word	0x20000690
 8000764:	20000698 	.word	0x20000698
 8000768:	2000069c 	.word	0x2000069c
 800076c:	200006a0 	.word	0x200006a0
 8000770:	200008c0 	.word	0x200008c0
 8000774:	200002ac 	.word	0x200002ac

08000778 <ble_check_afterLoop>:

void ble_check_afterLoop(uint8_t deltaMs)
{
    __WFI();
 8000778:	bf30      	wfi
}
 800077a:	4770      	bx	lr

0800077c <fetchBleEvent>:
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
}

int fetchBleEvent(uint8_t *container, int size){
 800077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000780:	b088      	sub	sp, #32
 8000782:	4606      	mov	r6, r0
 8000784:	460d      	mov	r5, r1

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <fetchBleEvent+0xdc>)
 8000788:	e893 0003 	ldmia.w	r3, {r0, r1}
 800078c:	9006      	str	r0, [sp, #24]
 800078e:	f88d 101c 	strb.w	r1, [sp, #28]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	4831      	ldr	r0, [pc, #196]	; (800085c <fetchBleEvent+0xe0>)
 8000796:	f003 f8cd 	bl	8003934 <HAL_GPIO_ReadPin>
 800079a:	2800      	cmp	r0, #0
 800079c:	d059      	beq.n	8000852 <fetchBleEvent+0xd6>

  HAL_Delay(5);
 800079e:	2005      	movs	r0, #5
 80007a0:	f002 fec4 	bl	800352c <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80007a4:	4f2e      	ldr	r7, [pc, #184]	; (8000860 <fetchBleEvent+0xe4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	4638      	mov	r0, r7
 80007ae:	f003 f8c8 	bl	8003942 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80007b2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8000864 <fetchBleEvent+0xe8>
 80007b6:	2401      	movs	r4, #1
 80007b8:	9400      	str	r4, [sp, #0]
 80007ba:	2305      	movs	r3, #5
 80007bc:	aa04      	add	r2, sp, #16
 80007be:	a906      	add	r1, sp, #24
 80007c0:	4640      	mov	r0, r8
 80007c2:	f005 f968 	bl	8005a96 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80007c6:	4622      	mov	r2, r4
 80007c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007cc:	4638      	mov	r0, r7
 80007ce:	f003 f8b8 	bl	8003942 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80007d2:	4620      	mov	r0, r4
 80007d4:	f002 feaa 	bl	800352c <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007de:	4638      	mov	r0, r7
 80007e0:	f003 f8af 	bl	8003942 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80007e4:	9400      	str	r4, [sp, #0]
 80007e6:	2305      	movs	r3, #5
 80007e8:	aa04      	add	r2, sp, #16
 80007ea:	a906      	add	r1, sp, #24
 80007ec:	4640      	mov	r0, r8
 80007ee:	f005 f952 	bl	8005a96 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 80007f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80007f6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80007fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  int i;
  char dummy=0xff;
 80007fe:	22ff      	movs	r2, #255	; 0xff
 8000800:	f88d 200f 	strb.w	r2, [sp, #15]

  if(dataSize>size){
 8000804:	42ab      	cmp	r3, r5
 8000806:	dc00      	bgt.n	800080a <fetchBleEvent+0x8e>
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000808:	461d      	mov	r5, r3
	  dataSize=size;
  }

  if(dataSize>0){
 800080a:	2d00      	cmp	r5, #0
 800080c:	dd18      	ble.n	8000840 <fetchBleEvent+0xc4>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 800080e:	2400      	movs	r4, #0
 8000810:	e008      	b.n	8000824 <fetchBleEvent+0xa8>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000812:	2301      	movs	r3, #1
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	1932      	adds	r2, r6, r4
 8000818:	f10d 010f 	add.w	r1, sp, #15
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <fetchBleEvent+0xe8>)
 800081e:	f005 f93a 	bl	8005a96 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000822:	3401      	adds	r4, #1
 8000824:	42a5      	cmp	r5, r4
 8000826:	dcf4      	bgt.n	8000812 <fetchBleEvent+0x96>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <fetchBleEvent+0xe4>)
 8000830:	f003 f887 	bl	8003942 <HAL_GPIO_WritePin>
  	}

  //let's stop the SPI2


  dataAvailable=0;
 8000834:	2000      	movs	r0, #0
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <fetchBleEvent+0xec>)
 8000838:	6018      	str	r0, [r3, #0]
  return BLE_OK;
  }else{
  return -2;
  }
}
 800083a:	b008      	add	sp, #32
 800083c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <fetchBleEvent+0xe4>)
 8000848:	f003 f87b 	bl	8003942 <HAL_GPIO_WritePin>
        return -1;
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	e7f3      	b.n	800083a <fetchBleEvent+0xbe>
  return -2;
 8000852:	f06f 0001 	mvn.w	r0, #1
 8000856:	e7f0      	b.n	800083a <fetchBleEvent+0xbe>
 8000858:	08007870 	.word	0x08007870
 800085c:	48001000 	.word	0x48001000
 8000860:	48000c00 	.word	0x48000c00
 8000864:	200007c4 	.word	0x200007c4
 8000868:	2000054c 	.word	0x2000054c

0800086c <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
	int j=0;

	for(j=0;j<size;j++){
 800086c:	2300      	movs	r3, #0
 800086e:	4293      	cmp	r3, r2
 8000870:	da0f      	bge.n	8000892 <checkEventResp+0x26>
int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000872:	b500      	push	{lr}

		if(event[j]!=reference[j]){
 8000874:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000878:	f811 c003 	ldrb.w	ip, [r1, r3]
 800087c:	45e6      	cmp	lr, ip
 800087e:	d105      	bne.n	800088c <checkEventResp+0x20>
	for(j=0;j<size;j++){
 8000880:	3301      	adds	r3, #1
 8000882:	4293      	cmp	r3, r2
 8000884:	dbf6      	blt.n	8000874 <checkEventResp+0x8>
			return -1;
		}
	}

return BLE_OK;
 8000886:	2000      	movs	r0, #0
}
 8000888:	f85d fb04 	ldr.w	pc, [sp], #4
			return -1;
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	e7fa      	b.n	8000888 <checkEventResp+0x1c>
return BLE_OK;
 8000892:	2000      	movs	r0, #0
}
 8000894:	4770      	bx	lr
	...

08000898 <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	4605      	mov	r5, r0
 800089e:	460c      	mov	r4, r1

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <sendCommand+0x70>)
 80008a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008a6:	9004      	str	r0, [sp, #16]
 80008a8:	f88d 1014 	strb.w	r1, [sp, #20]
	  int result;

	do{


	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <sendCommand+0x74>)
 80008b4:	f003 f845 	bl	8003942 <HAL_GPIO_WritePin>

	//wait until it is possible to write
	//while(!dataAvailable);
	HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80008b8:	2301      	movs	r3, #1
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2305      	movs	r3, #5
 80008be:	aa02      	add	r2, sp, #8
 80008c0:	a904      	add	r1, sp, #16
 80008c2:	4813      	ldr	r0, [pc, #76]	; (8000910 <sendCommand+0x78>)
 80008c4:	f005 f8e7 	bl	8005a96 <HAL_SPI_TransmitReceive>
	int bufferSize=(slave_header[2]<<8|slave_header[1]);
 80008c8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80008cc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80008d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if(bufferSize>=size){
 80008d4:	42a3      	cmp	r3, r4
 80008d6:	da0e      	bge.n	80008f6 <sendCommand+0x5e>
		HAL_SPI_Transmit(&hspi3,command,size,1);
		result=0;
	}else{
		result=-1;
 80008d8:	f04f 36ff 	mov.w	r6, #4294967295
	}
	//HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <sendCommand+0x74>)
 80008e4:	f003 f82d 	bl	8003942 <HAL_GPIO_WritePin>
	dataAvailable=0;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <sendCommand+0x7c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	d1dc      	bne.n	80008ac <sendCommand+0x14>

}
 80008f2:	b006      	add	sp, #24
 80008f4:	bd70      	pop	{r4, r5, r6, pc}
		HAL_SPI_Transmit(&hspi3,command,size,1);
 80008f6:	2301      	movs	r3, #1
 80008f8:	b2a2      	uxth	r2, r4
 80008fa:	4629      	mov	r1, r5
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <sendCommand+0x78>)
 80008fe:	f004 ffc9 	bl	8005894 <HAL_SPI_Transmit>
		result=0;
 8000902:	2600      	movs	r6, #0
 8000904:	e7ea      	b.n	80008dc <sendCommand+0x44>
 8000906:	bf00      	nop
 8000908:	08007878 	.word	0x08007878
 800090c:	48000c00 	.word	0x48000c00
 8000910:	200007c4 	.word	0x200007c4
 8000914:	2000054c 	.word	0x2000054c

08000918 <setConnectable>:



}

void setConnectable(){
 8000918:	b570      	push	{r4, r5, r6, lr}
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800091a:	2012      	movs	r0, #18
 800091c:	f006 fad0 	bl	8006ec0 <malloc>
 8000920:	4604      	mov	r4, r0
	   memcpy(localname,deviceName,sizeof(deviceName));
 8000922:	4e2b      	ldr	r6, [pc, #172]	; (80009d0 <setConnectable+0xb8>)
 8000924:	4633      	mov	r3, r6
 8000926:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000928:	6020      	str	r0, [r4, #0]
 800092a:	6061      	str	r1, [r4, #4]
 800092c:	60a2      	str	r2, [r4, #8]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	7323      	strb	r3, [r4, #12]
	   localname[sizeof(deviceName)+1]=0x00;
 8000932:	2300      	movs	r3, #0
 8000934:	73a3      	strb	r3, [r4, #14]
	   localname[sizeof(deviceName)+2]=0x00;
 8000936:	73e3      	strb	r3, [r4, #15]
	   localname[sizeof(deviceName)+3]=0x00;
 8000938:	7423      	strb	r3, [r4, #16]
	   localname[sizeof(deviceName)+4]=0x00;
 800093a:	7463      	strb	r3, [r4, #17]
	   localname[sizeof(deviceName)]=0x00;
 800093c:	7363      	strb	r3, [r4, #13]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 800093e:	230e      	movs	r3, #14
 8000940:	76f3      	strb	r3, [r6, #27]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000942:	231b      	movs	r3, #27
 8000944:	74f3      	strb	r3, [r6, #19]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000946:	201f      	movs	r0, #31
 8000948:	f006 faba 	bl	8006ec0 <malloc>
 800094c:	4605      	mov	r5, r0
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800094e:	f106 0310 	add.w	r3, r6, #16
 8000952:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000954:	6028      	str	r0, [r5, #0]
 8000956:	6069      	str	r1, [r5, #4]
 8000958:	60aa      	str	r2, [r5, #8]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	732b      	strb	r3, [r5, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 800095e:	6820      	ldr	r0, [r4, #0]
 8000960:	6861      	ldr	r1, [r4, #4]
 8000962:	68a2      	ldr	r2, [r4, #8]
 8000964:	68e3      	ldr	r3, [r4, #12]
 8000966:	f8c5 000d 	str.w	r0, [r5, #13]
 800096a:	f8c5 1011 	str.w	r1, [r5, #17]
 800096e:	f8c5 2015 	str.w	r2, [r5, #21]
 8000972:	f8c5 3019 	str.w	r3, [r5, #25]
 8000976:	8a23      	ldrh	r3, [r4, #16]
 8000978:	f8a5 301d 	strh.w	r3, [r5, #29]

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 800097c:	211f      	movs	r1, #31
 800097e:	4628      	mov	r0, r5
 8000980:	f7ff ff8a 	bl	8000898 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000984:	2007      	movs	r0, #7
 8000986:	f006 fa9b 	bl	8006ec0 <malloc>
 800098a:	4606      	mov	r6, r0
	   while(!dataAvailable);
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <setConnectable+0xbc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0fb      	beq.n	800098c <setConnectable+0x74>
	   res=fetchBleEvent(rxEvent,7);
 8000994:	2107      	movs	r1, #7
 8000996:	4630      	mov	r0, r6
 8000998:	f7ff fef0 	bl	800077c <fetchBleEvent>
	   if(res==BLE_OK){
 800099c:	b950      	cbnz	r0, 80009b4 <setConnectable+0x9c>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 800099e:	2207      	movs	r2, #7
 80009a0:	490d      	ldr	r1, [pc, #52]	; (80009d8 <setConnectable+0xc0>)
 80009a2:	4630      	mov	r0, r6
 80009a4:	f7ff ff62 	bl	800086c <checkEventResp>
	   if(res==BLE_OK){
 80009a8:	b920      	cbnz	r0, 80009b4 <setConnectable+0x9c>
		   stackInitCompleteFlag|=0x80;
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <setConnectable+0xc4>)
 80009ac:	8813      	ldrh	r3, [r2, #0]
 80009ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b2:	8013      	strh	r3, [r2, #0]
	   }
	   }

	   free(rxEvent);
 80009b4:	4630      	mov	r0, r6
 80009b6:	f006 fa8b 	bl	8006ed0 <free>
	   free(discoverableCommand);
 80009ba:	4628      	mov	r0, r5
 80009bc:	f006 fa88 	bl	8006ed0 <free>
	   free(localname);
 80009c0:	4620      	mov	r0, r4
 80009c2:	f006 fa85 	bl	8006ed0 <free>
	   HAL_Delay(10);
 80009c6:	200a      	movs	r0, #10
 80009c8:	f002 fdb0 	bl	800352c <HAL_Delay>
}
 80009cc:	bd70      	pop	{r4, r5, r6, pc}
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	2000054c 	.word	0x2000054c
 80009d8:	20000020 	.word	0x20000020
 80009dc:	20000550 	.word	0x20000550

080009e0 <catchBLE>:
void catchBLE(){
 80009e0:	b508      	push	{r3, lr}
int result=fetchBleEvent(buffer,127);
 80009e2:	217f      	movs	r1, #127	; 0x7f
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <catchBLE+0x20>)
 80009e6:	f7ff fec9 	bl	800077c <fetchBleEvent>
	  if(result==BLE_OK){
 80009ea:	b928      	cbnz	r0, 80009f8 <catchBLE+0x18>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80009ec:	2203      	movs	r2, #3
 80009ee:	4905      	ldr	r1, [pc, #20]	; (8000a04 <catchBLE+0x24>)
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <catchBLE+0x20>)
 80009f2:	f7ff ff3b 	bl	800086c <checkEventResp>
 80009f6:	b100      	cbz	r0, 80009fa <catchBLE+0x1a>
}
 80009f8:	bd08      	pop	{r3, pc}
			  setConnectable();
 80009fa:	f7ff ff8d 	bl	8000918 <setConnectable>
}
 80009fe:	e7fb      	b.n	80009f8 <catchBLE+0x18>
 8000a00:	20000554 	.word	0x20000554
 8000a04:	20000028 	.word	0x20000028

08000a08 <BLE_command>:
}




int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0a:	4617      	mov	r7, r2
 8000a0c:	461e      	mov	r6, r3
	   int response;

	   sendCommand(command,size);
 8000a0e:	f7ff ff43 	bl	8000898 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000a12:	9d06      	ldr	r5, [sp, #24]
 8000a14:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f006 fa51 	bl	8006ec0 <malloc>
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <BLE_command+0x5c>)
 8000a20:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104

	   long contatore=0;
 8000a24:	2400      	movs	r4, #0
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	480f      	ldr	r0, [pc, #60]	; (8000a68 <BLE_command+0x60>)
 8000a2a:	f002 ff83 	bl	8003934 <HAL_GPIO_ReadPin>
 8000a2e:	b920      	cbnz	r0, 8000a3a <BLE_command+0x32>
		   contatore++;
 8000a30:	3401      	adds	r4, #1
		   if(contatore>30000){
 8000a32:	f247 5030 	movw	r0, #30000	; 0x7530
 8000a36:	4284      	cmp	r4, r0
 8000a38:	ddf5      	ble.n	8000a26 <BLE_command+0x1e>
			   break;
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000a3a:	4629      	mov	r1, r5
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <BLE_command+0x5c>)
 8000a3e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000a42:	f7ff fe9b 	bl	800077c <fetchBleEvent>
	   if(response==BLE_OK){
 8000a46:	4604      	mov	r4, r0
 8000a48:	b938      	cbnz	r0, 8000a5a <BLE_command+0x52>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000a4a:	4632      	mov	r2, r6
 8000a4c:	4639      	mov	r1, r7
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <BLE_command+0x5c>)
 8000a50:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000a54:	f7ff ff0a 	bl	800086c <checkEventResp>
 8000a58:	4604      	mov	r4, r0
	   }
	   HAL_Delay(10);
 8000a5a:	200a      	movs	r0, #10
 8000a5c:	f002 fd66 	bl	800352c <HAL_Delay>


	return response;
}
 8000a60:	4620      	mov	r0, r4
 8000a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a64:	20000550 	.word	0x20000550
 8000a68:	48001000 	.word	0x48001000

08000a6c <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000a6c:	b530      	push	{r4, r5, lr}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	460d      	mov	r5, r1


	//memcpy
	memcpy(ADD_CUSTOM_SERVICE+5,UUID,16);
 8000a72:	4c16      	ldr	r4, [pc, #88]	; (8000acc <addService+0x60>)
 8000a74:	f8d0 e000 	ldr.w	lr, [r0]
 8000a78:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8000a7c:	6881      	ldr	r1, [r0, #8]
 8000a7e:	68c3      	ldr	r3, [r0, #12]
 8000a80:	f8c4 e031 	str.w	lr, [r4, #49]	; 0x31
 8000a84:	f8c4 c035 	str.w	ip, [r4, #53]	; 0x35
 8000a88:	f8c4 1039 	str.w	r1, [r4, #57]	; 0x39
 8000a8c:	f8c4 303d 	str.w	r3, [r4, #61]	; 0x3d
    ADD_CUSTOM_SERVICE[22]=attributes;
 8000a90:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
	   if(BLE_command(ADD_CUSTOM_SERVICE,sizeof(ADD_CUSTOM_SERVICE),ADD_CUSTOM_SERVICE_COMPLETE,sizeof(ADD_CUSTOM_SERVICE_COMPLETE),1)==BLE_OK){
 8000a94:	2301      	movs	r3, #1
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2307      	movs	r3, #7
 8000a9a:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8000a9e:	2117      	movs	r1, #23
 8000aa0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8000aa4:	f7ff ffb0 	bl	8000a08 <BLE_command>
 8000aa8:	b940      	cbnz	r0, 8000abc <addService+0x50>
		   handle[0]=rxEvent[7];
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <addService+0x64>)
 8000aac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000ab0:	79d2      	ldrb	r2, [r2, #7]
 8000ab2:	702a      	strb	r2, [r5, #0]
		   handle[1]=rxEvent[8];
 8000ab4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ab8:	7a1b      	ldrb	r3, [r3, #8]
 8000aba:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <addService+0x64>)
 8000abe:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000ac2:	f006 fa05 	bl	8006ed0 <free>



}
 8000ac6:	b003      	add	sp, #12
 8000ac8:	bd30      	pop	{r4, r5, pc}
 8000aca:	bf00      	nop
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000550 	.word	0x20000550

08000ad4 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	460d      	mov	r5, r1



	memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000ada:	4c1b      	ldr	r4, [pc, #108]	; (8000b48 <addCharacteristic+0x74>)
 8000adc:	6806      	ldr	r6, [r0, #0]
 8000ade:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000ae2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000ae6:	68c1      	ldr	r1, [r0, #12]
 8000ae8:	f8c4 6053 	str.w	r6, [r4, #83]	; 0x53
 8000aec:	f8c4 e057 	str.w	lr, [r4, #87]	; 0x57
 8000af0:	f8c4 c05b 	str.w	ip, [r4, #91]	; 0x5b
 8000af4:	f8c4 105f 	str.w	r1, [r4, #95]	; 0x5f


	   ADD_CUSTOM_CHAR[4]= handleService[0];
 8000af8:	7811      	ldrb	r1, [r2, #0]
 8000afa:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	   ADD_CUSTOM_CHAR[5]= handleService[1];
 8000afe:	7852      	ldrb	r2, [r2, #1]
 8000b00:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
	   ADD_CUSTOM_CHAR[23]= maxsize;
 8000b04:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	   ADD_CUSTOM_CHAR[25]= proprieties;
 8000b08:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000b0c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	   if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000b10:	2301      	movs	r3, #1
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2307      	movs	r3, #7
 8000b16:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8000b1a:	211e      	movs	r1, #30
 8000b1c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8000b20:	f7ff ff72 	bl	8000a08 <BLE_command>
 8000b24:	b940      	cbnz	r0, 8000b38 <addCharacteristic+0x64>
		   handleChar[0]=rxEvent[7];
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <addCharacteristic+0x78>)
 8000b28:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000b2c:	79d2      	ldrb	r2, [r2, #7]
 8000b2e:	702a      	strb	r2, [r5, #0]
		   handleChar[1]=rxEvent[8];
 8000b30:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000b34:	7a1b      	ldrb	r3, [r3, #8]
 8000b36:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <addCharacteristic+0x78>)
 8000b3a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000b3e:	f006 f9c7 	bl	8006ed0 <free>





}
 8000b42:	b002      	add	sp, #8
 8000b44:	bd70      	pop	{r4, r5, r6, pc}
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000550 	.word	0x20000550

08000b50 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b52:	b083      	sub	sp, #12
 8000b54:	461e      	mov	r6, r3

	UPDATE_CHAR[3]=size+6;
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	1d9d      	adds	r5, r3, #6
 8000b5a:	4c1c      	ldr	r4, [pc, #112]	; (8000bcc <updateCharValue+0x7c>)
 8000b5c:	f884 5077 	strb.w	r5, [r4, #119]	; 0x77
	UPDATE_CHAR[4]=handleService[0];
 8000b60:	7805      	ldrb	r5, [r0, #0]
 8000b62:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
	UPDATE_CHAR[5]=handleService[1];
 8000b66:	7840      	ldrb	r0, [r0, #1]
 8000b68:	f884 0079 	strb.w	r0, [r4, #121]	; 0x79
	UPDATE_CHAR[6]=handleChar[0];
 8000b6c:	7808      	ldrb	r0, [r1, #0]
 8000b6e:	f884 007a 	strb.w	r0, [r4, #122]	; 0x7a
	UPDATE_CHAR[7]=handleChar[1];
 8000b72:	7849      	ldrb	r1, [r1, #1]
 8000b74:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
	UPDATE_CHAR[8]=offset;
 8000b78:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
	UPDATE_CHAR[9]=size;
 8000b7c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000b80:	f106 070a 	add.w	r7, r6, #10
 8000b84:	4638      	mov	r0, r7
 8000b86:	f006 f99b 	bl	8006ec0 <malloc>
 8000b8a:	4605      	mov	r5, r0
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000b8c:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8000b90:	cb03      	ldmia	r3!, {r0, r1}
 8000b92:	6028      	str	r0, [r5, #0]
 8000b94:	6069      	str	r1, [r5, #4]
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	812b      	strh	r3, [r5, #8]
	memcpy(commandComplete+10,data,size);
 8000b9a:	4632      	mov	r2, r6
 8000b9c:	9908      	ldr	r1, [sp, #32]
 8000b9e:	f105 000a 	add.w	r0, r5, #10
 8000ba2:	f006 faf5 	bl	8007190 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2307      	movs	r3, #7
 8000bac:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8000bb0:	4639      	mov	r1, r7
 8000bb2:	4628      	mov	r0, r5
 8000bb4:	f7ff ff28 	bl	8000a08 <BLE_command>

	free(commandComplete);
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f006 f989 	bl	8006ed0 <free>
	free(rxEvent);
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <updateCharValue+0x80>)
 8000bc0:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000bc4:	f006 f984 	bl	8006ed0 <free>

}
 8000bc8:	b003      	add	sp, #12
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000550 	.word	0x20000550

08000bd4 <ble_init>:
void ble_init(){
 8000bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bd8:	b083      	sub	sp, #12
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000bda:	2006      	movs	r0, #6
 8000bdc:	f006 f970 	bl	8006ec0 <malloc>
 8000be0:	4bd3      	ldr	r3, [pc, #844]	; (8000f30 <ble_init+0x35c>)
 8000be2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	while(!dataAvailable);
 8000be6:	4bd3      	ldr	r3, [pc, #844]	; (8000f34 <ble_init+0x360>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0fb      	beq.n	8000be6 <ble_init+0x12>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 8000bee:	2106      	movs	r1, #6
 8000bf0:	f7ff fdc4 	bl	800077c <fetchBleEvent>
	if(res==BLE_OK){
 8000bf4:	b960      	cbnz	r0, 8000c10 <ble_init+0x3c>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 8000bf6:	2206      	movs	r2, #6
 8000bf8:	49cf      	ldr	r1, [pc, #828]	; (8000f38 <ble_init+0x364>)
 8000bfa:	4bcd      	ldr	r3, [pc, #820]	; (8000f30 <ble_init+0x35c>)
 8000bfc:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000c00:	f7ff fe34 	bl	800086c <checkEventResp>
	if(res==BLE_OK){
 8000c04:	b920      	cbnz	r0, 8000c10 <ble_init+0x3c>
	   stackInitCompleteFlag|=0x01;
 8000c06:	4aca      	ldr	r2, [pc, #808]	; (8000f30 <ble_init+0x35c>)
 8000c08:	8813      	ldrh	r3, [r2, #0]
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	8013      	strh	r3, [r2, #0]
	HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f002 fc8b 	bl	800352c <HAL_Delay>
	free(rxEvent);
 8000c16:	4bc6      	ldr	r3, [pc, #792]	; (8000f30 <ble_init+0x35c>)
 8000c18:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000c1c:	f006 f958 	bl	8006ed0 <free>
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000c20:	48c6      	ldr	r0, [pc, #792]	; (8000f3c <ble_init+0x368>)
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2307      	movs	r3, #7
 8000c28:	f100 028c 	add.w	r2, r0, #140	; 0x8c
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	3094      	adds	r0, #148	; 0x94
 8000c30:	f7ff feea 	bl	8000a08 <BLE_command>
 8000c34:	b920      	cbnz	r0, 8000c40 <ble_init+0x6c>
	   stackInitCompleteFlag|=0x02;
 8000c36:	4abe      	ldr	r2, [pc, #760]	; (8000f30 <ble_init+0x35c>)
 8000c38:	8813      	ldrh	r3, [r2, #0]
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000c40:	4bbb      	ldr	r3, [pc, #748]	; (8000f30 <ble_init+0x35c>)
 8000c42:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000c46:	f006 f943 	bl	8006ed0 <free>
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000c4a:	48bc      	ldr	r0, [pc, #752]	; (8000f3c <ble_init+0x368>)
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2307      	movs	r3, #7
 8000c52:	f100 0298 	add.w	r2, r0, #152	; 0x98
 8000c56:	4619      	mov	r1, r3
 8000c58:	30a0      	adds	r0, #160	; 0xa0
 8000c5a:	f7ff fed5 	bl	8000a08 <BLE_command>
 8000c5e:	b990      	cbnz	r0, 8000c86 <ble_init+0xb2>
	   stackInitCompleteFlag|=0x04;
 8000c60:	4bb3      	ldr	r3, [pc, #716]	; (8000f30 <ble_init+0x35c>)
 8000c62:	881a      	ldrh	r2, [r3, #0]
 8000c64:	f042 0204 	orr.w	r2, r2, #4
 8000c68:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000c6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000c6e:	f8b2 1007 	ldrh.w	r1, [r2, #7]
 8000c72:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000c76:	f8b2 1009 	ldrh.w	r1, [r2, #9]
 8000c7a:	f8a3 110c 	strh.w	r1, [r3, #268]	; 0x10c
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000c7e:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8000c82:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	free(rxEvent);
 8000c86:	4caa      	ldr	r4, [pc, #680]	; (8000f30 <ble_init+0x35c>)
 8000c88:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 8000c8c:	f006 f920 	bl	8006ed0 <free>
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000c90:	4daa      	ldr	r5, [pc, #680]	; (8000f3c <ble_init+0x368>)
 8000c92:	9500      	str	r5, [sp, #0]
 8000c94:	230d      	movs	r3, #13
 8000c96:	2200      	movs	r2, #0
 8000c98:	f504 7186 	add.w	r1, r4, #268	; 0x10c
 8000c9c:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8000ca0:	f7ff ff56 	bl	8000b50 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 8000ca4:	8823      	ldrh	r3, [r4, #0]
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 8000cac:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 8000cb0:	f006 f90e 	bl	8006ed0 <free>
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2307      	movs	r3, #7
 8000cba:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
 8000cc4:	f7ff fea0 	bl	8000a08 <BLE_command>
 8000cc8:	b918      	cbnz	r0, 8000cd2 <ble_init+0xfe>
	   stackInitCompleteFlag|=0x10;
 8000cca:	8823      	ldrh	r3, [r4, #0]
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 8000cd2:	4b97      	ldr	r3, [pc, #604]	; (8000f30 <ble_init+0x35c>)
 8000cd4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000cd8:	f006 f8fa 	bl	8006ed0 <free>
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 8000cdc:	4897      	ldr	r0, [pc, #604]	; (8000f3c <ble_init+0x368>)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
 8000ce8:	2106      	movs	r1, #6
 8000cea:	30c8      	adds	r0, #200	; 0xc8
 8000cec:	f7ff fe8c 	bl	8000a08 <BLE_command>
 8000cf0:	b920      	cbnz	r0, 8000cfc <ble_init+0x128>
	   stackInitCompleteFlag|=0x20;
 8000cf2:	4a8f      	ldr	r2, [pc, #572]	; (8000f30 <ble_init+0x35c>)
 8000cf4:	8813      	ldrh	r3, [r2, #0]
 8000cf6:	f043 0320 	orr.w	r3, r3, #32
 8000cfa:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000cfc:	4b8c      	ldr	r3, [pc, #560]	; (8000f30 <ble_init+0x35c>)
 8000cfe:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000d02:	f006 f8e5 	bl	8006ed0 <free>
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000d06:	488d      	ldr	r0, [pc, #564]	; (8000f3c <ble_init+0x368>)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	f100 02d0 	add.w	r2, r0, #208	; 0xd0
 8000d12:	2124      	movs	r1, #36	; 0x24
 8000d14:	30d8      	adds	r0, #216	; 0xd8
 8000d16:	f7ff fe77 	bl	8000a08 <BLE_command>
 8000d1a:	b920      	cbnz	r0, 8000d26 <ble_init+0x152>
	   stackInitCompleteFlag|=0x40;
 8000d1c:	4a84      	ldr	r2, [pc, #528]	; (8000f30 <ble_init+0x35c>)
 8000d1e:	8813      	ldrh	r3, [r2, #0]
 8000d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d24:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000d26:	4d82      	ldr	r5, [pc, #520]	; (8000f30 <ble_init+0x35c>)
 8000d28:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
 8000d2c:	f006 f8d0 	bl	8006ed0 <free>
	setConnectable();
 8000d30:	f7ff fdf2 	bl	8000918 <setConnectable>
	addService(UUID_SERVICE_1,CUSTOM_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000d34:	f505 778a 	add.w	r7, r5, #276	; 0x114
 8000d38:	4c80      	ldr	r4, [pc, #512]	; (8000f3c <ble_init+0x368>)
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 8000d42:	f7ff fe93 	bl	8000a6c <addService>
	addCharacteristic(UUID_CHAR_1,CUSTOM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(22),READABLE);
 8000d46:	f505 768c 	add.w	r6, r5, #280	; 0x118
 8000d4a:	f04f 0802 	mov.w	r8, #2
 8000d4e:	f8cd 8000 	str.w	r8, [sp]
 8000d52:	2316      	movs	r3, #22
 8000d54:	463a      	mov	r2, r7
 8000d56:	4631      	mov	r1, r6
 8000d58:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8000d5c:	f7ff feba 	bl	8000ad4 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,CUSTOM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(22),VALUE1);
 8000d60:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2316      	movs	r3, #22
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	4638      	mov	r0, r7
 8000d6e:	f7ff feef 	bl	8000b50 <updateCharValue>
	addCharacteristic(UUID_CHAR_TEMP,TEMP_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000d72:	f505 798e 	add.w	r9, r5, #284	; 0x11c
 8000d76:	2612      	movs	r6, #18
 8000d78:	9600      	str	r6, [sp, #0]
 8000d7a:	2311      	movs	r3, #17
 8000d7c:	463a      	mov	r2, r7
 8000d7e:	4649      	mov	r1, r9
 8000d80:	f504 709a 	add.w	r0, r4, #308	; 0x134
 8000d84:	f7ff fea6 	bl	8000ad4 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),VALUE_TEMP);
 8000d88:	f504 73a2 	add.w	r3, r4, #324	; 0x144
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2311      	movs	r3, #17
 8000d90:	2200      	movs	r2, #0
 8000d92:	4649      	mov	r1, r9
 8000d94:	4638      	mov	r0, r7
 8000d96:	f7ff fedb 	bl	8000b50 <updateCharValue>
	addCharacteristic(UUID_CHAR_HUM,HUM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(16),READABLE|NOTIFIBLE);
 8000d9a:	f505 7990 	add.w	r9, r5, #288	; 0x120
 8000d9e:	9600      	str	r6, [sp, #0]
 8000da0:	2310      	movs	r3, #16
 8000da2:	463a      	mov	r2, r7
 8000da4:	4649      	mov	r1, r9
 8000da6:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8000daa:	f7ff fe93 	bl	8000ad4 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(16),VALUE_HUM);
 8000dae:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2310      	movs	r3, #16
 8000db6:	2200      	movs	r2, #0
 8000db8:	4649      	mov	r1, r9
 8000dba:	4638      	mov	r0, r7
 8000dbc:	f7ff fec8 	bl	8000b50 <updateCharValue>
	addCharacteristic(UUID_CHAR_PRESS,PRESS_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(18),READABLE|NOTIFIBLE);
 8000dc0:	f505 7992 	add.w	r9, r5, #292	; 0x124
 8000dc4:	9600      	str	r6, [sp, #0]
 8000dc6:	4633      	mov	r3, r6
 8000dc8:	463a      	mov	r2, r7
 8000dca:	4649      	mov	r1, r9
 8000dcc:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 8000dd0:	f7ff fe80 	bl	8000ad4 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,0,SET_CONTENT_LENGTH(18),VALUE_PRESS);
 8000dd4:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	4633      	mov	r3, r6
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4649      	mov	r1, r9
 8000de0:	4638      	mov	r0, r7
 8000de2:	f7ff feb5 	bl	8000b50 <updateCharValue>
	addCharacteristic(UUID_CHAR_TOF_VALUE,TOF_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),READABLE|NOTIFIBLE);
 8000de6:	f505 7994 	add.w	r9, r5, #296	; 0x128
 8000dea:	9600      	str	r6, [sp, #0]
 8000dec:	2314      	movs	r3, #20
 8000dee:	463a      	mov	r2, r7
 8000df0:	4649      	mov	r1, r9
 8000df2:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8000df6:	f7ff fe6d 	bl	8000ad4 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,0,SET_CONTENT_LENGTH(20),TOF_VALUE);
 8000dfa:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2314      	movs	r3, #20
 8000e02:	2200      	movs	r2, #0
 8000e04:	4649      	mov	r1, r9
 8000e06:	4638      	mov	r0, r7
 8000e08:	f7ff fea2 	bl	8000b50 <updateCharValue>
	 addService(UUID_INERTIAL_SERVICE,INERTIAL_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3+3+3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 8000e0c:	f505 7796 	add.w	r7, r5, #300	; 0x12c
 8000e10:	220c      	movs	r2, #12
 8000e12:	4639      	mov	r1, r7
 8000e14:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 8000e18:	f7ff fe28 	bl	8000a6c <addService>
	 addCharacteristic(UUID_CHAR_INERTIAL_NAME,NAME_INERTIAL_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(24),READABLE);
 8000e1c:	f505 7998 	add.w	r9, r5, #304	; 0x130
 8000e20:	f8cd 8000 	str.w	r8, [sp]
 8000e24:	2318      	movs	r3, #24
 8000e26:	463a      	mov	r2, r7
 8000e28:	4649      	mov	r1, r9
 8000e2a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e2e:	f7ff fe51 	bl	8000ad4 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,NAME_INERTIAL_HANDLE,0,SET_CONTENT_LENGTH(24),NAME_INERTIAL_VALUE);
 8000e32:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2318      	movs	r3, #24
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	4638      	mov	r0, r7
 8000e40:	f7ff fe86 	bl	8000b50 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCX,ACCX_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000e44:	f505 799a 	add.w	r9, r5, #308	; 0x134
 8000e48:	9600      	str	r6, [sp, #0]
 8000e4a:	2311      	movs	r3, #17
 8000e4c:	463a      	mov	r2, r7
 8000e4e:	4649      	mov	r1, r9
 8000e50:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 8000e54:	f7ff fe3e 	bl	8000ad4 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCX_INERTIAL_VALUE);
 8000e58:	f504 7302 	add.w	r3, r4, #520	; 0x208
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2311      	movs	r3, #17
 8000e60:	2200      	movs	r2, #0
 8000e62:	4649      	mov	r1, r9
 8000e64:	4638      	mov	r0, r7
 8000e66:	f7ff fe73 	bl	8000b50 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCY,ACCY_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000e6a:	f505 799c 	add.w	r9, r5, #312	; 0x138
 8000e6e:	9600      	str	r6, [sp, #0]
 8000e70:	2311      	movs	r3, #17
 8000e72:	463a      	mov	r2, r7
 8000e74:	4649      	mov	r1, r9
 8000e76:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8000e7a:	f7ff fe2b 	bl	8000ad4 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCY_INERTIAL_VALUE);
 8000e7e:	f504 730b 	add.w	r3, r4, #556	; 0x22c
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2311      	movs	r3, #17
 8000e86:	2200      	movs	r2, #0
 8000e88:	4649      	mov	r1, r9
 8000e8a:	4638      	mov	r0, r7
 8000e8c:	f7ff fe60 	bl	8000b50 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCZ,ACCZ_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000e90:	f505 799e 	add.w	r9, r5, #316	; 0x13c
 8000e94:	9600      	str	r6, [sp, #0]
 8000e96:	2311      	movs	r3, #17
 8000e98:	463a      	mov	r2, r7
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	f504 7010 	add.w	r0, r4, #576	; 0x240
 8000ea0:	f7ff fe18 	bl	8000ad4 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCZ_INERTIAL_VALUE);
 8000ea4:	f504 7314 	add.w	r3, r4, #592	; 0x250
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2311      	movs	r3, #17
 8000eac:	2200      	movs	r2, #0
 8000eae:	4649      	mov	r1, r9
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	f7ff fe4d 	bl	8000b50 <updateCharValue>
	 addService(UUID_MAGNETIC_SERVICE,MAGNETIC_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 8000eb6:	f505 77a0 	add.w	r7, r5, #320	; 0x140
 8000eba:	220c      	movs	r2, #12
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	f504 7019 	add.w	r0, r4, #612	; 0x264
 8000ec2:	f7ff fdd3 	bl	8000a6c <addService>
	 addCharacteristic(UUID_CHAR_MAGNETIC_NAME,NAME_MAGNETIC_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(23),READABLE);
 8000ec6:	f505 79a2 	add.w	r9, r5, #324	; 0x144
 8000eca:	f8cd 8000 	str.w	r8, [sp]
 8000ece:	2317      	movs	r3, #23
 8000ed0:	463a      	mov	r2, r7
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	f504 701d 	add.w	r0, r4, #628	; 0x274
 8000ed8:	f7ff fdfc 	bl	8000ad4 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,NAME_MAGNETIC_HANDLE,0,SET_CONTENT_LENGTH(23),NAME_MAGNETIC_VALUE);
 8000edc:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2317      	movs	r3, #23
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	4638      	mov	r0, r7
 8000eea:	f7ff fe31 	bl	8000b50 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGX,MAGX_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000eee:	f505 78a4 	add.w	r8, r5, #328	; 0x148
 8000ef2:	9600      	str	r6, [sp, #0]
 8000ef4:	2311      	movs	r3, #17
 8000ef6:	463a      	mov	r2, r7
 8000ef8:	4641      	mov	r1, r8
 8000efa:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 8000efe:	f7ff fde9 	bl	8000ad4 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),X_VALUE);
 8000f02:	f504 732b 	add.w	r3, r4, #684	; 0x2ac
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2311      	movs	r3, #17
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4641      	mov	r1, r8
 8000f0e:	4638      	mov	r0, r7
 8000f10:	f7ff fe1e 	bl	8000b50 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGY,MAGY_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000f14:	f505 78a6 	add.w	r8, r5, #332	; 0x14c
 8000f18:	9600      	str	r6, [sp, #0]
 8000f1a:	2311      	movs	r3, #17
 8000f1c:	463a      	mov	r2, r7
 8000f1e:	4641      	mov	r1, r8
 8000f20:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
 8000f24:	f7ff fdd6 	bl	8000ad4 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Y_VALUE);
 8000f28:	f504 7334 	add.w	r3, r4, #720	; 0x2d0
 8000f2c:	e008      	b.n	8000f40 <ble_init+0x36c>
 8000f2e:	bf00      	nop
 8000f30:	20000550 	.word	0x20000550
 8000f34:	2000054c 	.word	0x2000054c
 8000f38:	20000084 	.word	0x20000084
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2311      	movs	r3, #17
 8000f44:	2200      	movs	r2, #0
 8000f46:	4641      	mov	r1, r8
 8000f48:	4638      	mov	r0, r7
 8000f4a:	f7ff fe01 	bl	8000b50 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGZ,MAGZ_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000f4e:	f505 75a8 	add.w	r5, r5, #336	; 0x150
 8000f52:	9600      	str	r6, [sp, #0]
 8000f54:	2311      	movs	r3, #17
 8000f56:	463a      	mov	r2, r7
 8000f58:	4629      	mov	r1, r5
 8000f5a:	f504 7039 	add.w	r0, r4, #740	; 0x2e4
 8000f5e:	f7ff fdb9 	bl	8000ad4 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Z_VALUE);
 8000f62:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
 8000f66:	9400      	str	r4, [sp, #0]
 8000f68:	2311      	movs	r3, #17
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	4638      	mov	r0, r7
 8000f70:	f7ff fdee 	bl	8000b50 <updateCharValue>
}
 8000f74:	b003      	add	sp, #12
 8000f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f7a:	bf00      	nop

08000f7c <updateSignedMillesimal>:
void updateSignedMillesimal(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, int16_t data){
 8000f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	4607      	mov	r7, r0
 8000f84:	4688      	mov	r8, r1
 8000f86:	4614      	mov	r4, r2
 8000f88:	461e      	mov	r6, r3
 8000f8a:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
    newstring=(uint8_t*)malloc(offset+7);
 8000f8e:	f103 0907 	add.w	r9, r3, #7
 8000f92:	4648      	mov	r0, r9
 8000f94:	f005 ff94 	bl	8006ec0 <malloc>
 8000f98:	4605      	mov	r5, r0
    memcpy(newstring,defaultValue,offset);
 8000f9a:	4632      	mov	r2, r6
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	f006 f8f7 	bl	8007190 <memcpy>
	if(data<0){
 8000fa2:	f1ba 0f00 	cmp.w	sl, #0
 8000fa6:	db67      	blt.n	8001078 <updateSignedMillesimal+0xfc>
	numberInChar[0]=43;
 8000fa8:	232b      	movs	r3, #43	; 0x2b
 8000faa:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=data/1000;
 8000fae:	4b55      	ldr	r3, [pc, #340]	; (8001104 <updateSignedMillesimal+0x188>)
 8000fb0:	fb83 230a 	smull	r2, r3, r3, sl
 8000fb4:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8000fb8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(data-numberInChar[1]*1000)/100;
 8000fc2:	4c51      	ldr	r4, [pc, #324]	; (8001108 <updateSignedMillesimal+0x18c>)
 8000fc4:	fb02 f404 	mul.w	r4, r2, r4
 8000fc8:	eb0a 0304 	add.w	r3, sl, r4
 8000fcc:	494f      	ldr	r1, [pc, #316]	; (800110c <updateSignedMillesimal+0x190>)
 8000fce:	fb81 0103 	smull	r0, r1, r1, r3
 8000fd2:	17db      	asrs	r3, r3, #31
 8000fd4:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(data-numberInChar[2]*100-numberInChar[1]*1000)/10;
 8000fde:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000fe2:	fb01 a103 	mla	r1, r1, r3, sl
 8000fe6:	440c      	add	r4, r1
 8000fe8:	4949      	ldr	r1, [pc, #292]	; (8001110 <updateSignedMillesimal+0x194>)
 8000fea:	fb81 0104 	smull	r0, r1, r1, r4
 8000fee:	17e4      	asrs	r4, r4, #31
 8000ff0:	ebc4 04a1 	rsb	r4, r4, r1, asr #2
 8000ff4:	b2e4      	uxtb	r4, r4
 8000ff6:	f88d 400b 	strb.w	r4, [sp, #11]
    numberInChar[4]=(data-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 8000ffa:	ebc4 1144 	rsb	r1, r4, r4, lsl #5
 8000ffe:	ebc4 0181 	rsb	r1, r4, r1, lsl #2
 8001002:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8001006:	ebc3 0ccc 	rsb	ip, r3, ip, lsl #3
 800100a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800100e:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
 8001012:	44d4      	add	ip, sl
 8001014:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001018:	00c9      	lsls	r1, r1, #3
 800101a:	fa51 fc8c 	uxtab	ip, r1, ip
 800101e:	fa5f fc8c 	uxtb.w	ip, ip
 8001022:	f88d c00c 	strb.w	ip, [sp, #12]
    if(numberInChar[1]==0){
 8001026:	b37a      	cbz	r2, 8001088 <updateSignedMillesimal+0x10c>
        numberInChar[1]+='0';
 8001028:	3230      	adds	r2, #48	; 0x30
 800102a:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 800102e:	3330      	adds	r3, #48	; 0x30
 8001030:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 8001034:	3430      	adds	r4, #48	; 0x30
 8001036:	f88d 400b 	strb.w	r4, [sp, #11]
    	numberInChar[4]+='0';
 800103a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800103e:	f88d c00c 	strb.w	ip, [sp, #12]
    	numberInChar[5]='\"';
 8001042:	2322      	movs	r3, #34	; 0x22
 8001044:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 8001048:	237d      	movs	r3, #125	; 0x7d
 800104a:	f88d 300e 	strb.w	r3, [sp, #14]
	int flagEmpty=0;
 800104e:	2400      	movs	r4, #0
    memcpy(newstring+offset,numberInChar,7-flagEmpty);
 8001050:	f1c4 0207 	rsb	r2, r4, #7
 8001054:	a902      	add	r1, sp, #8
 8001056:	19a8      	adds	r0, r5, r6
 8001058:	f006 f89a 	bl	8007190 <memcpy>
	updateCharValue(service, characteristic, 0,offset+7-flagEmpty, newstring);
 800105c:	9500      	str	r5, [sp, #0]
 800105e:	eba9 0304 	sub.w	r3, r9, r4
 8001062:	2200      	movs	r2, #0
 8001064:	4641      	mov	r1, r8
 8001066:	4638      	mov	r0, r7
 8001068:	f7ff fd72 	bl	8000b50 <updateCharValue>
	free(newstring);
 800106c:	4628      	mov	r0, r5
 800106e:	f005 ff2f 	bl	8006ed0 <free>
}
 8001072:	b004      	add	sp, #16
 8001074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numberInChar[0]=45;
 8001078:	232d      	movs	r3, #45	; 0x2d
 800107a:	f88d 3008 	strb.w	r3, [sp, #8]
    data=-data;
 800107e:	f1ca 0a00 	rsb	sl, sl, #0
 8001082:	fa0f fa8a 	sxth.w	sl, sl
 8001086:	e792      	b.n	8000fae <updateSignedMillesimal+0x32>
    	if(numberInChar[2]==0){
 8001088:	bb3b      	cbnz	r3, 80010da <updateSignedMillesimal+0x15e>
        	if(numberInChar[3]==0){
 800108a:	b994      	cbnz	r4, 80010b2 <updateSignedMillesimal+0x136>
        numberInChar[1]='0'+numberInChar[4];
 800108c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001090:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='\"';
 8001094:	2322      	movs	r3, #34	; 0x22
 8001096:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='}';
 800109a:	237d      	movs	r3, #125	; 0x7d
 800109c:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]=' ';
 80010a0:	2320      	movs	r3, #32
 80010a2:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 80010a6:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 80010aa:	f88d 300e 	strb.w	r3, [sp, #14]
        		flagEmpty++;
 80010ae:	2403      	movs	r4, #3
    }break;
 80010b0:	e7ce      	b.n	8001050 <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[3];
 80010b2:	3430      	adds	r4, #48	; 0x30
 80010b4:	f88d 4009 	strb.w	r4, [sp, #9]
    	numberInChar[2]='0'+numberInChar[4];
 80010b8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80010bc:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='\"';
 80010c0:	2322      	movs	r3, #34	; 0x22
 80010c2:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='}';
 80010c6:	237d      	movs	r3, #125	; 0x7d
 80010c8:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 80010cc:	2320      	movs	r3, #32
 80010ce:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 80010d2:	f88d 300e 	strb.w	r3, [sp, #14]
    		flagEmpty++;
 80010d6:	2402      	movs	r4, #2
    }break;
 80010d8:	e7ba      	b.n	8001050 <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[2];
 80010da:	3330      	adds	r3, #48	; 0x30
 80010dc:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 80010e0:	3430      	adds	r4, #48	; 0x30
 80010e2:	f88d 400a 	strb.w	r4, [sp, #10]
    	numberInChar[3]='0'+numberInChar[4];
 80010e6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80010ea:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='\"';
 80010ee:	2322      	movs	r3, #34	; 0x22
 80010f0:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 80010f4:	237d      	movs	r3, #125	; 0x7d
 80010f6:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 80010fa:	2320      	movs	r3, #32
 80010fc:	f88d 300e 	strb.w	r3, [sp, #14]
    	flagEmpty++;
 8001100:	2401      	movs	r4, #1
    }break;
 8001102:	e7a5      	b.n	8001050 <updateSignedMillesimal+0xd4>
 8001104:	10624dd3 	.word	0x10624dd3
 8001108:	fffffc18 	.word	0xfffffc18
 800110c:	51eb851f 	.word	0x51eb851f
 8001110:	66666667 	.word	0x66666667

08001114 <updateSignedFloat>:
void updateSignedFloat(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, float data){
 8001114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001118:	ed2d 8b02 	vpush	{d8}
 800111c:	b085      	sub	sp, #20
 800111e:	4606      	mov	r6, r0
 8001120:	460f      	mov	r7, r1
 8001122:	4691      	mov	r9, r2
 8001124:	461d      	mov	r5, r3
 8001126:	eeb0 8a40 	vmov.f32	s16, s0
	 newstring=(uint8_t*)malloc(offset+8);
 800112a:	f103 0808 	add.w	r8, r3, #8
 800112e:	4640      	mov	r0, r8
 8001130:	f005 fec6 	bl	8006ec0 <malloc>
 8001134:	4604      	mov	r4, r0
	 memcpy(newstring,defaultValue,offset);
 8001136:	462a      	mov	r2, r5
 8001138:	4649      	mov	r1, r9
 800113a:	f006 f829 	bl	8007190 <memcpy>
    int16_t newdata=(int16_t)(data*10);
 800113e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001142:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001146:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800114a:	ee18 3a10 	vmov	r3, s16
 800114e:	b219      	sxth	r1, r3
	if(newdata<0){
 8001150:	2900      	cmp	r1, #0
 8001152:	db6f      	blt.n	8001234 <updateSignedFloat+0x120>
	numberInChar[0]=43;
 8001154:	232b      	movs	r3, #43	; 0x2b
 8001156:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=newdata/1000;
 800115a:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <updateSignedFloat+0x194>)
 800115c:	fb83 2301 	smull	r2, r3, r3, r1
 8001160:	17ca      	asrs	r2, r1, #31
 8001162:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(newdata-numberInChar[1]*1000)/100;
 800116c:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <updateSignedFloat+0x198>)
 800116e:	fb03 fc02 	mul.w	ip, r3, r2
 8001172:	eb01 030c 	add.w	r3, r1, ip
 8001176:	484e      	ldr	r0, [pc, #312]	; (80012b0 <updateSignedFloat+0x19c>)
 8001178:	fb80 e003 	smull	lr, r0, r0, r3
 800117c:	17db      	asrs	r3, r3, #31
 800117e:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(newdata-numberInChar[2]*100-numberInChar[1]*1000)/10;
 8001188:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800118c:	fb00 1003 	mla	r0, r0, r3, r1
 8001190:	4484      	add	ip, r0
 8001192:	4848      	ldr	r0, [pc, #288]	; (80012b4 <updateSignedFloat+0x1a0>)
 8001194:	fb80 e00c 	smull	lr, r0, r0, ip
 8001198:	ea4f 7cec 	mov.w	ip, ip, asr #31
 800119c:	ebcc 0ca0 	rsb	ip, ip, r0, asr #2
 80011a0:	fa5f fc8c 	uxtb.w	ip, ip
 80011a4:	f88d c00b 	strb.w	ip, [sp, #11]
    numberInChar[5]=(newdata-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 80011a8:	ebcc 104c 	rsb	r0, ip, ip, lsl #5
 80011ac:	ebcc 0080 	rsb	r0, ip, r0, lsl #2
 80011b0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80011b4:	ebc3 0ece 	rsb	lr, r3, lr, lsl #3
 80011b8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011bc:	eb0e 0e40 	add.w	lr, lr, r0, lsl #1
 80011c0:	448e      	add	lr, r1
 80011c2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80011c6:	00c9      	lsls	r1, r1, #3
 80011c8:	fa51 fe8e 	uxtab	lr, r1, lr
 80011cc:	fa5f fe8e 	uxtb.w	lr, lr
 80011d0:	f88d e00d 	strb.w	lr, [sp, #13]
    if(numberInChar[1]==0){
 80011d4:	b3a2      	cbz	r2, 8001240 <updateSignedFloat+0x12c>
        numberInChar[1]+='0';
 80011d6:	3230      	adds	r2, #48	; 0x30
 80011d8:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 80011dc:	3330      	adds	r3, #48	; 0x30
 80011de:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 80011e2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80011e6:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='.';
 80011ea:	232e      	movs	r3, #46	; 0x2e
 80011ec:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]+='0';
 80011f0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80011f4:	f88d e00d 	strb.w	lr, [sp, #13]
    	numberInChar[6]='\"';
 80011f8:	2322      	movs	r3, #34	; 0x22
 80011fa:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]='}';
 80011fe:	237d      	movs	r3, #125	; 0x7d
 8001200:	f88d 300f 	strb.w	r3, [sp, #15]
	int flagEmpty=0;
 8001204:	f04f 0900 	mov.w	r9, #0
    memcpy(newstring+offset,numberInChar,8-flagEmpty);
 8001208:	f1c9 0208 	rsb	r2, r9, #8
 800120c:	a902      	add	r1, sp, #8
 800120e:	1960      	adds	r0, r4, r5
 8001210:	f005 ffbe 	bl	8007190 <memcpy>
	updateCharValue(service, characteristic, 0, offset+8-flagEmpty, newstring);
 8001214:	9400      	str	r4, [sp, #0]
 8001216:	eba8 0309 	sub.w	r3, r8, r9
 800121a:	2200      	movs	r2, #0
 800121c:	4639      	mov	r1, r7
 800121e:	4630      	mov	r0, r6
 8001220:	f7ff fc96 	bl	8000b50 <updateCharValue>
	free(newstring);
 8001224:	4620      	mov	r0, r4
 8001226:	f005 fe53 	bl	8006ed0 <free>
}
 800122a:	b005      	add	sp, #20
 800122c:	ecbd 8b02 	vpop	{d8}
 8001230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    numberInChar[0]=45;
 8001234:	232d      	movs	r3, #45	; 0x2d
 8001236:	f88d 3008 	strb.w	r3, [sp, #8]
    newdata=-newdata;
 800123a:	4249      	negs	r1, r1
 800123c:	b209      	sxth	r1, r1
 800123e:	e78c      	b.n	800115a <updateSignedFloat+0x46>
    	if(numberInChar[2]==0){
 8001240:	b9c3      	cbnz	r3, 8001274 <updateSignedFloat+0x160>
        numberInChar[1]='0'+numberInChar[3];
 8001242:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001246:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='.';
 800124a:	232e      	movs	r3, #46	; 0x2e
 800124c:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='0'+numberInChar[5];
 8001250:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001254:	f88d e00b 	strb.w	lr, [sp, #11]
    	numberInChar[4]='\"';
 8001258:	2322      	movs	r3, #34	; 0x22
 800125a:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 800125e:	237d      	movs	r3, #125	; 0x7d
 8001260:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8001264:	2320      	movs	r3, #32
 8001266:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 800126a:	f88d 300f 	strb.w	r3, [sp, #15]
    		flagEmpty++;
 800126e:	f04f 0902 	mov.w	r9, #2
    }break;
 8001272:	e7c9      	b.n	8001208 <updateSignedFloat+0xf4>
        numberInChar[1]='0'+numberInChar[2];
 8001274:	3330      	adds	r3, #48	; 0x30
 8001276:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 800127a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800127e:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='.';
 8001282:	232e      	movs	r3, #46	; 0x2e
 8001284:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='0'+numberInChar[5];
 8001288:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800128c:	f88d e00c 	strb.w	lr, [sp, #12]
    	numberInChar[5]='\"';
 8001290:	2322      	movs	r3, #34	; 0x22
 8001292:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 8001296:	237d      	movs	r3, #125	; 0x7d
 8001298:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 800129c:	2320      	movs	r3, #32
 800129e:	f88d 300f 	strb.w	r3, [sp, #15]
    	flagEmpty++;
 80012a2:	f04f 0901 	mov.w	r9, #1
    }break;
 80012a6:	e7af      	b.n	8001208 <updateSignedFloat+0xf4>
 80012a8:	10624dd3 	.word	0x10624dd3
 80012ac:	fffffc18 	.word	0xfffffc18
 80012b0:	51eb851f 	.word	0x51eb851f
 80012b4:	66666667 	.word	0x66666667

080012b8 <buttonToggled>:
#include "state_machine.h"

static uint8_t button = 0;

uint8_t buttonToggled()
{
 80012b8:	b508      	push	{r3, lr}
	uint8_t newRead = readDigital(MF_Button);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 f910 	bl	80014e0 <readDigital>

	uint8_t calc = newRead && !button;
 80012c0:	4602      	mov	r2, r0
 80012c2:	b120      	cbz	r0, 80012ce <buttonToggled+0x16>
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <buttonToggled+0x24>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b12b      	cbz	r3, 80012d6 <buttonToggled+0x1e>
 80012ca:	2000      	movs	r0, #0
 80012cc:	e000      	b.n	80012d0 <buttonToggled+0x18>
 80012ce:	2000      	movs	r0, #0

	button = newRead;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <buttonToggled+0x24>)
 80012d2:	701a      	strb	r2, [r3, #0]

	return calc;
}
 80012d4:	bd08      	pop	{r3, pc}
	uint8_t calc = newRead && !button;
 80012d6:	2001      	movs	r0, #1
 80012d8:	e7fa      	b.n	80012d0 <buttonToggled+0x18>
 80012da:	bf00      	nop
 80012dc:	200006c2 	.word	0x200006c2

080012e0 <testBSPfunctions>:
static float temperature = 0, humidity = 0, pressure = 0,
		*acceleremeter = NULL, *magnetometer = NULL , *gyroscope = NULL;


void testBSPfunctions()
{
 80012e0:	b510      	push	{r4, lr}
 80012e2:	b090      	sub	sp, #64	; 0x40
    char Test[50];
    sprintf(Test, "Temperature = %d\n\r", (int)temperature);
 80012e4:	4c3c      	ldr	r4, [pc, #240]	; (80013d8 <testBSPfunctions+0xf8>)
 80012e6:	edd4 7a00 	vldr	s15, [r4]
 80012ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ee:	ee17 2a90 	vmov	r2, s15
 80012f2:	493a      	ldr	r1, [pc, #232]	; (80013dc <testBSPfunctions+0xfc>)
 80012f4:	a803      	add	r0, sp, #12
 80012f6:	f005 fed7 	bl	80070a8 <siprintf>
    appendMessage(Test);
 80012fa:	a803      	add	r0, sp, #12
 80012fc:	f001 fb62 	bl	80029c4 <appendMessage>
    sprintf(Test, "Humidity = %d\n\r", (int)humidity);
 8001300:	edd4 7a01 	vldr	s15, [r4, #4]
 8001304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001308:	ee17 2a90 	vmov	r2, s15
 800130c:	4934      	ldr	r1, [pc, #208]	; (80013e0 <testBSPfunctions+0x100>)
 800130e:	a803      	add	r0, sp, #12
 8001310:	f005 feca 	bl	80070a8 <siprintf>
    appendMessage(Test);
 8001314:	a803      	add	r0, sp, #12
 8001316:	f001 fb55 	bl	80029c4 <appendMessage>
    sprintf(Test, "Pressure = %d\n\r", (int)pressure);
 800131a:	edd4 7a02 	vldr	s15, [r4, #8]
 800131e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001322:	ee17 2a90 	vmov	r2, s15
 8001326:	492f      	ldr	r1, [pc, #188]	; (80013e4 <testBSPfunctions+0x104>)
 8001328:	a803      	add	r0, sp, #12
 800132a:	f005 febd 	bl	80070a8 <siprintf>
    appendMessage(Test);
 800132e:	a803      	add	r0, sp, #12
 8001330:	f001 fb48 	bl	80029c4 <appendMessage>
    sprintf(Test, "Accellerometer = %d,%d,%d\n\r",
    	(int)acceleremeter[0], (int)acceleremeter[1], (int)acceleremeter[2]);
 8001334:	68e3      	ldr	r3, [r4, #12]
 8001336:	ed93 7a00 	vldr	s14, [r3]
 800133a:	edd3 6a01 	vldr	s13, [r3, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(Test, "Accellerometer = %d,%d,%d\n\r",
 8001342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001346:	edcd 7a00 	vstr	s15, [sp]
 800134a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800134e:	ee17 3a90 	vmov	r3, s15
 8001352:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001356:	ee17 2a90 	vmov	r2, s15
 800135a:	4923      	ldr	r1, [pc, #140]	; (80013e8 <testBSPfunctions+0x108>)
 800135c:	a803      	add	r0, sp, #12
 800135e:	f005 fea3 	bl	80070a8 <siprintf>
    appendMessage(Test);
 8001362:	a803      	add	r0, sp, #12
 8001364:	f001 fb2e 	bl	80029c4 <appendMessage>

    sprintf(Test, "Magneto = %d,%d,%d\n\r",
    	(int)magnetometer[0], (int)magnetometer[1], (int)magnetometer[2]);
 8001368:	6923      	ldr	r3, [r4, #16]
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001372:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(Test, "Magneto = %d,%d,%d\n\r",
 8001376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137a:	edcd 7a00 	vstr	s15, [sp]
 800137e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800138a:	ee17 2a90 	vmov	r2, s15
 800138e:	4917      	ldr	r1, [pc, #92]	; (80013ec <testBSPfunctions+0x10c>)
 8001390:	a803      	add	r0, sp, #12
 8001392:	f005 fe89 	bl	80070a8 <siprintf>
    appendMessage(Test);
 8001396:	a803      	add	r0, sp, #12
 8001398:	f001 fb14 	bl	80029c4 <appendMessage>

    sprintf(Test, "Gyro = %d,%d,%d\n\r",
    	(int)gyroscope[0], (int)gyroscope[1], (int)gyroscope[2]);
 800139c:	6963      	ldr	r3, [r4, #20]
 800139e:	ed93 7a00 	vldr	s14, [r3]
 80013a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80013a6:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(Test, "Gyro = %d,%d,%d\n\r",
 80013aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ae:	edcd 7a00 	vstr	s15, [sp]
 80013b2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80013b6:	ee17 3a90 	vmov	r3, s15
 80013ba:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80013be:	ee17 2a90 	vmov	r2, s15
 80013c2:	490b      	ldr	r1, [pc, #44]	; (80013f0 <testBSPfunctions+0x110>)
 80013c4:	a803      	add	r0, sp, #12
 80013c6:	f005 fe6f 	bl	80070a8 <siprintf>
    appendMessage(Test);
 80013ca:	a803      	add	r0, sp, #12
 80013cc:	f001 fafa 	bl	80029c4 <appendMessage>

    sendMessage();
 80013d0:	f001 fae6 	bl	80029a0 <sendMessage>

}
 80013d4:	b010      	add	sp, #64	; 0x40
 80013d6:	bd10      	pop	{r4, pc}
 80013d8:	200006c4 	.word	0x200006c4
 80013dc:	080078c8 	.word	0x080078c8
 80013e0:	080078dc 	.word	0x080078dc
 80013e4:	080078ec 	.word	0x080078ec
 80013e8:	080078fc 	.word	0x080078fc
 80013ec:	08007918 	.word	0x08007918
 80013f0:	08007930 	.word	0x08007930

080013f4 <idle_enter>:



void idle_enter()
{
 80013f4:	b508      	push	{r3, lr}
    setTimer(TF_Main, testBSPfunctions, 3000);
 80013f6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013fa:	2300      	movs	r3, #0
 80013fc:	4906      	ldr	r1, [pc, #24]	; (8001418 <idle_enter+0x24>)
 80013fe:	2000      	movs	r0, #0
 8001400:	f001 fa78 	bl	80028f4 <setTimer>

    setDigital(MF_led2, GPIO_PIN_RESET);
 8001404:	2100      	movs	r1, #0
 8001406:	2003      	movs	r0, #3
 8001408:	f000 f85a 	bl	80014c0 <setDigital>

    setDigital(MF_led1,GPIO_PIN_RESET);
 800140c:	2100      	movs	r1, #0
 800140e:	2002      	movs	r0, #2
 8001410:	f000 f856 	bl	80014c0 <setDigital>

    //setExitCondition(ST_BLE_CHECK, buttonToggled);
}
 8001414:	bd08      	pop	{r3, pc}
 8001416:	bf00      	nop
 8001418:	080012e1 	.word	0x080012e1

0800141c <idle_beforeLoop>:


void idle_beforeLoop(uint8_t deltaMs)
{
 800141c:	b510      	push	{r4, lr}
	temperature = bspGetValue(BSP_temperature);
 800141e:	2001      	movs	r0, #1
 8001420:	f000 f870 	bl	8001504 <bspGetValue>
 8001424:	4c0c      	ldr	r4, [pc, #48]	; (8001458 <idle_beforeLoop+0x3c>)
 8001426:	ed84 0a00 	vstr	s0, [r4]
	humidity = bspGetValue(BSP_humidity);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f86a 	bl	8001504 <bspGetValue>
 8001430:	ed84 0a01 	vstr	s0, [r4, #4]
	pressure = bspGetValue(BSP_pressure);
 8001434:	2002      	movs	r0, #2
 8001436:	f000 f865 	bl	8001504 <bspGetValue>
 800143a:	ed84 0a02 	vstr	s0, [r4, #8]
	magnetometer = bspGetTripleValue(BSPT_magneto);
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f870 	bl	8001524 <bspGetTripleValue>
 8001444:	6120      	str	r0, [r4, #16]
	acceleremeter = bspGetTripleValue(BSPT_accellero);
 8001446:	2002      	movs	r0, #2
 8001448:	f000 f86c 	bl	8001524 <bspGetTripleValue>
 800144c:	60e0      	str	r0, [r4, #12]
	gyroscope = bspGetTripleValue(BSPT_gyro);
 800144e:	2001      	movs	r0, #1
 8001450:	f000 f868 	bl	8001524 <bspGetTripleValue>
 8001454:	6160      	str	r0, [r4, #20]
}
 8001456:	bd10      	pop	{r4, pc}
 8001458:	200006c4 	.word	0x200006c4

0800145c <idle_loop>:


void idle_loop(uint8_t deltaMs)
{

}
 800145c:	4770      	bx	lr

0800145e <idle_afterLoop>:

void idle_afterLoop(uint8_t deltaMs)
{
}
 800145e:	4770      	bx	lr

08001460 <bspFunctionInit>:

static int16_t placeHolderInt16[3];
static float placeHolderFloat[3];

void bspFunctionInit()
{
 8001460:	b510      	push	{r4, lr}
    BSP_HSENSOR_Init();
 8001462:	f001 ff8f 	bl	8003384 <BSP_HSENSOR_Init>
    bspFunctionArray[BSP_humidity] = &BSP_HSENSOR_ReadHumidity;
 8001466:	4c09      	ldr	r4, [pc, #36]	; (800148c <bspFunctionInit+0x2c>)
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <bspFunctionInit+0x30>)
 800146a:	6023      	str	r3, [r4, #0]
    BSP_TSENSOR_Init();
 800146c:	f001 fffa 	bl	8003464 <BSP_TSENSOR_Init>
    bspFunctionArray[BSP_temperature] = &BSP_TSENSOR_ReadTemp;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <bspFunctionInit+0x34>)
 8001472:	6063      	str	r3, [r4, #4]
    BSP_PSENSOR_Init();
 8001474:	f001 ffd6 	bl	8003424 <BSP_PSENSOR_Init>
    bspFunctionArray[BSP_pressure] = &BSP_PSENSOR_ReadPressure;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <bspFunctionInit+0x38>)
 800147a:	60a3      	str	r3, [r4, #8]
    BSP_ACCELERO_Init();
 800147c:	f001 ff1e 	bl	80032bc <BSP_ACCELERO_Init>
    BSP_GYRO_Init();
 8001480:	f001 ff4c 	bl	800331c <BSP_GYRO_Init>
    BSP_MAGNETO_Init();
 8001484:	f001 ff9e 	bl	80033c4 <BSP_MAGNETO_Init>
}
 8001488:	bd10      	pop	{r4, pc}
 800148a:	bf00      	nop
 800148c:	200006e0 	.word	0x200006e0
 8001490:	080033b1 	.word	0x080033b1
 8001494:	08003489 	.word	0x08003489
 8001498:	08003451 	.word	0x08003451

0800149c <setMappedFunction>:

void setMappedFunction(MF mf, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, double offset, double factor)
{
 800149c:	b410      	push	{r4}
    ios_manager[mf].m_type = GPIOx;
 800149e:	4c07      	ldr	r4, [pc, #28]	; (80014bc <setMappedFunction+0x20>)
 80014a0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80014a4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80014a8:	6119      	str	r1, [r3, #16]
    ios_manager[mf].m_pin = GPIO_Pin;
 80014aa:	829a      	strh	r2, [r3, #20]
    ios_manager[mf].m_offset = offset;
 80014ac:	ed83 0b08 	vstr	d0, [r3, #32]
    ios_manager[mf].m_factor = factor;
 80014b0:	ed83 1b06 	vstr	d1, [r3, #24]
}
 80014b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200006e0 	.word	0x200006e0

080014c0 <setDigital>:

void setDigital(MF mf, GPIO_PinState state)
{
 80014c0:	b508      	push	{r3, lr}
 80014c2:	460a      	mov	r2, r1
    HAL_GPIO_WritePin(ios_manager[mf].m_type, ios_manager[mf].m_pin, state);
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <setDigital+0x1c>)
 80014c6:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80014ca:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 80014ce:	f8bc 1014 	ldrh.w	r1, [ip, #20]
 80014d2:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80014d6:	f002 fa34 	bl	8003942 <HAL_GPIO_WritePin>
}
 80014da:	bd08      	pop	{r3, pc}
 80014dc:	200006e0 	.word	0x200006e0

080014e0 <readDigital>:

GPIO_PinState readDigital(MF mf)
{

    if (mf >= MF_COUNT)
 80014e0:	2807      	cmp	r0, #7
 80014e2:	d901      	bls.n	80014e8 <readDigital+0x8>
        return GPIO_PIN_RESET;
 80014e4:	2000      	movs	r0, #0
    return HAL_GPIO_ReadPin(ios_manager[mf].m_type, ios_manager[mf].m_pin);
}
 80014e6:	4770      	bx	lr
{
 80014e8:	b508      	push	{r3, lr}
    return HAL_GPIO_ReadPin(ios_manager[mf].m_type, ios_manager[mf].m_pin);
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <readDigital+0x20>)
 80014ec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80014f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80014f4:	8a91      	ldrh	r1, [r2, #20]
 80014f6:	6910      	ldr	r0, [r2, #16]
 80014f8:	f002 fa1c 	bl	8003934 <HAL_GPIO_ReadPin>
}
 80014fc:	bd08      	pop	{r3, pc}
 80014fe:	bf00      	nop
 8001500:	200006e0 	.word	0x200006e0

08001504 <bspGetValue>:

float bspGetValue(bspF function)
{
    if (function >= BSP_COUNT)
 8001504:	2802      	cmp	r0, #2
 8001506:	d805      	bhi.n	8001514 <bspGetValue+0x10>
{
 8001508:	b508      	push	{r3, lr}
        return 404;
    return (bspFunctionArray[function])();
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <bspGetValue+0x18>)
 800150c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001510:	4798      	blx	r3
}
 8001512:	bd08      	pop	{r3, pc}
        return 404;
 8001514:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001520 <bspGetValue+0x1c>
}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200006e0 	.word	0x200006e0
 8001520:	43ca0000 	.word	0x43ca0000

08001524 <bspGetTripleValue>:

float *bspGetTripleValue(bspTF function)
{
    if (function >= BSPT_COUNT)
 8001524:	2802      	cmp	r0, #2
 8001526:	d827      	bhi.n	8001578 <bspGetTripleValue+0x54>
{
 8001528:	b510      	push	{r4, lr}
        return NULL;
    switch (function)
 800152a:	2801      	cmp	r0, #1
 800152c:	d004      	beq.n	8001538 <bspGetTripleValue+0x14>
 800152e:	2802      	cmp	r0, #2
 8001530:	d00c      	beq.n	800154c <bspGetTripleValue+0x28>
 8001532:	b138      	cbz	r0, 8001544 <bspGetTripleValue+0x20>
{
 8001534:	2300      	movs	r3, #0
 8001536:	e01b      	b.n	8001570 <bspGetTripleValue+0x4c>
    {
    case BSPT_gyro:
        BSP_GYRO_GetXYZ(placeHolderFloat);
 8001538:	4c10      	ldr	r4, [pc, #64]	; (800157c <bspGetTripleValue+0x58>)
 800153a:	4620      	mov	r0, r4
 800153c:	f001 ff18 	bl	8003370 <BSP_GYRO_GetXYZ>
        return placeHolderFloat;
 8001540:	4620      	mov	r0, r4
 8001542:	e018      	b.n	8001576 <bspGetTripleValue+0x52>

    case BSPT_magneto:
        BSP_MAGNETO_GetXYZ(placeHolderInt16);
 8001544:	480e      	ldr	r0, [pc, #56]	; (8001580 <bspGetTripleValue+0x5c>)
 8001546:	f001 ff63 	bl	8003410 <BSP_MAGNETO_GetXYZ>
        break;
 800154a:	e7f3      	b.n	8001534 <bspGetTripleValue+0x10>

    case BSPT_accellero:
        BSP_ACCELERO_AccGetXYZ(placeHolderInt16);
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <bspGetTripleValue+0x5c>)
 800154e:	f001 fedb 	bl	8003308 <BSP_ACCELERO_AccGetXYZ>
        break;
 8001552:	e7ef      	b.n	8001534 <bspGetTripleValue+0x10>
    default:
        break;
    }

    for (int i = 0; i < 3; i++)
        placeHolderFloat[i] = placeHolderInt16[i];
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <bspGetTripleValue+0x60>)
 8001556:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800155a:	f9b1 10dc 	ldrsh.w	r1, [r1, #220]	; 0xdc
 800155e:	ee07 1a90 	vmov	s15, r1
 8001562:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156a:	edc2 7a34 	vstr	s15, [r2, #208]	; 0xd0
    for (int i = 0; i < 3; i++)
 800156e:	3301      	adds	r3, #1
 8001570:	2b02      	cmp	r3, #2
 8001572:	ddef      	ble.n	8001554 <bspGetTripleValue+0x30>
    return placeHolderFloat;
 8001574:	4801      	ldr	r0, [pc, #4]	; (800157c <bspGetTripleValue+0x58>)
}
 8001576:	bd10      	pop	{r4, pc}
        return NULL;
 8001578:	2000      	movs	r0, #0
}
 800157a:	4770      	bx	lr
 800157c:	200007b0 	.word	0x200007b0
 8001580:	200007bc 	.word	0x200007bc
 8001584:	200006e0 	.word	0x200006e0

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800158c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	2400      	movs	r4, #0
 8001590:	9405      	str	r4, [sp, #20]
 8001592:	9406      	str	r4, [sp, #24]
 8001594:	9407      	str	r4, [sp, #28]
 8001596:	9408      	str	r4, [sp, #32]
 8001598:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800159a:	4b45      	ldr	r3, [pc, #276]	; (80016b0 <MX_GPIO_Init+0x128>)
 800159c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800159e:	f042 0210 	orr.w	r2, r2, #16
 80015a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80015a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015a6:	f002 0210 	and.w	r2, r2, #16
 80015aa:	9200      	str	r2, [sp, #0]
 80015ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015b0:	f042 0202 	orr.w	r2, r2, #2
 80015b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80015b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015b8:	f002 0202 	and.w	r2, r2, #2
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c2:	f042 0208 	orr.w	r2, r2, #8
 80015c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80015c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ca:	f002 0208 	and.w	r2, r2, #8
 80015ce:	9202      	str	r2, [sp, #8]
 80015d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015d4:	f042 0204 	orr.w	r2, r2, #4
 80015d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80015da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015dc:	f002 0204 	and.w	r2, r2, #4
 80015e0:	9203      	str	r2, [sp, #12]
 80015e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	9304      	str	r3, [sp, #16]
 80015f4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80015f6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80016c0 <MX_GPIO_Init+0x138>
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001600:	4648      	mov	r0, r9
 8001602:	f002 f99e 	bl	8003942 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port, TOF_RESET_Pin, GPIO_PIN_RESET);
 8001606:	4e2b      	ldr	r6, [pc, #172]	; (80016b4 <MX_GPIO_Init+0x12c>)
 8001608:	4622      	mov	r2, r4
 800160a:	2140      	movs	r1, #64	; 0x40
 800160c:	4630      	mov	r0, r6
 800160e:	f002 f998 	bl	8003942 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f002 f991 	bl	8003942 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001620:	f04f 0840 	mov.w	r8, #64	; 0x40
 8001624:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <MX_GPIO_Init+0x130>)
 800162a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800162e:	a905      	add	r1, sp, #20
 8001630:	4822      	ldr	r0, [pc, #136]	; (80016bc <MX_GPIO_Init+0x134>)
 8001632:	f001 fffb 	bl	800362c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001636:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800163a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2501      	movs	r5, #1
 800163e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001646:	a905      	add	r1, sp, #20
 8001648:	4648      	mov	r0, r9
 800164a:	f001 ffef 	bl	800362c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_RESET_Pin */
  GPIO_InitStruct.Pin = TOF_RESET_Pin;
 800164e:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(TOF_RESET_GPIO_Port, &GPIO_InitStruct);
 8001658:	a905      	add	r1, sp, #20
 800165a:	4630      	mov	r0, r6
 800165c:	f001 ffe6 	bl	800362c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RESET_Pin */
  GPIO_InitStruct.Pin = BLE_RESET_Pin;
 8001660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001664:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BLE_RESET_GPIO_Port, &GPIO_InitStruct);
 800166c:	a905      	add	r1, sp, #20
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f001 ffdb 	bl	800362c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001676:	2320      	movs	r3, #32
 8001678:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	a905      	add	r1, sp, #20
 8001682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001686:	f001 ffd1 	bl	800362c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800168a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001690:	a905      	add	r1, sp, #20
 8001692:	4630      	mov	r0, r6
 8001694:	f001 ffca 	bl	800362c <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001698:	4622      	mov	r2, r4
 800169a:	4621      	mov	r1, r4
 800169c:	2017      	movs	r0, #23
 800169e:	f001 ff6b 	bl	8003578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016a2:	2017      	movs	r0, #23
 80016a4:	f001 ffa0 	bl	80035e8 <HAL_NVIC_EnableIRQ>

}
 80016a8:	b00b      	add	sp, #44	; 0x2c
 80016aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000800 	.word	0x48000800
 80016b8:	10110000 	.word	0x10110000
 80016bc:	48001000 	.word	0x48001000
 80016c0:	48000c00 	.word	0x48000c00

080016c4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <Error_Handler+0x2>

080016c8 <MX_SPI3_Init>:
{
 80016c8:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <MX_SPI3_Init+0x40>)
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_SPI3_Init+0x44>)
 80016ce:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016d0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016d4:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016d6:	2300      	movs	r3, #0
 80016d8:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016de:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e0:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e2:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ea:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ec:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ee:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80016f2:	2207      	movs	r2, #7
 80016f4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016f6:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f8:	2308      	movs	r3, #8
 80016fa:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016fc:	f004 f85b 	bl	80057b6 <HAL_SPI_Init>
 8001700:	b900      	cbnz	r0, 8001704 <MX_SPI3_Init+0x3c>
}
 8001702:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001704:	f7ff ffde 	bl	80016c4 <Error_Handler>
 8001708:	200007c4 	.word	0x200007c4
 800170c:	40003c00 	.word	0x40003c00

08001710 <MX_I2C2_Init>:
{
 8001710:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8001712:	4812      	ldr	r0, [pc, #72]	; (800175c <MX_I2C2_Init+0x4c>)
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_I2C2_Init+0x50>)
 8001716:	6643      	str	r3, [r0, #100]	; 0x64
  hi2c2.Init.Timing = 0x2000090E;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_I2C2_Init+0x54>)
 800171a:	6683      	str	r3, [r0, #104]	; 0x68
  hi2c2.Init.OwnAddress1 = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	66c3      	str	r3, [r0, #108]	; 0x6c
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001720:	2201      	movs	r2, #1
 8001722:	6702      	str	r2, [r0, #112]	; 0x70
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001724:	6743      	str	r3, [r0, #116]	; 0x74
  hi2c2.Init.OwnAddress2 = 0;
 8001726:	6783      	str	r3, [r0, #120]	; 0x78
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001728:	67c3      	str	r3, [r0, #124]	; 0x7c
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001732:	3064      	adds	r0, #100	; 0x64
 8001734:	f002 fad4 	bl	8003ce0 <HAL_I2C_Init>
 8001738:	b950      	cbnz	r0, 8001750 <MX_I2C2_Init+0x40>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800173a:	2100      	movs	r1, #0
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <MX_I2C2_Init+0x58>)
 800173e:	f002 fe6f 	bl	8004420 <HAL_I2CEx_ConfigAnalogFilter>
 8001742:	b938      	cbnz	r0, 8001754 <MX_I2C2_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <MX_I2C2_Init+0x58>)
 8001748:	f002 fe98 	bl	800447c <HAL_I2CEx_ConfigDigitalFilter>
 800174c:	b920      	cbnz	r0, 8001758 <MX_I2C2_Init+0x48>
}
 800174e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001750:	f7ff ffb8 	bl	80016c4 <Error_Handler>
    Error_Handler();
 8001754:	f7ff ffb6 	bl	80016c4 <Error_Handler>
    Error_Handler();
 8001758:	f7ff ffb4 	bl	80016c4 <Error_Handler>
 800175c:	200007c4 	.word	0x200007c4
 8001760:	40005800 	.word	0x40005800
 8001764:	2000090e 	.word	0x2000090e
 8001768:	20000828 	.word	0x20000828

0800176c <MX_TIM6_Init>:
{
 800176c:	b500      	push	{lr}
 800176e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	2300      	movs	r3, #0
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	9303      	str	r3, [sp, #12]
  htim6.Instance = TIM6;
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <MX_TIM6_Init+0x54>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <MX_TIM6_Init+0x58>)
 800177c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  htim6.Init.Prescaler = 3999;
 8001780:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001784:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  htim6.Init.Period = 1000;
 800178c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001790:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001794:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001798:	30b0      	adds	r0, #176	; 0xb0
 800179a:	f004 fd9b 	bl	80062d4 <HAL_TIM_Base_Init>
 800179e:	b950      	cbnz	r0, 80017b6 <MX_TIM6_Init+0x4a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017a6:	a901      	add	r1, sp, #4
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_TIM6_Init+0x5c>)
 80017aa:	f004 ff91 	bl	80066d0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	b920      	cbnz	r0, 80017ba <MX_TIM6_Init+0x4e>
}
 80017b0:	b005      	add	sp, #20
 80017b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017b6:	f7ff ff85 	bl	80016c4 <Error_Handler>
    Error_Handler();
 80017ba:	f7ff ff83 	bl	80016c4 <Error_Handler>
 80017be:	bf00      	nop
 80017c0:	200007c4 	.word	0x200007c4
 80017c4:	40001000 	.word	0x40001000
 80017c8:	20000874 	.word	0x20000874

080017cc <MX_TIM15_Init>:
{
 80017cc:	b510      	push	{r4, lr}
 80017ce:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	2400      	movs	r4, #0
 80017d2:	9413      	str	r4, [sp, #76]	; 0x4c
 80017d4:	9414      	str	r4, [sp, #80]	; 0x50
 80017d6:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d8:	940c      	str	r4, [sp, #48]	; 0x30
 80017da:	940d      	str	r4, [sp, #52]	; 0x34
 80017dc:	940e      	str	r4, [sp, #56]	; 0x38
 80017de:	940f      	str	r4, [sp, #60]	; 0x3c
 80017e0:	9410      	str	r4, [sp, #64]	; 0x40
 80017e2:	9411      	str	r4, [sp, #68]	; 0x44
 80017e4:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e6:	222c      	movs	r2, #44	; 0x2c
 80017e8:	4621      	mov	r1, r4
 80017ea:	a801      	add	r0, sp, #4
 80017ec:	f005 fc7c 	bl	80070e8 <memset>
  htim15.Instance = TIM15;
 80017f0:	4824      	ldr	r0, [pc, #144]	; (8001884 <MX_TIM15_Init+0xb8>)
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <MX_TIM15_Init+0xbc>)
 80017f4:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
  htim15.Init.Prescaler = 100;
 80017f8:	2364      	movs	r3, #100	; 0x64
 80017fa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
  htim15.Init.Period = 500;
 8001802:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001806:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	f8c0 410c 	str.w	r4, [r0, #268]	; 0x10c
  htim15.Init.RepetitionCounter = 0;
 800180e:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001816:	30fc      	adds	r0, #252	; 0xfc
 8001818:	f004 fd8c 	bl	8006334 <HAL_TIM_PWM_Init>
 800181c:	2800      	cmp	r0, #0
 800181e:	d129      	bne.n	8001874 <MX_TIM15_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001826:	a913      	add	r1, sp, #76	; 0x4c
 8001828:	4818      	ldr	r0, [pc, #96]	; (800188c <MX_TIM15_Init+0xc0>)
 800182a:	f004 ff51 	bl	80066d0 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	bb18      	cbnz	r0, 8001878 <MX_TIM15_Init+0xac>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001830:	2360      	movs	r3, #96	; 0x60
 8001832:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001834:	2200      	movs	r2, #0
 8001836:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001838:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183a:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183c:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800183e:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001840:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001842:	a90c      	add	r1, sp, #48	; 0x30
 8001844:	4811      	ldr	r0, [pc, #68]	; (800188c <MX_TIM15_Init+0xc0>)
 8001846:	f004 fdeb 	bl	8006420 <HAL_TIM_PWM_ConfigChannel>
 800184a:	b9b8      	cbnz	r0, 800187c <MX_TIM15_Init+0xb0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001850:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001852:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001854:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001856:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800185e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001860:	a901      	add	r1, sp, #4
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <MX_TIM15_Init+0xc0>)
 8001864:	f004 ff80 	bl	8006768 <HAL_TIMEx_ConfigBreakDeadTime>
 8001868:	b950      	cbnz	r0, 8001880 <MX_TIM15_Init+0xb4>
  HAL_TIM_MspPostInit(&htim15);
 800186a:	4808      	ldr	r0, [pc, #32]	; (800188c <MX_TIM15_Init+0xc0>)
 800186c:	f000 ff92 	bl	8002794 <HAL_TIM_MspPostInit>
}
 8001870:	b016      	add	sp, #88	; 0x58
 8001872:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001874:	f7ff ff26 	bl	80016c4 <Error_Handler>
    Error_Handler();
 8001878:	f7ff ff24 	bl	80016c4 <Error_Handler>
    Error_Handler();
 800187c:	f7ff ff22 	bl	80016c4 <Error_Handler>
    Error_Handler();
 8001880:	f7ff ff20 	bl	80016c4 <Error_Handler>
 8001884:	200007c4 	.word	0x200007c4
 8001888:	40014000 	.word	0x40014000
 800188c:	200008c0 	.word	0x200008c0

08001890 <SystemClock_Config>:
{
 8001890:	b500      	push	{lr}
 8001892:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001894:	2244      	movs	r2, #68	; 0x44
 8001896:	2100      	movs	r1, #0
 8001898:	a827      	add	r0, sp, #156	; 0x9c
 800189a:	f005 fc25 	bl	80070e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189e:	2100      	movs	r1, #0
 80018a0:	9122      	str	r1, [sp, #136]	; 0x88
 80018a2:	9123      	str	r1, [sp, #140]	; 0x8c
 80018a4:	9124      	str	r1, [sp, #144]	; 0x90
 80018a6:	9125      	str	r1, [sp, #148]	; 0x94
 80018a8:	9126      	str	r1, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018aa:	2288      	movs	r2, #136	; 0x88
 80018ac:	4668      	mov	r0, sp
 80018ae:	f005 fc1b 	bl	80070e8 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80018b2:	2310      	movs	r3, #16
 80018b4:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018b6:	2301      	movs	r3, #1
 80018b8:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80018ba:	2370      	movs	r3, #112	; 0x70
 80018bc:	932f      	str	r3, [sp, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018be:	a827      	add	r0, sp, #156	; 0x9c
 80018c0:	f002 fefa 	bl	80046b8 <HAL_RCC_OscConfig>
 80018c4:	b9d0      	cbnz	r0, 80018fc <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c6:	230f      	movs	r3, #15
 80018c8:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80018ca:	2100      	movs	r1, #0
 80018cc:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ce:	9124      	str	r1, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d0:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d2:	9126      	str	r1, [sp, #152]	; 0x98
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018d4:	a822      	add	r0, sp, #136	; 0x88
 80018d6:	f003 fa05 	bl	8004ce4 <HAL_RCC_ClockConfig>
 80018da:	b988      	cbnz	r0, 8001900 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e4:	4668      	mov	r0, sp
 80018e6:	f003 fc33 	bl	8005150 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	b958      	cbnz	r0, 8001904 <SystemClock_Config+0x74>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018f0:	f002 fdf8 	bl	80044e4 <HAL_PWREx_ControlVoltageScaling>
 80018f4:	b940      	cbnz	r0, 8001908 <SystemClock_Config+0x78>
}
 80018f6:	b039      	add	sp, #228	; 0xe4
 80018f8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80018fc:	f7ff fee2 	bl	80016c4 <Error_Handler>
    Error_Handler();
 8001900:	f7ff fee0 	bl	80016c4 <Error_Handler>
    Error_Handler();
 8001904:	f7ff fede 	bl	80016c4 <Error_Handler>
    Error_Handler();
 8001908:	f7ff fedc 	bl	80016c4 <Error_Handler>

0800190c <main>:
{
 800190c:	b508      	push	{r3, lr}
  HAL_Init();
 800190e:	f001 fdeb 	bl	80034e8 <HAL_Init>
  SystemClock_Config();
 8001912:	f7ff ffbd 	bl	8001890 <SystemClock_Config>
  MX_GPIO_Init();
 8001916:	f7ff fe37 	bl	8001588 <MX_GPIO_Init>
  MX_SPI3_Init();
 800191a:	f7ff fed5 	bl	80016c8 <MX_SPI3_Init>
  MX_I2C2_Init();
 800191e:	f7ff fef7 	bl	8001710 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001922:	f7ff ff23 	bl	800176c <MX_TIM6_Init>
  MX_TIM15_Init();
 8001926:	f7ff ff51 	bl	80017cc <MX_TIM15_Init>
  setup();
 800192a:	f000 fd53 	bl	80023d4 <setup>
	  loop(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 fd94 	bl	800245c <loop>
  while (1)
 8001934:	e7fb      	b.n	800192e <main+0x22>
	...

08001938 <initLPS22hh>:
int16_t H_0_lsb=0;
int16_t H_1_lsb=0;
float mh=0;


void initLPS22hh(){
 8001938:	b500      	push	{lr}
 800193a:	b085      	sub	sp, #20
	uint8_t addressWrite=0xba;
	uint8_t turnOn[]={0x10,0x20};//The address of the register and the value of the register to turn on the sensor
 800193c:	f242 0310 	movw	r3, #8208	; 0x2010
 8001940:	f8ad 300c 	strh.w	r3, [sp, #12]

    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001944:	2301      	movs	r3, #1
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2302      	movs	r3, #2
 800194a:	aa03      	add	r2, sp, #12
 800194c:	21ba      	movs	r1, #186	; 0xba
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <initLPS22hh+0x24>)
 8001950:	f002 fa3e 	bl	8003dd0 <HAL_I2C_Master_Transmit>
}
 8001954:	b005      	add	sp, #20
 8001956:	f85d fb04 	ldr.w	pc, [sp], #4
 800195a:	bf00      	nop
 800195c:	20000828 	.word	0x20000828

08001960 <getPressure>:

void getPressure(float *pressure){
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	b087      	sub	sp, #28
 8001964:	4607      	mov	r7, r0

	int lsb;
	uint8_t addressWrite=0xba;
	uint8_t addressRead=0xbb;
	uint8_t pressXL[]={0x28};
 8001966:	2328      	movs	r3, #40	; 0x28
 8001968:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t pressL[]={0x29};
 800196c:	2329      	movs	r3, #41	; 0x29
 800196e:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t pressH[]={0x2a};
 8001972:	232a      	movs	r3, #42	; 0x2a
 8001974:	f88d 300c 	strb.w	r3, [sp, #12]
	uint8_t data[2];

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressXL,2,1);
 8001978:	4d22      	ldr	r5, [pc, #136]	; (8001a04 <getPressure+0xa4>)
 800197a:	2601      	movs	r6, #1
 800197c:	9600      	str	r6, [sp, #0]
 800197e:	2302      	movs	r3, #2
 8001980:	aa05      	add	r2, sp, #20
 8001982:	21ba      	movs	r1, #186	; 0xba
 8001984:	4628      	mov	r0, r5
 8001986:	f002 fa23 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2,addressRead,data,2,1);
 800198a:	9600      	str	r6, [sp, #0]
 800198c:	2302      	movs	r3, #2
 800198e:	aa02      	add	r2, sp, #8
 8001990:	21bb      	movs	r1, #187	; 0xbb
 8001992:	4628      	mov	r0, r5
 8001994:	f002 fa1c 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	lsb=data[0];
 8001998:	f89d 4008 	ldrb.w	r4, [sp, #8]

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressL,2,1);
 800199c:	9600      	str	r6, [sp, #0]
 800199e:	2302      	movs	r3, #2
 80019a0:	aa04      	add	r2, sp, #16
 80019a2:	21ba      	movs	r1, #186	; 0xba
 80019a4:	4628      	mov	r0, r5
 80019a6:	f002 fa13 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2,addressRead,data,2,1);
 80019aa:	9600      	str	r6, [sp, #0]
 80019ac:	2302      	movs	r3, #2
 80019ae:	aa02      	add	r2, sp, #8
 80019b0:	21bb      	movs	r1, #187	; 0xbb
 80019b2:	4628      	mov	r0, r5
 80019b4:	f002 fa0c 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	lsb|=data[0]<<8;
 80019b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80019bc:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressH,2,1);
 80019c0:	9600      	str	r6, [sp, #0]
 80019c2:	2302      	movs	r3, #2
 80019c4:	aa03      	add	r2, sp, #12
 80019c6:	21ba      	movs	r1, #186	; 0xba
 80019c8:	4628      	mov	r0, r5
 80019ca:	f002 fa01 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2,addressRead,data,2,1);
 80019ce:	9600      	str	r6, [sp, #0]
 80019d0:	2302      	movs	r3, #2
 80019d2:	aa02      	add	r2, sp, #8
 80019d4:	21bb      	movs	r1, #187	; 0xbb
 80019d6:	4628      	mov	r0, r5
 80019d8:	f002 f9fa 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	lsb|=data[0]<<16;
 80019dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80019e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16


	if(lsb>8388607){
 80019e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019e8:	db00      	blt.n	80019ec <getPressure+0x8c>
		lsb=lsb-1;
		lsb=~lsb;
 80019ea:	425b      	negs	r3, r3
	}

	*pressure=((float)lsb)/((float)(4096));
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001a08 <getPressure+0xa8>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	edc7 7a00 	vstr	s15, [r7]

}
 8001a00:	b007      	add	sp, #28
 8001a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a04:	20000828 	.word	0x20000828
 8001a08:	39800000 	.word	0x39800000

08001a0c <initHTS221>:

void initHTS221(){
 8001a0c:	b570      	push	{r4, r5, r6, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
	uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	uint8_t turnOn[]={0x20,0x81};//The address of the register and the value of the register to turn on the sensor
 8001a10:	f248 1320 	movw	r3, #33056	; 0x8120
 8001a14:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    uint8_t data[2];

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001a18:	4eab      	ldr	r6, [pc, #684]	; (8001cc8 <initHTS221+0x2bc>)
 8001a1a:	2401      	movs	r4, #1
 8001a1c:	9400      	str	r4, [sp, #0]
 8001a1e:	2302      	movs	r3, #2
 8001a20:	aa0d      	add	r2, sp, #52	; 0x34
 8001a22:	21be      	movs	r1, #190	; 0xbe
 8001a24:	4630      	mov	r0, r6
 8001a26:	f002 f9d3 	bl	8003dd0 <HAL_I2C_Master_Transmit>


    uint8_t tempMinAddress[]={0x32};
 8001a2a:	2332      	movs	r3, #50	; 0x32
 8001a2c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    uint8_t tempMaxAddress[]={0x33};
 8001a30:	2333      	movs	r3, #51	; 0x33
 8001a32:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    //reading low temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMinAddress,1,1);
 8001a36:	9400      	str	r4, [sp, #0]
 8001a38:	4623      	mov	r3, r4
 8001a3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8001a3c:	21be      	movs	r1, #190	; 0xbe
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f002 f9c6 	bl	8003dd0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001a44:	9400      	str	r4, [sp, #0]
 8001a46:	4623      	mov	r3, r4
 8001a48:	aa0c      	add	r2, sp, #48	; 0x30
 8001a4a:	21bf      	movs	r1, #191	; 0xbf
 8001a4c:	4630      	mov	r0, r6
 8001a4e:	f002 fa7d 	bl	8003f4c <HAL_I2C_Master_Receive>
    T_C0=data[0];
 8001a52:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001a56:	4d9d      	ldr	r5, [pc, #628]	; (8001ccc <initHTS221+0x2c0>)
 8001a58:	602b      	str	r3, [r5, #0]

    //reading high temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMaxAddress,1,1);
 8001a5a:	9400      	str	r4, [sp, #0]
 8001a5c:	4623      	mov	r3, r4
 8001a5e:	aa0a      	add	r2, sp, #40	; 0x28
 8001a60:	21be      	movs	r1, #190	; 0xbe
 8001a62:	4630      	mov	r0, r6
 8001a64:	f002 f9b4 	bl	8003dd0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001a68:	9400      	str	r4, [sp, #0]
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	aa0c      	add	r2, sp, #48	; 0x30
 8001a6e:	21bf      	movs	r1, #191	; 0xbf
 8001a70:	4630      	mov	r0, r6
 8001a72:	f002 fa6b 	bl	8003f4c <HAL_I2C_Master_Receive>
    T_C1=data[0];
 8001a76:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001a7a:	606b      	str	r3, [r5, #4]

	uint8_t MSB_temp[]={0x35};
 8001a7c:	2335      	movs	r3, #53	; 0x35
 8001a7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MSB_temp,1,1);
 8001a82:	9400      	str	r4, [sp, #0]
 8001a84:	4623      	mov	r3, r4
 8001a86:	aa09      	add	r2, sp, #36	; 0x24
 8001a88:	21be      	movs	r1, #190	; 0xbe
 8001a8a:	4630      	mov	r0, r6
 8001a8c:	f002 f9a0 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001a90:	9400      	str	r4, [sp, #0]
 8001a92:	4623      	mov	r3, r4
 8001a94:	aa0c      	add	r2, sp, #48	; 0x30
 8001a96:	21bf      	movs	r1, #191	; 0xbf
 8001a98:	4630      	mov	r0, r6
 8001a9a:	f002 fa57 	bl	8003f4c <HAL_I2C_Master_Receive>

	T_C0|=((data[0]&0x03)<<8);
 8001a9e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001aa2:	021a      	lsls	r2, r3, #8
 8001aa4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001aa8:	6829      	ldr	r1, [r5, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	602a      	str	r2, [r5, #0]
	T_C1|=(((data[0]&0x0c)>>2)<<8);
 8001aae:	109b      	asrs	r3, r3, #2
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab6:	6869      	ldr	r1, [r5, #4]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	606b      	str	r3, [r5, #4]

	T_C0=T_C0>>3;
 8001abc:	10d2      	asrs	r2, r2, #3
 8001abe:	602a      	str	r2, [r5, #0]
	T_C1=T_C1>>3;
 8001ac0:	10db      	asrs	r3, r3, #3
 8001ac2:	606b      	str	r3, [r5, #4]

	uint8_t ADC0L[]={0x3c};
 8001ac4:	233c      	movs	r3, #60	; 0x3c
 8001ac6:	f88d 3020 	strb.w	r3, [sp, #32]
	uint8_t ADC0H[]={0x3d};
 8001aca:	233d      	movs	r3, #61	; 0x3d
 8001acc:	f88d 301c 	strb.w	r3, [sp, #28]
	//get the calibration adc min
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 8001ad0:	9400      	str	r4, [sp, #0]
 8001ad2:	4623      	mov	r3, r4
 8001ad4:	aa08      	add	r2, sp, #32
 8001ad6:	21be      	movs	r1, #190	; 0xbe
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f002 f979 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001ade:	9400      	str	r4, [sp, #0]
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	aa0c      	add	r2, sp, #48	; 0x30
 8001ae4:	21bf      	movs	r1, #191	; 0xbf
 8001ae6:	4630      	mov	r0, r6
 8001ae8:	f002 fa30 	bl	8003f4c <HAL_I2C_Master_Receive>
	T_C0_lsb=data[0];
 8001aec:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001af0:	812b      	strh	r3, [r5, #8]

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 8001af2:	9400      	str	r4, [sp, #0]
 8001af4:	4623      	mov	r3, r4
 8001af6:	aa07      	add	r2, sp, #28
 8001af8:	21be      	movs	r1, #190	; 0xbe
 8001afa:	4630      	mov	r0, r6
 8001afc:	f002 f968 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001b00:	9400      	str	r4, [sp, #0]
 8001b02:	4623      	mov	r3, r4
 8001b04:	aa0c      	add	r2, sp, #48	; 0x30
 8001b06:	21bf      	movs	r1, #191	; 0xbf
 8001b08:	4630      	mov	r0, r6
 8001b0a:	f002 fa1f 	bl	8003f4c <HAL_I2C_Master_Receive>
	T_C0_lsb|=data[0]<<8;
 8001b0e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001b12:	892b      	ldrh	r3, [r5, #8]
 8001b14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b18:	812b      	strh	r3, [r5, #8]


    uint8_t ADC1L[]={0x3e};
 8001b1a:	233e      	movs	r3, #62	; 0x3e
 8001b1c:	f88d 3018 	strb.w	r3, [sp, #24]
    uint8_t ADC1H[]={0x3f};
 8001b20:	233f      	movs	r3, #63	; 0x3f
 8001b22:	f88d 3014 	strb.w	r3, [sp, #20]
    //leggo temperatura
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 8001b26:	9400      	str	r4, [sp, #0]
 8001b28:	4623      	mov	r3, r4
 8001b2a:	aa06      	add	r2, sp, #24
 8001b2c:	21be      	movs	r1, #190	; 0xbe
 8001b2e:	4630      	mov	r0, r6
 8001b30:	f002 f94e 	bl	8003dd0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001b34:	9400      	str	r4, [sp, #0]
 8001b36:	4623      	mov	r3, r4
 8001b38:	aa0c      	add	r2, sp, #48	; 0x30
 8001b3a:	21bf      	movs	r1, #191	; 0xbf
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	f002 fa05 	bl	8003f4c <HAL_I2C_Master_Receive>
    T_C1_lsb=data[0];
 8001b42:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001b46:	816b      	strh	r3, [r5, #10]

    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 8001b48:	9400      	str	r4, [sp, #0]
 8001b4a:	4623      	mov	r3, r4
 8001b4c:	aa05      	add	r2, sp, #20
 8001b4e:	21be      	movs	r1, #190	; 0xbe
 8001b50:	4630      	mov	r0, r6
 8001b52:	f002 f93d 	bl	8003dd0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001b56:	9400      	str	r4, [sp, #0]
 8001b58:	4623      	mov	r3, r4
 8001b5a:	aa0c      	add	r2, sp, #48	; 0x30
 8001b5c:	21bf      	movs	r1, #191	; 0xbf
 8001b5e:	4630      	mov	r0, r6
 8001b60:	f002 f9f4 	bl	8003f4c <HAL_I2C_Master_Receive>
    T_C1_lsb|=data[0]<<8;
 8001b64:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001b68:	896b      	ldrh	r3, [r5, #10]
 8001b6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	816b      	strh	r3, [r5, #10]

    m=((float)(T_C1-T_C0))/((float)(T_C1_lsb-T_C0_lsb));
 8001b72:	686a      	ldr	r2, [r5, #4]
 8001b74:	6829      	ldr	r1, [r5, #0]
 8001b76:	1a52      	subs	r2, r2, r1
 8001b78:	ee07 2a90 	vmov	s15, r2
 8001b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b80:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b92:	edc5 6a03 	vstr	s13, [r5, #12]


    uint8_t HumMinAddress[]={0x30};
 8001b96:	2330      	movs	r3, #48	; 0x30
 8001b98:	f88d 3010 	strb.w	r3, [sp, #16]
     uint8_t HumMaxAddress[]={0x31};
 8001b9c:	2331      	movs	r3, #49	; 0x31
 8001b9e:	f88d 300c 	strb.w	r3, [sp, #12]
     //reading low temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMinAddress,1,1);
 8001ba2:	9400      	str	r4, [sp, #0]
 8001ba4:	4623      	mov	r3, r4
 8001ba6:	aa04      	add	r2, sp, #16
 8001ba8:	21be      	movs	r1, #190	; 0xbe
 8001baa:	4630      	mov	r0, r6
 8001bac:	f002 f910 	bl	8003dd0 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001bb0:	9400      	str	r4, [sp, #0]
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	aa0c      	add	r2, sp, #48	; 0x30
 8001bb6:	21bf      	movs	r1, #191	; 0xbf
 8001bb8:	4630      	mov	r0, r6
 8001bba:	f002 f9c7 	bl	8003f4c <HAL_I2C_Master_Receive>
     H_0=data[0];
 8001bbe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001bc2:	742b      	strb	r3, [r5, #16]

     //reading high temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMaxAddress,1,1);
 8001bc4:	9400      	str	r4, [sp, #0]
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	aa03      	add	r2, sp, #12
 8001bca:	21be      	movs	r1, #190	; 0xbe
 8001bcc:	4630      	mov	r0, r6
 8001bce:	f002 f8ff 	bl	8003dd0 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001bd2:	9400      	str	r4, [sp, #0]
 8001bd4:	4623      	mov	r3, r4
 8001bd6:	aa0c      	add	r2, sp, #48	; 0x30
 8001bd8:	21bf      	movs	r1, #191	; 0xbf
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f002 f9b6 	bl	8003f4c <HAL_I2C_Master_Receive>
     H_1=data[0];
 8001be0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001be4:	746b      	strb	r3, [r5, #17]


 	H_0=H_0>>1;
 8001be6:	7c2a      	ldrb	r2, [r5, #16]
 8001be8:	40e2      	lsrs	r2, r4
 8001bea:	742a      	strb	r2, [r5, #16]
 	H_1=H_1>>1;
 8001bec:	40e3      	lsrs	r3, r4
 8001bee:	746b      	strb	r3, [r5, #17]

 	ADC0L[0]=0x36;
 8001bf0:	2336      	movs	r3, #54	; 0x36
 8001bf2:	f88d 3020 	strb.w	r3, [sp, #32]
 	ADC0H[0]=0x37;
 8001bf6:	2337      	movs	r3, #55	; 0x37
 8001bf8:	f88d 301c 	strb.w	r3, [sp, #28]
 	//get the calibration adc min
 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 8001bfc:	9400      	str	r4, [sp, #0]
 8001bfe:	4623      	mov	r3, r4
 8001c00:	aa08      	add	r2, sp, #32
 8001c02:	21be      	movs	r1, #190	; 0xbe
 8001c04:	4630      	mov	r0, r6
 8001c06:	f002 f8e3 	bl	8003dd0 <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001c0a:	9400      	str	r4, [sp, #0]
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	aa0c      	add	r2, sp, #48	; 0x30
 8001c10:	21bf      	movs	r1, #191	; 0xbf
 8001c12:	4630      	mov	r0, r6
 8001c14:	f002 f99a 	bl	8003f4c <HAL_I2C_Master_Receive>
 	H_0_lsb=data[0];
 8001c18:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001c1c:	826b      	strh	r3, [r5, #18]

 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 8001c1e:	9400      	str	r4, [sp, #0]
 8001c20:	4623      	mov	r3, r4
 8001c22:	aa07      	add	r2, sp, #28
 8001c24:	21be      	movs	r1, #190	; 0xbe
 8001c26:	4630      	mov	r0, r6
 8001c28:	f002 f8d2 	bl	8003dd0 <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001c2c:	9400      	str	r4, [sp, #0]
 8001c2e:	4623      	mov	r3, r4
 8001c30:	aa0c      	add	r2, sp, #48	; 0x30
 8001c32:	21bf      	movs	r1, #191	; 0xbf
 8001c34:	4630      	mov	r0, r6
 8001c36:	f002 f989 	bl	8003f4c <HAL_I2C_Master_Receive>
 	H_0_lsb|=data[0]<<8;
 8001c3a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001c3e:	8a6b      	ldrh	r3, [r5, #18]
 8001c40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c44:	826b      	strh	r3, [r5, #18]


    ADC1L[0]=0x3a;
 8001c46:	233a      	movs	r3, #58	; 0x3a
 8001c48:	f88d 3018 	strb.w	r3, [sp, #24]
    ADC1H[0]=0x3b;
 8001c4c:	233b      	movs	r3, #59	; 0x3b
 8001c4e:	f88d 3014 	strb.w	r3, [sp, #20]
     //leggo temperatura
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 8001c52:	9400      	str	r4, [sp, #0]
 8001c54:	4623      	mov	r3, r4
 8001c56:	aa06      	add	r2, sp, #24
 8001c58:	21be      	movs	r1, #190	; 0xbe
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	f002 f8b8 	bl	8003dd0 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001c60:	9400      	str	r4, [sp, #0]
 8001c62:	4623      	mov	r3, r4
 8001c64:	aa0c      	add	r2, sp, #48	; 0x30
 8001c66:	21bf      	movs	r1, #191	; 0xbf
 8001c68:	4630      	mov	r0, r6
 8001c6a:	f002 f96f 	bl	8003f4c <HAL_I2C_Master_Receive>
     H_1_lsb=data[0];
 8001c6e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001c72:	82ab      	strh	r3, [r5, #20]

     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 8001c74:	9400      	str	r4, [sp, #0]
 8001c76:	4623      	mov	r3, r4
 8001c78:	aa05      	add	r2, sp, #20
 8001c7a:	21be      	movs	r1, #190	; 0xbe
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	f002 f8a7 	bl	8003dd0 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001c82:	9400      	str	r4, [sp, #0]
 8001c84:	4623      	mov	r3, r4
 8001c86:	aa0c      	add	r2, sp, #48	; 0x30
 8001c88:	21bf      	movs	r1, #191	; 0xbf
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f002 f95e 	bl	8003f4c <HAL_I2C_Master_Receive>
     H_1_lsb|=data[0]<<8;
 8001c90:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001c94:	8aab      	ldrh	r3, [r5, #20]
 8001c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	82ab      	strh	r3, [r5, #20]

     mh=((float)(H_1-H_0))/((float)(H_1_lsb-H_0_lsb));
 8001c9e:	7c6a      	ldrb	r2, [r5, #17]
 8001ca0:	7c29      	ldrb	r1, [r5, #16]
 8001ca2:	1a52      	subs	r2, r2, r1
 8001ca4:	ee07 2a90 	vmov	s15, r2
 8001ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cac:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cbe:	edc5 6a06 	vstr	s13, [r5, #24]



}
 8001cc2:	b00e      	add	sp, #56	; 0x38
 8001cc4:	bd70      	pop	{r4, r5, r6, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000828 	.word	0x20000828
 8001ccc:	20000990 	.word	0x20000990

08001cd0 <getHumidity>:

void getHumidity(float *humidity){
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	4607      	mov	r7, r0

    uint8_t humL[]={0x28};
 8001cd6:	2328      	movs	r3, #40	; 0x28
 8001cd8:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t humH[]={0x29};
 8001cdc:	2329      	movs	r3, #41	; 0x29
 8001cde:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t hum;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humL,1,1);
 8001ce2:	4e1c      	ldr	r6, [pc, #112]	; (8001d54 <getHumidity+0x84>)
 8001ce4:	2401      	movs	r4, #1
 8001ce6:	9400      	str	r4, [sp, #0]
 8001ce8:	4623      	mov	r3, r4
 8001cea:	aa05      	add	r2, sp, #20
 8001cec:	21be      	movs	r1, #190	; 0xbe
 8001cee:	4630      	mov	r0, r6
 8001cf0:	f002 f86e 	bl	8003dd0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001cf4:	9400      	str	r4, [sp, #0]
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	aa03      	add	r2, sp, #12
 8001cfa:	21bf      	movs	r1, #191	; 0xbf
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	f002 f925 	bl	8003f4c <HAL_I2C_Master_Receive>
    hum=data[0];
 8001d02:	f89d 500c 	ldrb.w	r5, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humH,1,1);
 8001d06:	9400      	str	r4, [sp, #0]
 8001d08:	4623      	mov	r3, r4
 8001d0a:	aa04      	add	r2, sp, #16
 8001d0c:	21be      	movs	r1, #190	; 0xbe
 8001d0e:	4630      	mov	r0, r6
 8001d10:	f002 f85e 	bl	8003dd0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001d14:	9400      	str	r4, [sp, #0]
 8001d16:	4623      	mov	r3, r4
 8001d18:	aa03      	add	r2, sp, #12
 8001d1a:	21bf      	movs	r1, #191	; 0xbf
 8001d1c:	4630      	mov	r0, r6
 8001d1e:	f002 f915 	bl	8003f4c <HAL_I2C_Master_Receive>
    hum|=data[0]<<1;
 8001d22:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001d26:	ea45 0343 	orr.w	r3, r5, r3, lsl #1
 8001d2a:	ee07 3a90 	vmov	s15, r3

    *humidity=H_0+mh*hum;
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <getHumidity+0x88>)
 8001d34:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3c:	7c1b      	ldrb	r3, [r3, #16]
 8001d3e:	ee07 3a10 	vmov	s14, r3
 8001d42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4a:	edc7 7a00 	vstr	s15, [r7]

}
 8001d4e:	b007      	add	sp, #28
 8001d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000828 	.word	0x20000828
 8001d58:	20000990 	.word	0x20000990

08001d5c <getTemperature>:



void getTemperature(float *temperature){
 8001d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	4607      	mov	r7, r0

    uint8_t tempL[]={0x2A};
 8001d62:	232a      	movs	r3, #42	; 0x2a
 8001d64:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t tempH[]={0x2B};
 8001d68:	232b      	movs	r3, #43	; 0x2b
 8001d6a:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t temp;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempL,1,1);
 8001d6e:	4e1c      	ldr	r6, [pc, #112]	; (8001de0 <getTemperature+0x84>)
 8001d70:	2501      	movs	r5, #1
 8001d72:	9500      	str	r5, [sp, #0]
 8001d74:	462b      	mov	r3, r5
 8001d76:	aa05      	add	r2, sp, #20
 8001d78:	21be      	movs	r1, #190	; 0xbe
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f002 f828 	bl	8003dd0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001d80:	9500      	str	r5, [sp, #0]
 8001d82:	462b      	mov	r3, r5
 8001d84:	aa03      	add	r2, sp, #12
 8001d86:	21bf      	movs	r1, #191	; 0xbf
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f002 f8df 	bl	8003f4c <HAL_I2C_Master_Receive>
    temp=data[0];
 8001d8e:	f89d 400c 	ldrb.w	r4, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempH,1,1);
 8001d92:	9500      	str	r5, [sp, #0]
 8001d94:	462b      	mov	r3, r5
 8001d96:	aa04      	add	r2, sp, #16
 8001d98:	21be      	movs	r1, #190	; 0xbe
 8001d9a:	4630      	mov	r0, r6
 8001d9c:	f002 f818 	bl	8003dd0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001da0:	9500      	str	r5, [sp, #0]
 8001da2:	462b      	mov	r3, r5
 8001da4:	aa03      	add	r2, sp, #12
 8001da6:	21bf      	movs	r1, #191	; 0xbf
 8001da8:	4630      	mov	r0, r6
 8001daa:	f002 f8cf 	bl	8003f4c <HAL_I2C_Master_Receive>
    temp|=data[0]<<8;
 8001dae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001db2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001db6:	b224      	sxth	r4, r4

    *temperature=T_C0+m*temp;
 8001db8:	ee07 4a90 	vmov	s15, r4
 8001dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <getTemperature+0x88>)
 8001dc2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd6:	edc7 7a00 	vstr	s15, [r7]

}
 8001dda:	b007      	add	sp, #28
 8001ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000828 	.word	0x20000828
 8001de4:	20000990 	.word	0x20000990

08001de8 <startToF>:


void startToF(){
 8001de8:	b500      	push	{lr}
 8001dea:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x52;
	 uint8_t turnOn[]={0x00,0x01};
 8001dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df0:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001df4:	2301      	movs	r3, #1
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	aa03      	add	r2, sp, #12
 8001dfc:	2152      	movs	r1, #82	; 0x52
 8001dfe:	4803      	ldr	r0, [pc, #12]	; (8001e0c <startToF+0x24>)
 8001e00:	f001 ffe6 	bl	8003dd0 <HAL_I2C_Master_Transmit>
}
 8001e04:	b005      	add	sp, #20
 8001e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e0a:	bf00      	nop
 8001e0c:	20000828 	.word	0x20000828

08001e10 <getDistance>:

void getDistance(int *distance){
 8001e10:	b570      	push	{r4, r5, r6, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	4604      	mov	r4, r0
	 uint8_t addressWrite=0x52;
	  uint8_t addressRead=0x53;
	  uint8_t resultAddress[]={0x1e};
 8001e16:	231e      	movs	r3, #30
 8001e18:	f88d 300c 	strb.w	r3, [sp, #12]
	  uint8_t rawData[]={0,0};
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8ad 3008 	strh.w	r3, [sp, #8]

	  HAL_I2C_Master_Transmit(&hi2c2,addressWrite,resultAddress,1,1);
 8001e22:	4e13      	ldr	r6, [pc, #76]	; (8001e70 <getDistance+0x60>)
 8001e24:	2501      	movs	r5, #1
 8001e26:	9500      	str	r5, [sp, #0]
 8001e28:	462b      	mov	r3, r5
 8001e2a:	aa03      	add	r2, sp, #12
 8001e2c:	2152      	movs	r1, #82	; 0x52
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f001 ffce 	bl	8003dd0 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2,addressRead,rawData,2,1);
 8001e34:	9500      	str	r5, [sp, #0]
 8001e36:	2302      	movs	r3, #2
 8001e38:	aa02      	add	r2, sp, #8
 8001e3a:	2153      	movs	r1, #83	; 0x53
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	f002 f885 	bl	8003f4c <HAL_I2C_Master_Receive>
	  *distance=(rawData[0]<<8)+rawData[1]-20;
 8001e42:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001e46:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001e4a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001e4e:	3b14      	subs	r3, #20
 8001e50:	6023      	str	r3, [r4, #0]

	  if(*distance<0){
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db08      	blt.n	8001e68 <getDistance+0x58>
		  *distance=0;
	  }
	  if(*distance>2000){
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e5c:	dd02      	ble.n	8001e64 <getDistance+0x54>
		  *distance=2000;
 8001e5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e62:	6023      	str	r3, [r4, #0]
	  }
}
 8001e64:	b004      	add	sp, #16
 8001e66:	bd70      	pop	{r4, r5, r6, pc}
		  *distance=0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6023      	str	r3, [r4, #0]
 8001e6c:	e7f3      	b.n	8001e56 <getDistance+0x46>
 8001e6e:	bf00      	nop
 8001e70:	20000828 	.word	0x20000828

08001e74 <init_accelerometer>:



void init_accelerometer(){
 8001e74:	b500      	push	{lr}
 8001e76:	b085      	sub	sp, #20

	 uint8_t addressWrite=0xd4;
	 uint8_t turnOn[]={0x10,0x10};
 8001e78:	f241 0310 	movw	r3, #4112	; 0x1010
 8001e7c:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001e80:	2301      	movs	r3, #1
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2302      	movs	r3, #2
 8001e86:	aa03      	add	r2, sp, #12
 8001e88:	21d4      	movs	r1, #212	; 0xd4
 8001e8a:	4803      	ldr	r0, [pc, #12]	; (8001e98 <init_accelerometer+0x24>)
 8001e8c:	f001 ffa0 	bl	8003dd0 <HAL_I2C_Master_Transmit>


	}
 8001e90:	b005      	add	sp, #20
 8001e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e96:	bf00      	nop
 8001e98:	20000828 	.word	0x20000828

08001e9c <getAxisAccelerometer>:


void getAxisAccelerometer(int16_t *accx, int16_t *accy, int16_t *accz){
 8001e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	4680      	mov	r8, r0
 8001ea4:	460f      	mov	r7, r1
 8001ea6:	4616      	mov	r6, r2
	 uint8_t ACCcmd[1];
	 uint8_t ACCread[1];


	   //ACC X
	   ACCcmd[0]=0x28;
 8001ea8:	2328      	movs	r3, #40	; 0x28
 8001eaa:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001eae:	4d4f      	ldr	r5, [pc, #316]	; (8001fec <getAxisAccelerometer+0x150>)
 8001eb0:	2401      	movs	r4, #1
 8001eb2:	9400      	str	r4, [sp, #0]
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	aa03      	add	r2, sp, #12
 8001eb8:	21d4      	movs	r1, #212	; 0xd4
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f001 ff88 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001ec0:	9400      	str	r4, [sp, #0]
 8001ec2:	4623      	mov	r3, r4
 8001ec4:	aa02      	add	r2, sp, #8
 8001ec6:	21d5      	movs	r1, #213	; 0xd5
 8001ec8:	4628      	mov	r0, r5
 8001eca:	f002 f83f 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *accx=ACCread[0];
 8001ece:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001ed2:	f8a8 3000 	strh.w	r3, [r8]

	   ACCcmd[0]=0x29;
 8001ed6:	2329      	movs	r3, #41	; 0x29
 8001ed8:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001edc:	9400      	str	r4, [sp, #0]
 8001ede:	4623      	mov	r3, r4
 8001ee0:	aa03      	add	r2, sp, #12
 8001ee2:	21d4      	movs	r1, #212	; 0xd4
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f001 ff73 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001eea:	9400      	str	r4, [sp, #0]
 8001eec:	4623      	mov	r3, r4
 8001eee:	aa02      	add	r2, sp, #8
 8001ef0:	21d5      	movs	r1, #213	; 0xd5
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	f002 f82a 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *accx|=((ACCread[0])<<8);
 8001ef8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001efc:	f8b8 3000 	ldrh.w	r3, [r8]
 8001f00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f04:	f8a8 3000 	strh.w	r3, [r8]



	   //ACC Y

	   ACCcmd[0]=0x2a;
 8001f08:	232a      	movs	r3, #42	; 0x2a
 8001f0a:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001f0e:	9400      	str	r4, [sp, #0]
 8001f10:	4623      	mov	r3, r4
 8001f12:	aa03      	add	r2, sp, #12
 8001f14:	21d4      	movs	r1, #212	; 0xd4
 8001f16:	4628      	mov	r0, r5
 8001f18:	f001 ff5a 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001f1c:	9400      	str	r4, [sp, #0]
 8001f1e:	4623      	mov	r3, r4
 8001f20:	aa02      	add	r2, sp, #8
 8001f22:	21d5      	movs	r1, #213	; 0xd5
 8001f24:	4628      	mov	r0, r5
 8001f26:	f002 f811 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *accy=ACCread[0];
 8001f2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001f2e:	803b      	strh	r3, [r7, #0]

	   ACCcmd[0]=0x2b;
 8001f30:	232b      	movs	r3, #43	; 0x2b
 8001f32:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001f36:	9400      	str	r4, [sp, #0]
 8001f38:	4623      	mov	r3, r4
 8001f3a:	aa03      	add	r2, sp, #12
 8001f3c:	21d4      	movs	r1, #212	; 0xd4
 8001f3e:	4628      	mov	r0, r5
 8001f40:	f001 ff46 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001f44:	9400      	str	r4, [sp, #0]
 8001f46:	4623      	mov	r3, r4
 8001f48:	aa02      	add	r2, sp, #8
 8001f4a:	21d5      	movs	r1, #213	; 0xd5
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	f001 fffd 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *accy|=((ACCread[0])<<8);
 8001f52:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001f56:	883b      	ldrh	r3, [r7, #0]
 8001f58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f5c:	803b      	strh	r3, [r7, #0]



	   //ACC Z

	   ACCcmd[0]=0x2c;
 8001f5e:	232c      	movs	r3, #44	; 0x2c
 8001f60:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001f64:	9400      	str	r4, [sp, #0]
 8001f66:	4623      	mov	r3, r4
 8001f68:	aa03      	add	r2, sp, #12
 8001f6a:	21d4      	movs	r1, #212	; 0xd4
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f001 ff2f 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001f72:	9400      	str	r4, [sp, #0]
 8001f74:	4623      	mov	r3, r4
 8001f76:	aa02      	add	r2, sp, #8
 8001f78:	21d5      	movs	r1, #213	; 0xd5
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	f001 ffe6 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *accz=ACCread[0];
 8001f80:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001f84:	8033      	strh	r3, [r6, #0]

	   ACCcmd[0]=0x2d;
 8001f86:	232d      	movs	r3, #45	; 0x2d
 8001f88:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001f8c:	9400      	str	r4, [sp, #0]
 8001f8e:	4623      	mov	r3, r4
 8001f90:	aa03      	add	r2, sp, #12
 8001f92:	21d4      	movs	r1, #212	; 0xd4
 8001f94:	4628      	mov	r0, r5
 8001f96:	f001 ff1b 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001f9a:	9400      	str	r4, [sp, #0]
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	aa02      	add	r2, sp, #8
 8001fa0:	21d5      	movs	r1, #213	; 0xd5
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f001 ffd2 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *accz|=((ACCread[0])<<8);
 8001fa8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001fac:	8833      	ldrh	r3, [r6, #0]
 8001fae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fb2:	8033      	strh	r3, [r6, #0]

	   *accx=*accx/16;
 8001fb4:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db11      	blt.n	8001fe0 <getAxisAccelerometer+0x144>
 8001fbc:	111b      	asrs	r3, r3, #4
 8001fbe:	f8a8 3000 	strh.w	r3, [r8]
	   *accy=*accy/16;
 8001fc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0c      	blt.n	8001fe4 <getAxisAccelerometer+0x148>
 8001fca:	111b      	asrs	r3, r3, #4
 8001fcc:	803b      	strh	r3, [r7, #0]
	   *accz=*accz/16;
 8001fce:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db08      	blt.n	8001fe8 <getAxisAccelerometer+0x14c>
 8001fd6:	111b      	asrs	r3, r3, #4
 8001fd8:	8033      	strh	r3, [r6, #0]



}
 8001fda:	b004      	add	sp, #16
 8001fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *accx=*accx/16;
 8001fe0:	330f      	adds	r3, #15
 8001fe2:	e7eb      	b.n	8001fbc <getAxisAccelerometer+0x120>
	   *accy=*accy/16;
 8001fe4:	330f      	adds	r3, #15
 8001fe6:	e7f0      	b.n	8001fca <getAxisAccelerometer+0x12e>
	   *accz=*accz/16;
 8001fe8:	330f      	adds	r3, #15
 8001fea:	e7f4      	b.n	8001fd6 <getAxisAccelerometer+0x13a>
 8001fec:	20000828 	.word	0x20000828

08001ff0 <init_magnetometer>:
	counter++;
	}
	return counter;
}

void init_magnetometer(){
 8001ff0:	b500      	push	{lr}
 8001ff2:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x3c;
	 uint8_t turnOn[]={0x22,0x00};
 8001ff4:	2322      	movs	r3, #34	; 0x22
 8001ff6:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2302      	movs	r3, #2
 8002000:	aa03      	add	r2, sp, #12
 8002002:	213c      	movs	r1, #60	; 0x3c
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <init_magnetometer+0x20>)
 8002006:	f001 fee3 	bl	8003dd0 <HAL_I2C_Master_Transmit>


}
 800200a:	b005      	add	sp, #20
 800200c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002010:	20000828 	.word	0x20000828

08002014 <getAxisMagnetometer>:


void getAxisMagnetometer(int16_t *magx, int16_t *magy, int16_t *magz){
 8002014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	4680      	mov	r8, r0
 800201c:	460f      	mov	r7, r1
 800201e:	4616      	mov	r6, r2

	 uint8_t MAGcmd[1];
	 uint8_t MAGread[1];

	   //MAG X
	   MAGcmd[0]=0x28;
 8002020:	2328      	movs	r3, #40	; 0x28
 8002022:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8002026:	4d4f      	ldr	r5, [pc, #316]	; (8002164 <getAxisMagnetometer+0x150>)
 8002028:	2401      	movs	r4, #1
 800202a:	9400      	str	r4, [sp, #0]
 800202c:	4623      	mov	r3, r4
 800202e:	aa03      	add	r2, sp, #12
 8002030:	213c      	movs	r1, #60	; 0x3c
 8002032:	4628      	mov	r0, r5
 8002034:	f001 fecc 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8002038:	9400      	str	r4, [sp, #0]
 800203a:	4623      	mov	r3, r4
 800203c:	aa02      	add	r2, sp, #8
 800203e:	213d      	movs	r1, #61	; 0x3d
 8002040:	4628      	mov	r0, r5
 8002042:	f001 ff83 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *magx=MAGread[0];
 8002046:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800204a:	f8a8 3000 	strh.w	r3, [r8]

	   MAGcmd[0]=0x29;
 800204e:	2329      	movs	r3, #41	; 0x29
 8002050:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8002054:	9400      	str	r4, [sp, #0]
 8002056:	4623      	mov	r3, r4
 8002058:	aa03      	add	r2, sp, #12
 800205a:	213c      	movs	r1, #60	; 0x3c
 800205c:	4628      	mov	r0, r5
 800205e:	f001 feb7 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8002062:	9400      	str	r4, [sp, #0]
 8002064:	4623      	mov	r3, r4
 8002066:	aa02      	add	r2, sp, #8
 8002068:	213d      	movs	r1, #61	; 0x3d
 800206a:	4628      	mov	r0, r5
 800206c:	f001 ff6e 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *magx|=((MAGread[0])<<8);
 8002070:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002074:	f8b8 3000 	ldrh.w	r3, [r8]
 8002078:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800207c:	f8a8 3000 	strh.w	r3, [r8]

	   //MAG Y
	   MAGcmd[0]=0x2a;
 8002080:	232a      	movs	r3, #42	; 0x2a
 8002082:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8002086:	9400      	str	r4, [sp, #0]
 8002088:	4623      	mov	r3, r4
 800208a:	aa03      	add	r2, sp, #12
 800208c:	213c      	movs	r1, #60	; 0x3c
 800208e:	4628      	mov	r0, r5
 8002090:	f001 fe9e 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8002094:	9400      	str	r4, [sp, #0]
 8002096:	4623      	mov	r3, r4
 8002098:	aa02      	add	r2, sp, #8
 800209a:	213d      	movs	r1, #61	; 0x3d
 800209c:	4628      	mov	r0, r5
 800209e:	f001 ff55 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *magy=MAGread[0];
 80020a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80020a6:	803b      	strh	r3, [r7, #0]

	   MAGcmd[0]=0x2b;
 80020a8:	232b      	movs	r3, #43	; 0x2b
 80020aa:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80020ae:	9400      	str	r4, [sp, #0]
 80020b0:	4623      	mov	r3, r4
 80020b2:	aa03      	add	r2, sp, #12
 80020b4:	213c      	movs	r1, #60	; 0x3c
 80020b6:	4628      	mov	r0, r5
 80020b8:	f001 fe8a 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80020bc:	9400      	str	r4, [sp, #0]
 80020be:	4623      	mov	r3, r4
 80020c0:	aa02      	add	r2, sp, #8
 80020c2:	213d      	movs	r1, #61	; 0x3d
 80020c4:	4628      	mov	r0, r5
 80020c6:	f001 ff41 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *magy|=((MAGread[0])<<8);
 80020ca:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80020ce:	883b      	ldrh	r3, [r7, #0]
 80020d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020d4:	803b      	strh	r3, [r7, #0]

	   //MAG Z
	   MAGcmd[0]=0x2c;
 80020d6:	232c      	movs	r3, #44	; 0x2c
 80020d8:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80020dc:	9400      	str	r4, [sp, #0]
 80020de:	4623      	mov	r3, r4
 80020e0:	aa03      	add	r2, sp, #12
 80020e2:	213c      	movs	r1, #60	; 0x3c
 80020e4:	4628      	mov	r0, r5
 80020e6:	f001 fe73 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80020ea:	9400      	str	r4, [sp, #0]
 80020ec:	4623      	mov	r3, r4
 80020ee:	aa02      	add	r2, sp, #8
 80020f0:	213d      	movs	r1, #61	; 0x3d
 80020f2:	4628      	mov	r0, r5
 80020f4:	f001 ff2a 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *magz=MAGread[0];
 80020f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80020fc:	8033      	strh	r3, [r6, #0]

	   MAGcmd[0]=0x2d;
 80020fe:	232d      	movs	r3, #45	; 0x2d
 8002100:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8002104:	9400      	str	r4, [sp, #0]
 8002106:	4623      	mov	r3, r4
 8002108:	aa03      	add	r2, sp, #12
 800210a:	213c      	movs	r1, #60	; 0x3c
 800210c:	4628      	mov	r0, r5
 800210e:	f001 fe5f 	bl	8003dd0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8002112:	9400      	str	r4, [sp, #0]
 8002114:	4623      	mov	r3, r4
 8002116:	aa02      	add	r2, sp, #8
 8002118:	213d      	movs	r1, #61	; 0x3d
 800211a:	4628      	mov	r0, r5
 800211c:	f001 ff16 	bl	8003f4c <HAL_I2C_Master_Receive>
	   *magz|=((MAGread[0])<<8);
 8002120:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002124:	8833      	ldrh	r3, [r6, #0]
 8002126:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800212a:	8033      	strh	r3, [r6, #0]

	   *magx=*magx/8;
 800212c:	f9b8 3000 	ldrsh.w	r3, [r8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db11      	blt.n	8002158 <getAxisMagnetometer+0x144>
 8002134:	10db      	asrs	r3, r3, #3
 8002136:	f8a8 3000 	strh.w	r3, [r8]
	   *magy=*magy/8;
 800213a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	db0c      	blt.n	800215c <getAxisMagnetometer+0x148>
 8002142:	10db      	asrs	r3, r3, #3
 8002144:	803b      	strh	r3, [r7, #0]
	   *magz=*magz/8;
 8002146:	f9b6 3000 	ldrsh.w	r3, [r6]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db08      	blt.n	8002160 <getAxisMagnetometer+0x14c>
 800214e:	10db      	asrs	r3, r3, #3
 8002150:	8033      	strh	r3, [r6, #0]



}
 8002152:	b004      	add	sp, #16
 8002154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *magx=*magx/8;
 8002158:	3307      	adds	r3, #7
 800215a:	e7eb      	b.n	8002134 <getAxisMagnetometer+0x120>
	   *magy=*magy/8;
 800215c:	3307      	adds	r3, #7
 800215e:	e7f0      	b.n	8002142 <getAxisMagnetometer+0x12e>
	   *magz=*magz/8;
 8002160:	3307      	adds	r3, #7
 8002162:	e7f4      	b.n	800214e <getAxisMagnetometer+0x13a>
 8002164:	20000828 	.word	0x20000828

08002168 <startup_enter>:




void startup_enter()
{
 8002168:	b510      	push	{r4, lr}
 800216a:	ed2d 8b04 	vpush	{d8-d9}
    setMappedFunction(MF_Button, GPIOC, GPIO_PIN_13, 0, 1);
 800216e:	ed9f 9b52 	vldr	d9, [pc, #328]	; 80022b8 <startup_enter+0x150>
 8002172:	ed9f 8b53 	vldr	d8, [pc, #332]	; 80022c0 <startup_enter+0x158>
 8002176:	4c54      	ldr	r4, [pc, #336]	; (80022c8 <startup_enter+0x160>)
 8002178:	eeb0 1a49 	vmov.f32	s2, s18
 800217c:	eef0 1a69 	vmov.f32	s3, s19
 8002180:	eeb0 0a48 	vmov.f32	s0, s16
 8002184:	eef0 0a68 	vmov.f32	s1, s17
 8002188:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218c:	4621      	mov	r1, r4
 800218e:	2001      	movs	r0, #1
 8002190:	f7ff f984 	bl	800149c <setMappedFunction>
    setMappedFunction(MF_led1, GPIOA, GPIO_PIN_5, 0, 1);
 8002194:	eeb0 1a49 	vmov.f32	s2, s18
 8002198:	eef0 1a69 	vmov.f32	s3, s19
 800219c:	eeb0 0a48 	vmov.f32	s0, s16
 80021a0:	eef0 0a68 	vmov.f32	s1, s17
 80021a4:	2220      	movs	r2, #32
 80021a6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80021aa:	2002      	movs	r0, #2
 80021ac:	f7ff f976 	bl	800149c <setMappedFunction>
    setMappedFunction(MF_led2, GPIOB, GPIO_PIN_14, 0, 1);
 80021b0:	eeb0 1a49 	vmov.f32	s2, s18
 80021b4:	eef0 1a69 	vmov.f32	s3, s19
 80021b8:	eeb0 0a48 	vmov.f32	s0, s16
 80021bc:	eef0 0a68 	vmov.f32	s1, s17
 80021c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021c4:	4941      	ldr	r1, [pc, #260]	; (80022cc <startup_enter+0x164>)
 80021c6:	2003      	movs	r0, #3
 80021c8:	f7ff f968 	bl	800149c <setMappedFunction>
    setMappedFunction(MF_BleInt, GPIOE, GPIO_PIN_6, 0, 1);
 80021cc:	eeb0 1a49 	vmov.f32	s2, s18
 80021d0:	eef0 1a69 	vmov.f32	s3, s19
 80021d4:	eeb0 0a48 	vmov.f32	s0, s16
 80021d8:	eef0 0a68 	vmov.f32	s1, s17
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	493c      	ldr	r1, [pc, #240]	; (80022d0 <startup_enter+0x168>)
 80021e0:	2004      	movs	r0, #4
 80021e2:	f7ff f95b 	bl	800149c <setMappedFunction>
    setMappedFunction(MF_BleCS, GPIOD, GPIO_PIN_13, 0, 1);
 80021e6:	eeb0 1a49 	vmov.f32	s2, s18
 80021ea:	eef0 1a69 	vmov.f32	s3, s19
 80021ee:	eeb0 0a48 	vmov.f32	s0, s16
 80021f2:	eef0 0a68 	vmov.f32	s1, s17
 80021f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021fa:	4936      	ldr	r1, [pc, #216]	; (80022d4 <startup_enter+0x16c>)
 80021fc:	2005      	movs	r0, #5
 80021fe:	f7ff f94d 	bl	800149c <setMappedFunction>
    setMappedFunction(MF_BleReset, GPIOA, GPIO_PIN_8, 0, 1);
 8002202:	eeb0 1a49 	vmov.f32	s2, s18
 8002206:	eef0 1a69 	vmov.f32	s3, s19
 800220a:	eeb0 0a48 	vmov.f32	s0, s16
 800220e:	eef0 0a68 	vmov.f32	s1, s17
 8002212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002216:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800221a:	2006      	movs	r0, #6
 800221c:	f7ff f93e 	bl	800149c <setMappedFunction>
	setMappedFunction(MF_TOF, GPIOC, GPIO_PIN_8, 0, 1);
 8002220:	eeb0 1a49 	vmov.f32	s2, s18
 8002224:	eef0 1a69 	vmov.f32	s3, s19
 8002228:	eeb0 0a48 	vmov.f32	s0, s16
 800222c:	eef0 0a68 	vmov.f32	s1, s17
 8002230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002234:	4621      	mov	r1, r4
 8002236:	2007      	movs	r0, #7
 8002238:	f7ff f930 	bl	800149c <setMappedFunction>


    initTimers();
 800223c:	f000 fb3c 	bl	80028b8 <initTimers>

    uart_init();
 8002240:	f000 fbca 	bl	80029d8 <uart_init>

    bspFunctionInit();
 8002244:	f7ff f90c 	bl	8001460 <bspFunctionInit>

    setDigital(MF_led2, GPIO_PIN_RESET);
 8002248:	2100      	movs	r1, #0
 800224a:	2003      	movs	r0, #3
 800224c:	f7ff f938 	bl	80014c0 <setDigital>

    setStateTimeout(ST_IDLE,200);
 8002250:	22c8      	movs	r2, #200	; 0xc8
 8002252:	2300      	movs	r3, #0
 8002254:	2002      	movs	r0, #2
 8002256:	f000 f8a5 	bl	80023a4 <setStateTimeout>

    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002264:	f001 fb6d 	bl	8003942 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002268:	200a      	movs	r0, #10
 800226a:	f001 f95f 	bl	800352c <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f001 fb63 	bl	8003942 <HAL_GPIO_WritePin>

	ble_init();
 800227c:	f7fe fcaa 	bl	8000bd4 <ble_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(TOF_RESET_GPIO_Port,TOF_RESET_Pin,GPIO_PIN_SET);
 8002280:	2201      	movs	r2, #1
 8002282:	2140      	movs	r1, #64	; 0x40
 8002284:	4620      	mov	r0, r4
 8002286:	f001 fb5c 	bl	8003942 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800228a:	200a      	movs	r0, #10
 800228c:	f001 f94e 	bl	800352c <HAL_Delay>

	startToF();
 8002290:	f7ff fdaa 	bl	8001de8 <startToF>
	initLPS22hh();
 8002294:	f7ff fb50 	bl	8001938 <initLPS22hh>

	HAL_TIM_Base_Start_IT(&htim6);
 8002298:	480f      	ldr	r0, [pc, #60]	; (80022d8 <startup_enter+0x170>)
 800229a:	f003 fe9f 	bl	8005fdc <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 800229e:	2100      	movs	r1, #0
 80022a0:	480e      	ldr	r0, [pc, #56]	; (80022dc <startup_enter+0x174>)
 80022a2:	f004 f961 	bl	8006568 <HAL_TIM_PWM_Start>

	initHTS221();
 80022a6:	f7ff fbb1 	bl	8001a0c <initHTS221>
	init_accelerometer();
 80022aa:	f7ff fde3 	bl	8001e74 <init_accelerometer>
	init_magnetometer();
 80022ae:	f7ff fe9f 	bl	8001ff0 <init_magnetometer>

}
 80022b2:	ecbd 8b04 	vpop	{d8-d9}
 80022b6:	bd10      	pop	{r4, pc}
 80022b8:	00000000 	.word	0x00000000
 80022bc:	3ff00000 	.word	0x3ff00000
	...
 80022c8:	48000800 	.word	0x48000800
 80022cc:	48000400 	.word	0x48000400
 80022d0:	48001000 	.word	0x48001000
 80022d4:	48000c00 	.word	0x48000c00
 80022d8:	20000874 	.word	0x20000874
 80022dc:	200008c0 	.word	0x200008c0

080022e0 <startup_beforeLoop>:


void startup_beforeLoop(uint8_t deltaMs)
{
}
 80022e0:	4770      	bx	lr

080022e2 <startup_loop>:

void startup_loop(uint8_t deltaMs)
{
}
 80022e2:	4770      	bx	lr

080022e4 <startup_afterLoop>:

void startup_afterLoop(uint8_t deltaMs)
{

}
 80022e4:	4770      	bx	lr
	...

080022e8 <externalSetup>:
#include "state_all.h"

void externalSetup(StateStruct states[])
{

    states[ST_STARTUP].enter = startup_enter;
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <externalSetup+0x38>)
 80022ea:	6283      	str	r3, [r0, #40]	; 0x28
    states[ST_STARTUP].beforeLoop = startup_beforeLoop;
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <externalSetup+0x3c>)
 80022ee:	62c3      	str	r3, [r0, #44]	; 0x2c
    states[ST_STARTUP].loop = startup_loop;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <externalSetup+0x40>)
 80022f2:	6303      	str	r3, [r0, #48]	; 0x30
    states[ST_STARTUP].afterLoop = startup_afterLoop;
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <externalSetup+0x44>)
 80022f6:	6343      	str	r3, [r0, #52]	; 0x34

    states[ST_IDLE].enter = idle_enter;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <externalSetup+0x48>)
 80022fa:	6503      	str	r3, [r0, #80]	; 0x50
    states[ST_IDLE].beforeLoop = idle_beforeLoop;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <externalSetup+0x4c>)
 80022fe:	6543      	str	r3, [r0, #84]	; 0x54
    states[ST_IDLE].loop = idle_loop;
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <externalSetup+0x50>)
 8002302:	6583      	str	r3, [r0, #88]	; 0x58
    states[ST_IDLE].afterLoop = idle_afterLoop;
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <externalSetup+0x54>)
 8002306:	65c3      	str	r3, [r0, #92]	; 0x5c

    states[ST_BLE_CHECK].enter = ble_check_enter;
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <externalSetup+0x58>)
 800230a:	6783      	str	r3, [r0, #120]	; 0x78
    states[ST_BLE_CHECK].beforeLoop = ble_check_beforeLoop;
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <externalSetup+0x5c>)
 800230e:	67c3      	str	r3, [r0, #124]	; 0x7c
    states[ST_BLE_CHECK].loop = ble_check_loop;
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <externalSetup+0x60>)
 8002312:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    states[ST_BLE_CHECK].afterLoop = ble_check_afterLoop;
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <externalSetup+0x64>)
 8002318:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
} // Set all the callbacks
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	08002169 	.word	0x08002169
 8002324:	080022e1 	.word	0x080022e1
 8002328:	080022e3 	.word	0x080022e3
 800232c:	080022e5 	.word	0x080022e5
 8002330:	080013f5 	.word	0x080013f5
 8002334:	0800141d 	.word	0x0800141d
 8002338:	0800145d 	.word	0x0800145d
 800233c:	0800145f 	.word	0x0800145f
 8002340:	08000599 	.word	0x08000599
 8002344:	080005cd 	.word	0x080005cd
 8002348:	080005d1 	.word	0x080005d1
 800234c:	08000779 	.word	0x08000779

08002350 <isValidState>:

// This struct must be only in this file

uint8_t isValidState(States state)
{
    return state > ST_UNDEFINED && state < ST_COUNT; 
 8002350:	3801      	subs	r0, #1
 8002352:	b2c0      	uxtb	r0, r0
}
 8002354:	2802      	cmp	r0, #2
 8002356:	bf8c      	ite	hi
 8002358:	2000      	movhi	r0, #0
 800235a:	2001      	movls	r0, #1
 800235c:	4770      	bx	lr
	...

08002360 <setExitCondition>:
{
    return timeInCurrentStateTimer;
}

void setExitCondition(States nextState,uint8_t (*exitCondition)() )
{
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	4605      	mov	r5, r0
 8002364:	460c      	mov	r4, r1
	if(!isValidState(nextState) || !exitCondition)
 8002366:	f7ff fff3 	bl	8002350 <isValidState>
 800236a:	b148      	cbz	r0, 8002380 <setExitCondition+0x20>
 800236c:	b144      	cbz	r4, 8002380 <setExitCondition+0x20>
		return;
	states[actualState].exitCondition = exitCondition;
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <setExitCondition+0x24>)
 8002370:	7a13      	ldrb	r3, [r2, #8]
 8002372:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002376:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800237a:	620c      	str	r4, [r1, #32]
	states[actualState].nextState = nextState;
 800237c:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
}
 8002380:	bd38      	pop	{r3, r4, r5, pc}
 8002382:	bf00      	nop
 8002384:	200009b0 	.word	0x200009b0

08002388 <setState>:

uint8_t setState(States newState)
{
 8002388:	b510      	push	{r4, lr}
 800238a:	4604      	mov	r4, r0
    if(!isValidState(newState))
 800238c:	f7ff ffe0 	bl	8002350 <isValidState>
 8002390:	b128      	cbz	r0, 800239e <setState+0x16>
    	return 0;
	previousState = actualState;
 8002392:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <setState+0x18>)
 8002394:	7a1a      	ldrb	r2, [r3, #8]
 8002396:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	actualState = newState;
 800239a:	721c      	strb	r4, [r3, #8]
	return 1;
 800239c:	2001      	movs	r0, #1

}
 800239e:	bd10      	pop	{r4, pc}
 80023a0:	200009b0 	.word	0x200009b0

080023a4 <setStateTimeout>:
{
    return actualState;
}

void setStateTimeout(States state, uint64_t timeout)
{
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	4606      	mov	r6, r0
 80023a8:	4615      	mov	r5, r2
 80023aa:	461c      	mov	r4, r3
    if(!isValidState(state) || !timeout)
 80023ac:	f7ff ffd0 	bl	8002350 <isValidState>
 80023b0:	b160      	cbz	r0, 80023cc <setStateTimeout+0x28>
 80023b2:	ea55 0304 	orrs.w	r3, r5, r4
 80023b6:	d009      	beq.n	80023cc <setStateTimeout+0x28>
        return;

    states[actualState].nextState = state;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <setStateTimeout+0x2c>)
 80023ba:	7a19      	ldrb	r1, [r3, #8]
 80023bc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80023c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80023c4:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
    states[actualState].timeout = timeout;
 80023c8:	6295      	str	r5, [r2, #40]	; 0x28
 80023ca:	62d4      	str	r4, [r2, #44]	; 0x2c
    
}
 80023cc:	bd70      	pop	{r4, r5, r6, pc}
 80023ce:	bf00      	nop
 80023d0:	200009b0 	.word	0x200009b0

080023d4 <setup>:
// This function must be called in enter

void setup()
{
 80023d4:	b510      	push	{r4, lr}
    externalSetup(states);
 80023d6:	4c20      	ldr	r4, [pc, #128]	; (8002458 <setup+0x84>)
 80023d8:	f104 0010 	add.w	r0, r4, #16
 80023dc:	f7ff ff84 	bl	80022e8 <externalSetup>

    setStateMachineTimer(&timeInCurrentStateTimer);
 80023e0:	4620      	mov	r0, r4
 80023e2:	f000 faad 	bl	8002940 <setStateMachineTimer>

    initDone = 1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    for(int i = ST_UNDEFINED + 1; i < ST_COUNT; i++)
 80023ec:	e007      	b.n	80023fe <setup+0x2a>
    {
        states[i].timeout = 0;
        states[i].nextState = ST_UNDEFINED;
        states[i].exitCondition = NULL;
        initDone &= states[i].enter && states[i].beforeLoop && states[i].loop && states[i].afterLoop;
 80023ee:	2000      	movs	r0, #0
 80023f0:	4919      	ldr	r1, [pc, #100]	; (8002458 <setup+0x84>)
 80023f2:	f891 20b1 	ldrb.w	r2, [r1, #177]	; 0xb1
 80023f6:	4002      	ands	r2, r0
 80023f8:	f881 20b1 	strb.w	r2, [r1, #177]	; 0xb1
    for(int i = ST_UNDEFINED + 1; i < ST_COUNT; i++)
 80023fc:	3301      	adds	r3, #1
 80023fe:	2b03      	cmp	r3, #3
 8002400:	dc25      	bgt.n	800244e <setup+0x7a>
        states[i].timeout = 0;
 8002402:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002406:	00d1      	lsls	r1, r2, #3
 8002408:	4a13      	ldr	r2, [pc, #76]	; (8002458 <setup+0x84>)
 800240a:	440a      	add	r2, r1
 800240c:	2000      	movs	r0, #0
 800240e:	2100      	movs	r1, #0
 8002410:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
        states[i].nextState = ST_UNDEFINED;
 8002414:	2100      	movs	r1, #0
 8002416:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
        states[i].exitCondition = NULL;
 800241a:	6211      	str	r1, [r2, #32]
        initDone &= states[i].enter && states[i].beforeLoop && states[i].loop && states[i].afterLoop;
 800241c:	6912      	ldr	r2, [r2, #16]
 800241e:	2a00      	cmp	r2, #0
 8002420:	d0e5      	beq.n	80023ee <setup+0x1a>
 8002422:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002426:	00d1      	lsls	r1, r2, #3
 8002428:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <setup+0x84>)
 800242a:	440a      	add	r2, r1
 800242c:	6952      	ldr	r2, [r2, #20]
 800242e:	b152      	cbz	r2, 8002446 <setup+0x72>
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <setup+0x84>)
 8002432:	440a      	add	r2, r1
 8002434:	6992      	ldr	r2, [r2, #24]
 8002436:	b142      	cbz	r2, 800244a <setup+0x76>
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <setup+0x84>)
 800243a:	440a      	add	r2, r1
 800243c:	69d2      	ldr	r2, [r2, #28]
 800243e:	2a00      	cmp	r2, #0
 8002440:	d0d6      	beq.n	80023f0 <setup+0x1c>
 8002442:	2001      	movs	r0, #1
 8002444:	e7d4      	b.n	80023f0 <setup+0x1c>
 8002446:	2000      	movs	r0, #0
 8002448:	e7d2      	b.n	80023f0 <setup+0x1c>
 800244a:	2000      	movs	r0, #0
 800244c:	e7d0      	b.n	80023f0 <setup+0x1c>
    }
    
    setState(ST_STARTUP);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff ff9a 	bl	8002388 <setState>
    
    
}
 8002454:	bd10      	pop	{r4, pc}
 8002456:	bf00      	nop
 8002458:	200009b0 	.word	0x200009b0

0800245c <loop>:

uint8_t ticksPassed = 0;

void loop(uint8_t dt)
{
    if(!initDone || !isValidState(actualState))
 800245c:	4b5d      	ldr	r3, [pc, #372]	; (80025d4 <loop+0x178>)
 800245e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80b4 	beq.w	80025d0 <loop+0x174>
{
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	4604      	mov	r4, r0
    if(!initDone || !isValidState(actualState))
 800246e:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <loop+0x178>)
 8002470:	7a18      	ldrb	r0, [r3, #8]
 8002472:	f7ff ff6d 	bl	8002350 <isValidState>
 8002476:	b908      	cbnz	r0, 800247c <loop+0x20>

    }



}
 8002478:	b009      	add	sp, #36	; 0x24
 800247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ticksPassed += timePassed();
 800247c:	f000 fa6a 	bl	8002954 <timePassed>
 8002480:	4b54      	ldr	r3, [pc, #336]	; (80025d4 <loop+0x178>)
 8002482:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8002486:	4410      	add	r0, r2
 8002488:	f883 00b2 	strb.w	r0, [r3, #178]	; 0xb2
    if(debugEnabled)
 800248c:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 8002490:	b36b      	cbz	r3, 80024ee <loop+0x92>
        if((timeInCurrentStateTimer % 10) == 0){
 8002492:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <loop+0x178>)
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	6858      	ldr	r0, [r3, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	180b      	adds	r3, r1, r0
 800249c:	f080 8088 	bcs.w	80025b0 <loop+0x154>
 80024a0:	4413      	add	r3, r2
 80024a2:	4d4d      	ldr	r5, [pc, #308]	; (80025d8 <loop+0x17c>)
 80024a4:	fba5 2603 	umull	r2, r6, r5, r3
 80024a8:	f026 0203 	bic.w	r2, r6, #3
 80024ac:	eb02 0296 	add.w	r2, r2, r6, lsr #2
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	1acb      	subs	r3, r1, r3
 80024b4:	f160 0600 	sbc.w	r6, r0, #0
 80024b8:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 80024bc:	fb03 f202 	mul.w	r2, r3, r2
 80024c0:	fb05 2206 	mla	r2, r5, r6, r2
 80024c4:	fba3 3505 	umull	r3, r5, r3, r5
 80024c8:	442a      	add	r2, r5
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80024d0:	0852      	lsrs	r2, r2, #1
 80024d2:	0096      	lsls	r6, r2, #2
 80024d4:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80024d8:	009d      	lsls	r5, r3, #2
 80024da:	18ed      	adds	r5, r5, r3
 80024dc:	eb42 0306 	adc.w	r3, r2, r6
 80024e0:	196d      	adds	r5, r5, r5
 80024e2:	415b      	adcs	r3, r3
 80024e4:	1b49      	subs	r1, r1, r5
 80024e6:	eb60 0003 	sbc.w	r0, r0, r3
 80024ea:	4301      	orrs	r1, r0
 80024ec:	d062      	beq.n	80025b4 <loop+0x158>
    StateStruct * stActualState = &states[actualState];
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <loop+0x178>)
 80024f0:	7a1d      	ldrb	r5, [r3, #8]
    if(actualState != previousState){
 80024f2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80024f6:	429d      	cmp	r5, r3
 80024f8:	d00d      	beq.n	8002516 <loop+0xba>
        timeInCurrentStateTimer = 0;
 80024fa:	4e36      	ldr	r6, [pc, #216]	; (80025d4 <loop+0x178>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	2300      	movs	r3, #0
 8002500:	e9c6 2300 	strd	r2, r3, [r6]
        stActualState->enter();
 8002504:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002508:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	4798      	blx	r3
        previousState = actualState;
 8002510:	7a33      	ldrb	r3, [r6, #8]
 8002512:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
    if(ticksPassed >= dt)
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <loop+0x178>)
 8002518:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800251c:	42a3      	cmp	r3, r4
 800251e:	d310      	bcc.n	8002542 <loop+0xe6>
		stActualState->beforeLoop(dt);
 8002520:	4f2c      	ldr	r7, [pc, #176]	; (80025d4 <loop+0x178>)
 8002522:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8002526:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 800252a:	6973      	ldr	r3, [r6, #20]
 800252c:	4620      	mov	r0, r4
 800252e:	4798      	blx	r3
		stActualState->loop(dt);
 8002530:	69b3      	ldr	r3, [r6, #24]
 8002532:	4620      	mov	r0, r4
 8002534:	4798      	blx	r3
		stActualState->afterLoop(dt);
 8002536:	69f3      	ldr	r3, [r6, #28]
 8002538:	4620      	mov	r0, r4
 800253a:	4798      	blx	r3
		ticksPassed = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
    if(isValidState(stActualState->nextState)
 8002542:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002546:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <loop+0x178>)
 8002548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800254c:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff fefd 	bl	8002350 <isValidState>
 8002556:	2800      	cmp	r0, #0
 8002558:	d08e      	beq.n	8002478 <loop+0x1c>
    	&& stActualState->nextState != actualState)
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <loop+0x178>)
 800255c:	7a1b      	ldrb	r3, [r3, #8]
 800255e:	429c      	cmp	r4, r3
 8002560:	d08a      	beq.n	8002478 <loop+0x1c>
    	if(stActualState->timeout
 8002562:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <loop+0x178>)
 8002568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800256c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	ea52 0103 	orrs.w	r1, r2, r3
 8002574:	d005      	beq.n	8002582 <loop+0x126>
    		&& timeInCurrentStateTimer >= stActualState->timeout){
 8002576:	4917      	ldr	r1, [pc, #92]	; (80025d4 <loop+0x178>)
 8002578:	6808      	ldr	r0, [r1, #0]
 800257a:	6849      	ldr	r1, [r1, #4]
 800257c:	4290      	cmp	r0, r2
 800257e:	4199      	sbcs	r1, r3
 8002580:	d222      	bcs.n	80025c8 <loop+0x16c>
    	if(!stActualState->exitCondition)
 8002582:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <loop+0x178>)
 8002588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f43f af72 	beq.w	8002478 <loop+0x1c>
		if(stActualState->exitCondition())
 8002594:	4798      	blx	r3
 8002596:	2800      	cmp	r0, #0
 8002598:	f43f af6e 	beq.w	8002478 <loop+0x1c>
			setState(stActualState->nextState);
 800259c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <loop+0x178>)
 80025a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80025a6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 80025aa:	f7ff feed 	bl	8002388 <setState>
 80025ae:	e763      	b.n	8002478 <loop+0x1c>
        if((timeInCurrentStateTimer % 10) == 0){
 80025b0:	2201      	movs	r2, #1
 80025b2:	e775      	b.n	80024a0 <loop+0x44>
            sprintf(text,"Actual state: %d",actualState);
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <loop+0x178>)
 80025b6:	7a1a      	ldrb	r2, [r3, #8]
 80025b8:	4908      	ldr	r1, [pc, #32]	; (80025dc <loop+0x180>)
 80025ba:	4668      	mov	r0, sp
 80025bc:	f004 fd74 	bl	80070a8 <siprintf>
            sendMessage(text);
 80025c0:	4668      	mov	r0, sp
 80025c2:	f000 f9ed 	bl	80029a0 <sendMessage>
 80025c6:	e792      	b.n	80024ee <loop+0x92>
    		setState(stActualState->nextState);
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7ff fedd 	bl	8002388 <setState>
 80025ce:	e7d8      	b.n	8002582 <loop+0x126>
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	200009b0 	.word	0x200009b0
 80025d8:	cccccccd 	.word	0xcccccccd
 80025dc:	08007944 	.word	0x08007944

080025e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_MspInit+0x2c>)
 80025e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	661a      	str	r2, [r3, #96]	; 0x60
 80025ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ee:	f002 0201 	and.w	r2, r2, #1
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025fc:	659a      	str	r2, [r3, #88]	; 0x58
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002608:	b002      	add	sp, #8
 800260a:	4770      	bx	lr
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002610:	b510      	push	{r4, lr}
 8002612:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	2300      	movs	r3, #0
 8002616:	9303      	str	r3, [sp, #12]
 8002618:	9304      	str	r3, [sp, #16]
 800261a:	9305      	str	r3, [sp, #20]
 800261c:	9306      	str	r3, [sp, #24]
 800261e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8002620:	6802      	ldr	r2, [r0, #0]
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_I2C_MspInit+0x64>)
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002628:	b008      	add	sp, #32
 800262a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262c:	4c12      	ldr	r4, [pc, #72]	; (8002678 <HAL_I2C_MspInit+0x68>)
 800262e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002636:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002640:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002644:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002646:	2312      	movs	r3, #18
 8002648:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800264a:	2301      	movs	r3, #1
 800264c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002652:	2304      	movs	r3, #4
 8002654:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002656:	a903      	add	r1, sp, #12
 8002658:	4808      	ldr	r0, [pc, #32]	; (800267c <HAL_I2C_MspInit+0x6c>)
 800265a:	f000 ffe7 	bl	800362c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800265e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002664:	65a3      	str	r3, [r4, #88]	; 0x58
 8002666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	9b02      	ldr	r3, [sp, #8]
}
 8002670:	e7da      	b.n	8002628 <HAL_I2C_MspInit+0x18>
 8002672:	bf00      	nop
 8002674:	40005800 	.word	0x40005800
 8002678:	40021000 	.word	0x40021000
 800267c:	48000400 	.word	0x48000400

08002680 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C2)
 8002680:	6802      	ldr	r2, [r0, #0]
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_I2C_MspDeInit+0x30>)
 8002684:	429a      	cmp	r2, r3
 8002686:	d000      	beq.n	800268a <HAL_I2C_MspDeInit+0xa>
 8002688:	4770      	bx	lr
{
 800268a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800268c:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_I2C_MspDeInit+0x34>)
 800268e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002690:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002694:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002696:	4c08      	ldr	r4, [pc, #32]	; (80026b8 <HAL_I2C_MspDeInit+0x38>)
 8002698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269c:	4620      	mov	r0, r4
 800269e:	f001 f8b1 	bl	8003804 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80026a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026a6:	4620      	mov	r0, r4
 80026a8:	f001 f8ac 	bl	8003804 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80026ac:	bd10      	pop	{r4, pc}
 80026ae:	bf00      	nop
 80026b0:	40005800 	.word	0x40005800
 80026b4:	40021000 	.word	0x40021000
 80026b8:	48000400 	.word	0x48000400

080026bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026bc:	b500      	push	{lr}
 80026be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	2300      	movs	r3, #0
 80026c2:	9303      	str	r3, [sp, #12]
 80026c4:	9304      	str	r3, [sp, #16]
 80026c6:	9305      	str	r3, [sp, #20]
 80026c8:	9306      	str	r3, [sp, #24]
 80026ca:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 80026cc:	6802      	ldr	r2, [r0, #0]
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_SPI_MspInit+0x64>)
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d002      	beq.n	80026da <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80026d4:	b009      	add	sp, #36	; 0x24
 80026d6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026da:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80026de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e4:	659a      	str	r2, [r3, #88]	; 0x58
 80026e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026e8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80026ec:	9201      	str	r2, [sp, #4]
 80026ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026f2:	f042 0204 	orr.w	r2, r2, #4
 80026f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	9302      	str	r3, [sp, #8]
 8002700:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002702:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002706:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002710:	2306      	movs	r3, #6
 8002712:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002714:	a903      	add	r1, sp, #12
 8002716:	4803      	ldr	r0, [pc, #12]	; (8002724 <HAL_SPI_MspInit+0x68>)
 8002718:	f000 ff88 	bl	800362c <HAL_GPIO_Init>
}
 800271c:	e7da      	b.n	80026d4 <HAL_SPI_MspInit+0x18>
 800271e:	bf00      	nop
 8002720:	40003c00 	.word	0x40003c00
 8002724:	48000800 	.word	0x48000800

08002728 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8002728:	6802      	ldr	r2, [r0, #0]
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_TIM_Base_MspInit+0x3c>)
 800272c:	429a      	cmp	r2, r3
 800272e:	d000      	beq.n	8002732 <HAL_TIM_Base_MspInit+0xa>
 8002730:	4770      	bx	lr
{
 8002732:	b500      	push	{lr}
 8002734:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002736:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800273a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800273c:	f042 0210 	orr.w	r2, r2, #16
 8002740:	659a      	str	r2, [r3, #88]	; 0x58
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	4611      	mov	r1, r2
 8002750:	2036      	movs	r0, #54	; 0x36
 8002752:	f000 ff11 	bl	8003578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002756:	2036      	movs	r0, #54	; 0x36
 8002758:	f000 ff46 	bl	80035e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800275c:	b003      	add	sp, #12
 800275e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002762:	bf00      	nop
 8002764:	40001000 	.word	0x40001000

08002768 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM15)
 8002768:	6802      	ldr	r2, [r0, #0]
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_TIM_PWM_MspInit+0x28>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d000      	beq.n	8002772 <HAL_TIM_PWM_MspInit+0xa>
 8002770:	4770      	bx	lr
{
 8002772:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002774:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8002778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800277a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800277e:	661a      	str	r2, [r3, #96]	; 0x60
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800278a:	b002      	add	sp, #8
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40014000 	.word	0x40014000

08002794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002794:	b500      	push	{lr}
 8002796:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	2300      	movs	r3, #0
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	9302      	str	r3, [sp, #8]
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	9304      	str	r3, [sp, #16]
 80027a2:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM15)
 80027a4:	6802      	ldr	r2, [r0, #0]
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_TIM_MspPostInit+0x4c>)
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d002      	beq.n	80027b2 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80027ac:	b007      	add	sp, #28
 80027ae:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80027b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027b8:	f042 0202 	orr.w	r2, r2, #2
 80027bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80027d2:	230e      	movs	r3, #14
 80027d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d6:	a901      	add	r1, sp, #4
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <HAL_TIM_MspPostInit+0x50>)
 80027da:	f000 ff27 	bl	800362c <HAL_GPIO_Init>
}
 80027de:	e7e5      	b.n	80027ac <HAL_TIM_MspPostInit+0x18>
 80027e0:	40014000 	.word	0x40014000
 80027e4:	48000400 	.word	0x48000400

080027e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <NMI_Handler>

080027ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler>

080027ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <MemManage_Handler>

080027ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <BusFault_Handler>

080027f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <UsageFault_Handler>

080027f2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f2:	4770      	bx	lr

080027f4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f4:	4770      	bx	lr

080027f6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f6:	4770      	bx	lr

080027f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027fa:	f000 fe85 	bl	8003508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fe:	bd08      	pop	{r3, pc}

08002800 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002800:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	dataAvailable=1;
 8002802:	4b03      	ldr	r3, [pc, #12]	; (8002810 <EXTI9_5_IRQHandler+0x10>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002808:	2040      	movs	r0, #64	; 0x40
 800280a:	f001 f8a1 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800280e:	bd08      	pop	{r3, pc}
 8002810:	2000054c 	.word	0x2000054c

08002814 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002814:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
update=1;
 8002816:	4b03      	ldr	r3, [pc, #12]	; (8002824 <TIM6_DAC_IRQHandler+0x10>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <TIM6_DAC_IRQHandler+0x14>)
 800281e:	f003 fc28 	bl	8006072 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002822:	bd08      	pop	{r3, pc}
 8002824:	20000548 	.word	0x20000548
 8002828:	20000874 	.word	0x20000874

0800282c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800282c:	b508      	push	{r3, lr}
 800282e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002830:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <_sbrk+0x34>)
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	b142      	cbz	r2, 8002848 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <_sbrk+0x34>)
 8002838:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800283a:	4403      	add	r3, r0
 800283c:	466a      	mov	r2, sp
 800283e:	4293      	cmp	r3, r2
 8002840:	d806      	bhi.n	8002850 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002842:	4a07      	ldr	r2, [pc, #28]	; (8002860 <_sbrk+0x34>)
 8002844:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002846:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002848:	4a05      	ldr	r2, [pc, #20]	; (8002860 <_sbrk+0x34>)
 800284a:	4906      	ldr	r1, [pc, #24]	; (8002864 <_sbrk+0x38>)
 800284c:	6011      	str	r1, [r2, #0]
 800284e:	e7f2      	b.n	8002836 <_sbrk+0xa>
		errno = ENOMEM;
 8002850:	f004 fc72 	bl	8007138 <__errno>
 8002854:	230c      	movs	r3, #12
 8002856:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	e7f3      	b.n	8002846 <_sbrk+0x1a>
 800285e:	bf00      	nop
 8002860:	20000a64 	.word	0x20000a64
 8002864:	20000cd8 	.word	0x20000cd8

08002868 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002868:	490f      	ldr	r1, [pc, #60]	; (80028a8 <SystemInit+0x40>)
 800286a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800286e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <SystemInit+0x44>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002880:	2000      	movs	r0, #0
 8002882:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800288a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800288e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002894:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800289c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800289e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028a4:	608b      	str	r3, [r1, #8]
#endif
}
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00
 80028ac:	40021000 	.word	0x40021000

080028b0 <isValidTimer>:
}

uint8_t isValidTimer(Timer_Function function)
{
	return function < TF_COUNT && function >= 0;
}
 80028b0:	fab0 f080 	clz	r0, r0
 80028b4:	0940      	lsrs	r0, r0, #5
 80028b6:	4770      	bx	lr

080028b8 <initTimers>:

void initTimers()
{
	for(uint8_t i = 0; i < TF_COUNT; i++)
 80028b8:	2300      	movs	r3, #0
 80028ba:	b103      	cbz	r3, 80028be <initTimers+0x6>
	{
		timers[i].value = 0;
		timers[i].timeout  = 0;
		timers[i].callback = NULL;
	}
}
 80028bc:	4770      	bx	lr
		timers[i].value = 0;
 80028be:	490c      	ldr	r1, [pc, #48]	; (80028f0 <initTimers+0x38>)
 80028c0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80028c4:	00c2      	lsls	r2, r0, #3
 80028c6:	440a      	add	r2, r1
 80028c8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80028e8 <initTimers+0x30>
 80028cc:	ed82 7b00 	vstr	d7, [r2]
		timers[i].timeout  = 0;
 80028d0:	ed82 7b04 	vstr	d7, [r2, #16]
		timers[i].callback = NULL;
 80028d4:	00c2      	lsls	r2, r0, #3
 80028d6:	4411      	add	r1, r2
 80028d8:	2200      	movs	r2, #0
 80028da:	608a      	str	r2, [r1, #8]
	for(uint8_t i = 0; i < TF_COUNT; i++)
 80028dc:	3301      	adds	r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	e7eb      	b.n	80028ba <initTimers+0x2>
 80028e2:	bf00      	nop
 80028e4:	f3af 8000 	nop.w
	...
 80028f0:	20000a70 	.word	0x20000a70

080028f4 <setTimer>:

void setTimer(Timer_Function function,void (*callback)(void),uint64_t timeout)
{
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	4604      	mov	r4, r0
 80028f8:	460d      	mov	r5, r1
 80028fa:	4617      	mov	r7, r2
 80028fc:	461e      	mov	r6, r3
	if(!isValidTimer(function) || !callback)
 80028fe:	f7ff ffd7 	bl	80028b0 <isValidTimer>
 8002902:	b168      	cbz	r0, 8002920 <setTimer+0x2c>
 8002904:	b165      	cbz	r5, 8002920 <setTimer+0x2c>
		timers[function].callback = NULL;
		timers[function].timeout = 0;
		return;
	}

	timers[function].value = 0;
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <setTimer+0x48>)
 8002908:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800290c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8002910:	2000      	movs	r0, #0
 8002912:	2100      	movs	r1, #0
 8002914:	e9c2 0100 	strd	r0, r1, [r2]
	timers[function].callback = callback;
 8002918:	6095      	str	r5, [r2, #8]
	timers[function].timeout = timeout;
 800291a:	6117      	str	r7, [r2, #16]
 800291c:	6156      	str	r6, [r2, #20]

}
 800291e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		timers[function].value = 0;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <setTimer+0x48>)
 8002922:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002926:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800292a:	2000      	movs	r0, #0
 800292c:	2100      	movs	r1, #0
 800292e:	e9c2 0100 	strd	r0, r1, [r2]
		timers[function].callback = NULL;
 8002932:	2500      	movs	r5, #0
 8002934:	6095      	str	r5, [r2, #8]
		timers[function].timeout = 0;
 8002936:	e9c2 0104 	strd	r0, r1, [r2, #16]
		return;
 800293a:	e7f0      	b.n	800291e <setTimer+0x2a>
 800293c:	20000a70 	.word	0x20000a70

08002940 <setStateMachineTimer>:



void setStateMachineTimer(uint64_t * stateTimer)
{
    stateMachineTimer = stateTimer;
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <setStateMachineTimer+0x10>)
 8002942:	6198      	str	r0, [r3, #24]
    *stateMachineTimer = 0;
 8002944:	2200      	movs	r2, #0
 8002946:	2300      	movs	r3, #0
 8002948:	e9c0 2300 	strd	r2, r3, [r0]
}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000a70 	.word	0x20000a70

08002954 <timePassed>:
static uint8_t tick = 0;

uint8_t timePassed()
{
	return tick;
}
 8002954:	4b01      	ldr	r3, [pc, #4]	; (800295c <timePassed+0x8>)
 8002956:	7f18      	ldrb	r0, [r3, #28]
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000a70 	.word	0x20000a70

08002960 <concat>:
}



static void concat(char * a, char * b)
{
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	4605      	mov	r5, r0
 8002964:	460e      	mov	r6, r1
	realloc(a,(char) (strlen(a) +strlen(b)));
 8002966:	f7fd fc33 	bl	80001d0 <strlen>
 800296a:	4604      	mov	r4, r0
 800296c:	4630      	mov	r0, r6
 800296e:	f7fd fc2f 	bl	80001d0 <strlen>
 8002972:	4404      	add	r4, r0
 8002974:	b2e1      	uxtb	r1, r4
 8002976:	4628      	mov	r0, r5
 8002978:	f004 fb5e 	bl	8007038 <realloc>
	strcat(a,b);
 800297c:	4631      	mov	r1, r6
 800297e:	4628      	mov	r0, r5
 8002980:	f004 fbba 	bl	80070f8 <strcat>
}
 8002984:	bd70      	pop	{r4, r5, r6, pc}
	...

08002988 <reset>:
{
 8002988:	b510      	push	{r4, lr}
	free(txt);
 800298a:	4c04      	ldr	r4, [pc, #16]	; (800299c <reset+0x14>)
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	f004 fa9f 	bl	8006ed0 <free>
	txt = malloc(sizeof(char) * 1);
 8002992:	2001      	movs	r0, #1
 8002994:	f004 fa94 	bl	8006ec0 <malloc>
 8002998:	6020      	str	r0, [r4, #0]
}
 800299a:	bd10      	pop	{r4, pc}
 800299c:	20000aa0 	.word	0x20000aa0

080029a0 <sendMessage>:


HAL_StatusTypeDef sendMessage()
{
 80029a0:	b510      	push	{r4, lr}
	return HAL_UART_Transmit(&huart1,(char*)txt,strlen(txt),1000);
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <sendMessage+0x1c>)
 80029a4:	681c      	ldr	r4, [r3, #0]
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7fd fc12 	bl	80001d0 <strlen>
 80029ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b0:	b282      	uxth	r2, r0
 80029b2:	4621      	mov	r1, r4
 80029b4:	4802      	ldr	r0, [pc, #8]	; (80029c0 <sendMessage+0x20>)
 80029b6:	f004 f984 	bl	8006cc2 <HAL_UART_Transmit>
	reset();
}
 80029ba:	bd10      	pop	{r4, pc}
 80029bc:	20000aa0 	.word	0x20000aa0
 80029c0:	2000090c 	.word	0x2000090c

080029c4 <appendMessage>:

void appendMessage(char * text)
{
 80029c4:	b508      	push	{r3, lr}
 80029c6:	4601      	mov	r1, r0
	concat(txt,text);
 80029c8:	4b02      	ldr	r3, [pc, #8]	; (80029d4 <appendMessage+0x10>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f7ff ffc8 	bl	8002960 <concat>
}
 80029d0:	bd08      	pop	{r3, pc}
 80029d2:	bf00      	nop
 80029d4:	20000aa0 	.word	0x20000aa0

080029d8 <uart_init>:



void uart_init(void)
{
 80029d8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80029da:	480c      	ldr	r0, [pc, #48]	; (8002a0c <uart_init+0x34>)
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <uart_init+0x38>)
 80029de:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80029e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80029e4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029e6:	2300      	movs	r3, #0
 80029e8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029ea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029ec:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029ee:	220c      	movs	r2, #12
 80029f0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029fa:	f004 fa06 	bl	8006e0a <HAL_UART_Init>
 80029fe:	b910      	cbnz	r0, 8002a06 <uart_init+0x2e>
  {
    Error_Handler();
  }
  reset();
 8002a00:	f7ff ffc2 	bl	8002988 <reset>



}
 8002a04:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a06:	f7fe fe5d 	bl	80016c4 <Error_Handler>
 8002a0a:	e7f9      	b.n	8002a00 <uart_init+0x28>
 8002a0c:	2000090c 	.word	0x2000090c
 8002a10:	40013800 	.word	0x40013800

08002a14 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002a14:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002a16:	b2c4      	uxtb	r4, r0
 8002a18:	2120      	movs	r1, #32
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	f000 fc28 	bl	8003270 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002a20:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002a24:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8002a28:	2120      	movs	r1, #32
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f000 fc0c 	bl	8003248 <SENSOR_IO_Write>
}
 8002a30:	bd10      	pop	{r4, pc}

08002a32 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002a32:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002a34:	b2c4      	uxtb	r4, r0
 8002a36:	2120      	movs	r1, #32
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f000 fc19 	bl	8003270 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002a3e:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002a42:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8002a46:	2120      	movs	r1, #32
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f000 fbfd 	bl	8003248 <SENSOR_IO_Write>
}
 8002a4e:	bd10      	pop	{r4, pc}

08002a50 <HTS221_H_ReadID>:
{  
 8002a50:	b510      	push	{r4, lr}
 8002a52:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8002a54:	f000 fbf0 	bl	8003238 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002a58:	210f      	movs	r1, #15
 8002a5a:	b2e0      	uxtb	r0, r4
 8002a5c:	f000 fc08 	bl	8003270 <SENSOR_IO_Read>
}
 8002a60:	bd10      	pop	{r4, pc}
	...

08002a64 <HTS221_H_ReadHumidity>:
{
 8002a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a68:	b083      	sub	sp, #12
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002a6a:	fa5f f980 	uxtb.w	r9, r0
 8002a6e:	2302      	movs	r3, #2
 8002a70:	aa01      	add	r2, sp, #4
 8002a72:	21b0      	movs	r1, #176	; 0xb0
 8002a74:	4648      	mov	r0, r9
 8002a76:	f000 fc11 	bl	800329c <SENSOR_IO_ReadMultiple>
  H0_rh = buffer[0] >> 1;
 8002a7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a7e:	085f      	lsrs	r7, r3, #1
  H1_rh = buffer[1] >> 1;
 8002a80:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8002a84:	0876      	lsrs	r6, r6, #1
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002a86:	2302      	movs	r3, #2
 8002a88:	aa01      	add	r2, sp, #4
 8002a8a:	21b6      	movs	r1, #182	; 0xb6
 8002a8c:	4648      	mov	r0, r9
 8002a8e:	f000 fc05 	bl	800329c <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a92:	f89d 5005 	ldrb.w	r5, [sp, #5]
 8002a96:	022d      	lsls	r5, r5, #8
 8002a98:	b22d      	sxth	r5, r5
 8002a9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a9e:	431d      	orrs	r5, r3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	aa01      	add	r2, sp, #4
 8002aa4:	21ba      	movs	r1, #186	; 0xba
 8002aa6:	4648      	mov	r0, r9
 8002aa8:	f000 fbf8 	bl	800329c <SENSOR_IO_ReadMultiple>
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002aac:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8002ab0:	0224      	lsls	r4, r4, #8
 8002ab2:	b224      	sxth	r4, r4
 8002ab4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ab8:	431c      	orrs	r4, r3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002aba:	2302      	movs	r3, #2
 8002abc:	aa01      	add	r2, sp, #4
 8002abe:	21a8      	movs	r1, #168	; 0xa8
 8002ac0:	4648      	mov	r0, r9
 8002ac2:	f000 fbeb 	bl	800329c <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002ac6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002ad2:	4313      	orrs	r3, r2
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002ad4:	1b5b      	subs	r3, r3, r5
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ade:	1bf6      	subs	r6, r6, r7
 8002ae0:	ee07 6a10 	vmov	s14, r6
 8002ae4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aec:	1b64      	subs	r4, r4, r5
 8002aee:	ee07 4a10 	vmov	s14, r4
 8002af2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002af6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8002afa:	ee07 7a90 	vmov	s15, r7
 8002afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b02:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8002b06:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
        : ( tmp_f <    0.0f ) ?    0.0f
 8002b0e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b40 <HTS221_H_ReadHumidity+0xdc>
 8002b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	dc07      	bgt.n	8002b2c <HTS221_H_ReadHumidity+0xc8>
        : tmp_f;
 8002b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b24:	d504      	bpl.n	8002b30 <HTS221_H_ReadHumidity+0xcc>
 8002b26:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002b44 <HTS221_H_ReadHumidity+0xe0>
 8002b2a:	e001      	b.n	8002b30 <HTS221_H_ReadHumidity+0xcc>
        : ( tmp_f <    0.0f ) ?    0.0f
 8002b2c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8002b40 <HTS221_H_ReadHumidity+0xdc>
}
 8002b30:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002b34:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002b38:	b003      	add	sp, #12
 8002b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b3e:	bf00      	nop
 8002b40:	447a0000 	.word	0x447a0000
 8002b44:	00000000 	.word	0x00000000

08002b48 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b4c:	b082      	sub	sp, #8
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002b4e:	fa5f f880 	uxtb.w	r8, r0
 8002b52:	2302      	movs	r3, #2
 8002b54:	aa01      	add	r2, sp, #4
 8002b56:	21b2      	movs	r1, #178	; 0xb2
 8002b58:	4640      	mov	r0, r8
 8002b5a:	f000 fb9f 	bl	800329c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002b5e:	2135      	movs	r1, #53	; 0x35
 8002b60:	4640      	mov	r0, r8
 8002b62:	f000 fb85 	bl	8003270 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002b66:	0207      	lsls	r7, r0, #8
 8002b68:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8002b6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b70:	431f      	orrs	r7, r3
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002b72:	0184      	lsls	r4, r0, #6
 8002b74:	f404 7440 	and.w	r4, r4, #768	; 0x300
 8002b78:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002b7c:	431c      	orrs	r4, r3
  T0_degC = T0_degC_x8_u16 >> 3;
 8002b7e:	08ff      	lsrs	r7, r7, #3
  T1_degC = T1_degC_x8_u16 >> 3;
 8002b80:	08e4      	lsrs	r4, r4, #3

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002b82:	2304      	movs	r3, #4
 8002b84:	eb0d 0203 	add.w	r2, sp, r3
 8002b88:	21bc      	movs	r1, #188	; 0xbc
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	f000 fb86 	bl	800329c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b90:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8002b94:	0236      	lsls	r6, r6, #8
 8002b96:	b236      	sxth	r6, r6
 8002b98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b9c:	431e      	orrs	r6, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002b9e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002ba2:	022d      	lsls	r5, r5, #8
 8002ba4:	b22d      	sxth	r5, r5
 8002ba6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002baa:	431d      	orrs	r5, r3

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002bac:	2302      	movs	r3, #2
 8002bae:	aa01      	add	r2, sp, #4
 8002bb0:	21aa      	movs	r1, #170	; 0xaa
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	f000 fb72 	bl	800329c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002bb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002bc4:	4313      	orrs	r3, r2

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002bc6:	1b9b      	subs	r3, r3, r6
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd0:	1be4      	subs	r4, r4, r7
 8002bd2:	ee07 4a10 	vmov	s14, r4
 8002bd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bde:	1bad      	subs	r5, r5, r6
 8002be0:	ee07 5a10 	vmov	s14, r5
 8002be4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002be8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bec:	ee07 7a90 	vmov	s15, r7
 8002bf0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8002bf4:	ee36 0a80 	vadd.f32	s0, s13, s0
 8002bf8:	b002      	add	sp, #8
 8002bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bfe <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002bfe:	b500      	push	{lr}
 8002c00:	b083      	sub	sp, #12
 8002c02:	ab02      	add	r3, sp, #8
 8002c04:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002c08:	f89d 2000 	ldrb.w	r2, [sp]
 8002c0c:	2120      	movs	r1, #32
 8002c0e:	203c      	movs	r0, #60	; 0x3c
 8002c10:	f000 fb1a 	bl	8003248 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002c14:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002c18:	2121      	movs	r1, #33	; 0x21
 8002c1a:	203c      	movs	r0, #60	; 0x3c
 8002c1c:	f000 fb14 	bl	8003248 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002c20:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002c24:	2122      	movs	r1, #34	; 0x22
 8002c26:	203c      	movs	r0, #60	; 0x3c
 8002c28:	f000 fb0e 	bl	8003248 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002c2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002c30:	2123      	movs	r1, #35	; 0x23
 8002c32:	203c      	movs	r0, #60	; 0x3c
 8002c34:	f000 fb08 	bl	8003248 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002c38:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002c3c:	2124      	movs	r1, #36	; 0x24
 8002c3e:	203c      	movs	r0, #60	; 0x3c
 8002c40:	f000 fb02 	bl	8003248 <SENSOR_IO_Write>
}
 8002c44:	b003      	add	sp, #12
 8002c46:	f85d fb04 	ldr.w	pc, [sp], #4

08002c4a <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002c4a:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002c4c:	2122      	movs	r1, #34	; 0x22
 8002c4e:	203c      	movs	r0, #60	; 0x3c
 8002c50:	f000 fb0e 	bl	8003270 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002c54:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002c58:	f042 0203 	orr.w	r2, r2, #3
 8002c5c:	2122      	movs	r1, #34	; 0x22
 8002c5e:	203c      	movs	r0, #60	; 0x3c
 8002c60:	f000 faf2 	bl	8003248 <SENSOR_IO_Write>
}
 8002c64:	bd08      	pop	{r3, pc}

08002c66 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002c66:	b510      	push	{r4, lr}
 8002c68:	4604      	mov	r4, r0
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002c6a:	2122      	movs	r1, #34	; 0x22
 8002c6c:	203c      	movs	r0, #60	; 0x3c
 8002c6e:	f000 faff 	bl	8003270 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002c72:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 8002c76:	b10c      	cbz	r4, 8002c7c <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002c78:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002c7c:	2122      	movs	r1, #34	; 0x22
 8002c7e:	203c      	movs	r0, #60	; 0x3c
 8002c80:	f000 fae2 	bl	8003248 <SENSOR_IO_Write>
}
 8002c84:	bd10      	pop	{r4, pc}

08002c86 <LIS3MDL_MagReadID>:
{
 8002c86:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8002c88:	f000 fad6 	bl	8003238 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002c8c:	210f      	movs	r1, #15
 8002c8e:	203c      	movs	r0, #60	; 0x3c
 8002c90:	f000 faee 	bl	8003270 <SENSOR_IO_Read>
}
 8002c94:	bd08      	pop	{r3, pc}
	...

08002c98 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002c98:	b530      	push	{r4, r5, lr}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002c9e:	2121      	movs	r1, #33	; 0x21
 8002ca0:	203c      	movs	r0, #60	; 0x3c
 8002ca2:	f000 fae5 	bl	8003270 <SENSOR_IO_Read>
 8002ca6:	4605      	mov	r5, r0
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002ca8:	2306      	movs	r3, #6
 8002caa:	466a      	mov	r2, sp
 8002cac:	21a8      	movs	r1, #168	; 0xa8
 8002cae:	203c      	movs	r0, #60	; 0x3c
 8002cb0:	f000 faf4 	bl	800329c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e00f      	b.n	8002cd8 <LIS3MDL_MagReadXYZ+0x40>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002cb8:	005a      	lsls	r2, r3, #1
 8002cba:	f102 0111 	add.w	r1, r2, #17
 8002cbe:	4469      	add	r1, sp
 8002cc0:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8002cc4:	3210      	adds	r2, #16
 8002cc6:	446a      	add	r2, sp
 8002cc8:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8002ccc:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8002cd0:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d9ed      	bls.n	8002cb8 <LIS3MDL_MagReadXYZ+0x20>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002cdc:	f005 0560 	and.w	r5, r5, #96	; 0x60
 8002ce0:	2d40      	cmp	r5, #64	; 0x40
 8002ce2:	d00c      	beq.n	8002cfe <LIS3MDL_MagReadXYZ+0x66>
 8002ce4:	d806      	bhi.n	8002cf4 <LIS3MDL_MagReadXYZ+0x5c>
 8002ce6:	b16d      	cbz	r5, 8002d04 <LIS3MDL_MagReadXYZ+0x6c>
 8002ce8:	2d20      	cmp	r5, #32
 8002cea:	d10e      	bne.n	8002d0a <LIS3MDL_MagReadXYZ+0x72>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
    break;
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002cec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002d44 <LIS3MDL_MagReadXYZ+0xac>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
    break;    
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e023      	b.n	8002d3c <LIS3MDL_MagReadXYZ+0xa4>
  switch(ctrlm & 0x60)
 8002cf4:	2d60      	cmp	r5, #96	; 0x60
 8002cf6:	d10b      	bne.n	8002d10 <LIS3MDL_MagReadXYZ+0x78>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002cf8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002d48 <LIS3MDL_MagReadXYZ+0xb0>
 8002cfc:	e7f8      	b.n	8002cf0 <LIS3MDL_MagReadXYZ+0x58>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002cfe:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002d4c <LIS3MDL_MagReadXYZ+0xb4>
 8002d02:	e7f5      	b.n	8002cf0 <LIS3MDL_MagReadXYZ+0x58>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002d04:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002d50 <LIS3MDL_MagReadXYZ+0xb8>
 8002d08:	e7f2      	b.n	8002cf0 <LIS3MDL_MagReadXYZ+0x58>
  switch(ctrlm & 0x60)
 8002d0a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002d54 <LIS3MDL_MagReadXYZ+0xbc>
 8002d0e:	e7ef      	b.n	8002cf0 <LIS3MDL_MagReadXYZ+0x58>
 8002d10:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002d54 <LIS3MDL_MagReadXYZ+0xbc>
 8002d14:	e7ec      	b.n	8002cf0 <LIS3MDL_MagReadXYZ+0x58>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002d16:	aa04      	add	r2, sp, #16
 8002d18:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002d1c:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 8002d20:	ee07 2a90 	vmov	s15, r2
 8002d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d30:	ee17 2a90 	vmov	r2, s15
 8002d34:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for(i=0; i<3; i++)
 8002d38:	3301      	adds	r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d9ea      	bls.n	8002d16 <LIS3MDL_MagReadXYZ+0x7e>
  }
}
 8002d40:	b005      	add	sp, #20
 8002d42:	bd30      	pop	{r4, r5, pc}
 8002d44:	3e947ae1 	.word	0x3e947ae1
 8002d48:	3f147ae1 	.word	0x3f147ae1
 8002d4c:	3edc28f6 	.word	0x3edc28f6
 8002d50:	3e0f5c29 	.word	0x3e0f5c29
 8002d54:	00000000 	.word	0x00000000

08002d58 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002d58:	b530      	push	{r4, r5, lr}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	4605      	mov	r5, r0
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002d5e:	2400      	movs	r4, #0
 8002d60:	e00c      	b.n	8002d7c <LPS22HB_P_ReadPressure+0x24>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002d62:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002d66:	b2c9      	uxtb	r1, r1
 8002d68:	b2e8      	uxtb	r0, r5
 8002d6a:	f000 fa81 	bl	8003270 <SENSOR_IO_Read>
 8002d6e:	f104 0308 	add.w	r3, r4, #8
 8002d72:	446b      	add	r3, sp
 8002d74:	f803 0c04 	strb.w	r0, [r3, #-4]
  for(i = 0; i < 3; i++)
 8002d78:	3401      	adds	r4, #1
 8002d7a:	b2e4      	uxtb	r4, r4
 8002d7c:	2c02      	cmp	r4, #2
 8002d7e:	d9f0      	bls.n	8002d62 <LPS22HB_P_ReadPressure+0xa>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002d80:	2300      	movs	r3, #0
  uint32_t tmp = 0;
 8002d82:	461a      	mov	r2, r3
 8002d84:	e009      	b.n	8002d9a <LPS22HB_P_ReadPressure+0x42>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002d86:	f103 0108 	add.w	r1, r3, #8
 8002d8a:	4469      	add	r1, sp
 8002d8c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
 8002d90:	00d8      	lsls	r0, r3, #3
 8002d92:	4081      	lsls	r1, r0
 8002d94:	430a      	orrs	r2, r1
  for(i = 0; i < 3; i++)
 8002d96:	3301      	adds	r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d9f3      	bls.n	8002d86 <LPS22HB_P_ReadPressure+0x2e>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002d9e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8002da2:	d001      	beq.n	8002da8 <LPS22HB_P_ReadPressure+0x50>
    tmp |= 0xFF000000;
 8002da4:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 8002da8:	2364      	movs	r3, #100	; 0x64
 8002daa:	fb03 f202 	mul.w	r2, r3, r2
 8002dae:	2a00      	cmp	r2, #0
 8002db0:	db0a      	blt.n	8002dc8 <LPS22HB_P_ReadPressure+0x70>
 8002db2:	1312      	asrs	r2, r2, #12

  return (float)((float)raw_press / 100.0f);
 8002db4:	ee07 2a90 	vmov	s15, r2
 8002db8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8002dbc:	eddf 7a04 	vldr	s15, [pc, #16]	; 8002dd0 <LPS22HB_P_ReadPressure+0x78>
 8002dc0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002dc4:	b003      	add	sp, #12
 8002dc6:	bd30      	pop	{r4, r5, pc}
  raw_press = (raw_press * 100) / 4096;
 8002dc8:	f602 72ff 	addw	r2, r2, #4095	; 0xfff
 8002dcc:	e7f1      	b.n	8002db2 <LPS22HB_P_ReadPressure+0x5a>
 8002dce:	bf00      	nop
 8002dd0:	42c80000 	.word	0x42c80000

08002dd4 <LPS22HB_T_ReadTemp>:
  * @brief  Read temperature value of LPS22HB
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float LPS22HB_T_ReadTemp(uint16_t DeviceAddr)
{
 8002dd4:	b530      	push	{r4, r5, lr}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	4605      	mov	r5, r0
  int16_t raw_data;
  uint8_t buffer[2];
  uint16_t tmp;
  uint8_t i;

  for(i = 0; i < 2; i++)
 8002dda:	2400      	movs	r4, #0
 8002ddc:	e00c      	b.n	8002df8 <LPS22HB_T_ReadTemp+0x24>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_TEMP_OUT_L_REG + i));
 8002dde:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8002de2:	b2c9      	uxtb	r1, r1
 8002de4:	b2e8      	uxtb	r0, r5
 8002de6:	f000 fa43 	bl	8003270 <SENSOR_IO_Read>
 8002dea:	f104 0308 	add.w	r3, r4, #8
 8002dee:	446b      	add	r3, sp
 8002df0:	f803 0c04 	strb.w	r0, [r3, #-4]
  for(i = 0; i < 2; i++)
 8002df4:	3401      	adds	r4, #1
 8002df6:	b2e4      	uxtb	r4, r4
 8002df8:	2c01      	cmp	r4, #1
 8002dfa:	d9f0      	bls.n	8002dde <LPS22HB_T_ReadTemp+0xa>
  }

  /* Build the raw tmp */
  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 8002dfc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002e00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e04:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e08:	b29b      	uxth	r3, r3

  raw_data = (tmp * 10) / 100;
 8002e0a:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <LPS22HB_T_ReadTemp+0x54>)
 8002e0c:	fb82 2303 	smull	r2, r3, r2, r3
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	ee00 3a10 	vmov	s0, r3
  
  return ((float)(raw_data / 10.0f));
 8002e16:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8002e1a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002e1e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002e22:	b003      	add	sp, #12
 8002e24:	bd30      	pop	{r4, r5, pc}
 8002e26:	bf00      	nop
 8002e28:	66666667 	.word	0x66666667

08002e2c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002e2c:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002e2e:	b2c4      	uxtb	r4, r0
 8002e30:	211a      	movs	r1, #26
 8002e32:	4620      	mov	r0, r4
 8002e34:	f000 fa1c 	bl	8003270 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8002e38:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	211a      	movs	r1, #26
 8002e42:	4620      	mov	r0, r4
 8002e44:	f000 fa00 	bl	8003248 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002e48:	2110      	movs	r1, #16
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f000 fa10 	bl	8003270 <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002e50:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002e54:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8002e58:	2110      	movs	r1, #16
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f000 f9f4 	bl	8003248 <SENSOR_IO_Write>
}  
 8002e60:	bd10      	pop	{r4, pc}

08002e62 <LPS22HB_P_Init>:
{
 8002e62:	b508      	push	{r3, lr}
  LPS22HB_Init(DeviceAddr);
 8002e64:	f7ff ffe2 	bl	8002e2c <LPS22HB_Init>
}
 8002e68:	bd08      	pop	{r3, pc}

08002e6a <LPS22HB_T_Init>:
{  
 8002e6a:	b508      	push	{r3, lr}
  LPS22HB_Init(DeviceAddr);
 8002e6c:	f7ff ffde 	bl	8002e2c <LPS22HB_Init>
}
 8002e70:	bd08      	pop	{r3, pc}

08002e72 <LPS22HB_P_ReadID>:
{  
 8002e72:	b510      	push	{r4, lr}
 8002e74:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 8002e76:	f000 f9df 	bl	8003238 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002e7a:	210f      	movs	r1, #15
 8002e7c:	b2e0      	uxtb	r0, r4
 8002e7e:	f000 f9f7 	bl	8003270 <SENSOR_IO_Read>
}
 8002e82:	bd10      	pop	{r4, pc}

08002e84 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002e84:	b510      	push	{r4, lr}
 8002e86:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002e88:	2110      	movs	r1, #16
 8002e8a:	20d4      	movs	r0, #212	; 0xd4
 8002e8c:	f000 f9f0 	bl	8003270 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002e90:	b2e2      	uxtb	r2, r4
  tmp &= ~(0xFC);
 8002e92:	f000 0003 	and.w	r0, r0, #3
  tmp |= ctrl;
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002e96:	4302      	orrs	r2, r0
 8002e98:	2110      	movs	r1, #16
 8002e9a:	20d4      	movs	r0, #212	; 0xd4
 8002e9c:	f000 f9d4 	bl	8003248 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002ea0:	2112      	movs	r1, #18
 8002ea2:	20d4      	movs	r0, #212	; 0xd4
 8002ea4:	f000 f9e4 	bl	8003270 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8002ea8:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002eac:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8002eb0:	2112      	movs	r1, #18
 8002eb2:	20d4      	movs	r0, #212	; 0xd4
 8002eb4:	f000 f9c8 	bl	8003248 <SENSOR_IO_Write>
}
 8002eb8:	bd10      	pop	{r4, pc}

08002eba <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002eba:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002ebc:	2110      	movs	r1, #16
 8002ebe:	20d4      	movs	r0, #212	; 0xd4
 8002ec0:	f000 f9d6 	bl	8003270 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002ec4:	f000 020f 	and.w	r2, r0, #15
 8002ec8:	2110      	movs	r1, #16
 8002eca:	20d4      	movs	r0, #212	; 0xd4
 8002ecc:	f000 f9bc 	bl	8003248 <SENSOR_IO_Write>
}
 8002ed0:	bd08      	pop	{r3, pc}

08002ed2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002ed2:	b510      	push	{r4, lr}
 8002ed4:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002ed6:	2115      	movs	r1, #21
 8002ed8:	20d4      	movs	r0, #212	; 0xd4
 8002eda:	f000 f9c9 	bl	8003270 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002ede:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8002ee2:	b10c      	cbz	r4, 8002ee8 <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002ee4:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002ee8:	2115      	movs	r1, #21
 8002eea:	20d4      	movs	r0, #212	; 0xd4
 8002eec:	f000 f9ac 	bl	8003248 <SENSOR_IO_Write>
}
 8002ef0:	bd10      	pop	{r4, pc}

08002ef2 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002ef2:	b510      	push	{r4, lr}
 8002ef4:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002ef6:	2111      	movs	r1, #17
 8002ef8:	20d4      	movs	r0, #212	; 0xd4
 8002efa:	f000 f9b9 	bl	8003270 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002efe:	b2e2      	uxtb	r2, r4
  tmp &= ~(0xFC);
 8002f00:	f000 0003 	and.w	r0, r0, #3
  tmp |= ctrl;
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002f04:	4302      	orrs	r2, r0
 8002f06:	2111      	movs	r1, #17
 8002f08:	20d4      	movs	r0, #212	; 0xd4
 8002f0a:	f000 f99d 	bl	8003248 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002f0e:	2112      	movs	r1, #18
 8002f10:	20d4      	movs	r0, #212	; 0xd4
 8002f12:	f000 f9ad 	bl	8003270 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8002f16:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002f1a:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8002f1e:	2112      	movs	r1, #18
 8002f20:	20d4      	movs	r0, #212	; 0xd4
 8002f22:	f000 f991 	bl	8003248 <SENSOR_IO_Write>
}
 8002f26:	bd10      	pop	{r4, pc}

08002f28 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002f28:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002f2a:	2111      	movs	r1, #17
 8002f2c:	20d4      	movs	r0, #212	; 0xd4
 8002f2e:	f000 f99f 	bl	8003270 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002f32:	f000 020f 	and.w	r2, r0, #15
 8002f36:	2111      	movs	r1, #17
 8002f38:	20d4      	movs	r0, #212	; 0xd4
 8002f3a:	f000 f985 	bl	8003248 <SENSOR_IO_Write>
}
 8002f3e:	bd08      	pop	{r3, pc}

08002f40 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002f40:	b510      	push	{r4, lr}
 8002f42:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002f44:	2116      	movs	r1, #22
 8002f46:	20d4      	movs	r0, #212	; 0xd4
 8002f48:	f000 f992 	bl	8003270 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002f4c:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 8002f50:	b10c      	cbz	r4, 8002f56 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002f52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002f56:	2116      	movs	r1, #22
 8002f58:	20d4      	movs	r0, #212	; 0xd4
 8002f5a:	f000 f975 	bl	8003248 <SENSOR_IO_Write>
}
 8002f5e:	bd10      	pop	{r4, pc}

08002f60 <LSM6DSL_AccReadID>:
{  
 8002f60:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 8002f62:	f000 f969 	bl	8003238 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002f66:	210f      	movs	r1, #15
 8002f68:	20d4      	movs	r0, #212	; 0xd4
 8002f6a:	f000 f981 	bl	8003270 <SENSOR_IO_Read>
}
 8002f6e:	bd08      	pop	{r3, pc}

08002f70 <LSM6DSL_GyroReadID>:
{
 8002f70:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8002f72:	f000 f961 	bl	8003238 <SENSOR_IO_Init>
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002f76:	210f      	movs	r1, #15
 8002f78:	20d4      	movs	r0, #212	; 0xd4
 8002f7a:	f000 f979 	bl	8003270 <SENSOR_IO_Read>
}
 8002f7e:	bd08      	pop	{r3, pc}

08002f80 <LSM6DSL_AccReadXYZ>:
{
 8002f80:	b530      	push	{r4, r5, lr}
 8002f82:	b085      	sub	sp, #20
 8002f84:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002f86:	2110      	movs	r1, #16
 8002f88:	20d4      	movs	r0, #212	; 0xd4
 8002f8a:	f000 f971 	bl	8003270 <SENSOR_IO_Read>
 8002f8e:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002f90:	2306      	movs	r3, #6
 8002f92:	466a      	mov	r2, sp
 8002f94:	2128      	movs	r1, #40	; 0x28
 8002f96:	20d4      	movs	r0, #212	; 0xd4
 8002f98:	f000 f980 	bl	800329c <SENSOR_IO_ReadMultiple>
  for(i=0; i<3; i++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e00f      	b.n	8002fc0 <LSM6DSL_AccReadXYZ+0x40>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002fa0:	005a      	lsls	r2, r3, #1
 8002fa2:	f102 0111 	add.w	r1, r2, #17
 8002fa6:	4469      	add	r1, sp
 8002fa8:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8002fac:	3210      	adds	r2, #16
 8002fae:	446a      	add	r2, sp
 8002fb0:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8002fb4:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8002fb8:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d9ed      	bls.n	8002fa0 <LSM6DSL_AccReadXYZ+0x20>
  switch(ctrlx & 0x0C)
 8002fc4:	f005 050c 	and.w	r5, r5, #12
 8002fc8:	2d0c      	cmp	r5, #12
 8002fca:	d808      	bhi.n	8002fde <LSM6DSL_AccReadXYZ+0x5e>
 8002fcc:	e8df f005 	tbb	[pc, r5]
 8002fd0:	07070714 	.word	0x07070714
 8002fd4:	07070711 	.word	0x07070711
 8002fd8:	0707070b 	.word	0x0707070b
 8002fdc:	0e          	.byte	0x0e
 8002fdd:	00          	.byte	0x00
 8002fde:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800302c <LSM6DSL_AccReadXYZ+0xac>
  for(i=0; i<3; i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e01e      	b.n	8003024 <LSM6DSL_AccReadXYZ+0xa4>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002fe6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003030 <LSM6DSL_AccReadXYZ+0xb0>
    break;
 8002fea:	e7fa      	b.n	8002fe2 <LSM6DSL_AccReadXYZ+0x62>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002fec:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003034 <LSM6DSL_AccReadXYZ+0xb4>
    break;
 8002ff0:	e7f7      	b.n	8002fe2 <LSM6DSL_AccReadXYZ+0x62>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002ff2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003038 <LSM6DSL_AccReadXYZ+0xb8>
    break;    
 8002ff6:	e7f4      	b.n	8002fe2 <LSM6DSL_AccReadXYZ+0x62>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002ff8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800303c <LSM6DSL_AccReadXYZ+0xbc>
 8002ffc:	e7f1      	b.n	8002fe2 <LSM6DSL_AccReadXYZ+0x62>
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002ffe:	aa04      	add	r2, sp, #16
 8003000:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003004:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 8003008:	ee07 2a90 	vmov	s15, r2
 800300c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003018:	ee17 2a90 	vmov	r2, s15
 800301c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for(i=0; i<3; i++)
 8003020:	3301      	adds	r3, #1
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d9ea      	bls.n	8002ffe <LSM6DSL_AccReadXYZ+0x7e>
}
 8003028:	b005      	add	sp, #20
 800302a:	bd30      	pop	{r4, r5, pc}
 800302c:	00000000 	.word	0x00000000
 8003030:	3df9db23 	.word	0x3df9db23
 8003034:	3e79db23 	.word	0x3e79db23
 8003038:	3ef9db23 	.word	0x3ef9db23
 800303c:	3d79db23 	.word	0x3d79db23

08003040 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003040:	b530      	push	{r4, r5, lr}
 8003042:	b085      	sub	sp, #20
 8003044:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003046:	2111      	movs	r1, #17
 8003048:	20d4      	movs	r0, #212	; 0xd4
 800304a:	f000 f911 	bl	8003270 <SENSOR_IO_Read>
 800304e:	4605      	mov	r5, r0
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8003050:	2306      	movs	r3, #6
 8003052:	466a      	mov	r2, sp
 8003054:	2122      	movs	r1, #34	; 0x22
 8003056:	20d4      	movs	r0, #212	; 0xd4
 8003058:	f000 f920 	bl	800329c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	e00f      	b.n	8003080 <LSM6DSL_GyroReadXYZAngRate+0x40>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003060:	005a      	lsls	r2, r3, #1
 8003062:	f102 0111 	add.w	r1, r2, #17
 8003066:	4469      	add	r1, sp
 8003068:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800306c:	3210      	adds	r2, #16
 800306e:	446a      	add	r2, sp
 8003070:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8003074:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8003078:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 800307c:	3301      	adds	r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d9ed      	bls.n	8003060 <LSM6DSL_GyroReadXYZAngRate+0x20>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8003084:	f005 050c 	and.w	r5, r5, #12
 8003088:	2d0c      	cmp	r5, #12
 800308a:	d808      	bhi.n	800309e <LSM6DSL_GyroReadXYZAngRate+0x5e>
 800308c:	e8df f005 	tbb	[pc, r5]
 8003090:	07070714 	.word	0x07070714
 8003094:	0707070b 	.word	0x0707070b
 8003098:	0707070e 	.word	0x0707070e
 800309c:	11          	.byte	0x11
 800309d:	00          	.byte	0x00
 800309e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80030e8 <LSM6DSL_GyroReadXYZAngRate+0xa8>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
    break;    
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	e01c      	b.n	80030e0 <LSM6DSL_GyroReadXYZAngRate+0xa0>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80030a6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80030ec <LSM6DSL_GyroReadXYZAngRate+0xac>
    break;
 80030aa:	e7fa      	b.n	80030a2 <LSM6DSL_GyroReadXYZAngRate+0x62>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80030ac:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80030f0 <LSM6DSL_GyroReadXYZAngRate+0xb0>
    break;
 80030b0:	e7f7      	b.n	80030a2 <LSM6DSL_GyroReadXYZAngRate+0x62>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80030b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80030f4 <LSM6DSL_GyroReadXYZAngRate+0xb4>
    break;    
 80030b6:	e7f4      	b.n	80030a2 <LSM6DSL_GyroReadXYZAngRate+0x62>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80030b8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80030f8 <LSM6DSL_GyroReadXYZAngRate+0xb8>
 80030bc:	e7f1      	b.n	80030a2 <LSM6DSL_GyroReadXYZAngRate+0x62>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80030be:	aa04      	add	r2, sp, #16
 80030c0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80030c4:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 80030c8:	ee07 2a90 	vmov	s15, r2
 80030cc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80030d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d8:	edc2 7a00 	vstr	s15, [r2]
  for(i=0; i<3; i++)
 80030dc:	3301      	adds	r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d9ec      	bls.n	80030be <LSM6DSL_GyroReadXYZAngRate+0x7e>
  }
}
 80030e4:	b005      	add	sp, #20
 80030e6:	bd30      	pop	{r4, r5, pc}
 80030e8:	00000000 	.word	0x00000000
 80030ec:	418c0000 	.word	0x418c0000
 80030f0:	420c0000 	.word	0x420c0000
 80030f4:	428c0000 	.word	0x428c0000
 80030f8:	410c0000 	.word	0x410c0000

080030fc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80030fc:	b530      	push	{r4, r5, lr}
 80030fe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003100:	4c20      	ldr	r4, [pc, #128]	; (8003184 <I2Cx_MspInit+0x88>)
 8003102:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	64e3      	str	r3, [r4, #76]	; 0x4c
 800310a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003114:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003118:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800311a:	2312      	movs	r3, #18
 800311c:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800311e:	2301      	movs	r3, #1
 8003120:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003122:	2303      	movs	r3, #3
 8003124:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003126:	2304      	movs	r3, #4
 8003128:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800312a:	4d17      	ldr	r5, [pc, #92]	; (8003188 <I2Cx_MspInit+0x8c>)
 800312c:	a903      	add	r1, sp, #12
 800312e:	4628      	mov	r0, r5
 8003130:	f000 fa7c 	bl	800362c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003134:	a903      	add	r1, sp, #12
 8003136:	4628      	mov	r0, r5
 8003138:	f000 fa78 	bl	800362c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800313c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800313e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003142:	65a3      	str	r3, [r4, #88]	; 0x58
 8003144:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800314e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003150:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003154:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003156:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003158:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800315c:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	210f      	movs	r1, #15
 8003162:	2021      	movs	r0, #33	; 0x21
 8003164:	f000 fa08 	bl	8003578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003168:	2021      	movs	r0, #33	; 0x21
 800316a:	f000 fa3d 	bl	80035e8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	210f      	movs	r1, #15
 8003172:	2022      	movs	r0, #34	; 0x22
 8003174:	f000 fa00 	bl	8003578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003178:	2022      	movs	r0, #34	; 0x22
 800317a:	f000 fa35 	bl	80035e8 <HAL_NVIC_EnableIRQ>
}
 800317e:	b009      	add	sp, #36	; 0x24
 8003180:	bd30      	pop	{r4, r5, pc}
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	48000400 	.word	0x48000400

0800318c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800318c:	b538      	push	{r3, r4, r5, lr}
 800318e:	4604      	mov	r4, r0
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <I2Cx_Init+0x30>)
 8003192:	6003      	str	r3, [r0, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <I2Cx_Init+0x34>)
 8003196:	6043      	str	r3, [r0, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003198:	2500      	movs	r5, #0
 800319a:	6085      	str	r5, [r0, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800319c:	2301      	movs	r3, #1
 800319e:	60c3      	str	r3, [r0, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80031a0:	6105      	str	r5, [r0, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80031a2:	6145      	str	r5, [r0, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80031a4:	61c5      	str	r5, [r0, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80031a6:	6205      	str	r5, [r0, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80031a8:	f7ff ffa8 	bl	80030fc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80031ac:	4620      	mov	r0, r4
 80031ae:	f000 fd97 	bl	8003ce0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80031b2:	4629      	mov	r1, r5
 80031b4:	4620      	mov	r0, r4
 80031b6:	f001 f933 	bl	8004420 <HAL_I2CEx_ConfigAnalogFilter>
}
 80031ba:	bd38      	pop	{r3, r4, r5, pc}
 80031bc:	40005800 	.word	0x40005800
 80031c0:	00702681 	.word	0x00702681

080031c4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80031c4:	b510      	push	{r4, lr}
 80031c6:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80031c8:	f000 fde8 	bl	8003d9c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff ffdd 	bl	800318c <I2Cx_Init>
}
 80031d2:	bd10      	pop	{r4, pc}

080031d4 <I2Cx_WriteMultiple>:
{
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	4605      	mov	r5, r0
 80031da:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80031dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031e0:	9102      	str	r1, [sp, #8]
 80031e2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80031e6:	9101      	str	r1, [sp, #4]
 80031e8:	9908      	ldr	r1, [sp, #32]
 80031ea:	9100      	str	r1, [sp, #0]
 80031ec:	4621      	mov	r1, r4
 80031ee:	f000 ff6b 	bl	80040c8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80031f2:	4606      	mov	r6, r0
 80031f4:	b910      	cbnz	r0, 80031fc <I2Cx_WriteMultiple+0x28>
}
 80031f6:	4630      	mov	r0, r6
 80031f8:	b004      	add	sp, #16
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 80031fc:	4621      	mov	r1, r4
 80031fe:	4628      	mov	r0, r5
 8003200:	f7ff ffe0 	bl	80031c4 <I2Cx_Error>
 8003204:	e7f7      	b.n	80031f6 <I2Cx_WriteMultiple+0x22>

08003206 <I2Cx_ReadMultiple>:
{
 8003206:	b570      	push	{r4, r5, r6, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	4605      	mov	r5, r0
 800320c:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800320e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003212:	9102      	str	r1, [sp, #8]
 8003214:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003218:	9101      	str	r1, [sp, #4]
 800321a:	9908      	ldr	r1, [sp, #32]
 800321c:	9100      	str	r1, [sp, #0]
 800321e:	4621      	mov	r1, r4
 8003220:	f001 f826 	bl	8004270 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8003224:	4606      	mov	r6, r0
 8003226:	b910      	cbnz	r0, 800322e <I2Cx_ReadMultiple+0x28>
}
 8003228:	4630      	mov	r0, r6
 800322a:	b004      	add	sp, #16
 800322c:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800322e:	4621      	mov	r1, r4
 8003230:	4628      	mov	r0, r5
 8003232:	f7ff ffc7 	bl	80031c4 <I2Cx_Error>
 8003236:	e7f7      	b.n	8003228 <I2Cx_ReadMultiple+0x22>

08003238 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003238:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cHandler);
 800323a:	4802      	ldr	r0, [pc, #8]	; (8003244 <SENSOR_IO_Init+0xc>)
 800323c:	f7ff ffa6 	bl	800318c <I2Cx_Init>
}
 8003240:	bd08      	pop	{r3, pc}
 8003242:	bf00      	nop
 8003244:	20000aa4 	.word	0x20000aa4

08003248 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003248:	b500      	push	{lr}
 800324a:	b085      	sub	sp, #20
 800324c:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003250:	2301      	movs	r3, #1
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	f10d 020f 	add.w	r2, sp, #15
 8003258:	9200      	str	r2, [sp, #0]
 800325a:	460a      	mov	r2, r1
 800325c:	4601      	mov	r1, r0
 800325e:	4803      	ldr	r0, [pc, #12]	; (800326c <SENSOR_IO_Write+0x24>)
 8003260:	f7ff ffb8 	bl	80031d4 <I2Cx_WriteMultiple>
}
 8003264:	b005      	add	sp, #20
 8003266:	f85d fb04 	ldr.w	pc, [sp], #4
 800326a:	bf00      	nop
 800326c:	20000aa4 	.word	0x20000aa4

08003270 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003270:	b500      	push	{lr}
 8003272:	b085      	sub	sp, #20
 8003274:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	f88d 300f 	strb.w	r3, [sp, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800327c:	2301      	movs	r3, #1
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	f10d 010f 	add.w	r1, sp, #15
 8003284:	9100      	str	r1, [sp, #0]
 8003286:	4601      	mov	r1, r0
 8003288:	4803      	ldr	r0, [pc, #12]	; (8003298 <SENSOR_IO_Read+0x28>)
 800328a:	f7ff ffbc 	bl	8003206 <I2Cx_ReadMultiple>

  return read_value;
}
 800328e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8003292:	b005      	add	sp, #20
 8003294:	f85d fb04 	ldr.w	pc, [sp], #4
 8003298:	20000aa4 	.word	0x20000aa4

0800329c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800329c:	b500      	push	{lr}
 800329e:	b083      	sub	sp, #12
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	9200      	str	r2, [sp, #0]
 80032a4:	2301      	movs	r3, #1
 80032a6:	460a      	mov	r2, r1
 80032a8:	4601      	mov	r1, r0
 80032aa:	4803      	ldr	r0, [pc, #12]	; (80032b8 <SENSOR_IO_ReadMultiple+0x1c>)
 80032ac:	f7ff ffab 	bl	8003206 <I2Cx_ReadMultiple>
}
 80032b0:	b280      	uxth	r0, r0
 80032b2:	b003      	add	sp, #12
 80032b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80032b8:	20000aa4 	.word	0x20000aa4

080032bc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80032bc:	b510      	push	{r4, lr}
 80032be:	b082      	sub	sp, #8
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <BSP_ACCELERO_Init+0x44>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4798      	blx	r3
 80032c6:	286a      	cmp	r0, #106	; 0x6a
 80032c8:	d002      	beq.n	80032d0 <BSP_ACCELERO_Init+0x14>
  {
    ret = ACCELERO_ERROR;
 80032ca:	2001      	movs	r0, #1
    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
  }  

  return ret;
}
 80032cc:	b002      	add	sp, #8
 80032ce:	bd10      	pop	{r4, pc}
    AccelerometerDrv = &Lsm6dslAccDrv;
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <BSP_ACCELERO_Init+0x44>)
 80032d2:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <BSP_ACCELERO_Init+0x48>)
 80032d4:	6013      	str	r3, [r2, #0]
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80032d6:	2230      	movs	r2, #48	; 0x30
 80032d8:	f88d 2001 	strb.w	r2, [sp, #1]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80032dc:	2400      	movs	r4, #0
 80032de:	f88d 4002 	strb.w	r4, [sp, #2]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80032e2:	f88d 4006 	strb.w	r4, [sp, #6]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80032e6:	2240      	movs	r2, #64	; 0x40
 80032e8:	f88d 2004 	strb.w	r2, [sp, #4]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80032ec:	f88d 4003 	strb.w	r4, [sp, #3]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80032f0:	f88d 4007 	strb.w	r4, [sp, #7]
    AccelerometerDrv->Init(ctrl);
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f244 4030 	movw	r0, #17456	; 0x4430
 80032fa:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80032fc:	4620      	mov	r0, r4
 80032fe:	e7e5      	b.n	80032cc <BSP_ACCELERO_Init+0x10>
 8003300:	2000049c 	.word	0x2000049c
 8003304:	20000b74 	.word	0x20000b74

08003308 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003308:	b508      	push	{r3, lr}
  if(AccelerometerDrv != NULL)
 800330a:	4b03      	ldr	r3, [pc, #12]	; (8003318 <BSP_ACCELERO_AccGetXYZ+0x10>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	b113      	cbz	r3, 8003316 <BSP_ACCELERO_AccGetXYZ+0xe>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	b103      	cbz	r3, 8003316 <BSP_ACCELERO_AccGetXYZ+0xe>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003314:	4798      	blx	r3
    }
  }
}
 8003316:	bd08      	pop	{r3, pc}
 8003318:	20000b74 	.word	0x20000b74

0800331c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800331c:	b510      	push	{r4, lr}
 800331e:	b082      	sub	sp, #8
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <BSP_GYRO_Init+0x4c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4798      	blx	r3
 8003326:	286a      	cmp	r0, #106	; 0x6a
 8003328:	d002      	beq.n	8003330 <BSP_GYRO_Init+0x14>
  {
    ret = GYRO_ERROR;
 800332a:	2001      	movs	r0, #1
    
    ret = GYRO_OK;
  }
  
  return ret;
}
 800332c:	b002      	add	sp, #8
 800332e:	bd10      	pop	{r4, pc}
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <BSP_GYRO_Init+0x4c>)
 8003332:	4a0e      	ldr	r2, [pc, #56]	; (800336c <BSP_GYRO_Init+0x50>)
 8003334:	6013      	str	r3, [r2, #0]
    LSM6DSL_InitStructure.Power_Mode = 0;
 8003336:	2400      	movs	r4, #0
 8003338:	f88d 4000 	strb.w	r4, [sp]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800333c:	2230      	movs	r2, #48	; 0x30
 800333e:	f88d 2001 	strb.w	r2, [sp, #1]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003342:	f88d 4002 	strb.w	r4, [sp, #2]
    LSM6DSL_InitStructure.Band_Width = 0;
 8003346:	f88d 4003 	strb.w	r4, [sp, #3]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800334a:	2240      	movs	r2, #64	; 0x40
 800334c:	f88d 2004 	strb.w	r2, [sp, #4]
    LSM6DSL_InitStructure.Endianness = 0;
 8003350:	f88d 4005 	strb.w	r4, [sp, #5]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8003354:	220c      	movs	r2, #12
 8003356:	f88d 2006 	strb.w	r2, [sp, #6]
    GyroscopeDrv->Init(ctrl);
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f244 403c 	movw	r0, #17468	; 0x443c
 8003360:	4798      	blx	r3
    ret = GYRO_OK;
 8003362:	4620      	mov	r0, r4
 8003364:	e7e2      	b.n	800332c <BSP_GYRO_Init+0x10>
 8003366:	bf00      	nop
 8003368:	20000468 	.word	0x20000468
 800336c:	20000b78 	.word	0x20000b78

08003370 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8003370:	b508      	push	{r3, lr}
  if(GyroscopeDrv != NULL)
 8003372:	4b03      	ldr	r3, [pc, #12]	; (8003380 <BSP_GYRO_GetXYZ+0x10>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b113      	cbz	r3, 800337e <BSP_GYRO_GetXYZ+0xe>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	b103      	cbz	r3, 800337e <BSP_GYRO_GetXYZ+0xe>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800337c:	4798      	blx	r3
    }
  }
}
 800337e:	bd08      	pop	{r3, pc}
 8003380:	20000b78 	.word	0x20000b78

08003384 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003384:	b508      	push	{r3, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <BSP_HSENSOR_Init+0x24>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	20be      	movs	r0, #190	; 0xbe
 800338c:	4798      	blx	r3
 800338e:	28bc      	cmp	r0, #188	; 0xbc
 8003390:	d001      	beq.n	8003396 <BSP_HSENSOR_Init+0x12>
  {
    ret = HSENSOR_ERROR;
 8003392:	2001      	movs	r0, #1
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
    ret = HSENSOR_OK;
  }
  
  return ret;
}
 8003394:	bd08      	pop	{r3, pc}
    Hsensor_drv = &HTS221_H_Drv;
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <BSP_HSENSOR_Init+0x24>)
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <BSP_HSENSOR_Init+0x28>)
 800339a:	6013      	str	r3, [r2, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	20be      	movs	r0, #190	; 0xbe
 80033a0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80033a2:	2000      	movs	r0, #0
 80033a4:	e7f6      	b.n	8003394 <BSP_HSENSOR_Init+0x10>
 80033a6:	bf00      	nop
 80033a8:	2000040c 	.word	0x2000040c
 80033ac:	20000b7c 	.word	0x20000b7c

080033b0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80033b0:	b508      	push	{r3, lr}
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80033b2:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <BSP_HSENSOR_ReadHumidity+0x10>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	20be      	movs	r0, #190	; 0xbe
 80033ba:	4798      	blx	r3
}
 80033bc:	bd08      	pop	{r3, pc}
 80033be:	bf00      	nop
 80033c0:	20000b7c 	.word	0x20000b7c

080033c4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	b082      	sub	sp, #8
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <BSP_MAGNETO_Init+0x44>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4798      	blx	r3
 80033ce:	283d      	cmp	r0, #61	; 0x3d
 80033d0:	d002      	beq.n	80033d8 <BSP_MAGNETO_Init+0x14>
  {
    ret = MAGNETO_ERROR;
 80033d2:	2001      	movs	r0, #1
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
  } 

  return ret;  
}
 80033d4:	b002      	add	sp, #8
 80033d6:	bd10      	pop	{r4, pc}
    MagnetoDrv = &Lis3mdlMagDrv;
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <BSP_MAGNETO_Init+0x44>)
 80033da:	4a0c      	ldr	r2, [pc, #48]	; (800340c <BSP_MAGNETO_Init+0x48>)
 80033dc:	6013      	str	r3, [r2, #0]
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80033de:	2258      	movs	r2, #88	; 0x58
 80033e0:	f88d 2000 	strb.w	r2, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80033e4:	2400      	movs	r4, #0
 80033e6:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80033ea:	f88d 4002 	strb.w	r4, [sp, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80033ee:	2208      	movs	r2, #8
 80033f0:	f88d 2003 	strb.w	r2, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80033f4:	2240      	movs	r2, #64	; 0x40
 80033f6:	f88d 2004 	strb.w	r2, [sp, #4]
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	aa02      	add	r2, sp, #8
 80033fe:	e912 0003 	ldmdb	r2, {r0, r1}
 8003402:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003404:	4620      	mov	r0, r4
 8003406:	e7e5      	b.n	80033d4 <BSP_MAGNETO_Init+0x10>
 8003408:	20000418 	.word	0x20000418
 800340c:	20000b80 	.word	0x20000b80

08003410 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8003410:	b508      	push	{r3, lr}
  if(MagnetoDrv != NULL)
 8003412:	4b03      	ldr	r3, [pc, #12]	; (8003420 <BSP_MAGNETO_GetXYZ+0x10>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	b113      	cbz	r3, 800341e <BSP_MAGNETO_GetXYZ+0xe>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	b103      	cbz	r3, 800341e <BSP_MAGNETO_GetXYZ+0xe>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800341c:	4798      	blx	r3
    }
  }
}
 800341e:	bd08      	pop	{r3, pc}
 8003420:	20000b80 	.word	0x20000b80

08003424 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003424:	b508      	push	{r3, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <BSP_PSENSOR_Init+0x24>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	20ba      	movs	r0, #186	; 0xba
 800342c:	4798      	blx	r3
 800342e:	28b1      	cmp	r0, #177	; 0xb1
 8003430:	d001      	beq.n	8003436 <BSP_PSENSOR_Init+0x12>
  {
    ret = PSENSOR_ERROR;
 8003432:	2001      	movs	r0, #1
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
    ret = PSENSOR_OK;
  }
  
  return ret;
}
 8003434:	bd08      	pop	{r3, pc}
     Psensor_drv = &LPS22HB_P_Drv;
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <BSP_PSENSOR_Init+0x24>)
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <BSP_PSENSOR_Init+0x28>)
 800343a:	6013      	str	r3, [r2, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	20ba      	movs	r0, #186	; 0xba
 8003440:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003442:	2000      	movs	r0, #0
 8003444:	e7f6      	b.n	8003434 <BSP_PSENSOR_Init+0x10>
 8003446:	bf00      	nop
 8003448:	2000045c 	.word	0x2000045c
 800344c:	20000b84 	.word	0x20000b84

08003450 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003450:	b508      	push	{r3, lr}
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003452:	4b03      	ldr	r3, [pc, #12]	; (8003460 <BSP_PSENSOR_ReadPressure+0x10>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	20ba      	movs	r0, #186	; 0xba
 800345a:	4798      	blx	r3
}
 800345c:	bd08      	pop	{r3, pc}
 800345e:	bf00      	nop
 8003460:	20000b84 	.word	0x20000b84

08003464 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003464:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003466:	4c06      	ldr	r4, [pc, #24]	; (8003480 <BSP_TSENSOR_Init+0x1c>)
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <BSP_TSENSOR_Init+0x20>)
 800346a:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800346c:	f7ff fee4 	bl	8003238 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2100      	movs	r1, #0
 8003476:	20be      	movs	r0, #190	; 0xbe
 8003478:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 800347a:	2000      	movs	r0, #0
 800347c:	bd10      	pop	{r4, pc}
 800347e:	bf00      	nop
 8003480:	20000b88 	.word	0x20000b88
 8003484:	200003fc 	.word	0x200003fc

08003488 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003488:	b508      	push	{r3, lr}
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800348a:	4b03      	ldr	r3, [pc, #12]	; (8003498 <BSP_TSENSOR_ReadTemp+0x10>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	20be      	movs	r0, #190	; 0xbe
 8003492:	4798      	blx	r3
}
 8003494:	bd08      	pop	{r3, pc}
 8003496:	bf00      	nop
 8003498:	20000b88 	.word	0x20000b88

0800349c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800349c:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_InitTick+0x44>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b90b      	cbnz	r3, 80034a6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80034a2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80034a4:	4770      	bx	lr
{
 80034a6:	b510      	push	{r4, lr}
 80034a8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <HAL_InitTick+0x48>)
 80034b4:	6810      	ldr	r0, [r2, #0]
 80034b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80034ba:	f000 f8a3 	bl	8003604 <HAL_SYSTICK_Config>
 80034be:	b968      	cbnz	r0, 80034dc <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c0:	2c0f      	cmp	r4, #15
 80034c2:	d901      	bls.n	80034c8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80034c4:	2001      	movs	r0, #1
 80034c6:	e00a      	b.n	80034de <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c8:	2200      	movs	r2, #0
 80034ca:	4621      	mov	r1, r4
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	f000 f852 	bl	8003578 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034d4:	4b02      	ldr	r3, [pc, #8]	; (80034e0 <HAL_InitTick+0x44>)
 80034d6:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034d8:	2000      	movs	r0, #0
 80034da:	e000      	b.n	80034de <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80034dc:	2001      	movs	r0, #1
}
 80034de:	bd10      	pop	{r4, pc}
 80034e0:	200004d0 	.word	0x200004d0
 80034e4:	200003f8 	.word	0x200003f8

080034e8 <HAL_Init>:
{
 80034e8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ea:	2003      	movs	r0, #3
 80034ec:	f000 f832 	bl	8003554 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7ff ffd3 	bl	800349c <HAL_InitTick>
 80034f6:	b110      	cbz	r0, 80034fe <HAL_Init+0x16>
    status = HAL_ERROR;
 80034f8:	2401      	movs	r4, #1
}
 80034fa:	4620      	mov	r0, r4
 80034fc:	bd10      	pop	{r4, pc}
 80034fe:	4604      	mov	r4, r0
    HAL_MspInit();
 8003500:	f7ff f86e 	bl	80025e0 <HAL_MspInit>
 8003504:	e7f9      	b.n	80034fa <HAL_Init+0x12>
	...

08003508 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_IncTick+0x10>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	4a03      	ldr	r2, [pc, #12]	; (800351c <HAL_IncTick+0x14>)
 800350e:	6811      	ldr	r1, [r2, #0]
 8003510:	440b      	add	r3, r1
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	200004d0 	.word	0x200004d0
 800351c:	20000b8c 	.word	0x20000b8c

08003520 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003520:	4b01      	ldr	r3, [pc, #4]	; (8003528 <HAL_GetTick+0x8>)
 8003522:	6818      	ldr	r0, [r3, #0]
}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000b8c 	.word	0x20000b8c

0800352c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7ff fff6 	bl	8003520 <HAL_GetTick>
 8003534:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003536:	f1b4 3fff 	cmp.w	r4, #4294967295
 800353a:	d002      	beq.n	8003542 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <HAL_Delay+0x24>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003542:	f7ff ffed 	bl	8003520 <HAL_GetTick>
 8003546:	1b40      	subs	r0, r0, r5
 8003548:	42a0      	cmp	r0, r4
 800354a:	d3fa      	bcc.n	8003542 <HAL_Delay+0x16>
  {
  }
}
 800354c:	bd38      	pop	{r3, r4, r5, pc}
 800354e:	bf00      	nop
 8003550:	200004d0 	.word	0x200004d0

08003554 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003554:	4a07      	ldr	r2, [pc, #28]	; (8003574 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003556:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003558:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003560:	0200      	lsls	r0, r0, #8
 8003562:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003566:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800356c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003570:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_NVIC_SetPriority+0x68>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003582:	f1c3 0c07 	rsb	ip, r3, #7
 8003586:	f1bc 0f04 	cmp.w	ip, #4
 800358a:	bf28      	it	cs
 800358c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003590:	f103 0e04 	add.w	lr, r3, #4
 8003594:	f1be 0f06 	cmp.w	lr, #6
 8003598:	d918      	bls.n	80035cc <HAL_NVIC_SetPriority+0x54>
 800359a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 3eff 	mov.w	lr, #4294967295
 80035a0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80035a4:	ea21 010c 	bic.w	r1, r1, ip
 80035a8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035aa:	fa0e fe03 	lsl.w	lr, lr, r3
 80035ae:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80035b4:	2800      	cmp	r0, #0
 80035b6:	db0b      	blt.n	80035d0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	0112      	lsls	r2, r2, #4
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80035c0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80035c4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80035c8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035cc:	2300      	movs	r3, #0
 80035ce:	e7e5      	b.n	800359c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d0:	f000 000f 	and.w	r0, r0, #15
 80035d4:	0112      	lsls	r2, r2, #4
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	4b02      	ldr	r3, [pc, #8]	; (80035e4 <HAL_NVIC_SetPriority+0x6c>)
 80035da:	541a      	strb	r2, [r3, r0]
 80035dc:	e7f4      	b.n	80035c8 <HAL_NVIC_SetPriority+0x50>
 80035de:	bf00      	nop
 80035e0:	e000ed00 	.word	0xe000ed00
 80035e4:	e000ed14 	.word	0xe000ed14

080035e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035e8:	2800      	cmp	r0, #0
 80035ea:	db07      	blt.n	80035fc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ec:	f000 021f 	and.w	r2, r0, #31
 80035f0:	0940      	lsrs	r0, r0, #5
 80035f2:	2301      	movs	r3, #1
 80035f4:	4093      	lsls	r3, r2
 80035f6:	4a02      	ldr	r2, [pc, #8]	; (8003600 <HAL_NVIC_EnableIRQ+0x18>)
 80035f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000e100 	.word	0xe000e100

08003604 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003604:	3801      	subs	r0, #1
 8003606:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800360a:	d20b      	bcs.n	8003624 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003610:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	4a05      	ldr	r2, [pc, #20]	; (8003628 <HAL_SYSTICK_Config+0x24>)
 8003614:	21f0      	movs	r1, #240	; 0xf0
 8003616:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361a:	2000      	movs	r0, #0
 800361c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	2207      	movs	r2, #7
 8003620:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003622:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003624:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003626:	4770      	bx	lr
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8003630:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003632:	e03f      	b.n	80036b4 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003634:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003636:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800363a:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800363e:	409c      	lsls	r4, r3
 8003640:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 8003642:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003644:	e062      	b.n	800370c <HAL_GPIO_Init+0xe0>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003646:	2406      	movs	r4, #6
 8003648:	e000      	b.n	800364c <HAL_GPIO_Init+0x20>
 800364a:	2400      	movs	r4, #0
 800364c:	40b4      	lsls	r4, r6
 800364e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003650:	3502      	adds	r5, #2
 8003652:	4e68      	ldr	r6, [pc, #416]	; (80037f4 <HAL_GPIO_Init+0x1c8>)
 8003654:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003658:	4c67      	ldr	r4, [pc, #412]	; (80037f8 <HAL_GPIO_Init+0x1cc>)
 800365a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800365c:	43d4      	mvns	r4, r2
 800365e:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003662:	684f      	ldr	r7, [r1, #4]
 8003664:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003668:	d001      	beq.n	800366e <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 800366a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 800366e:	4d62      	ldr	r5, [pc, #392]	; (80037f8 <HAL_GPIO_Init+0x1cc>)
 8003670:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8003672:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003674:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003678:	684f      	ldr	r7, [r1, #4]
 800367a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800367e:	d001      	beq.n	8003684 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8003680:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003684:	4d5c      	ldr	r5, [pc, #368]	; (80037f8 <HAL_GPIO_Init+0x1cc>)
 8003686:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003688:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 800368a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800368e:	684f      	ldr	r7, [r1, #4]
 8003690:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003694:	d001      	beq.n	800369a <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8003696:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800369a:	4d57      	ldr	r5, [pc, #348]	; (80037f8 <HAL_GPIO_Init+0x1cc>)
 800369c:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800369e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80036a0:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a2:	684e      	ldr	r6, [r1, #4]
 80036a4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80036a8:	d001      	beq.n	80036ae <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 80036aa:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80036ae:	4a52      	ldr	r2, [pc, #328]	; (80037f8 <HAL_GPIO_Init+0x1cc>)
 80036b0:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80036b2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b4:	680a      	ldr	r2, [r1, #0]
 80036b6:	fa32 f403 	lsrs.w	r4, r2, r3
 80036ba:	f000 8098 	beq.w	80037ee <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036be:	f04f 0c01 	mov.w	ip, #1
 80036c2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80036c6:	ea1c 0202 	ands.w	r2, ip, r2
 80036ca:	d0f2      	beq.n	80036b2 <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036cc:	684c      	ldr	r4, [r1, #4]
 80036ce:	1e65      	subs	r5, r4, #1
 80036d0:	2d01      	cmp	r5, #1
 80036d2:	d903      	bls.n	80036dc <HAL_GPIO_Init+0xb0>
 80036d4:	2c11      	cmp	r4, #17
 80036d6:	d001      	beq.n	80036dc <HAL_GPIO_Init+0xb0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036d8:	2c12      	cmp	r4, #18
 80036da:	d112      	bne.n	8003702 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 80036dc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036de:	005e      	lsls	r6, r3, #1
 80036e0:	2403      	movs	r4, #3
 80036e2:	40b4      	lsls	r4, r6
 80036e4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036e8:	68cc      	ldr	r4, [r1, #12]
 80036ea:	40b4      	lsls	r4, r6
 80036ec:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80036ee:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80036f0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036f2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036f6:	684c      	ldr	r4, [r1, #4]
 80036f8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80036fc:	409c      	lsls	r4, r3
 80036fe:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003700:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003702:	684c      	ldr	r4, [r1, #4]
 8003704:	f004 0503 	and.w	r5, r4, #3
 8003708:	2d03      	cmp	r5, #3
 800370a:	d093      	beq.n	8003634 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 800370c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800370e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003712:	2403      	movs	r4, #3
 8003714:	fa04 f40e 	lsl.w	r4, r4, lr
 8003718:	ea6f 0c04 	mvn.w	ip, r4
 800371c:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003720:	688c      	ldr	r4, [r1, #8]
 8003722:	fa04 f40e 	lsl.w	r4, r4, lr
 8003726:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003728:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372a:	684c      	ldr	r4, [r1, #4]
 800372c:	2c02      	cmp	r4, #2
 800372e:	d001      	beq.n	8003734 <HAL_GPIO_Init+0x108>
 8003730:	2c12      	cmp	r4, #18
 8003732:	d10f      	bne.n	8003754 <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3u];
 8003734:	08dd      	lsrs	r5, r3, #3
 8003736:	3508      	adds	r5, #8
 8003738:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800373c:	f003 0607 	and.w	r6, r3, #7
 8003740:	00b6      	lsls	r6, r6, #2
 8003742:	240f      	movs	r4, #15
 8003744:	40b4      	lsls	r4, r6
 8003746:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800374a:	690c      	ldr	r4, [r1, #16]
 800374c:	40b4      	lsls	r4, r6
 800374e:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8003750:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8003754:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003756:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800375a:	684c      	ldr	r4, [r1, #4]
 800375c:	f004 0403 	and.w	r4, r4, #3
 8003760:	fa04 f40e 	lsl.w	r4, r4, lr
 8003764:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003768:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800376a:	684c      	ldr	r4, [r1, #4]
 800376c:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003770:	d09f      	beq.n	80036b2 <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003772:	4c22      	ldr	r4, [pc, #136]	; (80037fc <HAL_GPIO_Init+0x1d0>)
 8003774:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003776:	f045 0501 	orr.w	r5, r5, #1
 800377a:	6625      	str	r5, [r4, #96]	; 0x60
 800377c:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800377e:	f004 0401 	and.w	r4, r4, #1
 8003782:	9401      	str	r4, [sp, #4]
 8003784:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003786:	089d      	lsrs	r5, r3, #2
 8003788:	1cae      	adds	r6, r5, #2
 800378a:	4c1a      	ldr	r4, [pc, #104]	; (80037f4 <HAL_GPIO_Init+0x1c8>)
 800378c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003790:	f003 0603 	and.w	r6, r3, #3
 8003794:	00b6      	lsls	r6, r6, #2
 8003796:	240f      	movs	r4, #15
 8003798:	40b4      	lsls	r4, r6
 800379a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800379e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80037a2:	f43f af52 	beq.w	800364a <HAL_GPIO_Init+0x1e>
 80037a6:	4c16      	ldr	r4, [pc, #88]	; (8003800 <HAL_GPIO_Init+0x1d4>)
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d016      	beq.n	80037da <HAL_GPIO_Init+0x1ae>
 80037ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d014      	beq.n	80037de <HAL_GPIO_Init+0x1b2>
 80037b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037b8:	42a0      	cmp	r0, r4
 80037ba:	d012      	beq.n	80037e2 <HAL_GPIO_Init+0x1b6>
 80037bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037c0:	42a0      	cmp	r0, r4
 80037c2:	d010      	beq.n	80037e6 <HAL_GPIO_Init+0x1ba>
 80037c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d00e      	beq.n	80037ea <HAL_GPIO_Init+0x1be>
 80037cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	f43f af38 	beq.w	8003646 <HAL_GPIO_Init+0x1a>
 80037d6:	2407      	movs	r4, #7
 80037d8:	e738      	b.n	800364c <HAL_GPIO_Init+0x20>
 80037da:	2401      	movs	r4, #1
 80037dc:	e736      	b.n	800364c <HAL_GPIO_Init+0x20>
 80037de:	2402      	movs	r4, #2
 80037e0:	e734      	b.n	800364c <HAL_GPIO_Init+0x20>
 80037e2:	2403      	movs	r4, #3
 80037e4:	e732      	b.n	800364c <HAL_GPIO_Init+0x20>
 80037e6:	2404      	movs	r4, #4
 80037e8:	e730      	b.n	800364c <HAL_GPIO_Init+0x20>
 80037ea:	2405      	movs	r4, #5
 80037ec:	e72e      	b.n	800364c <HAL_GPIO_Init+0x20>
  }
}
 80037ee:	b003      	add	sp, #12
 80037f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40010400 	.word	0x40010400
 80037fc:	40021000 	.word	0x40021000
 8003800:	48000400 	.word	0x48000400

08003804 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003804:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003806:	fa31 f203 	lsrs.w	r2, r1, r3
 800380a:	f000 808b 	beq.w	8003924 <HAL_GPIO_DeInit+0x120>
{
 800380e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003810:	e032      	b.n	8003878 <HAL_GPIO_DeInit+0x74>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003812:	2506      	movs	r5, #6
 8003814:	e000      	b.n	8003818 <HAL_GPIO_DeInit+0x14>
 8003816:	2500      	movs	r5, #0
 8003818:	fa05 f50c 	lsl.w	r5, r5, ip
 800381c:	42a5      	cmp	r5, r4
 800381e:	d065      	beq.n	80038ec <HAL_GPIO_DeInit+0xe8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003820:	6804      	ldr	r4, [r0, #0]
 8003822:	005d      	lsls	r5, r3, #1
 8003824:	f04f 0c03 	mov.w	ip, #3
 8003828:	fa0c fc05 	lsl.w	ip, ip, r5
 800382c:	ea44 040c 	orr.w	r4, r4, ip
 8003830:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003832:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003836:	f10e 0e08 	add.w	lr, lr, #8
 800383a:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800383e:	f003 0607 	and.w	r6, r3, #7
 8003842:	00b6      	lsls	r6, r6, #2
 8003844:	250f      	movs	r5, #15
 8003846:	40b5      	lsls	r5, r6
 8003848:	ea24 0405 	bic.w	r4, r4, r5
 800384c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003850:	6884      	ldr	r4, [r0, #8]
 8003852:	ea24 040c 	bic.w	r4, r4, ip
 8003856:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003858:	6844      	ldr	r4, [r0, #4]
 800385a:	ea24 0402 	bic.w	r4, r4, r2
 800385e:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003860:	68c4      	ldr	r4, [r0, #12]
 8003862:	ea24 040c 	bic.w	r4, r4, ip
 8003866:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003868:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800386a:	ea24 0202 	bic.w	r2, r4, r2
 800386e:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003870:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003872:	fa31 f203 	lsrs.w	r2, r1, r3
 8003876:	d054      	beq.n	8003922 <HAL_GPIO_DeInit+0x11e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003878:	2201      	movs	r2, #1
 800387a:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800387c:	ea12 0701 	ands.w	r7, r2, r1
 8003880:	d0f6      	beq.n	8003870 <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003882:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8003886:	f10e 0502 	add.w	r5, lr, #2
 800388a:	4c27      	ldr	r4, [pc, #156]	; (8003928 <HAL_GPIO_DeInit+0x124>)
 800388c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003890:	f003 0c03 	and.w	ip, r3, #3
 8003894:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003898:	250f      	movs	r5, #15
 800389a:	fa05 f60c 	lsl.w	r6, r5, ip
 800389e:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80038a0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80038a4:	d0b7      	beq.n	8003816 <HAL_GPIO_DeInit+0x12>
 80038a6:	4d21      	ldr	r5, [pc, #132]	; (800392c <HAL_GPIO_DeInit+0x128>)
 80038a8:	42a8      	cmp	r0, r5
 80038aa:	d015      	beq.n	80038d8 <HAL_GPIO_DeInit+0xd4>
 80038ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038b0:	42a8      	cmp	r0, r5
 80038b2:	d013      	beq.n	80038dc <HAL_GPIO_DeInit+0xd8>
 80038b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038b8:	42a8      	cmp	r0, r5
 80038ba:	d011      	beq.n	80038e0 <HAL_GPIO_DeInit+0xdc>
 80038bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038c0:	42a8      	cmp	r0, r5
 80038c2:	d00f      	beq.n	80038e4 <HAL_GPIO_DeInit+0xe0>
 80038c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038c8:	42a8      	cmp	r0, r5
 80038ca:	d00d      	beq.n	80038e8 <HAL_GPIO_DeInit+0xe4>
 80038cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038d0:	42a8      	cmp	r0, r5
 80038d2:	d09e      	beq.n	8003812 <HAL_GPIO_DeInit+0xe>
 80038d4:	2507      	movs	r5, #7
 80038d6:	e79f      	b.n	8003818 <HAL_GPIO_DeInit+0x14>
 80038d8:	2501      	movs	r5, #1
 80038da:	e79d      	b.n	8003818 <HAL_GPIO_DeInit+0x14>
 80038dc:	2502      	movs	r5, #2
 80038de:	e79b      	b.n	8003818 <HAL_GPIO_DeInit+0x14>
 80038e0:	2503      	movs	r5, #3
 80038e2:	e799      	b.n	8003818 <HAL_GPIO_DeInit+0x14>
 80038e4:	2504      	movs	r5, #4
 80038e6:	e797      	b.n	8003818 <HAL_GPIO_DeInit+0x14>
 80038e8:	2505      	movs	r5, #5
 80038ea:	e795      	b.n	8003818 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 80038ec:	4c10      	ldr	r4, [pc, #64]	; (8003930 <HAL_GPIO_DeInit+0x12c>)
 80038ee:	6825      	ldr	r5, [r4, #0]
 80038f0:	ea25 0507 	bic.w	r5, r5, r7
 80038f4:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80038f6:	6865      	ldr	r5, [r4, #4]
 80038f8:	ea25 0507 	bic.w	r5, r5, r7
 80038fc:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80038fe:	68a5      	ldr	r5, [r4, #8]
 8003900:	ea25 0507 	bic.w	r5, r5, r7
 8003904:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003906:	68e5      	ldr	r5, [r4, #12]
 8003908:	ea25 0507 	bic.w	r5, r5, r7
 800390c:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800390e:	4f06      	ldr	r7, [pc, #24]	; (8003928 <HAL_GPIO_DeInit+0x124>)
 8003910:	f10e 0402 	add.w	r4, lr, #2
 8003914:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003918:	ea25 0506 	bic.w	r5, r5, r6
 800391c:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8003920:	e77e      	b.n	8003820 <HAL_GPIO_DeInit+0x1c>
  }
}
 8003922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	48000400 	.word	0x48000400
 8003930:	40010400 	.word	0x40010400

08003934 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003934:	6903      	ldr	r3, [r0, #16]
 8003936:	4219      	tst	r1, r3
 8003938:	d001      	beq.n	800393e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800393a:	2001      	movs	r0, #1
 800393c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800393e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003940:	4770      	bx	lr

08003942 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003942:	b10a      	cbz	r2, 8003948 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003944:	6181      	str	r1, [r0, #24]
 8003946:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003948:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800394a:	4770      	bx	lr

0800394c <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800394c:	4770      	bx	lr
	...

08003950 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003950:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4203      	tst	r3, r0
 8003958:	d100      	bne.n	800395c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800395a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800395c:	4b02      	ldr	r3, [pc, #8]	; (8003968 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800395e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003960:	f7ff fff4 	bl	800394c <HAL_GPIO_EXTI_Callback>
}
 8003964:	e7f9      	b.n	800395a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003966:	bf00      	nop
 8003968:	40010400 	.word	0x40010400

0800396c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800396c:	6803      	ldr	r3, [r0, #0]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	f012 0f02 	tst.w	r2, #2
 8003974:	d001      	beq.n	800397a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003976:	2200      	movs	r2, #0
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800397a:	6803      	ldr	r3, [r0, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	f012 0f01 	tst.w	r2, #1
 8003982:	d103      	bne.n	800398c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	619a      	str	r2, [r3, #24]
  }
}
 800398c:	4770      	bx	lr

0800398e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800398e:	b430      	push	{r4, r5}
 8003990:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003992:	6804      	ldr	r4, [r0, #0]
 8003994:	6860      	ldr	r0, [r4, #4]
 8003996:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 800399a:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 800399e:	f04c 7c7f 	orr.w	ip, ip, #66846720	; 0x3fc0000
 80039a2:	f44c 3c58 	orr.w	ip, ip, #221184	; 0x36000
 80039a6:	f44c 7c7f 	orr.w	ip, ip, #1020	; 0x3fc
 80039aa:	f04c 0c03 	orr.w	ip, ip, #3
 80039ae:	ea20 000c 	bic.w	r0, r0, ip
 80039b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80039b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80039ba:	4319      	orrs	r1, r3
 80039bc:	4329      	orrs	r1, r5
 80039be:	4308      	orrs	r0, r1
 80039c0:	6060      	str	r0, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80039c2:	bc30      	pop	{r4, r5}
 80039c4:	4770      	bx	lr

080039c6 <I2C_IsAcknowledgeFailed>:
{
 80039c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c8:	4605      	mov	r5, r0
 80039ca:	460e      	mov	r6, r1
 80039cc:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ce:	6803      	ldr	r3, [r0, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f013 0f10 	tst.w	r3, #16
 80039d6:	d101      	bne.n	80039dc <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 80039d8:	2000      	movs	r0, #0
}
 80039da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	699c      	ldr	r4, [r3, #24]
 80039e0:	f014 0f20 	tst.w	r4, #32
 80039e4:	d117      	bne.n	8003a16 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80039e6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80039ea:	d0f7      	beq.n	80039dc <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7ff fd98 	bl	8003520 <HAL_GetTick>
 80039f0:	1bc0      	subs	r0, r0, r7
 80039f2:	42b0      	cmp	r0, r6
 80039f4:	d801      	bhi.n	80039fa <I2C_IsAcknowledgeFailed+0x34>
 80039f6:	2e00      	cmp	r6, #0
 80039f8:	d1f0      	bne.n	80039dc <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039fa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80039fc:	f043 0320 	orr.w	r3, r3, #32
 8003a00:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	2320      	movs	r3, #32
 8003a04:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003a0e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8003a12:	2001      	movs	r0, #1
 8003a14:	e7e1      	b.n	80039da <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a16:	2210      	movs	r2, #16
 8003a18:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1a:	682b      	ldr	r3, [r5, #0]
 8003a1c:	2420      	movs	r4, #32
 8003a1e:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003a20:	4628      	mov	r0, r5
 8003a22:	f7ff ffa3 	bl	800396c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003a26:	682a      	ldr	r2, [r5, #0]
 8003a28:	6853      	ldr	r3, [r2, #4]
 8003a2a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003a2e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003a32:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a3c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003a4e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8003a52:	2001      	movs	r0, #1
 8003a54:	e7c1      	b.n	80039da <I2C_IsAcknowledgeFailed+0x14>

08003a56 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003a56:	b570      	push	{r4, r5, r6, lr}
 8003a58:	4604      	mov	r4, r0
 8003a5a:	460d      	mov	r5, r1
 8003a5c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f013 0f02 	tst.w	r3, #2
 8003a66:	d11d      	bne.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a68:	4632      	mov	r2, r6
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7ff ffaa 	bl	80039c6 <I2C_IsAcknowledgeFailed>
 8003a72:	b9c8      	cbnz	r0, 8003aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003a74:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a78:	d0f1      	beq.n	8003a5e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7ff fd51 	bl	8003520 <HAL_GetTick>
 8003a7e:	1b80      	subs	r0, r0, r6
 8003a80:	42a8      	cmp	r0, r5
 8003a82:	d801      	bhi.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003a84:	2d00      	cmp	r5, #0
 8003a86:	d1ea      	bne.n	8003a5e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a8a:	f043 0320 	orr.w	r3, r3, #32
 8003a8e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	2320      	movs	r3, #32
 8003a92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003a9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	e000      	b.n	8003aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8003aa4:	2000      	movs	r0, #0
}
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	e7fc      	b.n	8003aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003aac <I2C_WaitOnFlagUntilTimeout>:
{
 8003aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab0:	4606      	mov	r6, r0
 8003ab2:	4688      	mov	r8, r1
 8003ab4:	4617      	mov	r7, r2
 8003ab6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab8:	6834      	ldr	r4, [r6, #0]
 8003aba:	69a4      	ldr	r4, [r4, #24]
 8003abc:	ea38 0404 	bics.w	r4, r8, r4
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2401      	moveq	r4, #1
 8003ac4:	2400      	movne	r4, #0
 8003ac6:	42bc      	cmp	r4, r7
 8003ac8:	d118      	bne.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003aca:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ace:	d0f3      	beq.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad0:	f7ff fd26 	bl	8003520 <HAL_GetTick>
 8003ad4:	9b06      	ldr	r3, [sp, #24]
 8003ad6:	1ac0      	subs	r0, r0, r3
 8003ad8:	42a8      	cmp	r0, r5
 8003ada:	d801      	bhi.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x34>
 8003adc:	2d00      	cmp	r5, #0
 8003ade:	d1eb      	bne.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8003ae2:	f043 0320 	orr.w	r3, r3, #32
 8003ae6:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	2320      	movs	r3, #32
 8003aea:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003af4:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003af8:	2001      	movs	r0, #1
 8003afa:	e000      	b.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8003afc:	2000      	movs	r0, #0
}
 8003afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003b04 <I2C_RequestMemoryWrite>:
{
 8003b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4690      	mov	r8, r2
 8003b0e:	461d      	mov	r5, r3
 8003b10:	9e08      	ldr	r6, [sp, #32]
 8003b12:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <I2C_RequestMemoryWrite+0x78>)
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b1c:	b2ea      	uxtb	r2, r5
 8003b1e:	f7ff ff36 	bl	800398e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	463a      	mov	r2, r7
 8003b24:	4631      	mov	r1, r6
 8003b26:	4620      	mov	r0, r4
 8003b28:	f7ff ff95 	bl	8003a56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b2c:	b9f8      	cbnz	r0, 8003b6e <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b2e:	2d01      	cmp	r5, #1
 8003b30:	d10e      	bne.n	8003b50 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	fa5f f288 	uxtb.w	r2, r8
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3a:	9700      	str	r7, [sp, #0]
 8003b3c:	4633      	mov	r3, r6
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	4620      	mov	r0, r4
 8003b44:	f7ff ffb2 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003b48:	b9a8      	cbnz	r0, 8003b76 <I2C_RequestMemoryWrite+0x72>
}
 8003b4a:	b002      	add	sp, #8
 8003b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b58:	463a      	mov	r2, r7
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f7ff ff7a 	bl	8003a56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b62:	b930      	cbnz	r0, 8003b72 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	fa5f f288 	uxtb.w	r2, r8
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b6c:	e7e5      	b.n	8003b3a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8003b6e:	2001      	movs	r0, #1
 8003b70:	e7eb      	b.n	8003b4a <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8003b72:	2001      	movs	r0, #1
 8003b74:	e7e9      	b.n	8003b4a <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8003b76:	2001      	movs	r0, #1
 8003b78:	e7e7      	b.n	8003b4a <I2C_RequestMemoryWrite+0x46>
 8003b7a:	bf00      	nop
 8003b7c:	80002000 	.word	0x80002000

08003b80 <I2C_RequestMemoryRead>:
{
 8003b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	4604      	mov	r4, r0
 8003b88:	4690      	mov	r8, r2
 8003b8a:	461d      	mov	r5, r3
 8003b8c:	9e08      	ldr	r6, [sp, #32]
 8003b8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b90:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <I2C_RequestMemoryRead+0x74>)
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	b2ea      	uxtb	r2, r5
 8003b98:	f7ff fef9 	bl	800398e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9c:	463a      	mov	r2, r7
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff ff58 	bl	8003a56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ba6:	b9f8      	cbnz	r0, 8003be8 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba8:	2d01      	cmp	r5, #1
 8003baa:	d10e      	bne.n	8003bca <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	fa5f f288 	uxtb.w	r2, r8
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb4:	9700      	str	r7, [sp, #0]
 8003bb6:	4633      	mov	r3, r6
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff ff75 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	b9a8      	cbnz	r0, 8003bf0 <I2C_RequestMemoryRead+0x70>
}
 8003bc4:	b002      	add	sp, #8
 8003bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	463a      	mov	r2, r7
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff ff3d 	bl	8003a56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bdc:	b930      	cbnz	r0, 8003bec <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	fa5f f288 	uxtb.w	r2, r8
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
 8003be6:	e7e5      	b.n	8003bb4 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8003be8:	2001      	movs	r0, #1
 8003bea:	e7eb      	b.n	8003bc4 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8003bec:	2001      	movs	r0, #1
 8003bee:	e7e9      	b.n	8003bc4 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	e7e7      	b.n	8003bc4 <I2C_RequestMemoryRead+0x44>
 8003bf4:	80002000 	.word	0x80002000

08003bf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f013 0f20 	tst.w	r3, #32
 8003c08:	d11a      	bne.n	8003c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	4632      	mov	r2, r6
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f7ff fed9 	bl	80039c6 <I2C_IsAcknowledgeFailed>
 8003c14:	b9b0      	cbnz	r0, 8003c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c16:	f7ff fc83 	bl	8003520 <HAL_GetTick>
 8003c1a:	1b80      	subs	r0, r0, r6
 8003c1c:	42a0      	cmp	r0, r4
 8003c1e:	d801      	bhi.n	8003c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003c20:	2c00      	cmp	r4, #0
 8003c22:	d1ed      	bne.n	8003c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c24:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003c26:	f043 0320 	orr.w	r3, r3, #32
 8003c2a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003c38:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003c3c:	2001      	movs	r0, #1
}
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003c40:	2000      	movs	r0, #0
 8003c42:	e7fc      	b.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003c44:	2001      	movs	r0, #1
 8003c46:	e7fa      	b.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	460d      	mov	r5, r1
 8003c4e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f013 0f04 	tst.w	r3, #4
 8003c58:	d13e      	bne.n	8003cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	4632      	mov	r2, r6
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f7ff feb1 	bl	80039c6 <I2C_IsAcknowledgeFailed>
 8003c64:	4601      	mov	r1, r0
 8003c66:	2800      	cmp	r0, #0
 8003c68:	d138      	bne.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	f012 0f20 	tst.w	r2, #32
 8003c72:	d113      	bne.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	f7ff fc54 	bl	8003520 <HAL_GetTick>
 8003c78:	1b80      	subs	r0, r0, r6
 8003c7a:	42a8      	cmp	r0, r5
 8003c7c:	d801      	bhi.n	8003c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8003c7e:	2d00      	cmp	r5, #0
 8003c80:	d1e6      	bne.n	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c84:	f043 0320 	orr.w	r3, r3, #32
 8003c88:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8003c90:	2300      	movs	r3, #0
 8003c92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003c96:	2101      	movs	r1, #1
}
 8003c98:	4608      	mov	r0, r1
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	f012 0f04 	tst.w	r2, #4
 8003ca2:	d002      	beq.n	8003caa <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003ca4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	d1f6      	bne.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003caa:	2220      	movs	r2, #32
 8003cac:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003cae:	6821      	ldr	r1, [r4, #0]
 8003cb0:	684b      	ldr	r3, [r1, #4]
 8003cb2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003cb6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003cba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003cd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	e7df      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8003cd8:	2100      	movs	r1, #0
 8003cda:	e7dd      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8003cdc:	2101      	movs	r1, #1
 8003cde:	e7db      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08003ce0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d059      	beq.n	8003d98 <HAL_I2C_Init+0xb8>
{
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d043      	beq.n	8003d78 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	2324      	movs	r3, #36	; 0x24
 8003cf2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	6813      	ldr	r3, [r2, #0]
 8003cfa:	f023 0301 	bic.w	r3, r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d00:	6863      	ldr	r3, [r4, #4]
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003d08:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	6893      	ldr	r3, [r2, #8]
 8003d0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d12:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d14:	68e3      	ldr	r3, [r4, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d033      	beq.n	8003d82 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d1a:	68a3      	ldr	r3, [r4, #8]
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003d22:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d24:	68e3      	ldr	r3, [r4, #12]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d031      	beq.n	8003d8e <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	6853      	ldr	r3, [r2, #4]
 8003d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d36:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	68d3      	ldr	r3, [r2, #12]
 8003d3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d40:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d42:	6923      	ldr	r3, [r4, #16]
 8003d44:	6962      	ldr	r2, [r4, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	69a1      	ldr	r1, [r4, #24]
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d50:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d52:	69e3      	ldr	r3, [r4, #28]
 8003d54:	6a21      	ldr	r1, [r4, #32]
 8003d56:	6822      	ldr	r2, [r4, #0]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d66:	2000      	movs	r0, #0
 8003d68:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d6a:	2320      	movs	r3, #32
 8003d6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d70:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d72:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003d76:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003d78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003d7c:	f7fe fc48 	bl	8002610 <HAL_I2C_MspInit>
 8003d80:	e7b6      	b.n	8003cf0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d82:	68a3      	ldr	r3, [r4, #8]
 8003d84:	6822      	ldr	r2, [r4, #0]
 8003d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8a:	6093      	str	r3, [r2, #8]
 8003d8c:	e7ca      	b.n	8003d24 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	e7c8      	b.n	8003d2a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
}
 8003d9a:	4770      	bx	lr

08003d9c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8003d9c:	b1a8      	cbz	r0, 8003dca <HAL_I2C_DeInit+0x2e>
{
 8003d9e:	b510      	push	{r4, lr}
 8003da0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da2:	2324      	movs	r3, #36	; 0x24
 8003da4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003da8:	6802      	ldr	r2, [r0, #0]
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003db2:	f7fe fc65 	bl	8002680 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db6:	2000      	movs	r0, #0
 8003db8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003dba:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dbe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8003dc4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003dc8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003dca:	2001      	movs	r0, #1
}
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_I2C_Master_Transmit>:
{
 8003dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	460f      	mov	r7, r1
 8003dd8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dda:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003dde:	b2c9      	uxtb	r1, r1
 8003de0:	2920      	cmp	r1, #32
 8003de2:	f040 80a3 	bne.w	8003f2c <HAL_I2C_Master_Transmit+0x15c>
 8003de6:	4604      	mov	r4, r0
 8003de8:	4690      	mov	r8, r2
 8003dea:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8003dec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f000 809f 	beq.w	8003f34 <HAL_I2C_Master_Transmit+0x164>
 8003df6:	f04f 0a01 	mov.w	sl, #1
 8003dfa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003dfe:	f7ff fb8f 	bl	8003520 <HAL_GetTick>
 8003e02:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e04:	9000      	str	r0, [sp, #0]
 8003e06:	2319      	movs	r3, #25
 8003e08:	4652      	mov	r2, sl
 8003e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff fe4c 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	f040 808f 	bne.w	8003f38 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e1a:	2321      	movs	r3, #33	; 0x21
 8003e1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e20:	2310      	movs	r3, #16
 8003e22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003e2a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e2e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e32:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2bff      	cmp	r3, #255	; 0xff
 8003e3a:	d90a      	bls.n	8003e52 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e3c:	22ff      	movs	r2, #255	; 0xff
 8003e3e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e40:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_I2C_Master_Transmit+0x178>)
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e48:	4639      	mov	r1, r7
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f7ff fd9f 	bl	800398e <I2C_TransferConfig>
 8003e50:	e018      	b.n	8003e84 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8003e52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e54:	b292      	uxth	r2, r2
 8003e56:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003e58:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_I2C_Master_Transmit+0x178>)
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	4639      	mov	r1, r7
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7ff fd92 	bl	800398e <I2C_TransferConfig>
 8003e6a:	e00b      	b.n	8003e84 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8003e6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e72:	2300      	movs	r3, #0
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	4639      	mov	r1, r7
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f7ff fd85 	bl	800398e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d033      	beq.n	8003ef4 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8c:	462a      	mov	r2, r5
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7ff fde0 	bl	8003a56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d150      	bne.n	8003f3c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003ea8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003eb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ebc:	b292      	uxth	r2, r2
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d0e0      	beq.n	8003e84 <HAL_I2C_Master_Transmit+0xb4>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1de      	bne.n	8003e84 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ec6:	9500      	str	r5, [sp, #0]
 8003ec8:	4633      	mov	r3, r6
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2180      	movs	r1, #128	; 0x80
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f7ff fdec 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	bba0      	cbnz	r0, 8003f40 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2bff      	cmp	r3, #255	; 0xff
 8003edc:	d9c6      	bls.n	8003e6c <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ede:	22ff      	movs	r2, #255	; 0xff
 8003ee0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eea:	4639      	mov	r1, r7
 8003eec:	4620      	mov	r0, r4
 8003eee:	f7ff fd4e 	bl	800398e <I2C_TransferConfig>
 8003ef2:	e7c7      	b.n	8003e84 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef4:	462a      	mov	r2, r5
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f7ff fe7d 	bl	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003efe:	bb08      	cbnz	r0, 8003f44 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	2220      	movs	r2, #32
 8003f04:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003f06:	6821      	ldr	r1, [r4, #0]
 8003f08:	684b      	ldr	r3, [r1, #4]
 8003f0a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003f0e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003f12:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003f26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003f2a:	e000      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8003f2c:	2002      	movs	r0, #2
}
 8003f2e:	b002      	add	sp, #8
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003f34:	2002      	movs	r0, #2
 8003f36:	e7fa      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8003f38:	2001      	movs	r0, #1
 8003f3a:	e7f8      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	e7f6      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8003f40:	2001      	movs	r0, #1
 8003f42:	e7f4      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8003f44:	2001      	movs	r0, #1
 8003f46:	e7f2      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x15e>
 8003f48:	80002000 	.word	0x80002000

08003f4c <HAL_I2C_Master_Receive>:
{
 8003f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	460f      	mov	r7, r1
 8003f54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f56:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003f5a:	b2c9      	uxtb	r1, r1
 8003f5c:	2920      	cmp	r1, #32
 8003f5e:	f040 80a2 	bne.w	80040a6 <HAL_I2C_Master_Receive+0x15a>
 8003f62:	4604      	mov	r4, r0
 8003f64:	4690      	mov	r8, r2
 8003f66:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8003f68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	f000 809e 	beq.w	80040ae <HAL_I2C_Master_Receive+0x162>
 8003f72:	f04f 0a01 	mov.w	sl, #1
 8003f76:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003f7a:	f7ff fad1 	bl	8003520 <HAL_GetTick>
 8003f7e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f80:	9000      	str	r0, [sp, #0]
 8003f82:	2319      	movs	r3, #25
 8003f84:	4652      	mov	r2, sl
 8003f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f7ff fd8e 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	f040 808e 	bne.w	80040b2 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f96:	2322      	movs	r3, #34	; 0x22
 8003f98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003fa6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003faa:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fae:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2bff      	cmp	r3, #255	; 0xff
 8003fb6:	d90a      	bls.n	8003fce <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003fbc:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <HAL_I2C_Master_Receive+0x178>)
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fc4:	4639      	mov	r1, r7
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7ff fce1 	bl	800398e <I2C_TransferConfig>
 8003fcc:	e018      	b.n	8004000 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8003fce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003fd0:	b292      	uxth	r2, r2
 8003fd2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003fd4:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <HAL_I2C_Master_Receive+0x178>)
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	4639      	mov	r1, r7
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f7ff fcd4 	bl	800398e <I2C_TransferConfig>
 8003fe6:	e00b      	b.n	8004000 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8003fe8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003fea:	b292      	uxth	r2, r2
 8003fec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	4639      	mov	r1, r7
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f7ff fcc7 	bl	800398e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004000:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d032      	beq.n	800406e <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004008:	462a      	mov	r2, r5
 800400a:	4631      	mov	r1, r6
 800400c:	4620      	mov	r0, r4
 800400e:	f7ff fe1b 	bl	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004012:	2800      	cmp	r0, #0
 8004014:	d14f      	bne.n	80040b6 <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800401c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800401e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004020:	3301      	adds	r3, #1
 8004022:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004024:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004026:	3a01      	subs	r2, #1
 8004028:	b292      	uxth	r2, r2
 800402a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800402c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29b      	uxth	r3, r3
 8004034:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0e0      	beq.n	8004000 <HAL_I2C_Master_Receive+0xb4>
 800403e:	2a00      	cmp	r2, #0
 8004040:	d1de      	bne.n	8004000 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004042:	9500      	str	r5, [sp, #0]
 8004044:	4633      	mov	r3, r6
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	4620      	mov	r0, r4
 800404a:	f7ff fd2f 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 800404e:	bba0      	cbnz	r0, 80040ba <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004050:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2bff      	cmp	r3, #255	; 0xff
 8004056:	d9c7      	bls.n	8003fe8 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004058:	22ff      	movs	r2, #255	; 0xff
 800405a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800405c:	2300      	movs	r3, #0
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004064:	4639      	mov	r1, r7
 8004066:	4620      	mov	r0, r4
 8004068:	f7ff fc91 	bl	800398e <I2C_TransferConfig>
 800406c:	e7c8      	b.n	8004000 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406e:	462a      	mov	r2, r5
 8004070:	4631      	mov	r1, r6
 8004072:	4620      	mov	r0, r4
 8004074:	f7ff fdc0 	bl	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004078:	bb08      	cbnz	r0, 80040be <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	2220      	movs	r2, #32
 800407e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004080:	6821      	ldr	r1, [r4, #0]
 8004082:	684b      	ldr	r3, [r1, #4]
 8004084:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004088:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800408c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004096:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800409a:	2300      	movs	r3, #0
 800409c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80040a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80040a4:	e000      	b.n	80040a8 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 80040a6:	2002      	movs	r0, #2
}
 80040a8:	b002      	add	sp, #8
 80040aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80040ae:	2002      	movs	r0, #2
 80040b0:	e7fa      	b.n	80040a8 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80040b2:	2001      	movs	r0, #1
 80040b4:	e7f8      	b.n	80040a8 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 80040b6:	2001      	movs	r0, #1
 80040b8:	e7f6      	b.n	80040a8 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 80040ba:	2001      	movs	r0, #1
 80040bc:	e7f4      	b.n	80040a8 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80040be:	2001      	movs	r0, #1
 80040c0:	e7f2      	b.n	80040a8 <HAL_I2C_Master_Receive+0x15c>
 80040c2:	bf00      	nop
 80040c4:	80002400 	.word	0x80002400

080040c8 <HAL_I2C_Mem_Write>:
{
 80040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040cc:	b083      	sub	sp, #12
 80040ce:	460e      	mov	r6, r1
 80040d0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80040d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80040da:	b2c9      	uxtb	r1, r1
 80040dc:	2920      	cmp	r1, #32
 80040de:	f040 80bb 	bne.w	8004258 <HAL_I2C_Mem_Write+0x190>
 80040e2:	4604      	mov	r4, r0
 80040e4:	4690      	mov	r8, r2
 80040e6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80040e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040ea:	b1cb      	cbz	r3, 8004120 <HAL_I2C_Mem_Write+0x58>
 80040ec:	f1ba 0f00 	cmp.w	sl, #0
 80040f0:	d016      	beq.n	8004120 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 80040f2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	f000 80b2 	beq.w	8004260 <HAL_I2C_Mem_Write+0x198>
 80040fc:	f04f 0b01 	mov.w	fp, #1
 8004100:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004104:	f7ff fa0c 	bl	8003520 <HAL_GetTick>
 8004108:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800410a:	9000      	str	r0, [sp, #0]
 800410c:	2319      	movs	r3, #25
 800410e:	465a      	mov	r2, fp
 8004110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004114:	4620      	mov	r0, r4
 8004116:	f7ff fcc9 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 800411a:	b130      	cbz	r0, 800412a <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 800411c:	2001      	movs	r0, #1
 800411e:	e09c      	b.n	800425a <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004124:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8004126:	2001      	movs	r0, #1
 8004128:	e097      	b.n	800425a <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800412a:	2321      	movs	r3, #33	; 0x21
 800412c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004130:	2340      	movs	r3, #64	; 0x40
 8004132:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004136:	2300      	movs	r3, #0
 8004138:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800413a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800413c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800413e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004142:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004144:	9701      	str	r7, [sp, #4]
 8004146:	9500      	str	r5, [sp, #0]
 8004148:	464b      	mov	r3, r9
 800414a:	4642      	mov	r2, r8
 800414c:	4631      	mov	r1, r6
 800414e:	4620      	mov	r0, r4
 8004150:	f7ff fcd8 	bl	8003b04 <I2C_RequestMemoryWrite>
 8004154:	b970      	cbnz	r0, 8004174 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004156:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2bff      	cmp	r3, #255	; 0xff
 800415c:	d90f      	bls.n	800417e <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800415e:	22ff      	movs	r2, #255	; 0xff
 8004160:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004162:	2300      	movs	r3, #0
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800416a:	4631      	mov	r1, r6
 800416c:	4620      	mov	r0, r4
 800416e:	f7ff fc0e 	bl	800398e <I2C_TransferConfig>
 8004172:	e021      	b.n	80041b8 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8004174:	2300      	movs	r3, #0
 8004176:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800417a:	4658      	mov	r0, fp
 800417c:	e06d      	b.n	800425a <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 800417e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004180:	b292      	uxth	r2, r2
 8004182:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004184:	2300      	movs	r3, #0
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	4631      	mov	r1, r6
 8004190:	4620      	mov	r0, r4
 8004192:	f7ff fbfc 	bl	800398e <I2C_TransferConfig>
 8004196:	e00f      	b.n	80041b8 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8004198:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800419a:	b292      	uxth	r2, r2
 800419c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800419e:	2300      	movs	r3, #0
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	4631      	mov	r1, r6
 80041aa:	4620      	mov	r0, r4
 80041ac:	f7ff fbef 	bl	800398e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80041b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d033      	beq.n	8004220 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b8:	463a      	mov	r2, r7
 80041ba:	4629      	mov	r1, r5
 80041bc:	4620      	mov	r0, r4
 80041be:	f7ff fc4a 	bl	8003a56 <I2C_WaitOnTXISFlagUntilTimeout>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d14e      	bne.n	8004264 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	7812      	ldrb	r2, [r2, #0]
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80041ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d0:	3301      	adds	r3, #1
 80041d2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80041d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80041de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041e8:	b292      	uxth	r2, r2
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	d0e0      	beq.n	80041b0 <HAL_I2C_Mem_Write+0xe8>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1de      	bne.n	80041b0 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041f2:	9700      	str	r7, [sp, #0]
 80041f4:	462b      	mov	r3, r5
 80041f6:	2200      	movs	r2, #0
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	4620      	mov	r0, r4
 80041fc:	f7ff fc56 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8004200:	bb90      	cbnz	r0, 8004268 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004202:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2bff      	cmp	r3, #255	; 0xff
 8004208:	d9c6      	bls.n	8004198 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800420a:	22ff      	movs	r2, #255	; 0xff
 800420c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800420e:	2300      	movs	r3, #0
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004216:	4631      	mov	r1, r6
 8004218:	4620      	mov	r0, r4
 800421a:	f7ff fbb8 	bl	800398e <I2C_TransferConfig>
 800421e:	e7c7      	b.n	80041b0 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004220:	463a      	mov	r2, r7
 8004222:	4629      	mov	r1, r5
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff fce7 	bl	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800422a:	b9f8      	cbnz	r0, 800426c <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	2220      	movs	r2, #32
 8004230:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004232:	6821      	ldr	r1, [r4, #0]
 8004234:	684b      	ldr	r3, [r1, #4]
 8004236:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800423a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800423e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004248:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800424c:	2300      	movs	r3, #0
 800424e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004252:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004256:	e000      	b.n	800425a <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8004258:	2002      	movs	r0, #2
}
 800425a:	b003      	add	sp, #12
 800425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004260:	2002      	movs	r0, #2
 8004262:	e7fa      	b.n	800425a <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8004264:	2001      	movs	r0, #1
 8004266:	e7f8      	b.n	800425a <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8004268:	2001      	movs	r0, #1
 800426a:	e7f6      	b.n	800425a <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 800426c:	2001      	movs	r0, #1
 800426e:	e7f4      	b.n	800425a <HAL_I2C_Mem_Write+0x192>

08004270 <HAL_I2C_Mem_Read>:
{
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	b083      	sub	sp, #12
 8004276:	460e      	mov	r6, r1
 8004278:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800427c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800427e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004282:	b2c9      	uxtb	r1, r1
 8004284:	2920      	cmp	r1, #32
 8004286:	f040 80bc 	bne.w	8004402 <HAL_I2C_Mem_Read+0x192>
 800428a:	4604      	mov	r4, r0
 800428c:	4690      	mov	r8, r2
 800428e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004292:	b1cb      	cbz	r3, 80042c8 <HAL_I2C_Mem_Read+0x58>
 8004294:	f1ba 0f00 	cmp.w	sl, #0
 8004298:	d016      	beq.n	80042c8 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 800429a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f000 80b3 	beq.w	800440a <HAL_I2C_Mem_Read+0x19a>
 80042a4:	f04f 0b01 	mov.w	fp, #1
 80042a8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80042ac:	f7ff f938 	bl	8003520 <HAL_GetTick>
 80042b0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042b2:	9000      	str	r0, [sp, #0]
 80042b4:	2319      	movs	r3, #25
 80042b6:	465a      	mov	r2, fp
 80042b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff fbf5 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 80042c2:	b130      	cbz	r0, 80042d2 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80042c4:	2001      	movs	r0, #1
 80042c6:	e09d      	b.n	8004404 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042cc:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80042ce:	2001      	movs	r0, #1
 80042d0:	e098      	b.n	8004404 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042d2:	2322      	movs	r3, #34	; 0x22
 80042d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d8:	2340      	movs	r3, #64	; 0x40
 80042da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042de:	2300      	movs	r3, #0
 80042e0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80042e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042e4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80042e6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042ea:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ec:	9701      	str	r7, [sp, #4]
 80042ee:	9500      	str	r5, [sp, #0]
 80042f0:	464b      	mov	r3, r9
 80042f2:	4642      	mov	r2, r8
 80042f4:	4631      	mov	r1, r6
 80042f6:	4620      	mov	r0, r4
 80042f8:	f7ff fc42 	bl	8003b80 <I2C_RequestMemoryRead>
 80042fc:	b970      	cbnz	r0, 800431c <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2bff      	cmp	r3, #255	; 0xff
 8004304:	d90f      	bls.n	8004326 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004306:	22ff      	movs	r2, #255	; 0xff
 8004308:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800430a:	4b44      	ldr	r3, [pc, #272]	; (800441c <HAL_I2C_Mem_Read+0x1ac>)
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004312:	4631      	mov	r1, r6
 8004314:	4620      	mov	r0, r4
 8004316:	f7ff fb3a 	bl	800398e <I2C_TransferConfig>
 800431a:	e021      	b.n	8004360 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 800431c:	2300      	movs	r3, #0
 800431e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004322:	4658      	mov	r0, fp
 8004324:	e06e      	b.n	8004404 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8004326:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004328:	b292      	uxth	r2, r2
 800432a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800432c:	4b3b      	ldr	r3, [pc, #236]	; (800441c <HAL_I2C_Mem_Read+0x1ac>)
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	4631      	mov	r1, r6
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff fb28 	bl	800398e <I2C_TransferConfig>
 800433e:	e00f      	b.n	8004360 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8004340:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004342:	b292      	uxth	r2, r2
 8004344:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004346:	2300      	movs	r3, #0
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	4631      	mov	r1, r6
 8004352:	4620      	mov	r0, r4
 8004354:	f7ff fb1b 	bl	800398e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004358:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d034      	beq.n	80043ca <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004360:	9700      	str	r7, [sp, #0]
 8004362:	462b      	mov	r3, r5
 8004364:	2200      	movs	r2, #0
 8004366:	2104      	movs	r1, #4
 8004368:	4620      	mov	r0, r4
 800436a:	f7ff fb9f 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 800436e:	2800      	cmp	r0, #0
 8004370:	d14d      	bne.n	800440e <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004378:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800437a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800437c:	3301      	adds	r3, #1
 800437e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004380:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004382:	3a01      	subs	r2, #1
 8004384:	b292      	uxth	r2, r2
 8004386:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004388:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004392:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0de      	beq.n	8004358 <HAL_I2C_Mem_Read+0xe8>
 800439a:	2a00      	cmp	r2, #0
 800439c:	d1dc      	bne.n	8004358 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800439e:	9700      	str	r7, [sp, #0]
 80043a0:	462b      	mov	r3, r5
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7ff fb81 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 80043aa:	bb90      	cbnz	r0, 8004412 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2bff      	cmp	r3, #255	; 0xff
 80043b2:	d9c5      	bls.n	8004340 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043b4:	22ff      	movs	r2, #255	; 0xff
 80043b6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043b8:	2300      	movs	r3, #0
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043c0:	4631      	mov	r1, r6
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff fae3 	bl	800398e <I2C_TransferConfig>
 80043c8:	e7c6      	b.n	8004358 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ca:	463a      	mov	r2, r7
 80043cc:	4629      	mov	r1, r5
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff fc12 	bl	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043d4:	b9f8      	cbnz	r0, 8004416 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	2220      	movs	r2, #32
 80043da:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80043dc:	6821      	ldr	r1, [r4, #0]
 80043de:	684b      	ldr	r3, [r1, #4]
 80043e0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80043e4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80043e8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80043fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004400:	e000      	b.n	8004404 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8004402:	2002      	movs	r0, #2
}
 8004404:	b003      	add	sp, #12
 8004406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800440a:	2002      	movs	r0, #2
 800440c:	e7fa      	b.n	8004404 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 800440e:	2001      	movs	r0, #1
 8004410:	e7f8      	b.n	8004404 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8004412:	2001      	movs	r0, #1
 8004414:	e7f6      	b.n	8004404 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8004416:	2001      	movs	r0, #1
 8004418:	e7f4      	b.n	8004404 <HAL_I2C_Mem_Read+0x194>
 800441a:	bf00      	nop
 800441c:	80002400 	.word	0x80002400

08004420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004420:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004422:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	2a20      	cmp	r2, #32
 800442a:	d123      	bne.n	8004474 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800442c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004430:	2a01      	cmp	r2, #1
 8004432:	d021      	beq.n	8004478 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004434:	2201      	movs	r2, #1
 8004436:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004440:	6800      	ldr	r0, [r0, #0]
 8004442:	6802      	ldr	r2, [r0, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	6802      	ldr	r2, [r0, #0]
 800444e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004452:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	6802      	ldr	r2, [r0, #0]
 8004458:	4311      	orrs	r1, r2
 800445a:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	680a      	ldr	r2, [r1, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	2000      	movs	r0, #0
 800446e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8004472:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004474:	2002      	movs	r0, #2
 8004476:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004478:	2002      	movs	r0, #2
  }
}
 800447a:	4770      	bx	lr

0800447c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800447c:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	2a20      	cmp	r2, #32
 8004486:	d121      	bne.n	80044cc <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004488:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800448c:	2a01      	cmp	r2, #1
 800448e:	d01f      	beq.n	80044d0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004490:	2201      	movs	r2, #1
 8004492:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800449c:	6800      	ldr	r0, [r0, #0]
 800449e:	6802      	ldr	r2, [r0, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044aa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044b2:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044b4:	6819      	ldr	r1, [r3, #0]
 80044b6:	680a      	ldr	r2, [r1, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	2000      	movs	r0, #0
 80044c6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80044ca:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2002      	movs	r0, #2
 80044ce:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80044d0:	2002      	movs	r0, #2
  }
}
 80044d2:	4770      	bx	lr

080044d4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044d4:	4b02      	ldr	r3, [pc, #8]	; (80044e0 <HAL_PWREx_GetVoltageRange+0xc>)
 80044d6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80044d8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40007000 	.word	0x40007000

080044e4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044e4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80044e8:	d00f      	beq.n	800450a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044ea:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f6:	d034      	beq.n	8004562 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044f8:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80044fa:	6813      	ldr	r3, [r2, #0]
 80044fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004500:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004504:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004506:	2000      	movs	r0, #0
 8004508:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800450a:	4b17      	ldr	r3, [pc, #92]	; (8004568 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004516:	d020      	beq.n	800455a <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004518:	4a13      	ldr	r2, [pc, #76]	; (8004568 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800451a:	6813      	ldr	r3, [r2, #0]
 800451c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004524:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2232      	movs	r2, #50	; 0x32
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0c9b      	lsrs	r3, r3, #18
 8004538:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800453a:	e000      	b.n	800453e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800453c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8004540:	6952      	ldr	r2, [r2, #20]
 8004542:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004546:	d001      	beq.n	800454c <HAL_PWREx_ControlVoltageScaling+0x68>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f7      	bne.n	800453c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004554:	d103      	bne.n	800455e <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8004556:	2000      	movs	r0, #0
 8004558:	4770      	bx	lr
 800455a:	2000      	movs	r0, #0
 800455c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800455e:	2003      	movs	r0, #3
 8004560:	4770      	bx	lr
  return HAL_OK;
 8004562:	2000      	movs	r0, #0
}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40007000 	.word	0x40007000
 800456c:	200003f8 	.word	0x200003f8
 8004570:	431bde83 	.word	0x431bde83

08004574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004574:	b530      	push	{r4, r5, lr}
 8004576:	b083      	sub	sp, #12
 8004578:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004582:	d00b      	beq.n	800459c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004584:	f7ff ffa6 	bl	80044d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004588:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800458c:	d017      	beq.n	80045be <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800458e:	2c80      	cmp	r4, #128	; 0x80
 8004590:	d81f      	bhi.n	80045d2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004592:	d02d      	beq.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004594:	2c70      	cmp	r4, #112	; 0x70
 8004596:	d02d      	beq.n	80045f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004598:	2100      	movs	r1, #0
 800459a:	e01b      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800459c:	4d17      	ldr	r5, [pc, #92]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800459e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a4:	65ab      	str	r3, [r5, #88]	; 0x58
 80045a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80045a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80045b0:	f7ff ff90 	bl	80044d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80045b4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80045b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80045bc:	e7e4      	b.n	8004588 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80045be:	2c80      	cmp	r4, #128	; 0x80
 80045c0:	d903      	bls.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80045c2:	2ca0      	cmp	r4, #160	; 0xa0
 80045c4:	d903      	bls.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80045c6:	2102      	movs	r1, #2
 80045c8:	e004      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045ca:	2100      	movs	r1, #0
 80045cc:	e002      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80045ce:	2101      	movs	r1, #1
 80045d0:	e000      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80045d2:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045d4:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	f023 0307 	bic.w	r3, r3, #7
 80045dc:	430b      	orrs	r3, r1
 80045de:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045e0:	6813      	ldr	r3, [r2, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	428b      	cmp	r3, r1
 80045e8:	d106      	bne.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80045ea:	2000      	movs	r0, #0
}
 80045ec:	b003      	add	sp, #12
 80045ee:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80045f0:	2102      	movs	r1, #2
 80045f2:	e7ef      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80045f4:	2101      	movs	r1, #1
 80045f6:	e7ed      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80045f8:	2001      	movs	r0, #1
 80045fa:	e7f7      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x78>
 80045fc:	40021000 	.word	0x40021000
 8004600:	40022000 	.word	0x40022000

08004604 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004604:	4a28      	ldr	r2, [pc, #160]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004606:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004608:	68d2      	ldr	r2, [r2, #12]
 800460a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800460e:	f013 030c 	ands.w	r3, r3, #12
 8004612:	d00a      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0x26>
 8004614:	2b0c      	cmp	r3, #12
 8004616:	d006      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004618:	2b04      	cmp	r3, #4
 800461a:	d01f      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800461c:	2b08      	cmp	r3, #8
 800461e:	d020      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004620:	2000      	movs	r0, #0
 8004622:	4602      	mov	r2, r0
 8004624:	e010      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004626:	2a01      	cmp	r2, #1
 8004628:	d1f6      	bne.n	8004618 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	f012 0f08 	tst.w	r2, #8
 8004632:	d10c      	bne.n	800464e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004634:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004636:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800463a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800463e:	491b      	ldr	r1, [pc, #108]	; (80046ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8004640:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004644:	b143      	cbz	r3, 8004658 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004646:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004648:	2b0c      	cmp	r3, #12
 800464a:	d00d      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x64>
}
 800464c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800464e:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004656:	e7f2      	b.n	800463e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8004658:	4610      	mov	r0, r2
 800465a:	e7f5      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 800465c:	4814      	ldr	r0, [pc, #80]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800465e:	2200      	movs	r2, #0
 8004660:	e7f2      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8004662:	4814      	ldr	r0, [pc, #80]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004664:	2200      	movs	r2, #0
 8004666:	e7ef      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004670:	2b02      	cmp	r3, #2
 8004672:	d016      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x9e>
 8004674:	2b03      	cmp	r3, #3
 8004676:	d100      	bne.n	800467a <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8004678:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800467a:	490b      	ldr	r1, [pc, #44]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800467c:	68cb      	ldr	r3, [r1, #12]
 800467e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004682:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004684:	68c8      	ldr	r0, [r1, #12]
 8004686:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800468a:	fb02 f000 	mul.w	r0, r2, r0
 800468e:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004692:	68cb      	ldr	r3, [r1, #12]
 8004694:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004698:	3301      	adds	r3, #1
 800469a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 800469c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80046a0:	e7d4      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80046a2:	4a03      	ldr	r2, [pc, #12]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xac>)
 80046a4:	e7e9      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x76>
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	08007880 	.word	0x08007880
 80046b0:	00f42400 	.word	0x00f42400
 80046b4:	007a1200 	.word	0x007a1200

080046b8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80046b8:	2800      	cmp	r0, #0
 80046ba:	f000 82fc 	beq.w	8004cb6 <HAL_RCC_OscConfig+0x5fe>
{
 80046be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c0:	b083      	sub	sp, #12
 80046c2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c4:	4b96      	ldr	r3, [pc, #600]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 80046c6:	689d      	ldr	r5, [r3, #8]
 80046c8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046cc:	68de      	ldr	r6, [r3, #12]
 80046ce:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046d2:	6803      	ldr	r3, [r0, #0]
 80046d4:	f013 0f10 	tst.w	r3, #16
 80046d8:	d05a      	beq.n	8004790 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046da:	b1e5      	cbz	r5, 8004716 <HAL_RCC_OscConfig+0x5e>
 80046dc:	2d0c      	cmp	r5, #12
 80046de:	d018      	beq.n	8004712 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046e0:	69a3      	ldr	r3, [r4, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80bb 	beq.w	800485e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80046e8:	4a8d      	ldr	r2, [pc, #564]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80046f2:	f7fe ff15 	bl	8003520 <HAL_GetTick>
 80046f6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046f8:	4b89      	ldr	r3, [pc, #548]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f013 0f02 	tst.w	r3, #2
 8004700:	f040 809a 	bne.w	8004838 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004704:	f7fe ff0c 	bl	8003520 <HAL_GetTick>
 8004708:	1bc0      	subs	r0, r0, r7
 800470a:	2802      	cmp	r0, #2
 800470c:	d9f4      	bls.n	80046f8 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800470e:	2003      	movs	r0, #3
 8004710:	e2dc      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004712:	2e01      	cmp	r6, #1
 8004714:	d1e4      	bne.n	80046e0 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004716:	4b82      	ldr	r3, [pc, #520]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f013 0f02 	tst.w	r3, #2
 800471e:	d003      	beq.n	8004728 <HAL_RCC_OscConfig+0x70>
 8004720:	69a3      	ldr	r3, [r4, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 82c9 	beq.w	8004cba <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004728:	6a20      	ldr	r0, [r4, #32]
 800472a:	4b7d      	ldr	r3, [pc, #500]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f013 0f08 	tst.w	r3, #8
 8004732:	d05b      	beq.n	80047ec <HAL_RCC_OscConfig+0x134>
 8004734:	4b7a      	ldr	r3, [pc, #488]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473c:	4298      	cmp	r0, r3
 800473e:	d85c      	bhi.n	80047fa <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004740:	4b77      	ldr	r3, [pc, #476]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	f042 0208 	orr.w	r2, r2, #8
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004750:	6a21      	ldr	r1, [r4, #32]
 8004752:	430a      	orrs	r2, r1
 8004754:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800475c:	69e1      	ldr	r1, [r4, #28]
 800475e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004762:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004764:	2d00      	cmp	r5, #0
 8004766:	d060      	beq.n	800482a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004768:	f7ff ff4c 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 800476c:	4b6c      	ldr	r3, [pc, #432]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004774:	4a6b      	ldr	r2, [pc, #428]	; (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004776:	5cd3      	ldrb	r3, [r2, r3]
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	40d8      	lsrs	r0, r3
 800477e:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004780:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	f7fe fe89 	bl	800349c <HAL_InitTick>
        if(status != HAL_OK)
 800478a:	2800      	cmp	r0, #0
 800478c:	f040 829e 	bne.w	8004ccc <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	f013 0f01 	tst.w	r3, #1
 8004796:	f000 8081 	beq.w	800489c <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800479a:	2d08      	cmp	r5, #8
 800479c:	d075      	beq.n	800488a <HAL_RCC_OscConfig+0x1d2>
 800479e:	2d0c      	cmp	r5, #12
 80047a0:	d071      	beq.n	8004886 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a8:	f000 8097 	beq.w	80048da <HAL_RCC_OscConfig+0x222>
 80047ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b0:	f000 8099 	beq.w	80048e6 <HAL_RCC_OscConfig+0x22e>
 80047b4:	4b5a      	ldr	r3, [pc, #360]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047c4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8099 	beq.w	8004900 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 80047ce:	f7fe fea7 	bl	8003520 <HAL_GetTick>
 80047d2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d4:	4b52      	ldr	r3, [pc, #328]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80047dc:	d15e      	bne.n	800489c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047de:	f7fe fe9f 	bl	8003520 <HAL_GetTick>
 80047e2:	1bc0      	subs	r0, r0, r7
 80047e4:	2864      	cmp	r0, #100	; 0x64
 80047e6:	d9f5      	bls.n	80047d4 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 80047e8:	2003      	movs	r0, #3
 80047ea:	e26f      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047ec:	4b4c      	ldr	r3, [pc, #304]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f8:	e7a0      	b.n	800473c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047fa:	f7ff febb 	bl	8004574 <RCC_SetFlashLatencyFromMSIRange>
 80047fe:	2800      	cmp	r0, #0
 8004800:	f040 825d 	bne.w	8004cbe <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004804:	4b46      	ldr	r3, [pc, #280]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	f042 0208 	orr.w	r2, r2, #8
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004814:	6a21      	ldr	r1, [r4, #32]
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004820:	69e1      	ldr	r1, [r4, #28]
 8004822:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	e79e      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800482a:	6a20      	ldr	r0, [r4, #32]
 800482c:	f7ff fea2 	bl	8004574 <RCC_SetFlashLatencyFromMSIRange>
 8004830:	2800      	cmp	r0, #0
 8004832:	d099      	beq.n	8004768 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8004834:	2001      	movs	r0, #1
 8004836:	e249      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004838:	4b39      	ldr	r3, [pc, #228]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	f042 0208 	orr.w	r2, r2, #8
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004848:	6a21      	ldr	r1, [r4, #32]
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004854:	69e1      	ldr	r1, [r4, #28]
 8004856:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800485a:	605a      	str	r2, [r3, #4]
 800485c:	e798      	b.n	8004790 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800485e:	4a30      	ldr	r2, [pc, #192]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 8004860:	6813      	ldr	r3, [r2, #0]
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004868:	f7fe fe5a 	bl	8003520 <HAL_GetTick>
 800486c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800486e:	4b2c      	ldr	r3, [pc, #176]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f013 0f02 	tst.w	r3, #2
 8004876:	d08b      	beq.n	8004790 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004878:	f7fe fe52 	bl	8003520 <HAL_GetTick>
 800487c:	1bc0      	subs	r0, r0, r7
 800487e:	2802      	cmp	r0, #2
 8004880:	d9f5      	bls.n	800486e <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8004882:	2003      	movs	r0, #3
 8004884:	e222      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004886:	2e03      	cmp	r6, #3
 8004888:	d18b      	bne.n	80047a2 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488a:	4b25      	ldr	r3, [pc, #148]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004892:	d003      	beq.n	800489c <HAL_RCC_OscConfig+0x1e4>
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8213 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	f013 0f02 	tst.w	r3, #2
 80048a2:	d058      	beq.n	8004956 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048a4:	2d04      	cmp	r5, #4
 80048a6:	d045      	beq.n	8004934 <HAL_RCC_OscConfig+0x27c>
 80048a8:	2d0c      	cmp	r5, #12
 80048aa:	d041      	beq.n	8004930 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048ac:	68e3      	ldr	r3, [r4, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d077      	beq.n	80049a2 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 80048b2:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 80048b4:	6813      	ldr	r3, [r2, #0]
 80048b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80048bc:	f7fe fe30 	bl	8003520 <HAL_GetTick>
 80048c0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c2:	4b17      	ldr	r3, [pc, #92]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80048ca:	d161      	bne.n	8004990 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048cc:	f7fe fe28 	bl	8003520 <HAL_GetTick>
 80048d0:	1b80      	subs	r0, r0, r6
 80048d2:	2802      	cmp	r0, #2
 80048d4:	d9f5      	bls.n	80048c2 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 80048d6:	2003      	movs	r0, #3
 80048d8:	e1f8      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048da:	4a11      	ldr	r2, [pc, #68]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 80048dc:	6813      	ldr	r3, [r2, #0]
 80048de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	e76f      	b.n	80047c6 <HAL_RCC_OscConfig+0x10e>
 80048e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048ea:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e762      	b.n	80047c6 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8004900:	f7fe fe0e 	bl	8003520 <HAL_GetTick>
 8004904:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCC_OscConfig+0x268>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800490e:	d0c5      	beq.n	800489c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004910:	f7fe fe06 	bl	8003520 <HAL_GetTick>
 8004914:	1bc0      	subs	r0, r0, r7
 8004916:	2864      	cmp	r0, #100	; 0x64
 8004918:	d9f5      	bls.n	8004906 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800491a:	2003      	movs	r0, #3
 800491c:	e1d6      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000
 8004924:	080078b0 	.word	0x080078b0
 8004928:	200003f8 	.word	0x200003f8
 800492c:	200004d4 	.word	0x200004d4
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004930:	2e02      	cmp	r6, #2
 8004932:	d1bb      	bne.n	80048ac <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004934:	4b95      	ldr	r3, [pc, #596]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800493c:	d003      	beq.n	8004946 <HAL_RCC_OscConfig+0x28e>
 800493e:	68e3      	ldr	r3, [r4, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 81c0 	beq.w	8004cc6 <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	4a91      	ldr	r2, [pc, #580]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004948:	6853      	ldr	r3, [r2, #4]
 800494a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800494e:	6921      	ldr	r1, [r4, #16]
 8004950:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004954:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	f013 0f08 	tst.w	r3, #8
 800495c:	d04c      	beq.n	80049f8 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800495e:	6963      	ldr	r3, [r4, #20]
 8004960:	b39b      	cbz	r3, 80049ca <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8004962:	4a8a      	ldr	r2, [pc, #552]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004964:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004970:	f7fe fdd6 	bl	8003520 <HAL_GetTick>
 8004974:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004976:	4b85      	ldr	r3, [pc, #532]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800497c:	f013 0f02 	tst.w	r3, #2
 8004980:	d13a      	bne.n	80049f8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004982:	f7fe fdcd 	bl	8003520 <HAL_GetTick>
 8004986:	1b80      	subs	r0, r0, r6
 8004988:	2802      	cmp	r0, #2
 800498a:	d9f4      	bls.n	8004976 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 800498c:	2003      	movs	r0, #3
 800498e:	e19d      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	4a7e      	ldr	r2, [pc, #504]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004992:	6853      	ldr	r3, [r2, #4]
 8004994:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004998:	6921      	ldr	r1, [r4, #16]
 800499a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800499e:	6053      	str	r3, [r2, #4]
 80049a0:	e7d9      	b.n	8004956 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80049a2:	4a7a      	ldr	r2, [pc, #488]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 80049a4:	6813      	ldr	r3, [r2, #0]
 80049a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80049ac:	f7fe fdb8 	bl	8003520 <HAL_GetTick>
 80049b0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049b2:	4b76      	ldr	r3, [pc, #472]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80049ba:	d0cc      	beq.n	8004956 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049bc:	f7fe fdb0 	bl	8003520 <HAL_GetTick>
 80049c0:	1b80      	subs	r0, r0, r6
 80049c2:	2802      	cmp	r0, #2
 80049c4:	d9f5      	bls.n	80049b2 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80049c6:	2003      	movs	r0, #3
 80049c8:	e180      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 80049ca:	4a70      	ldr	r2, [pc, #448]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 80049cc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80049d8:	f7fe fda2 	bl	8003520 <HAL_GetTick>
 80049dc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049de:	4b6b      	ldr	r3, [pc, #428]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 80049e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e4:	f013 0f02 	tst.w	r3, #2
 80049e8:	d006      	beq.n	80049f8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ea:	f7fe fd99 	bl	8003520 <HAL_GetTick>
 80049ee:	1b80      	subs	r0, r0, r6
 80049f0:	2802      	cmp	r0, #2
 80049f2:	d9f4      	bls.n	80049de <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 80049f4:	2003      	movs	r0, #3
 80049f6:	e169      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f013 0f04 	tst.w	r3, #4
 80049fe:	d07a      	beq.n	8004af6 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a00:	4b62      	ldr	r3, [pc, #392]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a04:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004a08:	d136      	bne.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	4b60      	ldr	r3, [pc, #384]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004a0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a12:	659a      	str	r2, [r3, #88]	; 0x58
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004a1e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a20:	4b5b      	ldr	r3, [pc, #364]	; (8004b90 <HAL_RCC_OscConfig+0x4d8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a28:	d028      	beq.n	8004a7c <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2a:	68a3      	ldr	r3, [r4, #8]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d039      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x3ec>
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d03f      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x3fc>
 8004a34:	4b55      	ldr	r3, [pc, #340]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004a36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004a42:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004a46:	f022 0204 	bic.w	r2, r2, #4
 8004a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d03d      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8004a54:	f7fe fd64 	bl	8003520 <HAL_GetTick>
 8004a58:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5a:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f013 0f02 	tst.w	r3, #2
 8004a64:	d146      	bne.n	8004af4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fe fd5b 	bl	8003520 <HAL_GetTick>
 8004a6a:	1bc0      	subs	r0, r0, r7
 8004a6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a70:	4298      	cmp	r0, r3
 8004a72:	d9f2      	bls.n	8004a5a <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8004a74:	2003      	movs	r0, #3
 8004a76:	e129      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 8004a78:	2600      	movs	r6, #0
 8004a7a:	e7d1      	b.n	8004a20 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7c:	4a44      	ldr	r2, [pc, #272]	; (8004b90 <HAL_RCC_OscConfig+0x4d8>)
 8004a7e:	6813      	ldr	r3, [r2, #0]
 8004a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a84:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004a86:	f7fe fd4b 	bl	8003520 <HAL_GetTick>
 8004a8a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8c:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <HAL_RCC_OscConfig+0x4d8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a94:	d1c9      	bne.n	8004a2a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a96:	f7fe fd43 	bl	8003520 <HAL_GetTick>
 8004a9a:	1bc0      	subs	r0, r0, r7
 8004a9c:	2802      	cmp	r0, #2
 8004a9e:	d9f5      	bls.n	8004a8c <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8004aa0:	2003      	movs	r0, #3
 8004aa2:	e113      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa4:	4a39      	ldr	r2, [pc, #228]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004aa6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ab2:	e7cc      	b.n	8004a4e <HAL_RCC_OscConfig+0x396>
 8004ab4:	4b35      	ldr	r3, [pc, #212]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004ab6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004aba:	f042 0204 	orr.w	r2, r2, #4
 8004abe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004ac2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004ace:	e7be      	b.n	8004a4e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8004ad0:	f7fe fd26 	bl	8003520 <HAL_GetTick>
 8004ad4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ad6:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f013 0f02 	tst.w	r3, #2
 8004ae0:	d008      	beq.n	8004af4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae2:	f7fe fd1d 	bl	8003520 <HAL_GetTick>
 8004ae6:	1bc0      	subs	r0, r0, r7
 8004ae8:	f241 3388 	movw	r3, #5000	; 0x1388
 8004aec:	4298      	cmp	r0, r3
 8004aee:	d9f2      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8004af0:	2003      	movs	r0, #3
 8004af2:	e0eb      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 8004af4:	bb6e      	cbnz	r6, 8004b52 <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004af6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80e6 	beq.w	8004cca <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d02d      	beq.n	8004b5e <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b02:	2d0c      	cmp	r5, #12
 8004b04:	f000 80e8 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8004b08:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004b10:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8004b18:	d104      	bne.n	8004b24 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b1a:	4a1c      	ldr	r2, [pc, #112]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004b1c:	68d3      	ldr	r3, [r2, #12]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004b26:	68d3      	ldr	r3, [r2, #12]
 8004b28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b30:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004b32:	f7fe fcf5 	bl	8003520 <HAL_GetTick>
 8004b36:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b40:	f000 80b7 	beq.w	8004cb2 <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fe fcec 	bl	8003520 <HAL_GetTick>
 8004b48:	1b00      	subs	r0, r0, r4
 8004b4a:	2802      	cmp	r0, #2
 8004b4c:	d9f4      	bls.n	8004b38 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8004b4e:	2003      	movs	r0, #3
 8004b50:	e0bc      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b52:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004b54:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b5c:	e7cb      	b.n	8004af6 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004b60:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	f003 0103 	and.w	r1, r3, #3
 8004b66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b68:	4291      	cmp	r1, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b6c:	2d0c      	cmp	r5, #12
 8004b6e:	f000 80af 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8004b7a:	f040 80ab 	bne.w	8004cd4 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b7e:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_RCC_OscConfig+0x4d4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004b86:	d031      	beq.n	8004bec <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 8004b88:	2001      	movs	r0, #1
 8004b8a:	e09f      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004b9a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004ba0:	d1e4      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ba2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ba8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004bac:	d1de      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bae:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8004bb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bb4:	3a07      	subs	r2, #7
 8004bb6:	bf18      	it	ne
 8004bb8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bba:	4291      	cmp	r1, r2
 8004bbc:	d1d6      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bbe:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004bc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004bc4:	0852      	lsrs	r2, r2, #1
 8004bc6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bc8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004bcc:	d1ce      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bce:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004bd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bd4:	0852      	lsrs	r2, r2, #1
 8004bd6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bd8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004bdc:	d1c6      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bde:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <HAL_RCC_OscConfig+0x624>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004be6:	d04a      	beq.n	8004c7e <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8004be8:	2000      	movs	r0, #0
 8004bea:	e06f      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8004bec:	4a3b      	ldr	r2, [pc, #236]	; (8004cdc <HAL_RCC_OscConfig+0x624>)
 8004bee:	6813      	ldr	r3, [r2, #0]
 8004bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf4:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8004bf6:	f7fe fc93 	bl	8003520 <HAL_GetTick>
 8004bfa:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfc:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_RCC_OscConfig+0x624>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c04:	d006      	beq.n	8004c14 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fe fc8b 	bl	8003520 <HAL_GetTick>
 8004c0a:	1b40      	subs	r0, r0, r5
 8004c0c:	2802      	cmp	r0, #2
 8004c0e:	d9f5      	bls.n	8004bfc <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 8004c10:	2003      	movs	r0, #3
 8004c12:	e05b      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c14:	4a31      	ldr	r2, [pc, #196]	; (8004cdc <HAL_RCC_OscConfig+0x624>)
 8004c16:	68d3      	ldr	r3, [r2, #12]
 8004c18:	4931      	ldr	r1, [pc, #196]	; (8004ce0 <HAL_RCC_OscConfig+0x628>)
 8004c1a:	4019      	ands	r1, r3
 8004c1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004c20:	3801      	subs	r0, #1
 8004c22:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004c26:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004c28:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004c2c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c2e:	0840      	lsrs	r0, r0, #1
 8004c30:	3801      	subs	r0, #1
 8004c32:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8004c36:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004c38:	0840      	lsrs	r0, r0, #1
 8004c3a:	3801      	subs	r0, #1
 8004c3c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004c40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c42:	0900      	lsrs	r0, r0, #4
 8004c44:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8004c48:	4319      	orrs	r1, r3
 8004c4a:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c52:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c54:	68d3      	ldr	r3, [r2, #12]
 8004c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c5a:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8004c5c:	f7fe fc60 	bl	8003520 <HAL_GetTick>
 8004c60:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c62:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <HAL_RCC_OscConfig+0x624>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fe fc58 	bl	8003520 <HAL_GetTick>
 8004c70:	1b00      	subs	r0, r0, r4
 8004c72:	2802      	cmp	r0, #2
 8004c74:	d9f5      	bls.n	8004c62 <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 8004c76:	2003      	movs	r0, #3
 8004c78:	e028      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e026      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_RCC_OscConfig+0x624>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004c86:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004c8e:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8004c90:	f7fe fc46 	bl	8003520 <HAL_GetTick>
 8004c94:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <HAL_RCC_OscConfig+0x624>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c9e:	d106      	bne.n	8004cae <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca0:	f7fe fc3e 	bl	8003520 <HAL_GetTick>
 8004ca4:	1b03      	subs	r3, r0, r4
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d9f5      	bls.n	8004c96 <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 8004caa:	2003      	movs	r0, #3
 8004cac:	e00e      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e00c      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e00a      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 8004cb6:	2001      	movs	r0, #1
}
 8004cb8:	4770      	bx	lr
        return HAL_ERROR;
 8004cba:	2001      	movs	r0, #1
 8004cbc:	e006      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	e004      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	e002      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8004cca:	2000      	movs	r0, #0
}
 8004ccc:	b003      	add	sp, #12
 8004cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	e7fb      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	e7f9      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8004cd8:	2001      	movs	r0, #1
 8004cda:	e7f7      	b.n	8004ccc <HAL_RCC_OscConfig+0x614>
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	f99d808c 	.word	0xf99d808c

08004ce4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	f000 8098 	beq.w	8004e1a <HAL_RCC_ClockConfig+0x136>
{
 8004cea:	b570      	push	{r4, r5, r6, lr}
 8004cec:	460c      	mov	r4, r1
 8004cee:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b4e      	ldr	r3, [pc, #312]	; (8004e2c <HAL_RCC_ClockConfig+0x148>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	428b      	cmp	r3, r1
 8004cfa:	d20b      	bcs.n	8004d14 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfc:	4a4b      	ldr	r2, [pc, #300]	; (8004e2c <HAL_RCC_ClockConfig+0x148>)
 8004cfe:	6813      	ldr	r3, [r2, #0]
 8004d00:	f023 0307 	bic.w	r3, r3, #7
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d08:	6813      	ldr	r3, [r2, #0]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	428b      	cmp	r3, r1
 8004d10:	f040 8085 	bne.w	8004e1e <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	f013 0f01 	tst.w	r3, #1
 8004d1a:	d039      	beq.n	8004d90 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d1c:	686b      	ldr	r3, [r5, #4]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d026      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d26:	bb63      	cbnz	r3, 8004d82 <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d28:	4a41      	ldr	r2, [pc, #260]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	f012 0f02 	tst.w	r2, #2
 8004d30:	d106      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8004d32:	2001      	movs	r0, #1
 8004d34:	e070      	b.n	8004e18 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d36:	4a3e      	ldr	r2, [pc, #248]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004d3e:	d070      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d40:	493b      	ldr	r1, [pc, #236]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004d42:	688a      	ldr	r2, [r1, #8]
 8004d44:	f022 0203 	bic.w	r2, r2, #3
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004d4c:	f7fe fbe8 	bl	8003520 <HAL_GetTick>
 8004d50:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	686a      	ldr	r2, [r5, #4]
 8004d5c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004d60:	d016      	beq.n	8004d90 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d62:	f7fe fbdd 	bl	8003520 <HAL_GetTick>
 8004d66:	1b80      	subs	r0, r0, r6
 8004d68:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d6c:	4298      	cmp	r0, r3
 8004d6e:	d9f0      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8004d70:	2003      	movs	r0, #3
 8004d72:	e051      	b.n	8004e18 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d74:	4a2e      	ldr	r2, [pc, #184]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004d7c:	d1e0      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
 8004d80:	e04a      	b.n	8004e18 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d82:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004d8a:	d1d9      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	e043      	b.n	8004e18 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	f013 0f02 	tst.w	r3, #2
 8004d96:	d006      	beq.n	8004da6 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d98:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004d9a:	6893      	ldr	r3, [r2, #8]
 8004d9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004da0:	68a9      	ldr	r1, [r5, #8]
 8004da2:	430b      	orrs	r3, r1
 8004da4:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da6:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <HAL_RCC_ClockConfig+0x148>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	d90a      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <HAL_RCC_ClockConfig+0x148>)
 8004db4:	6813      	ldr	r3, [r2, #0]
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	4323      	orrs	r3, r4
 8004dbc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	d12e      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	f013 0f04 	tst.w	r3, #4
 8004dce:	d006      	beq.n	8004dde <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004dd2:	6893      	ldr	r3, [r2, #8]
 8004dd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004dd8:	68e9      	ldr	r1, [r5, #12]
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dde:	682b      	ldr	r3, [r5, #0]
 8004de0:	f013 0f08 	tst.w	r3, #8
 8004de4:	d007      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004de8:	6893      	ldr	r3, [r2, #8]
 8004dea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004dee:	6929      	ldr	r1, [r5, #16]
 8004df0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004df4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004df6:	f7ff fc05 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <HAL_RCC_ClockConfig+0x14c>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e02:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <HAL_RCC_ClockConfig+0x150>)
 8004e04:	5cd3      	ldrb	r3, [r2, r3]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	40d8      	lsrs	r0, r3
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <HAL_RCC_ClockConfig+0x154>)
 8004e0e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <HAL_RCC_ClockConfig+0x158>)
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	f7fe fb42 	bl	800349c <HAL_InitTick>
}
 8004e18:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004e1a:	2001      	movs	r0, #1
}
 8004e1c:	4770      	bx	lr
      return HAL_ERROR;
 8004e1e:	2001      	movs	r0, #1
 8004e20:	e7fa      	b.n	8004e18 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 8004e22:	2001      	movs	r0, #1
 8004e24:	e7f8      	b.n	8004e18 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 8004e26:	2001      	movs	r0, #1
 8004e28:	e7f6      	b.n	8004e18 <HAL_RCC_ClockConfig+0x134>
 8004e2a:	bf00      	nop
 8004e2c:	40022000 	.word	0x40022000
 8004e30:	40021000 	.word	0x40021000
 8004e34:	080078b0 	.word	0x080078b0
 8004e38:	200003f8 	.word	0x200003f8
 8004e3c:	200004d4 	.word	0x200004d4

08004e40 <HAL_RCC_GetHCLKFreq>:
}
 8004e40:	4b01      	ldr	r3, [pc, #4]	; (8004e48 <HAL_RCC_GetHCLKFreq+0x8>)
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	200003f8 	.word	0x200003f8

08004e4c <HAL_RCC_GetPCLK1Freq>:
{
 8004e4c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e4e:	f7ff fff7 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004e5a:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e5c:	5cd3      	ldrb	r3, [r2, r3]
 8004e5e:	f003 031f 	and.w	r3, r3, #31
}
 8004e62:	40d8      	lsrs	r0, r3
 8004e64:	bd08      	pop	{r3, pc}
 8004e66:	bf00      	nop
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	080078c0 	.word	0x080078c0

08004e70 <HAL_RCC_GetPCLK2Freq>:
{
 8004e70:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e72:	f7ff ffe5 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004e7e:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e80:	5cd3      	ldrb	r3, [r2, r3]
 8004e82:	f003 031f 	and.w	r3, r3, #31
}
 8004e86:	40d8      	lsrs	r0, r3
 8004e88:	bd08      	pop	{r3, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	080078c0 	.word	0x080078c0

08004e94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	4604      	mov	r4, r0
 8004e98:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e9a:	4b59      	ldr	r3, [pc, #356]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f013 0f03 	tst.w	r3, #3
 8004ea2:	d018      	beq.n	8004ed6 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ea4:	4b56      	ldr	r3, [pc, #344]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	6802      	ldr	r2, [r0, #0]
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d002      	beq.n	8004eb8 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004eb2:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	f000 809e 	beq.w	8004ffa <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ebe:	4b50      	ldr	r3, [pc, #320]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	6842      	ldr	r2, [r0, #4]
       ||
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d001      	beq.n	8004ed2 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8004ece:	2501      	movs	r5, #1
 8004ed0:	e7f0      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	e009      	b.n	8004eea <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 8004ed6:	6803      	ldr	r3, [r0, #0]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d057      	beq.n	8004f8c <RCCEx_PLLSAI1_Config+0xf8>
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d05c      	beq.n	8004f9a <RCCEx_PLLSAI1_Config+0x106>
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d042      	beq.n	8004f6a <RCCEx_PLLSAI1_Config+0xd6>
 8004ee4:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8004ee6:	2d00      	cmp	r5, #0
 8004ee8:	d1e4      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8004eea:	4a45      	ldr	r2, [pc, #276]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004eec:	6813      	ldr	r3, [r2, #0]
 8004eee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ef2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004ef4:	f7fe fb14 	bl	8003520 <HAL_GetTick>
 8004ef8:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004efa:	4b41      	ldr	r3, [pc, #260]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004f02:	d005      	beq.n	8004f10 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f04:	f7fe fb0c 	bl	8003520 <HAL_GetTick>
 8004f08:	1b83      	subs	r3, r0, r6
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d9f5      	bls.n	8004efa <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 8004f0e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8004f10:	2d00      	cmp	r5, #0
 8004f12:	d1cf      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8004f14:	2f00      	cmp	r7, #0
 8004f16:	d14e      	bne.n	8004fb6 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f18:	4939      	ldr	r1, [pc, #228]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f1a:	690b      	ldr	r3, [r1, #16]
 8004f1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f24:	68a0      	ldr	r0, [r4, #8]
 8004f26:	68e2      	ldr	r2, [r4, #12]
 8004f28:	0912      	lsrs	r2, r2, #4
 8004f2a:	0452      	lsls	r2, r2, #17
 8004f2c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004f30:	4313      	orrs	r3, r2
 8004f32:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f34:	4a32      	ldr	r2, [pc, #200]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f36:	6813      	ldr	r3, [r2, #0]
 8004f38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f3c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004f3e:	f7fe faef 	bl	8003520 <HAL_GetTick>
 8004f42:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f44:	4b2e      	ldr	r3, [pc, #184]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004f4c:	d105      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f4e:	f7fe fae7 	bl	8003520 <HAL_GetTick>
 8004f52:	1b83      	subs	r3, r0, r6
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d9f5      	bls.n	8004f44 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8004f58:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	d1aa      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f5e:	4a28      	ldr	r2, [pc, #160]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f60:	6913      	ldr	r3, [r2, #16]
 8004f62:	69a1      	ldr	r1, [r4, #24]
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6113      	str	r3, [r2, #16]
 8004f68:	e7a4      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f6a:	4a25      	ldr	r2, [pc, #148]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	f012 0f02 	tst.w	r2, #2
 8004f72:	d01e      	beq.n	8004fb2 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f74:	4822      	ldr	r0, [pc, #136]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f76:	68c2      	ldr	r2, [r0, #12]
 8004f78:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004f7c:	6861      	ldr	r1, [r4, #4]
 8004f7e:	3901      	subs	r1, #1
 8004f80:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60c3      	str	r3, [r0, #12]
 8004f88:	2500      	movs	r5, #0
 8004f8a:	e7ac      	b.n	8004ee6 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f8c:	4a1c      	ldr	r2, [pc, #112]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004f94:	d1ee      	bne.n	8004f74 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 8004f96:	2501      	movs	r5, #1
 8004f98:	e7a5      	b.n	8004ee6 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f9a:	4a19      	ldr	r2, [pc, #100]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004fa2:	d1e7      	bne.n	8004f74 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fa4:	4a16      	ldr	r2, [pc, #88]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004fac:	d1e2      	bne.n	8004f74 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 8004fae:	2501      	movs	r5, #1
 8004fb0:	e799      	b.n	8004ee6 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 8004fb2:	2501      	movs	r5, #1
 8004fb4:	e797      	b.n	8004ee6 <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fb6:	2f01      	cmp	r7, #1
 8004fb8:	d00f      	beq.n	8004fda <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fba:	4811      	ldr	r0, [pc, #68]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004fbc:	6902      	ldr	r2, [r0, #16]
 8004fbe:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004fc2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004fc6:	68a1      	ldr	r1, [r4, #8]
 8004fc8:	6963      	ldr	r3, [r4, #20]
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	065b      	lsls	r3, r3, #25
 8004fd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	6102      	str	r2, [r0, #16]
 8004fd8:	e7ac      	b.n	8004f34 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fda:	4809      	ldr	r0, [pc, #36]	; (8005000 <RCCEx_PLLSAI1_Config+0x16c>)
 8004fdc:	6902      	ldr	r2, [r0, #16]
 8004fde:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004fe2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004fe6:	68a1      	ldr	r1, [r4, #8]
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	3b01      	subs	r3, #1
 8004fee:	055b      	lsls	r3, r3, #21
 8004ff0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	6102      	str	r2, [r0, #16]
 8004ff8:	e79c      	b.n	8004f34 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 8004ffa:	2501      	movs	r5, #1
 8004ffc:	e75a      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0x20>
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000

08005004 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	4604      	mov	r4, r0
 8005008:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800500a:	4b50      	ldr	r3, [pc, #320]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f013 0f03 	tst.w	r3, #3
 8005012:	d018      	beq.n	8005046 <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005014:	4b4d      	ldr	r3, [pc, #308]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	6802      	ldr	r2, [r0, #0]
 800501e:	4293      	cmp	r3, r2
 8005020:	d002      	beq.n	8005028 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005022:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8005024:	4628      	mov	r0, r5
 8005026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8005028:	2a00      	cmp	r2, #0
 800502a:	f000 808c 	beq.w	8005146 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800502e:	4b47      	ldr	r3, [pc, #284]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005036:	3301      	adds	r3, #1
 8005038:	6842      	ldr	r2, [r0, #4]
       ||
 800503a:	4293      	cmp	r3, r2
 800503c:	d001      	beq.n	8005042 <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 800503e:	2501      	movs	r5, #1
 8005040:	e7f0      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2500      	movs	r5, #0
 8005044:	e009      	b.n	800505a <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 8005046:	6803      	ldr	r3, [r0, #0]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d057      	beq.n	80050fc <RCCEx_PLLSAI2_Config+0xf8>
 800504c:	2b03      	cmp	r3, #3
 800504e:	d05c      	beq.n	800510a <RCCEx_PLLSAI2_Config+0x106>
 8005050:	2b01      	cmp	r3, #1
 8005052:	d042      	beq.n	80050da <RCCEx_PLLSAI2_Config+0xd6>
 8005054:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8005056:	2d00      	cmp	r5, #0
 8005058:	d1e4      	bne.n	8005024 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 800505a:	4a3c      	ldr	r2, [pc, #240]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 800505c:	6813      	ldr	r3, [r2, #0]
 800505e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005062:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005064:	f7fe fa5c 	bl	8003520 <HAL_GetTick>
 8005068:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005072:	d005      	beq.n	8005080 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005074:	f7fe fa54 	bl	8003520 <HAL_GetTick>
 8005078:	1b83      	subs	r3, r0, r6
 800507a:	2b02      	cmp	r3, #2
 800507c:	d9f5      	bls.n	800506a <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 800507e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8005080:	2d00      	cmp	r5, #0
 8005082:	d1cf      	bne.n	8005024 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8005084:	2f00      	cmp	r7, #0
 8005086:	d14e      	bne.n	8005126 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005088:	4930      	ldr	r1, [pc, #192]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 800508a:	694b      	ldr	r3, [r1, #20]
 800508c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005094:	68a0      	ldr	r0, [r4, #8]
 8005096:	68e2      	ldr	r2, [r4, #12]
 8005098:	0912      	lsrs	r2, r2, #4
 800509a:	0452      	lsls	r2, r2, #17
 800509c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80050a0:	4313      	orrs	r3, r2
 80050a2:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80050a4:	4a29      	ldr	r2, [pc, #164]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80050ae:	f7fe fa37 	bl	8003520 <HAL_GetTick>
 80050b2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050b4:	4b25      	ldr	r3, [pc, #148]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80050bc:	d105      	bne.n	80050ca <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050be:	f7fe fa2f 	bl	8003520 <HAL_GetTick>
 80050c2:	1b83      	subs	r3, r0, r6
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d9f5      	bls.n	80050b4 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 80050c8:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80050ca:	2d00      	cmp	r5, #0
 80050cc:	d1aa      	bne.n	8005024 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050ce:	4a1f      	ldr	r2, [pc, #124]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 80050d0:	6953      	ldr	r3, [r2, #20]
 80050d2:	6961      	ldr	r1, [r4, #20]
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6153      	str	r3, [r2, #20]
 80050d8:	e7a4      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050da:	4a1c      	ldr	r2, [pc, #112]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	f012 0f02 	tst.w	r2, #2
 80050e2:	d01e      	beq.n	8005122 <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050e4:	4819      	ldr	r0, [pc, #100]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 80050e6:	68c2      	ldr	r2, [r0, #12]
 80050e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80050ec:	6861      	ldr	r1, [r4, #4]
 80050ee:	3901      	subs	r1, #1
 80050f0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60c3      	str	r3, [r0, #12]
 80050f8:	2500      	movs	r5, #0
 80050fa:	e7ac      	b.n	8005056 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050fc:	4a13      	ldr	r2, [pc, #76]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005104:	d1ee      	bne.n	80050e4 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 8005106:	2501      	movs	r5, #1
 8005108:	e7a5      	b.n	8005056 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800510a:	4a10      	ldr	r2, [pc, #64]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005112:	d1e7      	bne.n	80050e4 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005114:	4a0d      	ldr	r2, [pc, #52]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800511c:	d1e2      	bne.n	80050e4 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 800511e:	2501      	movs	r5, #1
 8005120:	e799      	b.n	8005056 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8005122:	2501      	movs	r5, #1
 8005124:	e797      	b.n	8005056 <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005126:	4809      	ldr	r0, [pc, #36]	; (800514c <RCCEx_PLLSAI2_Config+0x148>)
 8005128:	6942      	ldr	r2, [r0, #20]
 800512a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800512e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8005132:	68a1      	ldr	r1, [r4, #8]
 8005134:	6923      	ldr	r3, [r4, #16]
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	3b01      	subs	r3, #1
 800513a:	065b      	lsls	r3, r3, #25
 800513c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005140:	431a      	orrs	r2, r3
 8005142:	6142      	str	r2, [r0, #20]
 8005144:	e7ae      	b.n	80050a4 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8005146:	2501      	movs	r5, #1
 8005148:	e76c      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x20>
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000

08005150 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005158:	6803      	ldr	r3, [r0, #0]
 800515a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800515e:	d033      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005160:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005166:	d01f      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005168:	d80c      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800516a:	b323      	cbz	r3, 80051b6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800516c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005170:	d105      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005172:	2100      	movs	r1, #0
 8005174:	3020      	adds	r0, #32
 8005176:	f7ff ff45 	bl	8005004 <RCCEx_PLLSAI2_Config>
 800517a:	4606      	mov	r6, r0
      break;
 800517c:	e020      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800517e:	2701      	movs	r7, #1
 8005180:	463e      	mov	r6, r7
 8005182:	e023      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005184:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005188:	d10b      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800518a:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800518c:	4a60      	ldr	r2, [pc, #384]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800518e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005192:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005196:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005198:	430b      	orrs	r3, r1
 800519a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800519e:	2700      	movs	r7, #0
 80051a0:	e014      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80051a2:	2701      	movs	r7, #1
 80051a4:	463e      	mov	r6, r7
 80051a6:	e011      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051a8:	4a59      	ldr	r2, [pc, #356]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051aa:	68d3      	ldr	r3, [r2, #12]
 80051ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b0:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051b2:	2600      	movs	r6, #0
 80051b4:	e7ea      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051b6:	2100      	movs	r1, #0
 80051b8:	3004      	adds	r0, #4
 80051ba:	f7ff fe6b 	bl	8004e94 <RCCEx_PLLSAI1_Config>
 80051be:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80051c0:	2e00      	cmp	r6, #0
 80051c2:	d0e3      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80051c4:	4637      	mov	r7, r6
 80051c6:	e001      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051c8:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051ca:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80051d2:	d030      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 80051d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80051d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051da:	d01f      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80051dc:	d80d      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80051de:	b31b      	cbz	r3, 8005228 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80051e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051e4:	d106      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051e6:	2100      	movs	r1, #0
 80051e8:	f104 0020 	add.w	r0, r4, #32
 80051ec:	f7ff ff0a 	bl	8005004 <RCCEx_PLLSAI2_Config>
 80051f0:	4606      	mov	r6, r0
      break;
 80051f2:	e005      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 80051f4:	2701      	movs	r7, #1
 80051f6:	463e      	mov	r6, r7
 80051f8:	e01d      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 80051fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051fe:	d10a      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8005200:	b9c6      	cbnz	r6, 8005234 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005202:	4a43      	ldr	r2, [pc, #268]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005204:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005208:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800520c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800520e:	430b      	orrs	r3, r1
 8005210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005214:	e00f      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005216:	2701      	movs	r7, #1
 8005218:	463e      	mov	r6, r7
 800521a:	e00c      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800521c:	4a3c      	ldr	r2, [pc, #240]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800521e:	68d3      	ldr	r3, [r2, #12]
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	60d3      	str	r3, [r2, #12]
      break;
 8005226:	e7eb      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005228:	2100      	movs	r1, #0
 800522a:	1d20      	adds	r0, r4, #4
 800522c:	f7ff fe32 	bl	8004e94 <RCCEx_PLLSAI1_Config>
 8005230:	4606      	mov	r6, r0
      break;
 8005232:	e7e5      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8005234:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800523c:	d071      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800523e:	4b34      	ldr	r3, [pc, #208]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005242:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005246:	d14e      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005248:	4b31      	ldr	r3, [pc, #196]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800524a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800524c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005250:	659a      	str	r2, [r3, #88]	; 0x58
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800525c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005260:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005262:	6813      	ldr	r3, [r2, #0]
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800526a:	f7fe f959 	bl	8003520 <HAL_GetTick>
 800526e:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005270:	4b28      	ldr	r3, [pc, #160]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005278:	d105      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7fe f951 	bl	8003520 <HAL_GetTick>
 800527e:	1b40      	subs	r0, r0, r5
 8005280:	2802      	cmp	r0, #2
 8005282:	d9f5      	bls.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8005284:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8005286:	2e00      	cmp	r6, #0
 8005288:	d146      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800528a:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005290:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005294:	d016      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005296:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800529a:	429a      	cmp	r2, r3
 800529c:	d012      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800529e:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80052a8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80052ac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80052b0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052b4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80052b8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80052bc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80052c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052c4:	f013 0f01 	tst.w	r3, #1
 80052c8:	d110      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	f040 8127 	bne.w	800551e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d0:	4a0f      	ldr	r2, [pc, #60]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052da:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80052de:	430b      	orrs	r3, r1
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052e4:	e019      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	e7b9      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 80052ec:	f7fe f918 	bl	8003520 <HAL_GetTick>
 80052f0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f013 0f02 	tst.w	r3, #2
 80052fc:	d1e5      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fe:	f7fe f90f 	bl	8003520 <HAL_GetTick>
 8005302:	1b40      	subs	r0, r0, r5
 8005304:	f241 3388 	movw	r3, #5000	; 0x1388
 8005308:	4298      	cmp	r0, r3
 800530a:	d9f2      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 800530c:	2603      	movs	r6, #3
 800530e:	e7dc      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005310:	40021000 	.word	0x40021000
 8005314:	40007000 	.word	0x40007000
      status = ret;
 8005318:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 800531a:	f1b8 0f00 	cmp.w	r8, #0
 800531e:	f040 8100 	bne.w	8005522 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	f013 0f01 	tst.w	r3, #1
 8005328:	d008      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800532a:	4a9d      	ldr	r2, [pc, #628]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800532c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005330:	f023 0303 	bic.w	r3, r3, #3
 8005334:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005336:	430b      	orrs	r3, r1
 8005338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	f013 0f02 	tst.w	r3, #2
 8005342:	d008      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005344:	4a96      	ldr	r2, [pc, #600]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005346:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800534a:	f023 030c 	bic.w	r3, r3, #12
 800534e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005350:	430b      	orrs	r3, r1
 8005352:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	f013 0f04 	tst.w	r3, #4
 800535c:	d008      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800535e:	4a90      	ldr	r2, [pc, #576]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005360:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005364:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005368:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800536a:	430b      	orrs	r3, r1
 800536c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	f013 0f08 	tst.w	r3, #8
 8005376:	d008      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005378:	4a89      	ldr	r2, [pc, #548]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800537a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800537e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005382:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005384:	430b      	orrs	r3, r1
 8005386:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	f013 0f10 	tst.w	r3, #16
 8005390:	d008      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005392:	4a83      	ldr	r2, [pc, #524]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005394:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800539e:	430b      	orrs	r3, r1
 80053a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	f013 0f20 	tst.w	r3, #32
 80053aa:	d008      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053ac:	4a7c      	ldr	r2, [pc, #496]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80053b8:	430b      	orrs	r3, r1
 80053ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80053c4:	d008      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053c6:	4a76      	ldr	r2, [pc, #472]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053cc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80053d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80053d2:	430b      	orrs	r3, r1
 80053d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80053de:	d008      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053e0:	4a6f      	ldr	r2, [pc, #444]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053e6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80053ea:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80053ec:	430b      	orrs	r3, r1
 80053ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053f8:	d008      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053fa:	4a69      	ldr	r2, [pc, #420]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005400:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005404:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005406:	430b      	orrs	r3, r1
 8005408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005412:	d008      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005414:	4a62      	ldr	r2, [pc, #392]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005416:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800541a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800541e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005420:	430b      	orrs	r3, r1
 8005422:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	f413 7f80 	tst.w	r3, #256	; 0x100
 800542c:	d008      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800542e:	4a5c      	ldr	r2, [pc, #368]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005430:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005434:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005438:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800543a:	430b      	orrs	r3, r1
 800543c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005446:	d00f      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005448:	4a55      	ldr	r2, [pc, #340]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800544a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800544e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005452:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005454:	430b      	orrs	r3, r1
 8005456:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800545a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800545c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005460:	d065      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005462:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005466:	d067      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800546e:	d00f      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005470:	4a4b      	ldr	r2, [pc, #300]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005472:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005476:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800547a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800547c:	430b      	orrs	r3, r1
 800547e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005482:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005488:	d05e      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800548a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800548e:	d060      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005496:	d00f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005498:	4a41      	ldr	r2, [pc, #260]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800549a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800549e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80054a2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80054a4:	430b      	orrs	r3, r1
 80054a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054aa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80054ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b0:	d057      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054b6:	d059      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80054be:	d00f      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054c0:	4a37      	ldr	r2, [pc, #220]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054c6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80054ca:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80054cc:	430b      	orrs	r3, r1
 80054ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80054d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d8:	d050      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054de:	d055      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80054e6:	d008      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054e8:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054f2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80054f4:	430b      	orrs	r3, r1
 80054f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005500:	d009      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005502:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005504:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800550c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005510:	430b      	orrs	r3, r1
 8005512:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8005516:	4638      	mov	r0, r7
 8005518:	b002      	add	sp, #8
 800551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 800551e:	4637      	mov	r7, r6
 8005520:	e6fb      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005522:	4a1f      	ldr	r2, [pc, #124]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005524:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800552a:	6593      	str	r3, [r2, #88]	; 0x58
 800552c:	e6f9      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800552e:	68d3      	ldr	r3, [r2, #12]
 8005530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005534:	60d3      	str	r3, [r2, #12]
 8005536:	e797      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005538:	2101      	movs	r1, #1
 800553a:	1d20      	adds	r0, r4, #4
 800553c:	f7ff fcaa 	bl	8004e94 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8005540:	2800      	cmp	r0, #0
 8005542:	d091      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8005544:	4607      	mov	r7, r0
 8005546:	e78f      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005548:	68d3      	ldr	r3, [r2, #12]
 800554a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800554e:	60d3      	str	r3, [r2, #12]
 8005550:	e79e      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005552:	2101      	movs	r1, #1
 8005554:	1d20      	adds	r0, r4, #4
 8005556:	f7ff fc9d 	bl	8004e94 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800555a:	2800      	cmp	r0, #0
 800555c:	d098      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 800555e:	4607      	mov	r7, r0
 8005560:	e796      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005562:	68d3      	ldr	r3, [r2, #12]
 8005564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005568:	60d3      	str	r3, [r2, #12]
 800556a:	e7a5      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800556c:	2101      	movs	r1, #1
 800556e:	1d20      	adds	r0, r4, #4
 8005570:	f7ff fc90 	bl	8004e94 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005574:	2800      	cmp	r0, #0
 8005576:	d09f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8005578:	4607      	mov	r7, r0
 800557a:	e79d      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800557c:	2102      	movs	r1, #2
 800557e:	1d20      	adds	r0, r4, #4
 8005580:	f7ff fc88 	bl	8004e94 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005584:	2800      	cmp	r0, #0
 8005586:	d0ab      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8005588:	4607      	mov	r7, r0
 800558a:	e7a9      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800558c:	2102      	movs	r1, #2
 800558e:	f104 0020 	add.w	r0, r4, #32
 8005592:	f7ff fd37 	bl	8005004 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8005596:	2800      	cmp	r0, #0
 8005598:	d0a2      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 800559a:	4607      	mov	r7, r0
 800559c:	e7a0      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800559e:	bf00      	nop
 80055a0:	40021000 	.word	0x40021000

080055a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	4605      	mov	r5, r0
 80055ac:	4688      	mov	r8, r1
 80055ae:	4617      	mov	r7, r2
 80055b0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055b2:	f7fd ffb5 	bl	8003520 <HAL_GetTick>
 80055b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b8:	1a1b      	subs	r3, r3, r0
 80055ba:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80055be:	f7fd ffaf 	bl	8003520 <HAL_GetTick>
 80055c2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055c4:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80055cc:	fb09 f303 	mul.w	r3, r9, r3
 80055d0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055d2:	682b      	ldr	r3, [r5, #0]
 80055d4:	689c      	ldr	r4, [r3, #8]
 80055d6:	ea38 0404 	bics.w	r4, r8, r4
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	42bb      	cmp	r3, r7
 80055e2:	d040      	beq.n	8005666 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80055e8:	d0f3      	beq.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055ea:	f7fd ff99 	bl	8003520 <HAL_GetTick>
 80055ee:	eba0 000a 	sub.w	r0, r0, sl
 80055f2:	4548      	cmp	r0, r9
 80055f4:	d20a      	bcs.n	800560c <SPI_WaitFlagStateUntilTimeout+0x68>
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	d007      	beq.n	800560c <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055fc:	9a01      	ldr	r2, [sp, #4]
 80055fe:	b102      	cbz	r2, 8005602 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8005600:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8005602:	9b01      	ldr	r3, [sp, #4]
 8005604:	3b01      	subs	r3, #1
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	4691      	mov	r9, r2
 800560a:	e7e2      	b.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800560c:	682a      	ldr	r2, [r5, #0]
 800560e:	6853      	ldr	r3, [r2, #4]
 8005610:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005614:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005616:	686b      	ldr	r3, [r5, #4]
 8005618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800561c:	d00b      	beq.n	8005636 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800561e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005624:	d014      	beq.n	8005650 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8005626:	2301      	movs	r3, #1
 8005628:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800562c:	2300      	movs	r3, #0
 800562e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8005632:	2003      	movs	r0, #3
 8005634:	e018      	b.n	8005668 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005636:	68ab      	ldr	r3, [r5, #8]
 8005638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563c:	d002      	beq.n	8005644 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005642:	d1ec      	bne.n	800561e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8005644:	682a      	ldr	r2, [r5, #0]
 8005646:	6813      	ldr	r3, [r2, #0]
 8005648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e7e6      	b.n	800561e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8005650:	682a      	ldr	r2, [r5, #0]
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	682a      	ldr	r2, [r5, #0]
 800565c:	6813      	ldr	r3, [r2, #0]
 800565e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	e7df      	b.n	8005626 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8005666:	2000      	movs	r0, #0
}
 8005668:	b002      	add	sp, #8
 800566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566e:	bf00      	nop
 8005670:	200003f8 	.word	0x200003f8

08005674 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	4607      	mov	r7, r0
 800567c:	460d      	mov	r5, r1
 800567e:	4616      	mov	r6, r2
 8005680:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005682:	f7fd ff4d 	bl	8003520 <HAL_GetTick>
 8005686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005688:	1a1b      	subs	r3, r3, r0
 800568a:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 800568e:	f7fd ff47 	bl	8003520 <HAL_GetTick>
 8005692:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005694:	4b2e      	ldr	r3, [pc, #184]	; (8005750 <SPI_WaitFifoStateUntilTimeout+0xdc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800569c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80056a0:	0d1b      	lsrs	r3, r3, #20
 80056a2:	fb09 f303 	mul.w	r3, r9, r3
 80056a6:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80056a8:	e002      	b.n	80056b0 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80056aa:	f1b8 3fff 	cmp.w	r8, #4294967295
 80056ae:	d10c      	bne.n	80056ca <SPI_WaitFifoStateUntilTimeout+0x56>
  while ((hspi->Instance->SR & Fifo) != State)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689c      	ldr	r4, [r3, #8]
 80056b4:	ea04 0c05 	and.w	ip, r4, r5
 80056b8:	45b4      	cmp	ip, r6
 80056ba:	d044      	beq.n	8005746 <SPI_WaitFifoStateUntilTimeout+0xd2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056bc:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 80056c0:	d1f3      	bne.n	80056aa <SPI_WaitFifoStateUntilTimeout+0x36>
 80056c2:	2e00      	cmp	r6, #0
 80056c4:	d1f1      	bne.n	80056aa <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80056c6:	7b1b      	ldrb	r3, [r3, #12]
 80056c8:	e7ef      	b.n	80056aa <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ca:	f7fd ff29 	bl	8003520 <HAL_GetTick>
 80056ce:	eba0 000a 	sub.w	r0, r0, sl
 80056d2:	4548      	cmp	r0, r9
 80056d4:	d20a      	bcs.n	80056ec <SPI_WaitFifoStateUntilTimeout+0x78>
 80056d6:	f1b9 0f00 	cmp.w	r9, #0
 80056da:	d007      	beq.n	80056ec <SPI_WaitFifoStateUntilTimeout+0x78>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056dc:	9a01      	ldr	r2, [sp, #4]
 80056de:	b102      	cbz	r2, 80056e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80056e0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 80056e2:	9b01      	ldr	r3, [sp, #4]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	4691      	mov	r9, r2
 80056ea:	e7e1      	b.n	80056b0 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	6853      	ldr	r3, [r2, #4]
 80056f0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80056f4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fc:	d00b      	beq.n	8005716 <SPI_WaitFifoStateUntilTimeout+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d014      	beq.n	8005730 <SPI_WaitFifoStateUntilTimeout+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800570c:	2300      	movs	r3, #0
 800570e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8005712:	2003      	movs	r0, #3
 8005714:	e018      	b.n	8005748 <SPI_WaitFifoStateUntilTimeout+0xd4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571c:	d002      	beq.n	8005724 <SPI_WaitFifoStateUntilTimeout+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800571e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005722:	d1ec      	bne.n	80056fe <SPI_WaitFifoStateUntilTimeout+0x8a>
          __HAL_SPI_DISABLE(hspi);
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e7e6      	b.n	80056fe <SPI_WaitFifoStateUntilTimeout+0x8a>
          SPI_RESET_CRC(hspi);
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	6813      	ldr	r3, [r2, #0]
 800573e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	e7df      	b.n	8005706 <SPI_WaitFifoStateUntilTimeout+0x92>
    }
  }

  return HAL_OK;
 8005746:	2000      	movs	r0, #0
}
 8005748:	b002      	add	sp, #8
 800574a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574e:	bf00      	nop
 8005750:	200003f8 	.word	0x200003f8

08005754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800575e:	9200      	str	r2, [sp, #0]
 8005760:	460b      	mov	r3, r1
 8005762:	2200      	movs	r2, #0
 8005764:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005768:	f7ff ff84 	bl	8005674 <SPI_WaitFifoStateUntilTimeout>
 800576c:	b9b0      	cbnz	r0, 800579c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800576e:	9600      	str	r6, [sp, #0]
 8005770:	462b      	mov	r3, r5
 8005772:	2200      	movs	r2, #0
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	4620      	mov	r0, r4
 8005778:	f7ff ff14 	bl	80055a4 <SPI_WaitFlagStateUntilTimeout>
 800577c:	b9a8      	cbnz	r0, 80057aa <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800577e:	9600      	str	r6, [sp, #0]
 8005780:	462b      	mov	r3, r5
 8005782:	2200      	movs	r2, #0
 8005784:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005788:	4620      	mov	r0, r4
 800578a:	f7ff ff73 	bl	8005674 <SPI_WaitFifoStateUntilTimeout>
 800578e:	b150      	cbz	r0, 80057a6 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005790:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005792:	f043 0320 	orr.w	r3, r3, #32
 8005796:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005798:	2003      	movs	r0, #3
 800579a:	e004      	b.n	80057a6 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800579c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800579e:	f043 0320 	orr.w	r3, r3, #32
 80057a2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80057a4:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80057a6:	b002      	add	sp, #8
 80057a8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80057ac:	f043 0320 	orr.w	r3, r3, #32
 80057b0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80057b2:	2003      	movs	r0, #3
 80057b4:	e7f7      	b.n	80057a6 <SPI_EndRxTxTransaction+0x52>

080057b6 <HAL_SPI_Init>:
  if (hspi == NULL)
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d06a      	beq.n	8005890 <HAL_SPI_Init+0xda>
{
 80057ba:	b510      	push	{r4, lr}
 80057bc:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80057c0:	b933      	cbnz	r3, 80057d0 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c2:	6843      	ldr	r3, [r0, #4]
 80057c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c8:	d005      	beq.n	80057d6 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61c3      	str	r3, [r0, #28]
 80057ce:	e002      	b.n	80057d6 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057d0:	2300      	movs	r3, #0
 80057d2:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057d4:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80057da:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d04d      	beq.n	800587e <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 80057e2:	2302      	movs	r3, #2
 80057e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80057e8:	6822      	ldr	r2, [r4, #0]
 80057ea:	6813      	ldr	r3, [r2, #0]
 80057ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057f8:	d947      	bls.n	800588a <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057fa:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005800:	d004      	beq.n	800580c <HAL_SPI_Init+0x56>
 8005802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005806:	d001      	beq.n	800580c <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005808:	2300      	movs	r3, #0
 800580a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005812:	68a1      	ldr	r1, [r4, #8]
 8005814:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8005818:	430b      	orrs	r3, r1
 800581a:	6921      	ldr	r1, [r4, #16]
 800581c:	f001 0102 	and.w	r1, r1, #2
 8005820:	430b      	orrs	r3, r1
 8005822:	6961      	ldr	r1, [r4, #20]
 8005824:	f001 0101 	and.w	r1, r1, #1
 8005828:	430b      	orrs	r3, r1
 800582a:	69a1      	ldr	r1, [r4, #24]
 800582c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8005830:	430b      	orrs	r3, r1
 8005832:	69e1      	ldr	r1, [r4, #28]
 8005834:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8005838:	430b      	orrs	r3, r1
 800583a:	6a21      	ldr	r1, [r4, #32]
 800583c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005840:	430b      	orrs	r3, r1
 8005842:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005844:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	430b      	orrs	r3, r1
 800584c:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800584e:	8b63      	ldrh	r3, [r4, #26]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005856:	f001 0110 	and.w	r1, r1, #16
 800585a:	430b      	orrs	r3, r1
 800585c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800585e:	f001 0108 	and.w	r1, r1, #8
 8005862:	430b      	orrs	r3, r1
 8005864:	68e1      	ldr	r1, [r4, #12]
 8005866:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800586a:	430b      	orrs	r3, r1
 800586c:	6821      	ldr	r1, [r4, #0]
 800586e:	431a      	orrs	r2, r3
 8005870:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005872:	2000      	movs	r0, #0
 8005874:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005876:	2301      	movs	r3, #1
 8005878:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800587c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800587e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005882:	4620      	mov	r0, r4
 8005884:	f7fc ff1a 	bl	80026bc <HAL_SPI_MspInit>
 8005888:	e7ab      	b.n	80057e2 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800588a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800588e:	e7b5      	b.n	80057fc <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8005890:	2001      	movs	r0, #1
}
 8005892:	4770      	bx	lr

08005894 <HAL_SPI_Transmit>:
{
 8005894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005898:	b083      	sub	sp, #12
 800589a:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800589c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	f000 80f6 	beq.w	8005a92 <HAL_SPI_Transmit+0x1fe>
 80058a6:	4604      	mov	r4, r0
 80058a8:	4688      	mov	r8, r1
 80058aa:	4691      	mov	r9, r2
 80058ac:	2301      	movs	r3, #1
 80058ae:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80058b2:	f7fd fe35 	bl	8003520 <HAL_GetTick>
 80058b6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80058b8:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 80058bc:	b2f6      	uxtb	r6, r6
 80058be:	2e01      	cmp	r6, #1
 80058c0:	f040 80d4 	bne.w	8005a6c <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 80058c4:	f1b8 0f00 	cmp.w	r8, #0
 80058c8:	f000 80d1 	beq.w	8005a6e <HAL_SPI_Transmit+0x1da>
 80058cc:	f1b9 0f00 	cmp.w	r9, #0
 80058d0:	f000 80cd 	beq.w	8005a6e <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058d4:	2303      	movs	r3, #3
 80058d6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058da:	2300      	movs	r3, #0
 80058dc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058de:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80058e2:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058e6:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ea:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80058ec:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80058f0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80058f4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058f6:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f8:	68a3      	ldr	r3, [r4, #8]
 80058fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fe:	d01e      	beq.n	800593e <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005908:	d103      	bne.n	8005912 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005910:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005918:	d942      	bls.n	80059a0 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	b113      	cbz	r3, 8005924 <HAL_SPI_Transmit+0x90>
 800591e:	f1b9 0f01 	cmp.w	r9, #1
 8005922:	d123      	bne.n	800596c <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005924:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	8812      	ldrh	r2, [r2, #0]
 800592a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800592c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800592e:	3302      	adds	r3, #2
 8005930:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005932:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29b      	uxth	r3, r3
 800593a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800593c:	e016      	b.n	800596c <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	6813      	ldr	r3, [r2, #0]
 8005942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005946:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8005948:	6822      	ldr	r2, [r4, #0]
 800594a:	6813      	ldr	r3, [r2, #0]
 800594c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e7d5      	b.n	8005900 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005954:	f7fd fde4 	bl	8003520 <HAL_GetTick>
 8005958:	1bc0      	subs	r0, r0, r7
 800595a:	42a8      	cmp	r0, r5
 800595c:	d303      	bcc.n	8005966 <HAL_SPI_Transmit+0xd2>
 800595e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005962:	f040 808e 	bne.w	8005a82 <HAL_SPI_Transmit+0x1ee>
 8005966:	2d00      	cmp	r5, #0
 8005968:	f000 808d 	beq.w	8005a86 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 800596c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d066      	beq.n	8005a42 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	f012 0f02 	tst.w	r2, #2
 800597c:	d0ea      	beq.n	8005954 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005980:	8812      	ldrh	r2, [r2, #0]
 8005982:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005986:	3302      	adds	r3, #2
 8005988:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800598a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800598e:	fa1f fc8c 	uxth.w	ip, ip
 8005992:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005996:	fa1f fc8c 	uxth.w	ip, ip
 800599a:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800599e:	e7e5      	b.n	800596c <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	b113      	cbz	r3, 80059aa <HAL_SPI_Transmit+0x116>
 80059a4:	f1b9 0f01 	cmp.w	r9, #1
 80059a8:	d133      	bne.n	8005a12 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 80059aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d90c      	bls.n	80059cc <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	8812      	ldrh	r2, [r2, #0]
 80059b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059bc:	3302      	adds	r3, #2
 80059be:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b02      	subs	r3, #2
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80059ca:	e022      	b.n	8005a12 <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80059d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059d6:	3301      	adds	r3, #1
 80059d8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80059da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80059e4:	e015      	b.n	8005a12 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80059ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059ee:	3301      	adds	r3, #1
 80059f0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80059f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80059fc:	e009      	b.n	8005a12 <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059fe:	f7fd fd8f 	bl	8003520 <HAL_GetTick>
 8005a02:	1bc0      	subs	r0, r0, r7
 8005a04:	42a8      	cmp	r0, r5
 8005a06:	d302      	bcc.n	8005a0e <HAL_SPI_Transmit+0x17a>
 8005a08:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a0c:	d13d      	bne.n	8005a8a <HAL_SPI_Transmit+0x1f6>
 8005a0e:	2d00      	cmp	r5, #0
 8005a10:	d03d      	beq.n	8005a8e <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8005a12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	b1a3      	cbz	r3, 8005a42 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a18:	6822      	ldr	r2, [r4, #0]
 8005a1a:	6893      	ldr	r3, [r2, #8]
 8005a1c:	f013 0f02 	tst.w	r3, #2
 8005a20:	d0ed      	beq.n	80059fe <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8005a22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d9dd      	bls.n	80059e6 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a32:	3302      	adds	r3, #2
 8005a34:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b02      	subs	r3, #2
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005a40:	e7e7      	b.n	8005a12 <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a42:	463a      	mov	r2, r7
 8005a44:	4629      	mov	r1, r5
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7ff fe84 	bl	8005754 <SPI_EndRxTxTransaction>
 8005a4c:	b108      	cbz	r0, 8005a52 <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a4e:	2320      	movs	r3, #32
 8005a50:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a52:	68a3      	ldr	r3, [r4, #8]
 8005a54:	b933      	cbnz	r3, 8005a64 <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	9201      	str	r2, [sp, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a64:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a66:	b913      	cbnz	r3, 8005a6e <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a68:	2600      	movs	r6, #0
 8005a6a:	e000      	b.n	8005a6e <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 8005a6c:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a74:	2300      	movs	r3, #0
 8005a76:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	b003      	add	sp, #12
 8005a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8005a82:	2603      	movs	r6, #3
 8005a84:	e7f3      	b.n	8005a6e <HAL_SPI_Transmit+0x1da>
 8005a86:	2603      	movs	r6, #3
 8005a88:	e7f1      	b.n	8005a6e <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 8005a8a:	2603      	movs	r6, #3
 8005a8c:	e7ef      	b.n	8005a6e <HAL_SPI_Transmit+0x1da>
 8005a8e:	2603      	movs	r6, #3
 8005a90:	e7ed      	b.n	8005a6e <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8005a92:	2602      	movs	r6, #2
 8005a94:	e7f1      	b.n	8005a7a <HAL_SPI_Transmit+0x1e6>

08005a96 <HAL_SPI_TransmitReceive>:
{
 8005a96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a9a:	461f      	mov	r7, r3
 8005a9c:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8005a9e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	f000 8164 	beq.w	8005d70 <HAL_SPI_TransmitReceive+0x2da>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4688      	mov	r8, r1
 8005aac:	4691      	mov	r9, r2
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005ab4:	f7fd fd34 	bl	8003520 <HAL_GetTick>
 8005ab8:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8005aba:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005abe:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8005ac0:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00a      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x46>
 8005ac6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005aca:	f040 8138 	bne.w	8005d3e <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ace:	68a2      	ldr	r2, [r4, #8]
 8005ad0:	2a00      	cmp	r2, #0
 8005ad2:	f040 813d 	bne.w	8005d50 <HAL_SPI_TransmitReceive+0x2ba>
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	f040 813c 	bne.w	8005d54 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005adc:	f1b8 0f00 	cmp.w	r8, #0
 8005ae0:	f000 813a 	beq.w	8005d58 <HAL_SPI_TransmitReceive+0x2c2>
 8005ae4:	f1b9 0f00 	cmp.w	r9, #0
 8005ae8:	f000 8138 	beq.w	8005d5c <HAL_SPI_TransmitReceive+0x2c6>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	f000 8137 	beq.w	8005d60 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005af2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d002      	beq.n	8005b02 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005afc:	2305      	movs	r3, #5
 8005afe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b06:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b0a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005b0e:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b12:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005b16:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b18:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8005b1a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b1c:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b1e:	68e3      	ldr	r3, [r4, #12]
 8005b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b24:	d801      	bhi.n	8005b2a <HAL_SPI_TransmitReceive+0x94>
 8005b26:	2f01      	cmp	r7, #1
 8005b28:	d923      	bls.n	8005b72 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	6853      	ldr	r3, [r2, #4]
 8005b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b32:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005b3c:	d103      	bne.n	8005b46 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b44:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b4c:	d958      	bls.n	8005c00 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b4e:	6863      	ldr	r3, [r4, #4]
 8005b50:	b10b      	cbz	r3, 8005b56 <HAL_SPI_TransmitReceive+0xc0>
 8005b52:	2f01      	cmp	r7, #1
 8005b54:	d10b      	bne.n	8005b6e <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	8812      	ldrh	r2, [r2, #0]
 8005b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b60:	3302      	adds	r3, #2
 8005b62:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005b64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005b6e:	2701      	movs	r7, #1
 8005b70:	e031      	b.n	8005bd6 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b72:	6822      	ldr	r2, [r4, #0]
 8005b74:	6853      	ldr	r3, [r2, #4]
 8005b76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b7a:	6053      	str	r3, [r2, #4]
 8005b7c:	e7da      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b80:	8812      	ldrh	r2, [r2, #0]
 8005b82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b86:	3302      	adds	r3, #2
 8005b88:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005b8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005b94:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	f012 0f01 	tst.w	r2, #1
 8005b9e:	d011      	beq.n	8005bc4 <HAL_SPI_TransmitReceive+0x12e>
 8005ba0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005ba4:	b292      	uxth	r2, r2
 8005ba6:	b16a      	cbz	r2, 8005bc4 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005bb4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005bc2:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bc4:	f7fd fcac 	bl	8003520 <HAL_GetTick>
 8005bc8:	1b83      	subs	r3, r0, r6
 8005bca:	42ab      	cmp	r3, r5
 8005bcc:	d303      	bcc.n	8005bd6 <HAL_SPI_TransmitReceive+0x140>
 8005bce:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005bd2:	f040 80c7 	bne.w	8005d64 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	b92b      	cbnz	r3, 8005be8 <HAL_SPI_TransmitReceive+0x152>
 8005bdc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80a1 	beq.w	8005d2a <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	f012 0f02 	tst.w	r2, #2
 8005bf0:	d0d1      	beq.n	8005b96 <HAL_SPI_TransmitReceive+0x100>
 8005bf2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005bf4:	b292      	uxth	r2, r2
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	d0cd      	beq.n	8005b96 <HAL_SPI_TransmitReceive+0x100>
 8005bfa:	2f00      	cmp	r7, #0
 8005bfc:	d0cb      	beq.n	8005b96 <HAL_SPI_TransmitReceive+0x100>
 8005bfe:	e7be      	b.n	8005b7e <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	b10b      	cbz	r3, 8005c08 <HAL_SPI_TransmitReceive+0x172>
 8005c04:	2f01      	cmp	r7, #1
 8005c06:	d10f      	bne.n	8005c28 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8005c08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d90d      	bls.n	8005c2c <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	8812      	ldrh	r2, [r2, #0]
 8005c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c1a:	3302      	adds	r3, #2
 8005c1c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b02      	subs	r3, #2
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005c28:	2701      	movs	r7, #1
 8005c2a:	e049      	b.n	8005cc0 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c36:	3301      	adds	r3, #1
 8005c38:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005c3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005c44:	e7f0      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8005c46:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005c48:	b292      	uxth	r2, r2
 8005c4a:	2a01      	cmp	r2, #1
 8005c4c:	d90c      	bls.n	8005c68 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c50:	8812      	ldrh	r2, [r2, #0]
 8005c52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c56:	3302      	adds	r3, #2
 8005c58:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b02      	subs	r3, #2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005c64:	2700      	movs	r7, #0
 8005c66:	e03d      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c6a:	7812      	ldrb	r2, [r2, #0]
 8005c6c:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8005c6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c70:	3301      	adds	r3, #1
 8005c72:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005c74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005c7e:	2700      	movs	r7, #0
 8005c80:	e030      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c82:	6822      	ldr	r2, [r4, #0]
 8005c84:	6853      	ldr	r3, [r2, #4]
 8005c86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c8a:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005c8c:	2701      	movs	r7, #1
 8005c8e:	e00d      	b.n	8005cac <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c92:	7b1b      	ldrb	r3, [r3, #12]
 8005c94:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8005c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c98:	3301      	adds	r3, #1
 8005c9a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005c9c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005caa:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cac:	f7fd fc38 	bl	8003520 <HAL_GetTick>
 8005cb0:	1b80      	subs	r0, r0, r6
 8005cb2:	42a8      	cmp	r0, r5
 8005cb4:	d302      	bcc.n	8005cbc <HAL_SPI_TransmitReceive+0x226>
 8005cb6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005cba:	d155      	bne.n	8005d68 <HAL_SPI_TransmitReceive+0x2d2>
 8005cbc:	2d00      	cmp	r5, #0
 8005cbe:	d055      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	b923      	cbnz	r3, 8005cd0 <HAL_SPI_TransmitReceive+0x23a>
 8005cc6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d02c      	beq.n	8005d2a <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	f012 0f02 	tst.w	r2, #2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_SPI_TransmitReceive+0x24e>
 8005cda:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005cdc:	b292      	uxth	r2, r2
 8005cde:	b10a      	cbz	r2, 8005ce4 <HAL_SPI_TransmitReceive+0x24e>
 8005ce0:	2f00      	cmp	r7, #0
 8005ce2:	d1b0      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	f012 0f01 	tst.w	r2, #1
 8005cec:	d0de      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x216>
 8005cee:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005cf2:	b292      	uxth	r2, r2
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	d0d9      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8005cf8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	2a01      	cmp	r2, #1
 8005d00:	d9c6      	bls.n	8005c90 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d06:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d0e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b02      	subs	r3, #2
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d1c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d9ad      	bls.n	8005c82 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8005d26:	2701      	movs	r7, #1
 8005d28:	e7c0      	b.n	8005cac <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff fd10 	bl	8005754 <SPI_EndRxTxTransaction>
 8005d34:	b120      	cbz	r0, 8005d40 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d36:	2320      	movs	r3, #32
 8005d38:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e000      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8005d3e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d46:	2300      	movs	r3, #0
 8005d48:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8005d50:	2002      	movs	r0, #2
 8005d52:	e7f5      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2aa>
 8005d54:	2002      	movs	r0, #2
 8005d56:	e7f3      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8005d58:	2001      	movs	r0, #1
 8005d5a:	e7f1      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2aa>
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	e7ef      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2aa>
 8005d60:	2001      	movs	r0, #1
 8005d62:	e7ed      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8005d64:	2003      	movs	r0, #3
 8005d66:	e7eb      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8005d68:	2003      	movs	r0, #3
 8005d6a:	e7e9      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2aa>
 8005d6c:	2003      	movs	r0, #3
 8005d6e:	e7e7      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8005d70:	2002      	movs	r0, #2
 8005d72:	e7eb      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x2b6>

08005d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d76:	6a03      	ldr	r3, [r0, #32]
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d82:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d88:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d8c:	680d      	ldr	r5, [r1, #0]
 8005d8e:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d90:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d94:	688b      	ldr	r3, [r1, #8]
 8005d96:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d98:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <TIM_OC1_SetConfig+0x98>)
 8005d9a:	4290      	cmp	r0, r2
 8005d9c:	d00f      	beq.n	8005dbe <TIM_OC1_SetConfig+0x4a>
 8005d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da2:	4290      	cmp	r0, r2
 8005da4:	d00b      	beq.n	8005dbe <TIM_OC1_SetConfig+0x4a>
 8005da6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005daa:	4290      	cmp	r0, r2
 8005dac:	d007      	beq.n	8005dbe <TIM_OC1_SetConfig+0x4a>
 8005dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005db2:	4290      	cmp	r0, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_OC1_SetConfig+0x4a>
 8005db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dba:	4290      	cmp	r0, r2
 8005dbc:	d105      	bne.n	8005dca <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dbe:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc2:	68ca      	ldr	r2, [r1, #12]
 8005dc4:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dc6:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dca:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <TIM_OC1_SetConfig+0x98>)
 8005dcc:	4290      	cmp	r0, r2
 8005dce:	d00f      	beq.n	8005df0 <TIM_OC1_SetConfig+0x7c>
 8005dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd4:	4290      	cmp	r0, r2
 8005dd6:	d00b      	beq.n	8005df0 <TIM_OC1_SetConfig+0x7c>
 8005dd8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005ddc:	4290      	cmp	r0, r2
 8005dde:	d007      	beq.n	8005df0 <TIM_OC1_SetConfig+0x7c>
 8005de0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005de4:	4290      	cmp	r0, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_OC1_SetConfig+0x7c>
 8005de8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dec:	4290      	cmp	r0, r2
 8005dee:	d105      	bne.n	8005dfc <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005df0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005df4:	694a      	ldr	r2, [r1, #20]
 8005df6:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005df8:	698c      	ldr	r4, [r1, #24]
 8005dfa:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dfe:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e00:	684a      	ldr	r2, [r1, #4]
 8005e02:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	6203      	str	r3, [r0, #32]
}
 8005e06:	bc30      	pop	{r4, r5}
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40012c00 	.word	0x40012c00

08005e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e12:	6a03      	ldr	r3, [r0, #32]
 8005e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e24:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	680d      	ldr	r5, [r1, #0]
 8005e2a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e30:	688a      	ldr	r2, [r1, #8]
 8005e32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e36:	4a18      	ldr	r2, [pc, #96]	; (8005e98 <TIM_OC3_SetConfig+0x88>)
 8005e38:	4290      	cmp	r0, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_OC3_SetConfig+0x34>
 8005e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e40:	4290      	cmp	r0, r2
 8005e42:	d106      	bne.n	8005e52 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e48:	68ca      	ldr	r2, [r1, #12]
 8005e4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e52:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <TIM_OC3_SetConfig+0x88>)
 8005e54:	4290      	cmp	r0, r2
 8005e56:	d00f      	beq.n	8005e78 <TIM_OC3_SetConfig+0x68>
 8005e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5c:	4290      	cmp	r0, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_OC3_SetConfig+0x68>
 8005e60:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005e64:	4290      	cmp	r0, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_OC3_SetConfig+0x68>
 8005e68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e6c:	4290      	cmp	r0, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC3_SetConfig+0x68>
 8005e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e74:	4290      	cmp	r0, r2
 8005e76:	d107      	bne.n	8005e88 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e78:	f424 5240 	bic.w	r2, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e7c:	694c      	ldr	r4, [r1, #20]
 8005e7e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e82:	698c      	ldr	r4, [r1, #24]
 8005e84:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e88:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e8a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e8c:	684a      	ldr	r2, [r1, #4]
 8005e8e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e90:	6203      	str	r3, [r0, #32]
}
 8005e92:	bc30      	pop	{r4, r5}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40012c00 	.word	0x40012c00

08005e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e9e:	6a03      	ldr	r3, [r0, #32]
 8005ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eaa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eac:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005eb0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb4:	680d      	ldr	r5, [r1, #0]
 8005eb6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ebe:	688d      	ldr	r5, [r1, #8]
 8005ec0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	4d0f      	ldr	r5, [pc, #60]	; (8005f04 <TIM_OC4_SetConfig+0x68>)
 8005ec6:	42a8      	cmp	r0, r5
 8005ec8:	d00f      	beq.n	8005eea <TIM_OC4_SetConfig+0x4e>
 8005eca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ece:	42a8      	cmp	r0, r5
 8005ed0:	d00b      	beq.n	8005eea <TIM_OC4_SetConfig+0x4e>
 8005ed2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005ed6:	42a8      	cmp	r0, r5
 8005ed8:	d007      	beq.n	8005eea <TIM_OC4_SetConfig+0x4e>
 8005eda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ede:	42a8      	cmp	r0, r5
 8005ee0:	d003      	beq.n	8005eea <TIM_OC4_SetConfig+0x4e>
 8005ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ee6:	42a8      	cmp	r0, r5
 8005ee8:	d104      	bne.n	8005ef4 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eea:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eee:	694d      	ldr	r5, [r1, #20]
 8005ef0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef8:	684a      	ldr	r2, [r1, #4]
 8005efa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efc:	6203      	str	r3, [r0, #32]
}
 8005efe:	bc30      	pop	{r4, r5}
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40012c00 	.word	0x40012c00

08005f08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f0a:	6a03      	ldr	r3, [r0, #32]
 8005f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f16:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f20:	680d      	ldr	r5, [r1, #0]
 8005f22:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f28:	688a      	ldr	r2, [r1, #8]
 8005f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2e:	4a0f      	ldr	r2, [pc, #60]	; (8005f6c <TIM_OC5_SetConfig+0x64>)
 8005f30:	4290      	cmp	r0, r2
 8005f32:	d00f      	beq.n	8005f54 <TIM_OC5_SetConfig+0x4c>
 8005f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f38:	4290      	cmp	r0, r2
 8005f3a:	d00b      	beq.n	8005f54 <TIM_OC5_SetConfig+0x4c>
 8005f3c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005f40:	4290      	cmp	r0, r2
 8005f42:	d007      	beq.n	8005f54 <TIM_OC5_SetConfig+0x4c>
 8005f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f48:	4290      	cmp	r0, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_OC5_SetConfig+0x4c>
 8005f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f50:	4290      	cmp	r0, r2
 8005f52:	d104      	bne.n	8005f5e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f54:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f58:	694a      	ldr	r2, [r1, #20]
 8005f5a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f60:	6545      	str	r5, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f62:	684a      	ldr	r2, [r1, #4]
 8005f64:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f66:	6203      	str	r3, [r0, #32]
}
 8005f68:	bc30      	pop	{r4, r5}
 8005f6a:	4770      	bx	lr
 8005f6c:	40012c00 	.word	0x40012c00

08005f70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f72:	6a03      	ldr	r3, [r0, #32]
 8005f74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f78:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f7e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f80:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005f84:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f88:	680d      	ldr	r5, [r1, #0]
 8005f8a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f92:	688d      	ldr	r5, [r1, #8]
 8005f94:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f98:	4d0f      	ldr	r5, [pc, #60]	; (8005fd8 <TIM_OC6_SetConfig+0x68>)
 8005f9a:	42a8      	cmp	r0, r5
 8005f9c:	d00f      	beq.n	8005fbe <TIM_OC6_SetConfig+0x4e>
 8005f9e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005fa2:	42a8      	cmp	r0, r5
 8005fa4:	d00b      	beq.n	8005fbe <TIM_OC6_SetConfig+0x4e>
 8005fa6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005faa:	42a8      	cmp	r0, r5
 8005fac:	d007      	beq.n	8005fbe <TIM_OC6_SetConfig+0x4e>
 8005fae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fb2:	42a8      	cmp	r0, r5
 8005fb4:	d003      	beq.n	8005fbe <TIM_OC6_SetConfig+0x4e>
 8005fb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fba:	42a8      	cmp	r0, r5
 8005fbc:	d104      	bne.n	8005fc8 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fbe:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fc2:	694d      	ldr	r5, [r1, #20]
 8005fc4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fca:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fcc:	684a      	ldr	r2, [r1, #4]
 8005fce:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd0:	6203      	str	r3, [r0, #32]
}
 8005fd2:	bc30      	pop	{r4, r5}
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40012c00 	.word	0x40012c00

08005fdc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005fdc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d136      	bne.n	8006054 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fec:	6802      	ldr	r2, [r0, #0]
 8005fee:	68d3      	ldr	r3, [r2, #12]
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff6:	6803      	ldr	r3, [r0, #0]
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <HAL_TIM_Base_Start_IT+0x84>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01c      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x5c>
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006002:	d019      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x5c>
 8006004:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006008:	4293      	cmp	r3, r2
 800600a:	d015      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x5c>
 800600c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006010:	4293      	cmp	r3, r2
 8006012:	d011      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x5c>
 8006014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006018:	4293      	cmp	r3, r2
 800601a:	d00d      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x5c>
 800601c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006020:	4293      	cmp	r3, r2
 8006022:	d009      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x5c>
 8006024:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006028:	4293      	cmp	r3, r2
 800602a:	d005      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006034:	2000      	movs	r0, #0
 8006036:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006038:	6899      	ldr	r1, [r3, #8]
 800603a:	4a0a      	ldr	r2, [pc, #40]	; (8006064 <HAL_TIM_Base_Start_IT+0x88>)
 800603c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603e:	2a06      	cmp	r2, #6
 8006040:	d00a      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0x7c>
 8006042:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006046:	d009      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006050:	2000      	movs	r0, #0
 8006052:	4770      	bx	lr
    return HAL_ERROR;
 8006054:	2001      	movs	r0, #1
 8006056:	4770      	bx	lr
  return HAL_OK;
 8006058:	2000      	movs	r0, #0
 800605a:	4770      	bx	lr
 800605c:	2000      	movs	r0, #0
}
 800605e:	4770      	bx	lr
 8006060:	40012c00 	.word	0x40012c00
 8006064:	00010007 	.word	0x00010007

08006068 <HAL_TIM_PeriodElapsedCallback>:
}
 8006068:	4770      	bx	lr

0800606a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800606a:	4770      	bx	lr

0800606c <HAL_TIM_IC_CaptureCallback>:
}
 800606c:	4770      	bx	lr

0800606e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800606e:	4770      	bx	lr

08006070 <HAL_TIM_TriggerCallback>:
}
 8006070:	4770      	bx	lr

08006072 <HAL_TIM_IRQHandler>:
{
 8006072:	b510      	push	{r4, lr}
 8006074:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006076:	6803      	ldr	r3, [r0, #0]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	f012 0f02 	tst.w	r2, #2
 800607e:	d011      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	f012 0f02 	tst.w	r2, #2
 8006086:	d00d      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006088:	f06f 0202 	mvn.w	r2, #2
 800608c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800608e:	2301      	movs	r3, #1
 8006090:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006092:	6803      	ldr	r3, [r0, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f013 0f03 	tst.w	r3, #3
 800609a:	d079      	beq.n	8006190 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800609c:	f7ff ffe6 	bl	800606c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a0:	2300      	movs	r3, #0
 80060a2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	f012 0f04 	tst.w	r2, #4
 80060ac:	d012      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	f012 0f04 	tst.w	r2, #4
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060b6:	f06f 0204 	mvn.w	r2, #4
 80060ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060bc:	2302      	movs	r3, #2
 80060be:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80060c8:	d068      	beq.n	800619c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80060ca:	4620      	mov	r0, r4
 80060cc:	f7ff ffce 	bl	800606c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d0:	2300      	movs	r3, #0
 80060d2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	f012 0f08 	tst.w	r2, #8
 80060dc:	d012      	beq.n	8006104 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	f012 0f08 	tst.w	r2, #8
 80060e4:	d00e      	beq.n	8006104 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060e6:	f06f 0208 	mvn.w	r2, #8
 80060ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ec:	2304      	movs	r3, #4
 80060ee:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f013 0f03 	tst.w	r3, #3
 80060f8:	d057      	beq.n	80061aa <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7ff ffb6 	bl	800606c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006100:	2300      	movs	r3, #0
 8006102:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	f012 0f10 	tst.w	r2, #16
 800610c:	d012      	beq.n	8006134 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	f012 0f10 	tst.w	r2, #16
 8006114:	d00e      	beq.n	8006134 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006116:	f06f 0210 	mvn.w	r2, #16
 800611a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611c:	2308      	movs	r3, #8
 800611e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006128:	d046      	beq.n	80061b8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800612a:	4620      	mov	r0, r4
 800612c:	f7ff ff9e 	bl	800606c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006130:	2300      	movs	r3, #0
 8006132:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	f012 0f01 	tst.w	r2, #1
 800613c:	d003      	beq.n	8006146 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	f012 0f01 	tst.w	r2, #1
 8006144:	d13f      	bne.n	80061c6 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800614e:	d003      	beq.n	8006158 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006156:	d13d      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006160:	d003      	beq.n	800616a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006168:	d13b      	bne.n	80061e2 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006172:	d003      	beq.n	800617c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	f012 0f40 	tst.w	r2, #64	; 0x40
 800617a:	d139      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	f012 0f20 	tst.w	r2, #32
 8006184:	d003      	beq.n	800618e <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	f012 0f20 	tst.w	r2, #32
 800618c:	d137      	bne.n	80061fe <HAL_TIM_IRQHandler+0x18c>
}
 800618e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006190:	f7ff ff6b 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006194:	4620      	mov	r0, r4
 8006196:	f7ff ff6a 	bl	800606e <HAL_TIM_PWM_PulseFinishedCallback>
 800619a:	e781      	b.n	80060a0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619c:	4620      	mov	r0, r4
 800619e:	f7ff ff64 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a2:	4620      	mov	r0, r4
 80061a4:	f7ff ff63 	bl	800606e <HAL_TIM_PWM_PulseFinishedCallback>
 80061a8:	e792      	b.n	80060d0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	4620      	mov	r0, r4
 80061ac:	f7ff ff5d 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7ff ff5c 	bl	800606e <HAL_TIM_PWM_PulseFinishedCallback>
 80061b6:	e7a3      	b.n	8006100 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7ff ff56 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061be:	4620      	mov	r0, r4
 80061c0:	f7ff ff55 	bl	800606e <HAL_TIM_PWM_PulseFinishedCallback>
 80061c4:	e7b4      	b.n	8006130 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061c6:	f06f 0201 	mvn.w	r2, #1
 80061ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7ff ff4b 	bl	8006068 <HAL_TIM_PeriodElapsedCallback>
 80061d2:	e7b8      	b.n	8006146 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 fb0d 	bl	80067fa <HAL_TIMEx_BreakCallback>
 80061e0:	e7ba      	b.n	8006158 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 fb07 	bl	80067fc <HAL_TIMEx_Break2Callback>
 80061ee:	e7bc      	b.n	800616a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff ff3a 	bl	8006070 <HAL_TIM_TriggerCallback>
 80061fc:	e7be      	b.n	800617c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061fe:	f06f 0220 	mvn.w	r2, #32
 8006202:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006204:	4620      	mov	r0, r4
 8006206:	f000 faf7 	bl	80067f8 <HAL_TIMEx_CommutCallback>
}
 800620a:	e7c0      	b.n	800618e <HAL_TIM_IRQHandler+0x11c>

0800620c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800620c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800620e:	4a30      	ldr	r2, [pc, #192]	; (80062d0 <TIM_Base_SetConfig+0xc4>)
 8006210:	4290      	cmp	r0, r2
 8006212:	d012      	beq.n	800623a <TIM_Base_SetConfig+0x2e>
 8006214:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006218:	d00f      	beq.n	800623a <TIM_Base_SetConfig+0x2e>
 800621a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800621e:	4290      	cmp	r0, r2
 8006220:	d00b      	beq.n	800623a <TIM_Base_SetConfig+0x2e>
 8006222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006226:	4290      	cmp	r0, r2
 8006228:	d007      	beq.n	800623a <TIM_Base_SetConfig+0x2e>
 800622a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800622e:	4290      	cmp	r0, r2
 8006230:	d003      	beq.n	800623a <TIM_Base_SetConfig+0x2e>
 8006232:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006236:	4290      	cmp	r0, r2
 8006238:	d103      	bne.n	8006242 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800623e:	684a      	ldr	r2, [r1, #4]
 8006240:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006242:	4a23      	ldr	r2, [pc, #140]	; (80062d0 <TIM_Base_SetConfig+0xc4>)
 8006244:	4290      	cmp	r0, r2
 8006246:	d01e      	beq.n	8006286 <TIM_Base_SetConfig+0x7a>
 8006248:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800624c:	d01b      	beq.n	8006286 <TIM_Base_SetConfig+0x7a>
 800624e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006252:	4290      	cmp	r0, r2
 8006254:	d017      	beq.n	8006286 <TIM_Base_SetConfig+0x7a>
 8006256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800625a:	4290      	cmp	r0, r2
 800625c:	d013      	beq.n	8006286 <TIM_Base_SetConfig+0x7a>
 800625e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006262:	4290      	cmp	r0, r2
 8006264:	d00f      	beq.n	8006286 <TIM_Base_SetConfig+0x7a>
 8006266:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800626a:	4290      	cmp	r0, r2
 800626c:	d00b      	beq.n	8006286 <TIM_Base_SetConfig+0x7a>
 800626e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006272:	4290      	cmp	r0, r2
 8006274:	d007      	beq.n	8006286 <TIM_Base_SetConfig+0x7a>
 8006276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800627a:	4290      	cmp	r0, r2
 800627c:	d003      	beq.n	8006286 <TIM_Base_SetConfig+0x7a>
 800627e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006282:	4290      	cmp	r0, r2
 8006284:	d103      	bne.n	800628e <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	68ca      	ldr	r2, [r1, #12]
 800628c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800628e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006292:	694a      	ldr	r2, [r1, #20]
 8006294:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006296:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006298:	688b      	ldr	r3, [r1, #8]
 800629a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800629c:	680b      	ldr	r3, [r1, #0]
 800629e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <TIM_Base_SetConfig+0xc4>)
 80062a2:	4298      	cmp	r0, r3
 80062a4:	d00f      	beq.n	80062c6 <TIM_Base_SetConfig+0xba>
 80062a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062aa:	4298      	cmp	r0, r3
 80062ac:	d00b      	beq.n	80062c6 <TIM_Base_SetConfig+0xba>
 80062ae:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80062b2:	4298      	cmp	r0, r3
 80062b4:	d007      	beq.n	80062c6 <TIM_Base_SetConfig+0xba>
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	4298      	cmp	r0, r3
 80062bc:	d003      	beq.n	80062c6 <TIM_Base_SetConfig+0xba>
 80062be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c2:	4298      	cmp	r0, r3
 80062c4:	d101      	bne.n	80062ca <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80062c6:	690b      	ldr	r3, [r1, #16]
 80062c8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80062ca:	2301      	movs	r3, #1
 80062cc:	6143      	str	r3, [r0, #20]
}
 80062ce:	4770      	bx	lr
 80062d0:	40012c00 	.word	0x40012c00

080062d4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80062d4:	b360      	cbz	r0, 8006330 <HAL_TIM_Base_Init+0x5c>
{
 80062d6:	b510      	push	{r4, lr}
 80062d8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80062da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80062de:	b313      	cbz	r3, 8006326 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	2302      	movs	r3, #2
 80062e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e6:	4621      	mov	r1, r4
 80062e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80062ec:	f7ff ff8e 	bl	800620c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80062fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80062fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006302:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006306:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800630a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006316:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800631a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800631e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006322:	2000      	movs	r0, #0
}
 8006324:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006326:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800632a:	f7fc f9fd 	bl	8002728 <HAL_TIM_Base_MspInit>
 800632e:	e7d7      	b.n	80062e0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006330:	2001      	movs	r0, #1
}
 8006332:	4770      	bx	lr

08006334 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006334:	b360      	cbz	r0, 8006390 <HAL_TIM_PWM_Init+0x5c>
{
 8006336:	b510      	push	{r4, lr}
 8006338:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800633a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800633e:	b313      	cbz	r3, 8006386 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	2302      	movs	r3, #2
 8006342:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006346:	4621      	mov	r1, r4
 8006348:	f851 0b04 	ldr.w	r0, [r1], #4
 800634c:	f7ff ff5e 	bl	800620c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006350:	2301      	movs	r3, #1
 8006352:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006356:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800635a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800635e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006362:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006366:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800636a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006376:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800637a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800637e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006382:	2000      	movs	r0, #0
}
 8006384:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006386:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800638a:	f7fc f9ed 	bl	8002768 <HAL_TIM_PWM_MspInit>
 800638e:	e7d7      	b.n	8006340 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006390:	2001      	movs	r0, #1
}
 8006392:	4770      	bx	lr

08006394 <TIM_OC2_SetConfig>:
{
 8006394:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006396:	6a03      	ldr	r3, [r0, #32]
 8006398:	f023 0310 	bic.w	r3, r3, #16
 800639c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800639e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80063a0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80063a2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063a4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80063a8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ac:	680d      	ldr	r5, [r1, #0]
 80063ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80063b2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063b6:	688d      	ldr	r5, [r1, #8]
 80063b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063bc:	4d17      	ldr	r5, [pc, #92]	; (800641c <TIM_OC2_SetConfig+0x88>)
 80063be:	42a8      	cmp	r0, r5
 80063c0:	d003      	beq.n	80063ca <TIM_OC2_SetConfig+0x36>
 80063c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80063c6:	42a8      	cmp	r0, r5
 80063c8:	d106      	bne.n	80063d8 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 80063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063ce:	68cd      	ldr	r5, [r1, #12]
 80063d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80063d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d8:	4d10      	ldr	r5, [pc, #64]	; (800641c <TIM_OC2_SetConfig+0x88>)
 80063da:	42a8      	cmp	r0, r5
 80063dc:	d00f      	beq.n	80063fe <TIM_OC2_SetConfig+0x6a>
 80063de:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80063e2:	42a8      	cmp	r0, r5
 80063e4:	d00b      	beq.n	80063fe <TIM_OC2_SetConfig+0x6a>
 80063e6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80063ea:	42a8      	cmp	r0, r5
 80063ec:	d007      	beq.n	80063fe <TIM_OC2_SetConfig+0x6a>
 80063ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80063f2:	42a8      	cmp	r0, r5
 80063f4:	d003      	beq.n	80063fe <TIM_OC2_SetConfig+0x6a>
 80063f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80063fa:	42a8      	cmp	r0, r5
 80063fc:	d107      	bne.n	800640e <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063fe:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006402:	694c      	ldr	r4, [r1, #20]
 8006404:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006408:	698c      	ldr	r4, [r1, #24]
 800640a:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800640e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006410:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006412:	684a      	ldr	r2, [r1, #4]
 8006414:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006416:	6203      	str	r3, [r0, #32]
}
 8006418:	bc30      	pop	{r4, r5}
 800641a:	4770      	bx	lr
 800641c:	40012c00 	.word	0x40012c00

08006420 <HAL_TIM_PWM_ConfigChannel>:
{
 8006420:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006422:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006426:	2b01      	cmp	r3, #1
 8006428:	f000 808c 	beq.w	8006544 <HAL_TIM_PWM_ConfigChannel+0x124>
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	2301      	movs	r3, #1
 8006432:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006436:	2a14      	cmp	r2, #20
 8006438:	d81e      	bhi.n	8006478 <HAL_TIM_PWM_ConfigChannel+0x58>
 800643a:	e8df f002 	tbb	[pc, r2]
 800643e:	1d0b      	.short	0x1d0b
 8006440:	1d211d1d 	.word	0x1d211d1d
 8006444:	1d351d1d 	.word	0x1d351d1d
 8006448:	1d481d1d 	.word	0x1d481d1d
 800644c:	1d5c1d1d 	.word	0x1d5c1d1d
 8006450:	1d1d      	.short	0x1d1d
 8006452:	6f          	.byte	0x6f
 8006453:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006454:	6800      	ldr	r0, [r0, #0]
 8006456:	f7ff fc8d 	bl	8005d74 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	6993      	ldr	r3, [r2, #24]
 800645e:	f043 0308 	orr.w	r3, r3, #8
 8006462:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006464:	6822      	ldr	r2, [r4, #0]
 8006466:	6993      	ldr	r3, [r2, #24]
 8006468:	f023 0304 	bic.w	r3, r3, #4
 800646c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800646e:	6822      	ldr	r2, [r4, #0]
 8006470:	6993      	ldr	r3, [r2, #24]
 8006472:	6929      	ldr	r1, [r5, #16]
 8006474:	430b      	orrs	r3, r1
 8006476:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8006478:	2000      	movs	r0, #0
 800647a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800647e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006480:	6800      	ldr	r0, [r0, #0]
 8006482:	f7ff ff87 	bl	8006394 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	6993      	ldr	r3, [r2, #24]
 800648a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800648e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	6993      	ldr	r3, [r2, #24]
 8006494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006498:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	6993      	ldr	r3, [r2, #24]
 800649e:	6929      	ldr	r1, [r5, #16]
 80064a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80064a4:	6193      	str	r3, [r2, #24]
      break;
 80064a6:	e7e7      	b.n	8006478 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064a8:	6800      	ldr	r0, [r0, #0]
 80064aa:	f7ff fcb1 	bl	8005e10 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ae:	6822      	ldr	r2, [r4, #0]
 80064b0:	69d3      	ldr	r3, [r2, #28]
 80064b2:	f043 0308 	orr.w	r3, r3, #8
 80064b6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	69d3      	ldr	r3, [r2, #28]
 80064bc:	f023 0304 	bic.w	r3, r3, #4
 80064c0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	69d3      	ldr	r3, [r2, #28]
 80064c6:	6929      	ldr	r1, [r5, #16]
 80064c8:	430b      	orrs	r3, r1
 80064ca:	61d3      	str	r3, [r2, #28]
      break;
 80064cc:	e7d4      	b.n	8006478 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064ce:	6800      	ldr	r0, [r0, #0]
 80064d0:	f7ff fce4 	bl	8005e9c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	69d3      	ldr	r3, [r2, #28]
 80064d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064dc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	69d3      	ldr	r3, [r2, #28]
 80064e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	69d3      	ldr	r3, [r2, #28]
 80064ec:	6929      	ldr	r1, [r5, #16]
 80064ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80064f2:	61d3      	str	r3, [r2, #28]
      break;
 80064f4:	e7c0      	b.n	8006478 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064f6:	6800      	ldr	r0, [r0, #0]
 80064f8:	f7ff fd06 	bl	8005f08 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006500:	f043 0308 	orr.w	r3, r3, #8
 8006504:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800650a:	f023 0304 	bic.w	r3, r3, #4
 800650e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006510:	6822      	ldr	r2, [r4, #0]
 8006512:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006514:	6929      	ldr	r1, [r5, #16]
 8006516:	430b      	orrs	r3, r1
 8006518:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800651a:	e7ad      	b.n	8006478 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	f7ff fd27 	bl	8005f70 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006522:	6822      	ldr	r2, [r4, #0]
 8006524:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800652a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006534:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800653a:	6929      	ldr	r1, [r5, #16]
 800653c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006540:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8006542:	e799      	b.n	8006478 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 8006544:	2002      	movs	r0, #2
 8006546:	e79a      	b.n	800647e <HAL_TIM_PWM_ConfigChannel+0x5e>

08006548 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006548:	f001 011f 	and.w	r1, r1, #31
 800654c:	f04f 0c01 	mov.w	ip, #1
 8006550:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006554:	6a03      	ldr	r3, [r0, #32]
 8006556:	ea23 030c 	bic.w	r3, r3, ip
 800655a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800655c:	6a03      	ldr	r3, [r0, #32]
 800655e:	408a      	lsls	r2, r1
 8006560:	4313      	orrs	r3, r2
 8006562:	6203      	str	r3, [r0, #32]
}
 8006564:	4770      	bx	lr
	...

08006568 <HAL_TIM_PWM_Start>:
{
 8006568:	b510      	push	{r4, lr}
 800656a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800656c:	2910      	cmp	r1, #16
 800656e:	d83c      	bhi.n	80065ea <HAL_TIM_PWM_Start+0x82>
 8006570:	e8df f001 	tbb	[pc, r1]
 8006574:	3b3b3b09 	.word	0x3b3b3b09
 8006578:	3b3b3b1f 	.word	0x3b3b3b1f
 800657c:	3b3b3b26 	.word	0x3b3b3b26
 8006580:	3b3b3b2d 	.word	0x3b3b3b2d
 8006584:	34          	.byte	0x34
 8006585:	00          	.byte	0x00
 8006586:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800658a:	b2db      	uxtb	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	bf18      	it	ne
 8006590:	2301      	movne	r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 8092 	bne.w	80066bc <HAL_TIM_PWM_Start+0x154>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006598:	2910      	cmp	r1, #16
 800659a:	d87d      	bhi.n	8006698 <HAL_TIM_PWM_Start+0x130>
 800659c:	e8df f001 	tbb	[pc, r1]
 80065a0:	7c7c7c2c 	.word	0x7c7c7c2c
 80065a4:	7c7c7c6c 	.word	0x7c7c7c6c
 80065a8:	7c7c7c70 	.word	0x7c7c7c70
 80065ac:	7c7c7c74 	.word	0x7c7c7c74
 80065b0:	78          	.byte	0x78
 80065b1:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065b2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	bf18      	it	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	e7e8      	b.n	8006592 <HAL_TIM_PWM_Start+0x2a>
 80065c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	bf18      	it	ne
 80065ca:	2301      	movne	r3, #1
 80065cc:	e7e1      	b.n	8006592 <HAL_TIM_PWM_Start+0x2a>
 80065ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	bf18      	it	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	e7da      	b.n	8006592 <HAL_TIM_PWM_Start+0x2a>
 80065dc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	bf18      	it	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	e7d3      	b.n	8006592 <HAL_TIM_PWM_Start+0x2a>
 80065ea:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	bf18      	it	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	e7cc      	b.n	8006592 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f8:	2302      	movs	r3, #2
 80065fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065fe:	2201      	movs	r2, #1
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	f7ff ffa1 	bl	8006548 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	4a2f      	ldr	r2, [pc, #188]	; (80066c8 <HAL_TIM_PWM_Start+0x160>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00f      	beq.n	800662e <HAL_TIM_PWM_Start+0xc6>
 800660e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006612:	4293      	cmp	r3, r2
 8006614:	d00b      	beq.n	800662e <HAL_TIM_PWM_Start+0xc6>
 8006616:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800661a:	4293      	cmp	r3, r2
 800661c:	d007      	beq.n	800662e <HAL_TIM_PWM_Start+0xc6>
 800661e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <HAL_TIM_PWM_Start+0xc6>
 8006626:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800662a:	4293      	cmp	r3, r2
 800662c:	d103      	bne.n	8006636 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 800662e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006634:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	4a23      	ldr	r2, [pc, #140]	; (80066c8 <HAL_TIM_PWM_Start+0x160>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d030      	beq.n	80066a0 <HAL_TIM_PWM_Start+0x138>
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	d02d      	beq.n	80066a0 <HAL_TIM_PWM_Start+0x138>
 8006644:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006648:	4293      	cmp	r3, r2
 800664a:	d029      	beq.n	80066a0 <HAL_TIM_PWM_Start+0x138>
 800664c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006650:	4293      	cmp	r3, r2
 8006652:	d025      	beq.n	80066a0 <HAL_TIM_PWM_Start+0x138>
 8006654:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006658:	4293      	cmp	r3, r2
 800665a:	d021      	beq.n	80066a0 <HAL_TIM_PWM_Start+0x138>
 800665c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006660:	4293      	cmp	r3, r2
 8006662:	d01d      	beq.n	80066a0 <HAL_TIM_PWM_Start+0x138>
 8006664:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006668:	4293      	cmp	r3, r2
 800666a:	d019      	beq.n	80066a0 <HAL_TIM_PWM_Start+0x138>
    __HAL_TIM_ENABLE(htim);
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006674:	2000      	movs	r0, #0
 8006676:	e022      	b.n	80066be <HAL_TIM_PWM_Start+0x156>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006678:	2302      	movs	r3, #2
 800667a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800667e:	e7be      	b.n	80065fe <HAL_TIM_PWM_Start+0x96>
 8006680:	2302      	movs	r3, #2
 8006682:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006686:	e7ba      	b.n	80065fe <HAL_TIM_PWM_Start+0x96>
 8006688:	2302      	movs	r3, #2
 800668a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800668e:	e7b6      	b.n	80065fe <HAL_TIM_PWM_Start+0x96>
 8006690:	2302      	movs	r3, #2
 8006692:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006696:	e7b2      	b.n	80065fe <HAL_TIM_PWM_Start+0x96>
 8006698:	2302      	movs	r3, #2
 800669a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800669e:	e7ae      	b.n	80065fe <HAL_TIM_PWM_Start+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a0:	6899      	ldr	r1, [r3, #8]
 80066a2:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <HAL_TIM_PWM_Start+0x164>)
 80066a4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a6:	2a06      	cmp	r2, #6
 80066a8:	d00a      	beq.n	80066c0 <HAL_TIM_PWM_Start+0x158>
 80066aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80066ae:	d009      	beq.n	80066c4 <HAL_TIM_PWM_Start+0x15c>
      __HAL_TIM_ENABLE(htim);
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80066b8:	2000      	movs	r0, #0
 80066ba:	e000      	b.n	80066be <HAL_TIM_PWM_Start+0x156>
    return HAL_ERROR;
 80066bc:	2001      	movs	r0, #1
}
 80066be:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80066c0:	2000      	movs	r0, #0
 80066c2:	e7fc      	b.n	80066be <HAL_TIM_PWM_Start+0x156>
 80066c4:	2000      	movs	r0, #0
 80066c6:	e7fa      	b.n	80066be <HAL_TIM_PWM_Start+0x156>
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	00010007 	.word	0x00010007

080066d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066d0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80066d4:	2a01      	cmp	r2, #1
 80066d6:	d042      	beq.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 80066d8:	b430      	push	{r4, r5}
 80066da:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80066dc:	2201      	movs	r2, #1
 80066de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e2:	2202      	movs	r2, #2
 80066e4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e8:	6800      	ldr	r0, [r0, #0]
 80066ea:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ec:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066ee:	4d1d      	ldr	r5, [pc, #116]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80066f0:	42a8      	cmp	r0, r5
 80066f2:	d003      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80066f4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80066f8:	42a8      	cmp	r0, r5
 80066fa:	d103      	bne.n	8006704 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006700:	684d      	ldr	r5, [r1, #4]
 8006702:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006704:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006708:	680d      	ldr	r5, [r1, #0]
 800670a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800670c:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4814      	ldr	r0, [pc, #80]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8006712:	4282      	cmp	r2, r0
 8006714:	d016      	beq.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006716:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800671a:	d013      	beq.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800671c:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8006720:	4282      	cmp	r2, r0
 8006722:	d00f      	beq.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006724:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006728:	4282      	cmp	r2, r0
 800672a:	d00b      	beq.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800672c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006730:	4282      	cmp	r2, r0
 8006732:	d007      	beq.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006734:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 8006738:	4282      	cmp	r2, r0
 800673a:	d003      	beq.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800673c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8006740:	4282      	cmp	r2, r0
 8006742:	d104      	bne.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006744:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006748:	6889      	ldr	r1, [r1, #8]
 800674a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800674c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006754:	2000      	movs	r0, #0
 8006756:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 800675a:	bc30      	pop	{r4, r5}
 800675c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800675e:	2002      	movs	r0, #2
}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40012c00 	.word	0x40012c00

08006768 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006768:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d03e      	beq.n	80067ee <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8006770:	b410      	push	{r4}
 8006772:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8006774:	2301      	movs	r3, #1
 8006776:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800677a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	6888      	ldr	r0, [r1, #8]
 8006782:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006788:	6848      	ldr	r0, [r1, #4]
 800678a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800678c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006790:	6808      	ldr	r0, [r1, #0]
 8006792:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006798:	6908      	ldr	r0, [r1, #16]
 800679a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800679c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067a0:	6948      	ldr	r0, [r1, #20]
 80067a2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a8:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80067aa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067ac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80067b0:	6988      	ldr	r0, [r1, #24]
 80067b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067b6:	6810      	ldr	r0, [r2, #0]
 80067b8:	4c0e      	ldr	r4, [pc, #56]	; (80067f4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80067ba:	42a0      	cmp	r0, r4
 80067bc:	d003      	beq.n	80067c6 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 80067be:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80067c2:	42a0      	cmp	r0, r4
 80067c4:	d10c      	bne.n	80067e0 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067ca:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80067cc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067d4:	69cc      	ldr	r4, [r1, #28]
 80067d6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067d8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80067dc:	6a09      	ldr	r1, [r1, #32]
 80067de:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067e0:	6443      	str	r3, [r0, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067e2:	2000      	movs	r0, #0
 80067e4:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80067e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ec:	4770      	bx	lr
  __HAL_LOCK(htim);
 80067ee:	2002      	movs	r0, #2
}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40012c00 	.word	0x40012c00

080067f8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f8:	4770      	bx	lr

080067fa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067fa:	4770      	bx	lr

080067fc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067fc:	4770      	bx	lr

080067fe <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80067fe:	4770      	bx	lr

08006800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006800:	b510      	push	{r4, lr}
 8006802:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006804:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006806:	6883      	ldr	r3, [r0, #8]
 8006808:	6902      	ldr	r2, [r0, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	6942      	ldr	r2, [r0, #20]
 800680e:	4313      	orrs	r3, r2
 8006810:	69c2      	ldr	r2, [r0, #28]
 8006812:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006814:	6808      	ldr	r0, [r1, #0]
 8006816:	4a8e      	ldr	r2, [pc, #568]	; (8006a50 <UART_SetConfig+0x250>)
 8006818:	4002      	ands	r2, r0
 800681a:	431a      	orrs	r2, r3
 800681c:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	6853      	ldr	r3, [r2, #4]
 8006822:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006826:	68e1      	ldr	r1, [r4, #12]
 8006828:	430b      	orrs	r3, r1
 800682a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800682c:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	4b88      	ldr	r3, [pc, #544]	; (8006a54 <UART_SetConfig+0x254>)
 8006832:	429a      	cmp	r2, r3
 8006834:	d001      	beq.n	800683a <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006836:	6a23      	ldr	r3, [r4, #32]
 8006838:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800683a:	6893      	ldr	r3, [r2, #8]
 800683c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006840:	430b      	orrs	r3, r1
 8006842:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	4a84      	ldr	r2, [pc, #528]	; (8006a58 <UART_SetConfig+0x258>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d010      	beq.n	800686e <UART_SetConfig+0x6e>
 800684c:	4a83      	ldr	r2, [pc, #524]	; (8006a5c <UART_SetConfig+0x25c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d021      	beq.n	8006896 <UART_SetConfig+0x96>
 8006852:	4a83      	ldr	r2, [pc, #524]	; (8006a60 <UART_SetConfig+0x260>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d037      	beq.n	80068c8 <UART_SetConfig+0xc8>
 8006858:	4a82      	ldr	r2, [pc, #520]	; (8006a64 <UART_SetConfig+0x264>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d05c      	beq.n	8006918 <UART_SetConfig+0x118>
 800685e:	4a82      	ldr	r2, [pc, #520]	; (8006a68 <UART_SetConfig+0x268>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d06b      	beq.n	800693c <UART_SetConfig+0x13c>
 8006864:	4a7b      	ldr	r2, [pc, #492]	; (8006a54 <UART_SetConfig+0x254>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d07d      	beq.n	8006966 <UART_SetConfig+0x166>
 800686a:	2210      	movs	r2, #16
 800686c:	e03a      	b.n	80068e4 <UART_SetConfig+0xe4>
 800686e:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8006872:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006876:	f002 0203 	and.w	r2, r2, #3
 800687a:	2a03      	cmp	r2, #3
 800687c:	d809      	bhi.n	8006892 <UART_SetConfig+0x92>
 800687e:	e8df f002 	tbb	[pc, r2]
 8006882:	0402      	.short	0x0402
 8006884:	0687      	.short	0x0687
 8006886:	2201      	movs	r2, #1
 8006888:	e02c      	b.n	80068e4 <UART_SetConfig+0xe4>
 800688a:	2204      	movs	r2, #4
 800688c:	e02a      	b.n	80068e4 <UART_SetConfig+0xe4>
 800688e:	2208      	movs	r2, #8
 8006890:	e028      	b.n	80068e4 <UART_SetConfig+0xe4>
 8006892:	2210      	movs	r2, #16
 8006894:	e026      	b.n	80068e4 <UART_SetConfig+0xe4>
 8006896:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800689a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800689e:	f002 020c 	and.w	r2, r2, #12
 80068a2:	2a0c      	cmp	r2, #12
 80068a4:	d80e      	bhi.n	80068c4 <UART_SetConfig+0xc4>
 80068a6:	e8df f002 	tbb	[pc, r2]
 80068aa:	0d07      	.short	0x0d07
 80068ac:	0d090d0d 	.word	0x0d090d0d
 80068b0:	0d750d0d 	.word	0x0d750d0d
 80068b4:	0d0d      	.short	0x0d0d
 80068b6:	0b          	.byte	0x0b
 80068b7:	00          	.byte	0x00
 80068b8:	2200      	movs	r2, #0
 80068ba:	e013      	b.n	80068e4 <UART_SetConfig+0xe4>
 80068bc:	2204      	movs	r2, #4
 80068be:	e011      	b.n	80068e4 <UART_SetConfig+0xe4>
 80068c0:	2208      	movs	r2, #8
 80068c2:	e00f      	b.n	80068e4 <UART_SetConfig+0xe4>
 80068c4:	2210      	movs	r2, #16
 80068c6:	e00d      	b.n	80068e4 <UART_SetConfig+0xe4>
 80068c8:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80068cc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80068d0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80068d4:	2a20      	cmp	r2, #32
 80068d6:	d05f      	beq.n	8006998 <UART_SetConfig+0x198>
 80068d8:	d81a      	bhi.n	8006910 <UART_SetConfig+0x110>
 80068da:	2a00      	cmp	r2, #0
 80068dc:	d05e      	beq.n	800699c <UART_SetConfig+0x19c>
 80068de:	2a10      	cmp	r2, #16
 80068e0:	d15e      	bne.n	80069a0 <UART_SetConfig+0x1a0>
 80068e2:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068e4:	495b      	ldr	r1, [pc, #364]	; (8006a54 <UART_SetConfig+0x254>)
 80068e6:	428b      	cmp	r3, r1
 80068e8:	d076      	beq.n	80069d8 <UART_SetConfig+0x1d8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ea:	69e0      	ldr	r0, [r4, #28]
 80068ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80068f0:	f000 80a3 	beq.w	8006a3a <UART_SetConfig+0x23a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f4:	2a08      	cmp	r2, #8
 80068f6:	f200 810e 	bhi.w	8006b16 <UART_SetConfig+0x316>
 80068fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80068fe:	00dd      	.short	0x00dd
 8006900:	00db00f3 	.word	0x00db00f3
 8006904:	00f6010c 	.word	0x00f6010c
 8006908:	010c010c 	.word	0x010c010c
 800690c:	00f9010c 	.word	0x00f9010c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006910:	2a30      	cmp	r2, #48	; 0x30
 8006912:	d147      	bne.n	80069a4 <UART_SetConfig+0x1a4>
 8006914:	2208      	movs	r2, #8
 8006916:	e7e5      	b.n	80068e4 <UART_SetConfig+0xe4>
 8006918:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800691c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006920:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8006924:	2a80      	cmp	r2, #128	; 0x80
 8006926:	d03f      	beq.n	80069a8 <UART_SetConfig+0x1a8>
 8006928:	d804      	bhi.n	8006934 <UART_SetConfig+0x134>
 800692a:	b3fa      	cbz	r2, 80069ac <UART_SetConfig+0x1ac>
 800692c:	2a40      	cmp	r2, #64	; 0x40
 800692e:	d13f      	bne.n	80069b0 <UART_SetConfig+0x1b0>
 8006930:	2204      	movs	r2, #4
 8006932:	e7d7      	b.n	80068e4 <UART_SetConfig+0xe4>
 8006934:	2ac0      	cmp	r2, #192	; 0xc0
 8006936:	d13d      	bne.n	80069b4 <UART_SetConfig+0x1b4>
 8006938:	2208      	movs	r2, #8
 800693a:	e7d3      	b.n	80068e4 <UART_SetConfig+0xe4>
 800693c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8006940:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006944:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006948:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800694c:	d034      	beq.n	80069b8 <UART_SetConfig+0x1b8>
 800694e:	d805      	bhi.n	800695c <UART_SetConfig+0x15c>
 8006950:	b3a2      	cbz	r2, 80069bc <UART_SetConfig+0x1bc>
 8006952:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006956:	d133      	bne.n	80069c0 <UART_SetConfig+0x1c0>
 8006958:	2204      	movs	r2, #4
 800695a:	e7c3      	b.n	80068e4 <UART_SetConfig+0xe4>
 800695c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006960:	d130      	bne.n	80069c4 <UART_SetConfig+0x1c4>
 8006962:	2208      	movs	r2, #8
 8006964:	e7be      	b.n	80068e4 <UART_SetConfig+0xe4>
 8006966:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800696a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800696e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006972:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006976:	d027      	beq.n	80069c8 <UART_SetConfig+0x1c8>
 8006978:	d805      	bhi.n	8006986 <UART_SetConfig+0x186>
 800697a:	b33a      	cbz	r2, 80069cc <UART_SetConfig+0x1cc>
 800697c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006980:	d126      	bne.n	80069d0 <UART_SetConfig+0x1d0>
 8006982:	2204      	movs	r2, #4
 8006984:	e7ae      	b.n	80068e4 <UART_SetConfig+0xe4>
 8006986:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800698a:	d123      	bne.n	80069d4 <UART_SetConfig+0x1d4>
 800698c:	2208      	movs	r2, #8
 800698e:	e7a9      	b.n	80068e4 <UART_SetConfig+0xe4>
 8006990:	2202      	movs	r2, #2
 8006992:	e7a7      	b.n	80068e4 <UART_SetConfig+0xe4>
 8006994:	2202      	movs	r2, #2
 8006996:	e7a5      	b.n	80068e4 <UART_SetConfig+0xe4>
 8006998:	2202      	movs	r2, #2
 800699a:	e7a3      	b.n	80068e4 <UART_SetConfig+0xe4>
 800699c:	2200      	movs	r2, #0
 800699e:	e7a1      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069a0:	2210      	movs	r2, #16
 80069a2:	e79f      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069a4:	2210      	movs	r2, #16
 80069a6:	e79d      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069a8:	2202      	movs	r2, #2
 80069aa:	e79b      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069ac:	2200      	movs	r2, #0
 80069ae:	e799      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069b0:	2210      	movs	r2, #16
 80069b2:	e797      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069b4:	2210      	movs	r2, #16
 80069b6:	e795      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069b8:	2202      	movs	r2, #2
 80069ba:	e793      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069bc:	2200      	movs	r2, #0
 80069be:	e791      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069c0:	2210      	movs	r2, #16
 80069c2:	e78f      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069c4:	2210      	movs	r2, #16
 80069c6:	e78d      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069c8:	2202      	movs	r2, #2
 80069ca:	e78b      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069cc:	2200      	movs	r2, #0
 80069ce:	e789      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069d0:	2210      	movs	r2, #16
 80069d2:	e787      	b.n	80068e4 <UART_SetConfig+0xe4>
 80069d4:	2210      	movs	r2, #16
 80069d6:	e785      	b.n	80068e4 <UART_SetConfig+0xe4>
    switch (clocksource)
 80069d8:	2a08      	cmp	r2, #8
 80069da:	f200 808c 	bhi.w	8006af6 <UART_SetConfig+0x2f6>
 80069de:	e8df f002 	tbb	[pc, r2]
 80069e2:	8a08      	.short	0x8a08
 80069e4:	8a278a2a 	.word	0x8a278a2a
 80069e8:	8a8a      	.short	0x8a8a
 80069ea:	05          	.byte	0x05
 80069eb:	00          	.byte	0x00
 80069ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80069f0:	e003      	b.n	80069fa <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f2:	f7fe fa2b 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d07f      	beq.n	8006afa <UART_SetConfig+0x2fa>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069fa:	6862      	ldr	r2, [r4, #4]
 80069fc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006a00:	4283      	cmp	r3, r0
 8006a02:	d87c      	bhi.n	8006afe <UART_SetConfig+0x2fe>
 8006a04:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006a08:	d87b      	bhi.n	8006b02 <UART_SetConfig+0x302>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a0a:	0e01      	lsrs	r1, r0, #24
 8006a0c:	0200      	lsls	r0, r0, #8
 8006a0e:	0853      	lsrs	r3, r2, #1
 8006a10:	18c0      	adds	r0, r0, r3
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	f141 0100 	adc.w	r1, r1, #0
 8006a1a:	f7f9 fc31 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a1e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006a22:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <UART_SetConfig+0x26c>)
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d86e      	bhi.n	8006b06 <UART_SetConfig+0x306>
          huart->Instance->BRR = usartdiv;
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	60d8      	str	r0, [r3, #12]
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	e055      	b.n	8006adc <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a30:	f7fd fde8 	bl	8004604 <HAL_RCC_GetSysClockFreq>
        break;
 8006a34:	e7df      	b.n	80069f6 <UART_SetConfig+0x1f6>
        pclk = (uint32_t) HSI_VALUE;
 8006a36:	480e      	ldr	r0, [pc, #56]	; (8006a70 <UART_SetConfig+0x270>)
 8006a38:	e7df      	b.n	80069fa <UART_SetConfig+0x1fa>
    switch (clocksource)
 8006a3a:	2a08      	cmp	r2, #8
 8006a3c:	d865      	bhi.n	8006b0a <UART_SetConfig+0x30a>
 8006a3e:	e8df f002 	tbb	[pc, r2]
 8006a42:	3319      	.short	0x3319
 8006a44:	64366405 	.word	0x64366405
 8006a48:	6464      	.short	0x6464
 8006a4a:	1d          	.byte	0x1d
 8006a4b:	00          	.byte	0x00
 8006a4c:	4808      	ldr	r0, [pc, #32]	; (8006a70 <UART_SetConfig+0x270>)
 8006a4e:	e015      	b.n	8006a7c <UART_SetConfig+0x27c>
 8006a50:	efff69f3 	.word	0xefff69f3
 8006a54:	40008000 	.word	0x40008000
 8006a58:	40013800 	.word	0x40013800
 8006a5c:	40004400 	.word	0x40004400
 8006a60:	40004800 	.word	0x40004800
 8006a64:	40004c00 	.word	0x40004c00
 8006a68:	40005000 	.word	0x40005000
 8006a6c:	000ffcff 	.word	0x000ffcff
 8006a70:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a74:	f7fe f9ea 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d048      	beq.n	8006b0e <UART_SetConfig+0x30e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a7c:	6862      	ldr	r2, [r4, #4]
 8006a7e:	0853      	lsrs	r3, r2, #1
 8006a80:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006a84:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a88:	f1a3 0110 	sub.w	r1, r3, #16
 8006a8c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006a90:	4291      	cmp	r1, r2
 8006a92:	d83e      	bhi.n	8006b12 <UART_SetConfig+0x312>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a9a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006a9e:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8006aa0:	6822      	ldr	r2, [r4, #0]
 8006aa2:	60d3      	str	r3, [r2, #12]
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	e019      	b.n	8006adc <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa8:	f7fe f9e2 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
        break;
 8006aac:	e7e4      	b.n	8006a78 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetSysClockFreq();
 8006aae:	f7fd fda9 	bl	8004604 <HAL_RCC_GetSysClockFreq>
        break;
 8006ab2:	e7e1      	b.n	8006a78 <UART_SetConfig+0x278>
    switch (clocksource)
 8006ab4:	481b      	ldr	r0, [pc, #108]	; (8006b24 <UART_SetConfig+0x324>)
 8006ab6:	e002      	b.n	8006abe <UART_SetConfig+0x2be>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab8:	f7fe f9c8 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8006abc:	b368      	cbz	r0, 8006b1a <UART_SetConfig+0x31a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006ac4:	fbb0 f0f3 	udiv	r0, r0, r3
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac8:	f1a0 0210 	sub.w	r2, r0, #16
 8006acc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d824      	bhi.n	8006b1e <UART_SetConfig+0x31e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	b280      	uxth	r0, r0
 8006ad8:	60d8      	str	r0, [r3, #12]
 8006ada:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8006ae0:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8006ae2:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae4:	f7fe f9c4 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
        break;
 8006ae8:	e7e8      	b.n	8006abc <UART_SetConfig+0x2bc>
        pclk = HAL_RCC_GetSysClockFreq();
 8006aea:	f7fd fd8b 	bl	8004604 <HAL_RCC_GetSysClockFreq>
        break;
 8006aee:	e7e5      	b.n	8006abc <UART_SetConfig+0x2bc>
        pclk = (uint32_t) LSE_VALUE;
 8006af0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006af4:	e7e3      	b.n	8006abe <UART_SetConfig+0x2be>
    switch (clocksource)
 8006af6:	2001      	movs	r0, #1
 8006af8:	e7f0      	b.n	8006adc <UART_SetConfig+0x2dc>
 8006afa:	2000      	movs	r0, #0
 8006afc:	e7ee      	b.n	8006adc <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8006afe:	2001      	movs	r0, #1
 8006b00:	e7ec      	b.n	8006adc <UART_SetConfig+0x2dc>
 8006b02:	2001      	movs	r0, #1
 8006b04:	e7ea      	b.n	8006adc <UART_SetConfig+0x2dc>
          ret = HAL_ERROR;
 8006b06:	2001      	movs	r0, #1
 8006b08:	e7e8      	b.n	8006adc <UART_SetConfig+0x2dc>
    switch (clocksource)
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	e7e6      	b.n	8006adc <UART_SetConfig+0x2dc>
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e7e4      	b.n	8006adc <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8006b12:	2001      	movs	r0, #1
 8006b14:	e7e2      	b.n	8006adc <UART_SetConfig+0x2dc>
    switch (clocksource)
 8006b16:	2001      	movs	r0, #1
 8006b18:	e7e0      	b.n	8006adc <UART_SetConfig+0x2dc>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e7de      	b.n	8006adc <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8006b1e:	2001      	movs	r0, #1
 8006b20:	e7dc      	b.n	8006adc <UART_SetConfig+0x2dc>
 8006b22:	bf00      	nop
 8006b24:	00f42400 	.word	0x00f42400

08006b28 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b2a:	f013 0f01 	tst.w	r3, #1
 8006b2e:	d006      	beq.n	8006b3e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b30:	6802      	ldr	r2, [r0, #0]
 8006b32:	6853      	ldr	r3, [r2, #4]
 8006b34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b38:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b40:	f013 0f02 	tst.w	r3, #2
 8006b44:	d006      	beq.n	8006b54 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b46:	6802      	ldr	r2, [r0, #0]
 8006b48:	6853      	ldr	r3, [r2, #4]
 8006b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006b50:	430b      	orrs	r3, r1
 8006b52:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b56:	f013 0f04 	tst.w	r3, #4
 8006b5a:	d006      	beq.n	8006b6a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b5c:	6802      	ldr	r2, [r0, #0]
 8006b5e:	6853      	ldr	r3, [r2, #4]
 8006b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b64:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006b66:	430b      	orrs	r3, r1
 8006b68:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b6c:	f013 0f08 	tst.w	r3, #8
 8006b70:	d006      	beq.n	8006b80 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b72:	6802      	ldr	r2, [r0, #0]
 8006b74:	6853      	ldr	r3, [r2, #4]
 8006b76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b7a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b82:	f013 0f10 	tst.w	r3, #16
 8006b86:	d006      	beq.n	8006b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b88:	6802      	ldr	r2, [r0, #0]
 8006b8a:	6893      	ldr	r3, [r2, #8]
 8006b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b90:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006b92:	430b      	orrs	r3, r1
 8006b94:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b98:	f013 0f20 	tst.w	r3, #32
 8006b9c:	d006      	beq.n	8006bac <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b9e:	6802      	ldr	r2, [r0, #0]
 8006ba0:	6893      	ldr	r3, [r2, #8]
 8006ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ba6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bb4:	6802      	ldr	r2, [r0, #0]
 8006bb6:	6853      	ldr	r3, [r2, #4]
 8006bb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bbc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc8:	d00b      	beq.n	8006be2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bcc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006bd0:	d006      	beq.n	8006be0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bd2:	6802      	ldr	r2, [r0, #0]
 8006bd4:	6853      	ldr	r3, [r2, #4]
 8006bd6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006bda:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6053      	str	r3, [r2, #4]
  }
}
 8006be0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006be2:	6802      	ldr	r2, [r0, #0]
 8006be4:	6853      	ldr	r3, [r2, #4]
 8006be6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006bea:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6053      	str	r3, [r2, #4]
 8006bf0:	e7eb      	b.n	8006bca <UART_AdvFeatureConfig+0xa2>

08006bf2 <UART_WaitOnFlagUntilTimeout>:
    } while ((__STREXW(val,(__IO uint32_t *)&(REG))) != 0U); \
  } while(0)

HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	4616      	mov	r6, r2
 8006bfc:	4699      	mov	r9, r3
 8006bfe:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c02:	682b      	ldr	r3, [r5, #0]
 8006c04:	69dc      	ldr	r4, [r3, #28]
 8006c06:	ea37 0404 	bics.w	r4, r7, r4
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2401      	moveq	r4, #1
 8006c0e:	2400      	movne	r4, #0
 8006c10:	42b4      	cmp	r4, r6
 8006c12:	d153      	bne.n	8006cbc <UART_WaitOnFlagUntilTimeout+0xca>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c14:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006c18:	d0f3      	beq.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1a:	f7fc fc81 	bl	8003520 <HAL_GetTick>
 8006c1e:	eba0 0009 	sub.w	r0, r0, r9
 8006c22:	4540      	cmp	r0, r8
 8006c24:	d82d      	bhi.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x90>
 8006c26:	f1b8 0f00 	cmp.w	r8, #0
 8006c2a:	d02a      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x90>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	f012 0f04 	tst.w	r2, #4
 8006c34:	d0e5      	beq.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006c3c:	d0e1      	beq.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c42:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c44:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	e852 3f00 	ldrex	r3, [r2]
 8006c4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	e842 3100 	strex	r1, r3, [r2]
 8006c52:	2900      	cmp	r1, #0
 8006c54:	d1f6      	bne.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x52>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c56:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	f102 0308 	add.w	r3, r2, #8
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	3208      	adds	r2, #8
 8006c66:	e842 3100 	strex	r1, r3, [r2]
 8006c6a:	2900      	cmp	r1, #0
 8006c6c:	d1f3      	bne.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x64>

          huart->gState = HAL_UART_STATE_READY;
 8006c6e:	2320      	movs	r3, #32
 8006c70:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c72:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c74:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c7e:	2003      	movs	r0, #3
 8006c80:	e01d      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xcc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c82:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	e852 3f00 	ldrex	r3, [r2]
 8006c88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	e842 3100 	strex	r1, r3, [r2]
 8006c90:	2900      	cmp	r1, #0
 8006c92:	d1f6      	bne.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x90>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c94:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	f102 0308 	add.w	r3, r2, #8
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	3208      	adds	r2, #8
 8006ca4:	e842 3100 	strex	r1, r3, [r2]
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	d1f3      	bne.n	8006c94 <UART_WaitOnFlagUntilTimeout+0xa2>
        huart->gState = HAL_UART_STATE_READY;
 8006cac:	2320      	movs	r3, #32
 8006cae:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8006cb8:	2003      	movs	r0, #3
 8006cba:	e000      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xcc>
        }
      }
    }
  }
  return HAL_OK;
 8006cbc:	2000      	movs	r0, #0
}
 8006cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006cc2 <HAL_UART_Transmit>:
{
 8006cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006cca:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d156      	bne.n	8006d7e <HAL_UART_Transmit+0xbc>
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	d055      	beq.n	8006d86 <HAL_UART_Transmit+0xc4>
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	d055      	beq.n	8006d8a <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8006cde:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d053      	beq.n	8006d8e <HAL_UART_Transmit+0xcc>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cf2:	2321      	movs	r3, #33	; 0x21
 8006cf4:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8006cf6:	f7fc fc13 	bl	8003520 <HAL_GetTick>
 8006cfa:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006cfc:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d00:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d04:	68a3      	ldr	r3, [r4, #8]
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0a:	d005      	beq.n	8006d18 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8006d0c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8006d10:	2300      	movs	r3, #0
 8006d12:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8006d16:	e014      	b.n	8006d42 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	b113      	cbz	r3, 8006d22 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	e7f6      	b.n	8006d10 <HAL_UART_Transmit+0x4e>
      pdata16bits = (const uint16_t *) pData;
 8006d22:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006d24:	2500      	movs	r5, #0
 8006d26:	e7f3      	b.n	8006d10 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d28:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d32:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006d34:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8006d38:	b292      	uxth	r2, r2
 8006d3a:	3a01      	subs	r2, #1
 8006d3c:	b292      	uxth	r2, r2
 8006d3e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d42:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	b173      	cbz	r3, 8006d68 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d4a:	9600      	str	r6, [sp, #0]
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2180      	movs	r1, #128	; 0x80
 8006d52:	4620      	mov	r0, r4
 8006d54:	f7ff ff4d 	bl	8006bf2 <UART_WaitOnFlagUntilTimeout>
 8006d58:	b9d8      	cbnz	r0, 8006d92 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8006d5a:	2d00      	cmp	r5, #0
 8006d5c:	d0e4      	beq.n	8006d28 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006d64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d66:	e7e5      	b.n	8006d34 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d68:	9600      	str	r6, [sp, #0]
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2140      	movs	r1, #64	; 0x40
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7ff ff3e 	bl	8006bf2 <UART_WaitOnFlagUntilTimeout>
 8006d76:	b970      	cbnz	r0, 8006d96 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8006d78:	2320      	movs	r3, #32
 8006d7a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8006d7c:	e000      	b.n	8006d80 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8006d7e:	2002      	movs	r0, #2
}
 8006d80:	b002      	add	sp, #8
 8006d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8006d86:	2001      	movs	r0, #1
 8006d88:	e7fa      	b.n	8006d80 <HAL_UART_Transmit+0xbe>
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	e7f8      	b.n	8006d80 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8006d8e:	2002      	movs	r0, #2
 8006d90:	e7f6      	b.n	8006d80 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8006d92:	2003      	movs	r0, #3
 8006d94:	e7f4      	b.n	8006d80 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8006d96:	2003      	movs	r0, #3
 8006d98:	e7f2      	b.n	8006d80 <HAL_UART_Transmit+0xbe>

08006d9a <UART_CheckIdleState>:
{
 8006d9a:	b530      	push	{r4, r5, lr}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8006da6:	f7fc fbbb 	bl	8003520 <HAL_GetTick>
 8006daa:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dac:	6822      	ldr	r2, [r4, #0]
 8006dae:	6812      	ldr	r2, [r2, #0]
 8006db0:	f012 0f08 	tst.w	r2, #8
 8006db4:	d10d      	bne.n	8006dd2 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f013 0f04 	tst.w	r3, #4
 8006dbe:	d116      	bne.n	8006dee <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8006dc0:	2320      	movs	r3, #32
 8006dc2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dc4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8006dca:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8006dce:	b003      	add	sp, #12
 8006dd0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006de0:	4620      	mov	r0, r4
 8006de2:	f7ff ff06 	bl	8006bf2 <UART_WaitOnFlagUntilTimeout>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d0e5      	beq.n	8006db6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006dea:	2003      	movs	r0, #3
 8006dec:	e7ef      	b.n	8006dce <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	462b      	mov	r3, r5
 8006df6:	2200      	movs	r2, #0
 8006df8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7ff fef8 	bl	8006bf2 <UART_WaitOnFlagUntilTimeout>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d0dc      	beq.n	8006dc0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006e06:	2003      	movs	r0, #3
 8006e08:	e7e1      	b.n	8006dce <UART_CheckIdleState+0x34>

08006e0a <HAL_UART_Init>:
  if (huart == NULL)
 8006e0a:	b368      	cbz	r0, 8006e68 <HAL_UART_Init+0x5e>
{
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006e10:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006e12:	b303      	cbz	r3, 8006e56 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006e14:	2324      	movs	r3, #36	; 0x24
 8006e16:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8006e18:	6822      	ldr	r2, [r4, #0]
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	f023 0301 	bic.w	r3, r3, #1
 8006e20:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff fcec 	bl	8006800 <UART_SetConfig>
 8006e28:	2801      	cmp	r0, #1
 8006e2a:	d013      	beq.n	8006e54 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e2e:	b9bb      	cbnz	r3, 8006e60 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e30:	6822      	ldr	r2, [r4, #0]
 8006e32:	6853      	ldr	r3, [r2, #4]
 8006e34:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006e38:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	6893      	ldr	r3, [r2, #8]
 8006e3e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006e42:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006e44:	6822      	ldr	r2, [r4, #0]
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7ff ffa3 	bl	8006d9a <UART_CheckIdleState>
}
 8006e54:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006e56:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8006e5a:	f7ff fcd0 	bl	80067fe <HAL_UART_MspInit>
 8006e5e:	e7d9      	b.n	8006e14 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7ff fe61 	bl	8006b28 <UART_AdvFeatureConfig>
 8006e66:	e7e3      	b.n	8006e30 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8006e68:	2001      	movs	r0, #1
}
 8006e6a:	4770      	bx	lr

08006e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006e70:	f7fb fcfa 	bl	8002868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006e74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006e76:	e003      	b.n	8006e80 <LoopCopyDataInit>

08006e78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006e7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006e7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006e7e:	3104      	adds	r1, #4

08006e80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006e80:	480a      	ldr	r0, [pc, #40]	; (8006eac <LoopForever+0xa>)
	ldr	r3, =_edata
 8006e82:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006e84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006e86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006e88:	d3f6      	bcc.n	8006e78 <CopyDataInit>
	ldr	r2, =_sbss
 8006e8a:	4a0a      	ldr	r2, [pc, #40]	; (8006eb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006e8c:	e002      	b.n	8006e94 <LoopFillZerobss>

08006e8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006e8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006e90:	f842 3b04 	str.w	r3, [r2], #4

08006e94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006e94:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <LoopForever+0x16>)
	cmp	r2, r3
 8006e96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006e98:	d3f9      	bcc.n	8006e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006e9a:	f000 f953 	bl	8007144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006e9e:	f7fa fd35 	bl	800190c <main>

08006ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8006ea2:	e7fe      	b.n	8006ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006ea4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006ea8:	080079a0 	.word	0x080079a0
	ldr	r0, =_sdata
 8006eac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006eb0:	20000528 	.word	0x20000528
	ldr	r2, =_sbss
 8006eb4:	20000528 	.word	0x20000528
	ldr	r3, = _ebss
 8006eb8:	20000cd8 	.word	0x20000cd8

08006ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006ebc:	e7fe      	b.n	8006ebc <ADC1_2_IRQHandler>
	...

08006ec0 <malloc>:
 8006ec0:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <malloc+0xc>)
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	f000 b82b 	b.w	8006f20 <_malloc_r>
 8006eca:	bf00      	nop
 8006ecc:	20000524 	.word	0x20000524

08006ed0 <free>:
 8006ed0:	4b02      	ldr	r3, [pc, #8]	; (8006edc <free+0xc>)
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	f000 b969 	b.w	80071ac <_free_r>
 8006eda:	bf00      	nop
 8006edc:	20000524 	.word	0x20000524

08006ee0 <sbrk_aligned>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	4e0e      	ldr	r6, [pc, #56]	; (8006f1c <sbrk_aligned+0x3c>)
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	6831      	ldr	r1, [r6, #0]
 8006ee8:	4605      	mov	r5, r0
 8006eea:	b911      	cbnz	r1, 8006ef2 <sbrk_aligned+0x12>
 8006eec:	f000 f914 	bl	8007118 <_sbrk_r>
 8006ef0:	6030      	str	r0, [r6, #0]
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 f90f 	bl	8007118 <_sbrk_r>
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	d00a      	beq.n	8006f14 <sbrk_aligned+0x34>
 8006efe:	1cc4      	adds	r4, r0, #3
 8006f00:	f024 0403 	bic.w	r4, r4, #3
 8006f04:	42a0      	cmp	r0, r4
 8006f06:	d007      	beq.n	8006f18 <sbrk_aligned+0x38>
 8006f08:	1a21      	subs	r1, r4, r0
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f904 	bl	8007118 <_sbrk_r>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d101      	bne.n	8006f18 <sbrk_aligned+0x38>
 8006f14:	f04f 34ff 	mov.w	r4, #4294967295
 8006f18:	4620      	mov	r0, r4
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	20000b94 	.word	0x20000b94

08006f20 <_malloc_r>:
 8006f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f24:	1ccd      	adds	r5, r1, #3
 8006f26:	f025 0503 	bic.w	r5, r5, #3
 8006f2a:	3508      	adds	r5, #8
 8006f2c:	2d0c      	cmp	r5, #12
 8006f2e:	bf38      	it	cc
 8006f30:	250c      	movcc	r5, #12
 8006f32:	2d00      	cmp	r5, #0
 8006f34:	4607      	mov	r7, r0
 8006f36:	db01      	blt.n	8006f3c <_malloc_r+0x1c>
 8006f38:	42a9      	cmp	r1, r5
 8006f3a:	d905      	bls.n	8006f48 <_malloc_r+0x28>
 8006f3c:	230c      	movs	r3, #12
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	2600      	movs	r6, #0
 8006f42:	4630      	mov	r0, r6
 8006f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800701c <_malloc_r+0xfc>
 8006f4c:	f000 f868 	bl	8007020 <__malloc_lock>
 8006f50:	f8d8 3000 	ldr.w	r3, [r8]
 8006f54:	461c      	mov	r4, r3
 8006f56:	bb5c      	cbnz	r4, 8006fb0 <_malloc_r+0x90>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f7ff ffc0 	bl	8006ee0 <sbrk_aligned>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	4604      	mov	r4, r0
 8006f64:	d155      	bne.n	8007012 <_malloc_r+0xf2>
 8006f66:	f8d8 4000 	ldr.w	r4, [r8]
 8006f6a:	4626      	mov	r6, r4
 8006f6c:	2e00      	cmp	r6, #0
 8006f6e:	d145      	bne.n	8006ffc <_malloc_r+0xdc>
 8006f70:	2c00      	cmp	r4, #0
 8006f72:	d048      	beq.n	8007006 <_malloc_r+0xe6>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	4631      	mov	r1, r6
 8006f78:	4638      	mov	r0, r7
 8006f7a:	eb04 0903 	add.w	r9, r4, r3
 8006f7e:	f000 f8cb 	bl	8007118 <_sbrk_r>
 8006f82:	4581      	cmp	r9, r0
 8006f84:	d13f      	bne.n	8007006 <_malloc_r+0xe6>
 8006f86:	6821      	ldr	r1, [r4, #0]
 8006f88:	1a6d      	subs	r5, r5, r1
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	f7ff ffa7 	bl	8006ee0 <sbrk_aligned>
 8006f92:	3001      	adds	r0, #1
 8006f94:	d037      	beq.n	8007006 <_malloc_r+0xe6>
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	442b      	add	r3, r5
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d038      	beq.n	8007016 <_malloc_r+0xf6>
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	42a2      	cmp	r2, r4
 8006fa8:	d12b      	bne.n	8007002 <_malloc_r+0xe2>
 8006faa:	2200      	movs	r2, #0
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	e00f      	b.n	8006fd0 <_malloc_r+0xb0>
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	1b52      	subs	r2, r2, r5
 8006fb4:	d41f      	bmi.n	8006ff6 <_malloc_r+0xd6>
 8006fb6:	2a0b      	cmp	r2, #11
 8006fb8:	d917      	bls.n	8006fea <_malloc_r+0xca>
 8006fba:	1961      	adds	r1, r4, r5
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	6025      	str	r5, [r4, #0]
 8006fc0:	bf18      	it	ne
 8006fc2:	6059      	strne	r1, [r3, #4]
 8006fc4:	6863      	ldr	r3, [r4, #4]
 8006fc6:	bf08      	it	eq
 8006fc8:	f8c8 1000 	streq.w	r1, [r8]
 8006fcc:	5162      	str	r2, [r4, r5]
 8006fce:	604b      	str	r3, [r1, #4]
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f104 060b 	add.w	r6, r4, #11
 8006fd6:	f000 f829 	bl	800702c <__malloc_unlock>
 8006fda:	f026 0607 	bic.w	r6, r6, #7
 8006fde:	1d23      	adds	r3, r4, #4
 8006fe0:	1af2      	subs	r2, r6, r3
 8006fe2:	d0ae      	beq.n	8006f42 <_malloc_r+0x22>
 8006fe4:	1b9b      	subs	r3, r3, r6
 8006fe6:	50a3      	str	r3, [r4, r2]
 8006fe8:	e7ab      	b.n	8006f42 <_malloc_r+0x22>
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	6862      	ldr	r2, [r4, #4]
 8006fee:	d1dd      	bne.n	8006fac <_malloc_r+0x8c>
 8006ff0:	f8c8 2000 	str.w	r2, [r8]
 8006ff4:	e7ec      	b.n	8006fd0 <_malloc_r+0xb0>
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	6864      	ldr	r4, [r4, #4]
 8006ffa:	e7ac      	b.n	8006f56 <_malloc_r+0x36>
 8006ffc:	4634      	mov	r4, r6
 8006ffe:	6876      	ldr	r6, [r6, #4]
 8007000:	e7b4      	b.n	8006f6c <_malloc_r+0x4c>
 8007002:	4613      	mov	r3, r2
 8007004:	e7cc      	b.n	8006fa0 <_malloc_r+0x80>
 8007006:	230c      	movs	r3, #12
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	4638      	mov	r0, r7
 800700c:	f000 f80e 	bl	800702c <__malloc_unlock>
 8007010:	e797      	b.n	8006f42 <_malloc_r+0x22>
 8007012:	6025      	str	r5, [r4, #0]
 8007014:	e7dc      	b.n	8006fd0 <_malloc_r+0xb0>
 8007016:	605b      	str	r3, [r3, #4]
 8007018:	deff      	udf	#255	; 0xff
 800701a:	bf00      	nop
 800701c:	20000b90 	.word	0x20000b90

08007020 <__malloc_lock>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__malloc_lock+0x8>)
 8007022:	f000 b8b3 	b.w	800718c <__retarget_lock_acquire_recursive>
 8007026:	bf00      	nop
 8007028:	20000cd4 	.word	0x20000cd4

0800702c <__malloc_unlock>:
 800702c:	4801      	ldr	r0, [pc, #4]	; (8007034 <__malloc_unlock+0x8>)
 800702e:	f000 b8ae 	b.w	800718e <__retarget_lock_release_recursive>
 8007032:	bf00      	nop
 8007034:	20000cd4 	.word	0x20000cd4

08007038 <realloc>:
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <realloc+0xc>)
 800703a:	460a      	mov	r2, r1
 800703c:	4601      	mov	r1, r0
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	f000 b802 	b.w	8007048 <_realloc_r>
 8007044:	20000524 	.word	0x20000524

08007048 <_realloc_r>:
 8007048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704c:	4680      	mov	r8, r0
 800704e:	4614      	mov	r4, r2
 8007050:	460e      	mov	r6, r1
 8007052:	b921      	cbnz	r1, 800705e <_realloc_r+0x16>
 8007054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007058:	4611      	mov	r1, r2
 800705a:	f7ff bf61 	b.w	8006f20 <_malloc_r>
 800705e:	b92a      	cbnz	r2, 800706c <_realloc_r+0x24>
 8007060:	f000 f8a4 	bl	80071ac <_free_r>
 8007064:	4625      	mov	r5, r4
 8007066:	4628      	mov	r0, r5
 8007068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800706c:	f000 f8ea 	bl	8007244 <_malloc_usable_size_r>
 8007070:	4284      	cmp	r4, r0
 8007072:	4607      	mov	r7, r0
 8007074:	d802      	bhi.n	800707c <_realloc_r+0x34>
 8007076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800707a:	d812      	bhi.n	80070a2 <_realloc_r+0x5a>
 800707c:	4621      	mov	r1, r4
 800707e:	4640      	mov	r0, r8
 8007080:	f7ff ff4e 	bl	8006f20 <_malloc_r>
 8007084:	4605      	mov	r5, r0
 8007086:	2800      	cmp	r0, #0
 8007088:	d0ed      	beq.n	8007066 <_realloc_r+0x1e>
 800708a:	42bc      	cmp	r4, r7
 800708c:	4622      	mov	r2, r4
 800708e:	4631      	mov	r1, r6
 8007090:	bf28      	it	cs
 8007092:	463a      	movcs	r2, r7
 8007094:	f000 f87c 	bl	8007190 <memcpy>
 8007098:	4631      	mov	r1, r6
 800709a:	4640      	mov	r0, r8
 800709c:	f000 f886 	bl	80071ac <_free_r>
 80070a0:	e7e1      	b.n	8007066 <_realloc_r+0x1e>
 80070a2:	4635      	mov	r5, r6
 80070a4:	e7df      	b.n	8007066 <_realloc_r+0x1e>
	...

080070a8 <siprintf>:
 80070a8:	b40e      	push	{r1, r2, r3}
 80070aa:	b500      	push	{lr}
 80070ac:	b09c      	sub	sp, #112	; 0x70
 80070ae:	ab1d      	add	r3, sp, #116	; 0x74
 80070b0:	9002      	str	r0, [sp, #8]
 80070b2:	9006      	str	r0, [sp, #24]
 80070b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070b8:	4809      	ldr	r0, [pc, #36]	; (80070e0 <siprintf+0x38>)
 80070ba:	9107      	str	r1, [sp, #28]
 80070bc:	9104      	str	r1, [sp, #16]
 80070be:	4909      	ldr	r1, [pc, #36]	; (80070e4 <siprintf+0x3c>)
 80070c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c4:	9105      	str	r1, [sp, #20]
 80070c6:	6800      	ldr	r0, [r0, #0]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	a902      	add	r1, sp, #8
 80070cc:	f000 f91c 	bl	8007308 <_svfiprintf_r>
 80070d0:	9b02      	ldr	r3, [sp, #8]
 80070d2:	2200      	movs	r2, #0
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	b01c      	add	sp, #112	; 0x70
 80070d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070dc:	b003      	add	sp, #12
 80070de:	4770      	bx	lr
 80070e0:	20000524 	.word	0x20000524
 80070e4:	ffff0208 	.word	0xffff0208

080070e8 <memset>:
 80070e8:	4402      	add	r2, r0
 80070ea:	4603      	mov	r3, r0
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d100      	bne.n	80070f2 <memset+0xa>
 80070f0:	4770      	bx	lr
 80070f2:	f803 1b01 	strb.w	r1, [r3], #1
 80070f6:	e7f9      	b.n	80070ec <memset+0x4>

080070f8 <strcat>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	4602      	mov	r2, r0
 80070fc:	7814      	ldrb	r4, [r2, #0]
 80070fe:	4613      	mov	r3, r2
 8007100:	3201      	adds	r2, #1
 8007102:	2c00      	cmp	r4, #0
 8007104:	d1fa      	bne.n	80070fc <strcat+0x4>
 8007106:	3b01      	subs	r3, #1
 8007108:	f811 2b01 	ldrb.w	r2, [r1], #1
 800710c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007110:	2a00      	cmp	r2, #0
 8007112:	d1f9      	bne.n	8007108 <strcat+0x10>
 8007114:	bd10      	pop	{r4, pc}
	...

08007118 <_sbrk_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d06      	ldr	r5, [pc, #24]	; (8007134 <_sbrk_r+0x1c>)
 800711c:	2300      	movs	r3, #0
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	f7fb fb82 	bl	800282c <_sbrk>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_sbrk_r+0x1a>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_sbrk_r+0x1a>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20000cd0 	.word	0x20000cd0

08007138 <__errno>:
 8007138:	4b01      	ldr	r3, [pc, #4]	; (8007140 <__errno+0x8>)
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20000524 	.word	0x20000524

08007144 <__libc_init_array>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	4d0d      	ldr	r5, [pc, #52]	; (800717c <__libc_init_array+0x38>)
 8007148:	4c0d      	ldr	r4, [pc, #52]	; (8007180 <__libc_init_array+0x3c>)
 800714a:	1b64      	subs	r4, r4, r5
 800714c:	10a4      	asrs	r4, r4, #2
 800714e:	2600      	movs	r6, #0
 8007150:	42a6      	cmp	r6, r4
 8007152:	d109      	bne.n	8007168 <__libc_init_array+0x24>
 8007154:	4d0b      	ldr	r5, [pc, #44]	; (8007184 <__libc_init_array+0x40>)
 8007156:	4c0c      	ldr	r4, [pc, #48]	; (8007188 <__libc_init_array+0x44>)
 8007158:	f000 fb7e 	bl	8007858 <_init>
 800715c:	1b64      	subs	r4, r4, r5
 800715e:	10a4      	asrs	r4, r4, #2
 8007160:	2600      	movs	r6, #0
 8007162:	42a6      	cmp	r6, r4
 8007164:	d105      	bne.n	8007172 <__libc_init_array+0x2e>
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	f855 3b04 	ldr.w	r3, [r5], #4
 800716c:	4798      	blx	r3
 800716e:	3601      	adds	r6, #1
 8007170:	e7ee      	b.n	8007150 <__libc_init_array+0xc>
 8007172:	f855 3b04 	ldr.w	r3, [r5], #4
 8007176:	4798      	blx	r3
 8007178:	3601      	adds	r6, #1
 800717a:	e7f2      	b.n	8007162 <__libc_init_array+0x1e>
 800717c:	08007990 	.word	0x08007990
 8007180:	08007990 	.word	0x08007990
 8007184:	08007990 	.word	0x08007990
 8007188:	08007994 	.word	0x08007994

0800718c <__retarget_lock_acquire_recursive>:
 800718c:	4770      	bx	lr

0800718e <__retarget_lock_release_recursive>:
 800718e:	4770      	bx	lr

08007190 <memcpy>:
 8007190:	440a      	add	r2, r1
 8007192:	4291      	cmp	r1, r2
 8007194:	f100 33ff 	add.w	r3, r0, #4294967295
 8007198:	d100      	bne.n	800719c <memcpy+0xc>
 800719a:	4770      	bx	lr
 800719c:	b510      	push	{r4, lr}
 800719e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a6:	4291      	cmp	r1, r2
 80071a8:	d1f9      	bne.n	800719e <memcpy+0xe>
 80071aa:	bd10      	pop	{r4, pc}

080071ac <_free_r>:
 80071ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ae:	2900      	cmp	r1, #0
 80071b0:	d044      	beq.n	800723c <_free_r+0x90>
 80071b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b6:	9001      	str	r0, [sp, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f1a1 0404 	sub.w	r4, r1, #4
 80071be:	bfb8      	it	lt
 80071c0:	18e4      	addlt	r4, r4, r3
 80071c2:	f7ff ff2d 	bl	8007020 <__malloc_lock>
 80071c6:	4a1e      	ldr	r2, [pc, #120]	; (8007240 <_free_r+0x94>)
 80071c8:	9801      	ldr	r0, [sp, #4]
 80071ca:	6813      	ldr	r3, [r2, #0]
 80071cc:	b933      	cbnz	r3, 80071dc <_free_r+0x30>
 80071ce:	6063      	str	r3, [r4, #4]
 80071d0:	6014      	str	r4, [r2, #0]
 80071d2:	b003      	add	sp, #12
 80071d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071d8:	f7ff bf28 	b.w	800702c <__malloc_unlock>
 80071dc:	42a3      	cmp	r3, r4
 80071de:	d908      	bls.n	80071f2 <_free_r+0x46>
 80071e0:	6825      	ldr	r5, [r4, #0]
 80071e2:	1961      	adds	r1, r4, r5
 80071e4:	428b      	cmp	r3, r1
 80071e6:	bf01      	itttt	eq
 80071e8:	6819      	ldreq	r1, [r3, #0]
 80071ea:	685b      	ldreq	r3, [r3, #4]
 80071ec:	1949      	addeq	r1, r1, r5
 80071ee:	6021      	streq	r1, [r4, #0]
 80071f0:	e7ed      	b.n	80071ce <_free_r+0x22>
 80071f2:	461a      	mov	r2, r3
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	b10b      	cbz	r3, 80071fc <_free_r+0x50>
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d9fa      	bls.n	80071f2 <_free_r+0x46>
 80071fc:	6811      	ldr	r1, [r2, #0]
 80071fe:	1855      	adds	r5, r2, r1
 8007200:	42a5      	cmp	r5, r4
 8007202:	d10b      	bne.n	800721c <_free_r+0x70>
 8007204:	6824      	ldr	r4, [r4, #0]
 8007206:	4421      	add	r1, r4
 8007208:	1854      	adds	r4, r2, r1
 800720a:	42a3      	cmp	r3, r4
 800720c:	6011      	str	r1, [r2, #0]
 800720e:	d1e0      	bne.n	80071d2 <_free_r+0x26>
 8007210:	681c      	ldr	r4, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	6053      	str	r3, [r2, #4]
 8007216:	440c      	add	r4, r1
 8007218:	6014      	str	r4, [r2, #0]
 800721a:	e7da      	b.n	80071d2 <_free_r+0x26>
 800721c:	d902      	bls.n	8007224 <_free_r+0x78>
 800721e:	230c      	movs	r3, #12
 8007220:	6003      	str	r3, [r0, #0]
 8007222:	e7d6      	b.n	80071d2 <_free_r+0x26>
 8007224:	6825      	ldr	r5, [r4, #0]
 8007226:	1961      	adds	r1, r4, r5
 8007228:	428b      	cmp	r3, r1
 800722a:	bf04      	itt	eq
 800722c:	6819      	ldreq	r1, [r3, #0]
 800722e:	685b      	ldreq	r3, [r3, #4]
 8007230:	6063      	str	r3, [r4, #4]
 8007232:	bf04      	itt	eq
 8007234:	1949      	addeq	r1, r1, r5
 8007236:	6021      	streq	r1, [r4, #0]
 8007238:	6054      	str	r4, [r2, #4]
 800723a:	e7ca      	b.n	80071d2 <_free_r+0x26>
 800723c:	b003      	add	sp, #12
 800723e:	bd30      	pop	{r4, r5, pc}
 8007240:	20000b90 	.word	0x20000b90

08007244 <_malloc_usable_size_r>:
 8007244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007248:	1f18      	subs	r0, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfbc      	itt	lt
 800724e:	580b      	ldrlt	r3, [r1, r0]
 8007250:	18c0      	addlt	r0, r0, r3
 8007252:	4770      	bx	lr

08007254 <__ssputs_r>:
 8007254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007258:	688e      	ldr	r6, [r1, #8]
 800725a:	461f      	mov	r7, r3
 800725c:	42be      	cmp	r6, r7
 800725e:	680b      	ldr	r3, [r1, #0]
 8007260:	4682      	mov	sl, r0
 8007262:	460c      	mov	r4, r1
 8007264:	4690      	mov	r8, r2
 8007266:	d82c      	bhi.n	80072c2 <__ssputs_r+0x6e>
 8007268:	898a      	ldrh	r2, [r1, #12]
 800726a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800726e:	d026      	beq.n	80072be <__ssputs_r+0x6a>
 8007270:	6965      	ldr	r5, [r4, #20]
 8007272:	6909      	ldr	r1, [r1, #16]
 8007274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007278:	eba3 0901 	sub.w	r9, r3, r1
 800727c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007280:	1c7b      	adds	r3, r7, #1
 8007282:	444b      	add	r3, r9
 8007284:	106d      	asrs	r5, r5, #1
 8007286:	429d      	cmp	r5, r3
 8007288:	bf38      	it	cc
 800728a:	461d      	movcc	r5, r3
 800728c:	0553      	lsls	r3, r2, #21
 800728e:	d527      	bpl.n	80072e0 <__ssputs_r+0x8c>
 8007290:	4629      	mov	r1, r5
 8007292:	f7ff fe45 	bl	8006f20 <_malloc_r>
 8007296:	4606      	mov	r6, r0
 8007298:	b360      	cbz	r0, 80072f4 <__ssputs_r+0xa0>
 800729a:	6921      	ldr	r1, [r4, #16]
 800729c:	464a      	mov	r2, r9
 800729e:	f7ff ff77 	bl	8007190 <memcpy>
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	6126      	str	r6, [r4, #16]
 80072b0:	6165      	str	r5, [r4, #20]
 80072b2:	444e      	add	r6, r9
 80072b4:	eba5 0509 	sub.w	r5, r5, r9
 80072b8:	6026      	str	r6, [r4, #0]
 80072ba:	60a5      	str	r5, [r4, #8]
 80072bc:	463e      	mov	r6, r7
 80072be:	42be      	cmp	r6, r7
 80072c0:	d900      	bls.n	80072c4 <__ssputs_r+0x70>
 80072c2:	463e      	mov	r6, r7
 80072c4:	6820      	ldr	r0, [r4, #0]
 80072c6:	4632      	mov	r2, r6
 80072c8:	4641      	mov	r1, r8
 80072ca:	f000 faab 	bl	8007824 <memmove>
 80072ce:	68a3      	ldr	r3, [r4, #8]
 80072d0:	1b9b      	subs	r3, r3, r6
 80072d2:	60a3      	str	r3, [r4, #8]
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	4433      	add	r3, r6
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	2000      	movs	r0, #0
 80072dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e0:	462a      	mov	r2, r5
 80072e2:	f7ff feb1 	bl	8007048 <_realloc_r>
 80072e6:	4606      	mov	r6, r0
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d1e0      	bne.n	80072ae <__ssputs_r+0x5a>
 80072ec:	6921      	ldr	r1, [r4, #16]
 80072ee:	4650      	mov	r0, sl
 80072f0:	f7ff ff5c 	bl	80071ac <_free_r>
 80072f4:	230c      	movs	r3, #12
 80072f6:	f8ca 3000 	str.w	r3, [sl]
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007300:	81a3      	strh	r3, [r4, #12]
 8007302:	f04f 30ff 	mov.w	r0, #4294967295
 8007306:	e7e9      	b.n	80072dc <__ssputs_r+0x88>

08007308 <_svfiprintf_r>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	4698      	mov	r8, r3
 800730e:	898b      	ldrh	r3, [r1, #12]
 8007310:	061b      	lsls	r3, r3, #24
 8007312:	b09d      	sub	sp, #116	; 0x74
 8007314:	4607      	mov	r7, r0
 8007316:	460d      	mov	r5, r1
 8007318:	4614      	mov	r4, r2
 800731a:	d50e      	bpl.n	800733a <_svfiprintf_r+0x32>
 800731c:	690b      	ldr	r3, [r1, #16]
 800731e:	b963      	cbnz	r3, 800733a <_svfiprintf_r+0x32>
 8007320:	2140      	movs	r1, #64	; 0x40
 8007322:	f7ff fdfd 	bl	8006f20 <_malloc_r>
 8007326:	6028      	str	r0, [r5, #0]
 8007328:	6128      	str	r0, [r5, #16]
 800732a:	b920      	cbnz	r0, 8007336 <_svfiprintf_r+0x2e>
 800732c:	230c      	movs	r3, #12
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	e0d0      	b.n	80074d8 <_svfiprintf_r+0x1d0>
 8007336:	2340      	movs	r3, #64	; 0x40
 8007338:	616b      	str	r3, [r5, #20]
 800733a:	2300      	movs	r3, #0
 800733c:	9309      	str	r3, [sp, #36]	; 0x24
 800733e:	2320      	movs	r3, #32
 8007340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007344:	f8cd 800c 	str.w	r8, [sp, #12]
 8007348:	2330      	movs	r3, #48	; 0x30
 800734a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074f0 <_svfiprintf_r+0x1e8>
 800734e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007352:	f04f 0901 	mov.w	r9, #1
 8007356:	4623      	mov	r3, r4
 8007358:	469a      	mov	sl, r3
 800735a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800735e:	b10a      	cbz	r2, 8007364 <_svfiprintf_r+0x5c>
 8007360:	2a25      	cmp	r2, #37	; 0x25
 8007362:	d1f9      	bne.n	8007358 <_svfiprintf_r+0x50>
 8007364:	ebba 0b04 	subs.w	fp, sl, r4
 8007368:	d00b      	beq.n	8007382 <_svfiprintf_r+0x7a>
 800736a:	465b      	mov	r3, fp
 800736c:	4622      	mov	r2, r4
 800736e:	4629      	mov	r1, r5
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff ff6f 	bl	8007254 <__ssputs_r>
 8007376:	3001      	adds	r0, #1
 8007378:	f000 80a9 	beq.w	80074ce <_svfiprintf_r+0x1c6>
 800737c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800737e:	445a      	add	r2, fp
 8007380:	9209      	str	r2, [sp, #36]	; 0x24
 8007382:	f89a 3000 	ldrb.w	r3, [sl]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80a1 	beq.w	80074ce <_svfiprintf_r+0x1c6>
 800738c:	2300      	movs	r3, #0
 800738e:	f04f 32ff 	mov.w	r2, #4294967295
 8007392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007396:	f10a 0a01 	add.w	sl, sl, #1
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	9307      	str	r3, [sp, #28]
 800739e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073a2:	931a      	str	r3, [sp, #104]	; 0x68
 80073a4:	4654      	mov	r4, sl
 80073a6:	2205      	movs	r2, #5
 80073a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ac:	4850      	ldr	r0, [pc, #320]	; (80074f0 <_svfiprintf_r+0x1e8>)
 80073ae:	f7f8 ff17 	bl	80001e0 <memchr>
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	b9d8      	cbnz	r0, 80073ee <_svfiprintf_r+0xe6>
 80073b6:	06d0      	lsls	r0, r2, #27
 80073b8:	bf44      	itt	mi
 80073ba:	2320      	movmi	r3, #32
 80073bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073c0:	0711      	lsls	r1, r2, #28
 80073c2:	bf44      	itt	mi
 80073c4:	232b      	movmi	r3, #43	; 0x2b
 80073c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ca:	f89a 3000 	ldrb.w	r3, [sl]
 80073ce:	2b2a      	cmp	r3, #42	; 0x2a
 80073d0:	d015      	beq.n	80073fe <_svfiprintf_r+0xf6>
 80073d2:	9a07      	ldr	r2, [sp, #28]
 80073d4:	4654      	mov	r4, sl
 80073d6:	2000      	movs	r0, #0
 80073d8:	f04f 0c0a 	mov.w	ip, #10
 80073dc:	4621      	mov	r1, r4
 80073de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e2:	3b30      	subs	r3, #48	; 0x30
 80073e4:	2b09      	cmp	r3, #9
 80073e6:	d94d      	bls.n	8007484 <_svfiprintf_r+0x17c>
 80073e8:	b1b0      	cbz	r0, 8007418 <_svfiprintf_r+0x110>
 80073ea:	9207      	str	r2, [sp, #28]
 80073ec:	e014      	b.n	8007418 <_svfiprintf_r+0x110>
 80073ee:	eba0 0308 	sub.w	r3, r0, r8
 80073f2:	fa09 f303 	lsl.w	r3, r9, r3
 80073f6:	4313      	orrs	r3, r2
 80073f8:	9304      	str	r3, [sp, #16]
 80073fa:	46a2      	mov	sl, r4
 80073fc:	e7d2      	b.n	80073a4 <_svfiprintf_r+0x9c>
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	1d19      	adds	r1, r3, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	9103      	str	r1, [sp, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfbb      	ittet	lt
 800740a:	425b      	neglt	r3, r3
 800740c:	f042 0202 	orrlt.w	r2, r2, #2
 8007410:	9307      	strge	r3, [sp, #28]
 8007412:	9307      	strlt	r3, [sp, #28]
 8007414:	bfb8      	it	lt
 8007416:	9204      	strlt	r2, [sp, #16]
 8007418:	7823      	ldrb	r3, [r4, #0]
 800741a:	2b2e      	cmp	r3, #46	; 0x2e
 800741c:	d10c      	bne.n	8007438 <_svfiprintf_r+0x130>
 800741e:	7863      	ldrb	r3, [r4, #1]
 8007420:	2b2a      	cmp	r3, #42	; 0x2a
 8007422:	d134      	bne.n	800748e <_svfiprintf_r+0x186>
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	1d1a      	adds	r2, r3, #4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	9203      	str	r2, [sp, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	bfb8      	it	lt
 8007430:	f04f 33ff 	movlt.w	r3, #4294967295
 8007434:	3402      	adds	r4, #2
 8007436:	9305      	str	r3, [sp, #20]
 8007438:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007500 <_svfiprintf_r+0x1f8>
 800743c:	7821      	ldrb	r1, [r4, #0]
 800743e:	2203      	movs	r2, #3
 8007440:	4650      	mov	r0, sl
 8007442:	f7f8 fecd 	bl	80001e0 <memchr>
 8007446:	b138      	cbz	r0, 8007458 <_svfiprintf_r+0x150>
 8007448:	9b04      	ldr	r3, [sp, #16]
 800744a:	eba0 000a 	sub.w	r0, r0, sl
 800744e:	2240      	movs	r2, #64	; 0x40
 8007450:	4082      	lsls	r2, r0
 8007452:	4313      	orrs	r3, r2
 8007454:	3401      	adds	r4, #1
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800745c:	4825      	ldr	r0, [pc, #148]	; (80074f4 <_svfiprintf_r+0x1ec>)
 800745e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007462:	2206      	movs	r2, #6
 8007464:	f7f8 febc 	bl	80001e0 <memchr>
 8007468:	2800      	cmp	r0, #0
 800746a:	d038      	beq.n	80074de <_svfiprintf_r+0x1d6>
 800746c:	4b22      	ldr	r3, [pc, #136]	; (80074f8 <_svfiprintf_r+0x1f0>)
 800746e:	bb1b      	cbnz	r3, 80074b8 <_svfiprintf_r+0x1b0>
 8007470:	9b03      	ldr	r3, [sp, #12]
 8007472:	3307      	adds	r3, #7
 8007474:	f023 0307 	bic.w	r3, r3, #7
 8007478:	3308      	adds	r3, #8
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	4433      	add	r3, r6
 8007480:	9309      	str	r3, [sp, #36]	; 0x24
 8007482:	e768      	b.n	8007356 <_svfiprintf_r+0x4e>
 8007484:	fb0c 3202 	mla	r2, ip, r2, r3
 8007488:	460c      	mov	r4, r1
 800748a:	2001      	movs	r0, #1
 800748c:	e7a6      	b.n	80073dc <_svfiprintf_r+0xd4>
 800748e:	2300      	movs	r3, #0
 8007490:	3401      	adds	r4, #1
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	4619      	mov	r1, r3
 8007496:	f04f 0c0a 	mov.w	ip, #10
 800749a:	4620      	mov	r0, r4
 800749c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074a0:	3a30      	subs	r2, #48	; 0x30
 80074a2:	2a09      	cmp	r2, #9
 80074a4:	d903      	bls.n	80074ae <_svfiprintf_r+0x1a6>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0c6      	beq.n	8007438 <_svfiprintf_r+0x130>
 80074aa:	9105      	str	r1, [sp, #20]
 80074ac:	e7c4      	b.n	8007438 <_svfiprintf_r+0x130>
 80074ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80074b2:	4604      	mov	r4, r0
 80074b4:	2301      	movs	r3, #1
 80074b6:	e7f0      	b.n	800749a <_svfiprintf_r+0x192>
 80074b8:	ab03      	add	r3, sp, #12
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	462a      	mov	r2, r5
 80074be:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <_svfiprintf_r+0x1f4>)
 80074c0:	a904      	add	r1, sp, #16
 80074c2:	4638      	mov	r0, r7
 80074c4:	f3af 8000 	nop.w
 80074c8:	1c42      	adds	r2, r0, #1
 80074ca:	4606      	mov	r6, r0
 80074cc:	d1d6      	bne.n	800747c <_svfiprintf_r+0x174>
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	065b      	lsls	r3, r3, #25
 80074d2:	f53f af2d 	bmi.w	8007330 <_svfiprintf_r+0x28>
 80074d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074d8:	b01d      	add	sp, #116	; 0x74
 80074da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074de:	ab03      	add	r3, sp, #12
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	462a      	mov	r2, r5
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <_svfiprintf_r+0x1f4>)
 80074e6:	a904      	add	r1, sp, #16
 80074e8:	4638      	mov	r0, r7
 80074ea:	f000 f879 	bl	80075e0 <_printf_i>
 80074ee:	e7eb      	b.n	80074c8 <_svfiprintf_r+0x1c0>
 80074f0:	08007955 	.word	0x08007955
 80074f4:	0800795f 	.word	0x0800795f
 80074f8:	00000000 	.word	0x00000000
 80074fc:	08007255 	.word	0x08007255
 8007500:	0800795b 	.word	0x0800795b

08007504 <_printf_common>:
 8007504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007508:	4616      	mov	r6, r2
 800750a:	4699      	mov	r9, r3
 800750c:	688a      	ldr	r2, [r1, #8]
 800750e:	690b      	ldr	r3, [r1, #16]
 8007510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007514:	4293      	cmp	r3, r2
 8007516:	bfb8      	it	lt
 8007518:	4613      	movlt	r3, r2
 800751a:	6033      	str	r3, [r6, #0]
 800751c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007520:	4607      	mov	r7, r0
 8007522:	460c      	mov	r4, r1
 8007524:	b10a      	cbz	r2, 800752a <_printf_common+0x26>
 8007526:	3301      	adds	r3, #1
 8007528:	6033      	str	r3, [r6, #0]
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	0699      	lsls	r1, r3, #26
 800752e:	bf42      	ittt	mi
 8007530:	6833      	ldrmi	r3, [r6, #0]
 8007532:	3302      	addmi	r3, #2
 8007534:	6033      	strmi	r3, [r6, #0]
 8007536:	6825      	ldr	r5, [r4, #0]
 8007538:	f015 0506 	ands.w	r5, r5, #6
 800753c:	d106      	bne.n	800754c <_printf_common+0x48>
 800753e:	f104 0a19 	add.w	sl, r4, #25
 8007542:	68e3      	ldr	r3, [r4, #12]
 8007544:	6832      	ldr	r2, [r6, #0]
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	42ab      	cmp	r3, r5
 800754a:	dc26      	bgt.n	800759a <_printf_common+0x96>
 800754c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007550:	1e13      	subs	r3, r2, #0
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	bf18      	it	ne
 8007556:	2301      	movne	r3, #1
 8007558:	0692      	lsls	r2, r2, #26
 800755a:	d42b      	bmi.n	80075b4 <_printf_common+0xb0>
 800755c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007560:	4649      	mov	r1, r9
 8007562:	4638      	mov	r0, r7
 8007564:	47c0      	blx	r8
 8007566:	3001      	adds	r0, #1
 8007568:	d01e      	beq.n	80075a8 <_printf_common+0xa4>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	6922      	ldr	r2, [r4, #16]
 800756e:	f003 0306 	and.w	r3, r3, #6
 8007572:	2b04      	cmp	r3, #4
 8007574:	bf02      	ittt	eq
 8007576:	68e5      	ldreq	r5, [r4, #12]
 8007578:	6833      	ldreq	r3, [r6, #0]
 800757a:	1aed      	subeq	r5, r5, r3
 800757c:	68a3      	ldr	r3, [r4, #8]
 800757e:	bf0c      	ite	eq
 8007580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007584:	2500      	movne	r5, #0
 8007586:	4293      	cmp	r3, r2
 8007588:	bfc4      	itt	gt
 800758a:	1a9b      	subgt	r3, r3, r2
 800758c:	18ed      	addgt	r5, r5, r3
 800758e:	2600      	movs	r6, #0
 8007590:	341a      	adds	r4, #26
 8007592:	42b5      	cmp	r5, r6
 8007594:	d11a      	bne.n	80075cc <_printf_common+0xc8>
 8007596:	2000      	movs	r0, #0
 8007598:	e008      	b.n	80075ac <_printf_common+0xa8>
 800759a:	2301      	movs	r3, #1
 800759c:	4652      	mov	r2, sl
 800759e:	4649      	mov	r1, r9
 80075a0:	4638      	mov	r0, r7
 80075a2:	47c0      	blx	r8
 80075a4:	3001      	adds	r0, #1
 80075a6:	d103      	bne.n	80075b0 <_printf_common+0xac>
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b0:	3501      	adds	r5, #1
 80075b2:	e7c6      	b.n	8007542 <_printf_common+0x3e>
 80075b4:	18e1      	adds	r1, r4, r3
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	2030      	movs	r0, #48	; 0x30
 80075ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075be:	4422      	add	r2, r4
 80075c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075c8:	3302      	adds	r3, #2
 80075ca:	e7c7      	b.n	800755c <_printf_common+0x58>
 80075cc:	2301      	movs	r3, #1
 80075ce:	4622      	mov	r2, r4
 80075d0:	4649      	mov	r1, r9
 80075d2:	4638      	mov	r0, r7
 80075d4:	47c0      	blx	r8
 80075d6:	3001      	adds	r0, #1
 80075d8:	d0e6      	beq.n	80075a8 <_printf_common+0xa4>
 80075da:	3601      	adds	r6, #1
 80075dc:	e7d9      	b.n	8007592 <_printf_common+0x8e>
	...

080075e0 <_printf_i>:
 80075e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075e4:	7e0f      	ldrb	r7, [r1, #24]
 80075e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075e8:	2f78      	cmp	r7, #120	; 0x78
 80075ea:	4691      	mov	r9, r2
 80075ec:	4680      	mov	r8, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	469a      	mov	sl, r3
 80075f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075f6:	d807      	bhi.n	8007608 <_printf_i+0x28>
 80075f8:	2f62      	cmp	r7, #98	; 0x62
 80075fa:	d80a      	bhi.n	8007612 <_printf_i+0x32>
 80075fc:	2f00      	cmp	r7, #0
 80075fe:	f000 80d4 	beq.w	80077aa <_printf_i+0x1ca>
 8007602:	2f58      	cmp	r7, #88	; 0x58
 8007604:	f000 80c0 	beq.w	8007788 <_printf_i+0x1a8>
 8007608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800760c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007610:	e03a      	b.n	8007688 <_printf_i+0xa8>
 8007612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007616:	2b15      	cmp	r3, #21
 8007618:	d8f6      	bhi.n	8007608 <_printf_i+0x28>
 800761a:	a101      	add	r1, pc, #4	; (adr r1, 8007620 <_printf_i+0x40>)
 800761c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007620:	08007679 	.word	0x08007679
 8007624:	0800768d 	.word	0x0800768d
 8007628:	08007609 	.word	0x08007609
 800762c:	08007609 	.word	0x08007609
 8007630:	08007609 	.word	0x08007609
 8007634:	08007609 	.word	0x08007609
 8007638:	0800768d 	.word	0x0800768d
 800763c:	08007609 	.word	0x08007609
 8007640:	08007609 	.word	0x08007609
 8007644:	08007609 	.word	0x08007609
 8007648:	08007609 	.word	0x08007609
 800764c:	08007791 	.word	0x08007791
 8007650:	080076b9 	.word	0x080076b9
 8007654:	0800774b 	.word	0x0800774b
 8007658:	08007609 	.word	0x08007609
 800765c:	08007609 	.word	0x08007609
 8007660:	080077b3 	.word	0x080077b3
 8007664:	08007609 	.word	0x08007609
 8007668:	080076b9 	.word	0x080076b9
 800766c:	08007609 	.word	0x08007609
 8007670:	08007609 	.word	0x08007609
 8007674:	08007753 	.word	0x08007753
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	1d1a      	adds	r2, r3, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	602a      	str	r2, [r5, #0]
 8007680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007688:	2301      	movs	r3, #1
 800768a:	e09f      	b.n	80077cc <_printf_i+0x1ec>
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	0607      	lsls	r7, r0, #24
 8007692:	f103 0104 	add.w	r1, r3, #4
 8007696:	6029      	str	r1, [r5, #0]
 8007698:	d501      	bpl.n	800769e <_printf_i+0xbe>
 800769a:	681e      	ldr	r6, [r3, #0]
 800769c:	e003      	b.n	80076a6 <_printf_i+0xc6>
 800769e:	0646      	lsls	r6, r0, #25
 80076a0:	d5fb      	bpl.n	800769a <_printf_i+0xba>
 80076a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076a6:	2e00      	cmp	r6, #0
 80076a8:	da03      	bge.n	80076b2 <_printf_i+0xd2>
 80076aa:	232d      	movs	r3, #45	; 0x2d
 80076ac:	4276      	negs	r6, r6
 80076ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b2:	485a      	ldr	r0, [pc, #360]	; (800781c <_printf_i+0x23c>)
 80076b4:	230a      	movs	r3, #10
 80076b6:	e012      	b.n	80076de <_printf_i+0xfe>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	6820      	ldr	r0, [r4, #0]
 80076bc:	1d19      	adds	r1, r3, #4
 80076be:	6029      	str	r1, [r5, #0]
 80076c0:	0605      	lsls	r5, r0, #24
 80076c2:	d501      	bpl.n	80076c8 <_printf_i+0xe8>
 80076c4:	681e      	ldr	r6, [r3, #0]
 80076c6:	e002      	b.n	80076ce <_printf_i+0xee>
 80076c8:	0641      	lsls	r1, r0, #25
 80076ca:	d5fb      	bpl.n	80076c4 <_printf_i+0xe4>
 80076cc:	881e      	ldrh	r6, [r3, #0]
 80076ce:	4853      	ldr	r0, [pc, #332]	; (800781c <_printf_i+0x23c>)
 80076d0:	2f6f      	cmp	r7, #111	; 0x6f
 80076d2:	bf0c      	ite	eq
 80076d4:	2308      	moveq	r3, #8
 80076d6:	230a      	movne	r3, #10
 80076d8:	2100      	movs	r1, #0
 80076da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076de:	6865      	ldr	r5, [r4, #4]
 80076e0:	60a5      	str	r5, [r4, #8]
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	bfa2      	ittt	ge
 80076e6:	6821      	ldrge	r1, [r4, #0]
 80076e8:	f021 0104 	bicge.w	r1, r1, #4
 80076ec:	6021      	strge	r1, [r4, #0]
 80076ee:	b90e      	cbnz	r6, 80076f4 <_printf_i+0x114>
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	d04b      	beq.n	800778c <_printf_i+0x1ac>
 80076f4:	4615      	mov	r5, r2
 80076f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80076fa:	fb03 6711 	mls	r7, r3, r1, r6
 80076fe:	5dc7      	ldrb	r7, [r0, r7]
 8007700:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007704:	4637      	mov	r7, r6
 8007706:	42bb      	cmp	r3, r7
 8007708:	460e      	mov	r6, r1
 800770a:	d9f4      	bls.n	80076f6 <_printf_i+0x116>
 800770c:	2b08      	cmp	r3, #8
 800770e:	d10b      	bne.n	8007728 <_printf_i+0x148>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	07de      	lsls	r6, r3, #31
 8007714:	d508      	bpl.n	8007728 <_printf_i+0x148>
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	6861      	ldr	r1, [r4, #4]
 800771a:	4299      	cmp	r1, r3
 800771c:	bfde      	ittt	le
 800771e:	2330      	movle	r3, #48	; 0x30
 8007720:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007724:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007728:	1b52      	subs	r2, r2, r5
 800772a:	6122      	str	r2, [r4, #16]
 800772c:	f8cd a000 	str.w	sl, [sp]
 8007730:	464b      	mov	r3, r9
 8007732:	aa03      	add	r2, sp, #12
 8007734:	4621      	mov	r1, r4
 8007736:	4640      	mov	r0, r8
 8007738:	f7ff fee4 	bl	8007504 <_printf_common>
 800773c:	3001      	adds	r0, #1
 800773e:	d14a      	bne.n	80077d6 <_printf_i+0x1f6>
 8007740:	f04f 30ff 	mov.w	r0, #4294967295
 8007744:	b004      	add	sp, #16
 8007746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	f043 0320 	orr.w	r3, r3, #32
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	4833      	ldr	r0, [pc, #204]	; (8007820 <_printf_i+0x240>)
 8007754:	2778      	movs	r7, #120	; 0x78
 8007756:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	6829      	ldr	r1, [r5, #0]
 800775e:	061f      	lsls	r7, r3, #24
 8007760:	f851 6b04 	ldr.w	r6, [r1], #4
 8007764:	d402      	bmi.n	800776c <_printf_i+0x18c>
 8007766:	065f      	lsls	r7, r3, #25
 8007768:	bf48      	it	mi
 800776a:	b2b6      	uxthmi	r6, r6
 800776c:	07df      	lsls	r7, r3, #31
 800776e:	bf48      	it	mi
 8007770:	f043 0320 	orrmi.w	r3, r3, #32
 8007774:	6029      	str	r1, [r5, #0]
 8007776:	bf48      	it	mi
 8007778:	6023      	strmi	r3, [r4, #0]
 800777a:	b91e      	cbnz	r6, 8007784 <_printf_i+0x1a4>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	f023 0320 	bic.w	r3, r3, #32
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	2310      	movs	r3, #16
 8007786:	e7a7      	b.n	80076d8 <_printf_i+0xf8>
 8007788:	4824      	ldr	r0, [pc, #144]	; (800781c <_printf_i+0x23c>)
 800778a:	e7e4      	b.n	8007756 <_printf_i+0x176>
 800778c:	4615      	mov	r5, r2
 800778e:	e7bd      	b.n	800770c <_printf_i+0x12c>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	6826      	ldr	r6, [r4, #0]
 8007794:	6961      	ldr	r1, [r4, #20]
 8007796:	1d18      	adds	r0, r3, #4
 8007798:	6028      	str	r0, [r5, #0]
 800779a:	0635      	lsls	r5, r6, #24
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	d501      	bpl.n	80077a4 <_printf_i+0x1c4>
 80077a0:	6019      	str	r1, [r3, #0]
 80077a2:	e002      	b.n	80077aa <_printf_i+0x1ca>
 80077a4:	0670      	lsls	r0, r6, #25
 80077a6:	d5fb      	bpl.n	80077a0 <_printf_i+0x1c0>
 80077a8:	8019      	strh	r1, [r3, #0]
 80077aa:	2300      	movs	r3, #0
 80077ac:	6123      	str	r3, [r4, #16]
 80077ae:	4615      	mov	r5, r2
 80077b0:	e7bc      	b.n	800772c <_printf_i+0x14c>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	1d1a      	adds	r2, r3, #4
 80077b6:	602a      	str	r2, [r5, #0]
 80077b8:	681d      	ldr	r5, [r3, #0]
 80077ba:	6862      	ldr	r2, [r4, #4]
 80077bc:	2100      	movs	r1, #0
 80077be:	4628      	mov	r0, r5
 80077c0:	f7f8 fd0e 	bl	80001e0 <memchr>
 80077c4:	b108      	cbz	r0, 80077ca <_printf_i+0x1ea>
 80077c6:	1b40      	subs	r0, r0, r5
 80077c8:	6060      	str	r0, [r4, #4]
 80077ca:	6863      	ldr	r3, [r4, #4]
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	2300      	movs	r3, #0
 80077d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d4:	e7aa      	b.n	800772c <_printf_i+0x14c>
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	462a      	mov	r2, r5
 80077da:	4649      	mov	r1, r9
 80077dc:	4640      	mov	r0, r8
 80077de:	47d0      	blx	sl
 80077e0:	3001      	adds	r0, #1
 80077e2:	d0ad      	beq.n	8007740 <_printf_i+0x160>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	079b      	lsls	r3, r3, #30
 80077e8:	d413      	bmi.n	8007812 <_printf_i+0x232>
 80077ea:	68e0      	ldr	r0, [r4, #12]
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	4298      	cmp	r0, r3
 80077f0:	bfb8      	it	lt
 80077f2:	4618      	movlt	r0, r3
 80077f4:	e7a6      	b.n	8007744 <_printf_i+0x164>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4632      	mov	r2, r6
 80077fa:	4649      	mov	r1, r9
 80077fc:	4640      	mov	r0, r8
 80077fe:	47d0      	blx	sl
 8007800:	3001      	adds	r0, #1
 8007802:	d09d      	beq.n	8007740 <_printf_i+0x160>
 8007804:	3501      	adds	r5, #1
 8007806:	68e3      	ldr	r3, [r4, #12]
 8007808:	9903      	ldr	r1, [sp, #12]
 800780a:	1a5b      	subs	r3, r3, r1
 800780c:	42ab      	cmp	r3, r5
 800780e:	dcf2      	bgt.n	80077f6 <_printf_i+0x216>
 8007810:	e7eb      	b.n	80077ea <_printf_i+0x20a>
 8007812:	2500      	movs	r5, #0
 8007814:	f104 0619 	add.w	r6, r4, #25
 8007818:	e7f5      	b.n	8007806 <_printf_i+0x226>
 800781a:	bf00      	nop
 800781c:	08007966 	.word	0x08007966
 8007820:	08007977 	.word	0x08007977

08007824 <memmove>:
 8007824:	4288      	cmp	r0, r1
 8007826:	b510      	push	{r4, lr}
 8007828:	eb01 0402 	add.w	r4, r1, r2
 800782c:	d902      	bls.n	8007834 <memmove+0x10>
 800782e:	4284      	cmp	r4, r0
 8007830:	4623      	mov	r3, r4
 8007832:	d807      	bhi.n	8007844 <memmove+0x20>
 8007834:	1e43      	subs	r3, r0, #1
 8007836:	42a1      	cmp	r1, r4
 8007838:	d008      	beq.n	800784c <memmove+0x28>
 800783a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800783e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007842:	e7f8      	b.n	8007836 <memmove+0x12>
 8007844:	4402      	add	r2, r0
 8007846:	4601      	mov	r1, r0
 8007848:	428a      	cmp	r2, r1
 800784a:	d100      	bne.n	800784e <memmove+0x2a>
 800784c:	bd10      	pop	{r4, pc}
 800784e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007856:	e7f7      	b.n	8007848 <memmove+0x24>

08007858 <_init>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr

08007864 <_fini>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr
