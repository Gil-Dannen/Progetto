
Progetto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007740  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e8  080079e8  00020540  2**0
                  CONTENTS
  4 .ARM          00000008  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f0  080079f0  00020540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000540  20000000  08007a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  20000540  08007f40  00020540  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  08007f40  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026682  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052b7  00000000  00000000  00046bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001721a  00000000  00000000  0004bea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a00  00000000  00000000  000630c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b8  00000000  00000000  00064ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b7ef  00000000  00000000  00066380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029708  00000000  00000000  00091b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd238  00000000  00000000  000bb277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b84af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bf0  00000000  00000000  001b8500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000540 	.word	0x20000540
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078b4 	.word	0x080078b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000544 	.word	0x20000544
 80001cc:	080078b4 	.word	0x080078b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <blink>:


uint8_t blinkStatus = 0;

void blink()
{
 8000584:	b508      	push	{r3, lr}
	blinkStatus = !blinkStatus;
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <blink+0x18>)
 8000588:	7819      	ldrb	r1, [r3, #0]
 800058a:	fab1 f181 	clz	r1, r1
 800058e:	0949      	lsrs	r1, r1, #5
 8000590:	7019      	strb	r1, [r3, #0]
	setDigital(MF_led1,blinkStatus);
 8000592:	2002      	movs	r0, #2
 8000594:	f000 ffa2 	bl	80014dc <setDigital>
}
 8000598:	bd08      	pop	{r3, pc}
 800059a:	bf00      	nop
 800059c:	2000055c 	.word	0x2000055c

080005a0 <ble_check_enter>:

void ble_check_enter()
{
 80005a0:	b508      	push	{r3, lr}

	setDigital(MF_led1,GPIO_PIN_SET);
 80005a2:	2101      	movs	r1, #1
 80005a4:	2002      	movs	r0, #2
 80005a6:	f000 ff99 	bl	80014dc <setDigital>

    setTimer(TF_Main, blink, 500);
 80005aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005ae:	2300      	movs	r3, #0
 80005b0:	4906      	ldr	r1, [pc, #24]	; (80005cc <ble_check_enter+0x2c>)
 80005b2:	2000      	movs	r0, #0
 80005b4:	f002 f978 	bl	80028a8 <setTimer>

    setDigital(MF_led2, GPIO_PIN_RESET);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2003      	movs	r0, #3
 80005bc:	f000 ff8e 	bl	80014dc <setDigital>

    setExitCondition(ST_IDLE, buttonToggled);
 80005c0:	4903      	ldr	r1, [pc, #12]	; (80005d0 <ble_check_enter+0x30>)
 80005c2:	2002      	movs	r0, #2
 80005c4:	f001 fedc 	bl	8002380 <setExitCondition>


}
 80005c8:	bd08      	pop	{r3, pc}
 80005ca:	bf00      	nop
 80005cc:	08000585 	.word	0x08000585
 80005d0:	080012c9 	.word	0x080012c9

080005d4 <ble_check_beforeLoop>:


void ble_check_beforeLoop(uint8_t deltaMs)
{

}
 80005d4:	4770      	bx	lr
	...

080005d8 <ble_check_loop>:

void ble_check_loop(uint8_t deltaMs)
{
 80005d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005dc:	b08a      	sub	sp, #40	; 0x28




	  int distanceComplete=0;
 80005de:	2300      	movs	r3, #0
 80005e0:	9309      	str	r3, [sp, #36]	; 0x24
	  int16_t magx,magy,magz;

	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){//if an event occurs let's catch it
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	484f      	ldr	r0, [pc, #316]	; (8000724 <ble_check_loop+0x14c>)
 80005e6:	f003 f9d5 	bl	8003994 <HAL_GPIO_ReadPin>
 80005ea:	b928      	cbnz	r0, 80005f8 <ble_check_loop+0x20>
		  catchBLE();

	  }else{

		  if(update){
 80005ec:	4b4e      	ldr	r3, [pc, #312]	; (8000728 <ble_check_loop+0x150>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	b92b      	cbnz	r3, 80005fe <ble_check_loop+0x26>
	  }




}
 80005f2:	b00a      	add	sp, #40	; 0x28
 80005f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  catchBLE();
 80005f8:	f000 f9f6 	bl	80009e8 <catchBLE>
 80005fc:	e7f9      	b.n	80005f2 <ble_check_loop+0x1a>
			  update=0;
 80005fe:	4b4a      	ldr	r3, [pc, #296]	; (8000728 <ble_check_loop+0x150>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
			  getDistance(&distanceComplete);
 8000604:	a809      	add	r0, sp, #36	; 0x24
 8000606:	f001 fc11 	bl	8001e2c <getDistance>
			  updateSignedMillesimal(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,TOF_VALUE,13,distanceComplete);
 800060a:	4c48      	ldr	r4, [pc, #288]	; (800072c <ble_check_loop+0x154>)
 800060c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	230d      	movs	r3, #13
 8000614:	4a46      	ldr	r2, [pc, #280]	; (8000730 <ble_check_loop+0x158>)
 8000616:	4947      	ldr	r1, [pc, #284]	; (8000734 <ble_check_loop+0x15c>)
 8000618:	4620      	mov	r0, r4
 800061a:	f000 fcb3 	bl	8000f84 <updateSignedMillesimal>
			  HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f002 ffb2 	bl	8003588 <HAL_Delay>
			  getTemperature(&temp);
 8000624:	a806      	add	r0, sp, #24
 8000626:	f001 fba7 	bl	8001d78 <getTemperature>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,VALUE_TEMP,9,temp);
 800062a:	ed9d 0a06 	vldr	s0, [sp, #24]
 800062e:	2309      	movs	r3, #9
 8000630:	4a41      	ldr	r2, [pc, #260]	; (8000738 <ble_check_loop+0x160>)
 8000632:	4942      	ldr	r1, [pc, #264]	; (800073c <ble_check_loop+0x164>)
 8000634:	4620      	mov	r0, r4
 8000636:	f000 fd71 	bl	800111c <updateSignedFloat>
			  HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f002 ffa4 	bl	8003588 <HAL_Delay>
			  getHumidity(&hum);
 8000640:	a807      	add	r0, sp, #28
 8000642:	f001 fb53 	bl	8001cec <getHumidity>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,VALUE_HUM,8,hum);
 8000646:	ed9d 0a07 	vldr	s0, [sp, #28]
 800064a:	2308      	movs	r3, #8
 800064c:	4a3c      	ldr	r2, [pc, #240]	; (8000740 <ble_check_loop+0x168>)
 800064e:	493d      	ldr	r1, [pc, #244]	; (8000744 <ble_check_loop+0x16c>)
 8000650:	4620      	mov	r0, r4
 8000652:	f000 fd63 	bl	800111c <updateSignedFloat>
			  HAL_Delay(10);
 8000656:	200a      	movs	r0, #10
 8000658:	f002 ff96 	bl	8003588 <HAL_Delay>
			  getAxisAccelerometer(&accx,&accy,&accz);
 800065c:	f10d 0212 	add.w	r2, sp, #18
 8000660:	a905      	add	r1, sp, #20
 8000662:	f10d 0016 	add.w	r0, sp, #22
 8000666:	f001 fc27 	bl	8001eb8 <getAxisAccelerometer>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,X_VALUE,10,accx);
 800066a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800077c <ble_check_loop+0x1a4>
 800066e:	4d36      	ldr	r5, [pc, #216]	; (8000748 <ble_check_loop+0x170>)
 8000670:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	230a      	movs	r3, #10
 8000678:	4642      	mov	r2, r8
 800067a:	4934      	ldr	r1, [pc, #208]	; (800074c <ble_check_loop+0x174>)
 800067c:	4628      	mov	r0, r5
 800067e:	f000 fc81 	bl	8000f84 <updateSignedMillesimal>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,Y_VALUE,10,accy);
 8000682:	4f33      	ldr	r7, [pc, #204]	; (8000750 <ble_check_loop+0x178>)
 8000684:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	230a      	movs	r3, #10
 800068c:	463a      	mov	r2, r7
 800068e:	4931      	ldr	r1, [pc, #196]	; (8000754 <ble_check_loop+0x17c>)
 8000690:	4628      	mov	r0, r5
 8000692:	f000 fc77 	bl	8000f84 <updateSignedMillesimal>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,Z_VALUE,10,accz);
 8000696:	4e30      	ldr	r6, [pc, #192]	; (8000758 <ble_check_loop+0x180>)
 8000698:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	230a      	movs	r3, #10
 80006a0:	4632      	mov	r2, r6
 80006a2:	492e      	ldr	r1, [pc, #184]	; (800075c <ble_check_loop+0x184>)
 80006a4:	4628      	mov	r0, r5
 80006a6:	f000 fc6d 	bl	8000f84 <updateSignedMillesimal>
			  getPressure(&press);
 80006aa:	a808      	add	r0, sp, #32
 80006ac:	f001 f966 	bl	800197c <getPressure>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,VALUE_PRESS,10,press);
 80006b0:	ed9d 0a08 	vldr	s0, [sp, #32]
 80006b4:	230a      	movs	r3, #10
 80006b6:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <ble_check_loop+0x188>)
 80006b8:	492a      	ldr	r1, [pc, #168]	; (8000764 <ble_check_loop+0x18c>)
 80006ba:	4620      	mov	r0, r4
 80006bc:	f000 fd2e 	bl	800111c <updateSignedFloat>
			  HAL_Delay(10);
 80006c0:	200a      	movs	r0, #10
 80006c2:	f002 ff61 	bl	8003588 <HAL_Delay>
			  getAxisMagnetometer(&magx,&magy,&magz);
 80006c6:	aa03      	add	r2, sp, #12
 80006c8:	f10d 010e 	add.w	r1, sp, #14
 80006cc:	a804      	add	r0, sp, #16
 80006ce:	f001 fcaf 	bl	8002030 <getAxisMagnetometer>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,X_VALUE,10,magx);
 80006d2:	4c25      	ldr	r4, [pc, #148]	; (8000768 <ble_check_loop+0x190>)
 80006d4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	230a      	movs	r3, #10
 80006dc:	4642      	mov	r2, r8
 80006de:	4923      	ldr	r1, [pc, #140]	; (800076c <ble_check_loop+0x194>)
 80006e0:	4620      	mov	r0, r4
 80006e2:	f000 fc4f 	bl	8000f84 <updateSignedMillesimal>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,Y_VALUE,10,magy);
 80006e6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	230a      	movs	r3, #10
 80006ee:	463a      	mov	r2, r7
 80006f0:	491f      	ldr	r1, [pc, #124]	; (8000770 <ble_check_loop+0x198>)
 80006f2:	4620      	mov	r0, r4
 80006f4:	f000 fc46 	bl	8000f84 <updateSignedMillesimal>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,Z_VALUE,10,magz);
 80006f8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	230a      	movs	r3, #10
 8000700:	4632      	mov	r2, r6
 8000702:	491c      	ldr	r1, [pc, #112]	; (8000774 <ble_check_loop+0x19c>)
 8000704:	4620      	mov	r0, r4
 8000706:	f000 fc3d 	bl	8000f84 <updateSignedMillesimal>
			  startToF();
 800070a:	f001 fb7b 	bl	8001e04 <startToF>
			  pwm=distanceComplete;
 800070e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			  if(distanceComplete>500){
 8000710:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000714:	dd01      	ble.n	800071a <ble_check_loop+0x142>
				  pwm=500;
 8000716:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
			  	  __HAL_TIM_SetCompare(&htim15,TIM_CHANNEL_1,pwm);
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <ble_check_loop+0x1a0>)
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000720:	e767      	b.n	80005f2 <ble_check_loop+0x1a>
 8000722:	bf00      	nop
 8000724:	48001000 	.word	0x48001000
 8000728:	2000055c 	.word	0x2000055c
 800072c:	2000067c 	.word	0x2000067c
 8000730:	200001ac 	.word	0x200001ac
 8000734:	20000690 	.word	0x20000690
 8000738:	20000144 	.word	0x20000144
 800073c:	20000684 	.word	0x20000684
 8000740:	20000168 	.word	0x20000168
 8000744:	20000688 	.word	0x20000688
 8000748:	20000694 	.word	0x20000694
 800074c:	2000069c 	.word	0x2000069c
 8000750:	200002d0 	.word	0x200002d0
 8000754:	200006a0 	.word	0x200006a0
 8000758:	200002f4 	.word	0x200002f4
 800075c:	200006a4 	.word	0x200006a4
 8000760:	20000188 	.word	0x20000188
 8000764:	2000068c 	.word	0x2000068c
 8000768:	200006a8 	.word	0x200006a8
 800076c:	200006b0 	.word	0x200006b0
 8000770:	200006b4 	.word	0x200006b4
 8000774:	200006b8 	.word	0x200006b8
 8000778:	200008d8 	.word	0x200008d8
 800077c:	200002ac 	.word	0x200002ac

08000780 <ble_check_afterLoop>:

void ble_check_afterLoop(uint8_t deltaMs)
{
    __WFI();
 8000780:	bf30      	wfi
}
 8000782:	4770      	bx	lr

08000784 <fetchBleEvent>:
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
}

int fetchBleEvent(uint8_t *container, int size){
 8000784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000788:	b088      	sub	sp, #32
 800078a:	4606      	mov	r6, r0
 800078c:	460d      	mov	r5, r1

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <fetchBleEvent+0xdc>)
 8000790:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000794:	9006      	str	r0, [sp, #24]
 8000796:	f88d 101c 	strb.w	r1, [sp, #28]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800079a:	2140      	movs	r1, #64	; 0x40
 800079c:	4831      	ldr	r0, [pc, #196]	; (8000864 <fetchBleEvent+0xe0>)
 800079e:	f003 f8f9 	bl	8003994 <HAL_GPIO_ReadPin>
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d059      	beq.n	800085a <fetchBleEvent+0xd6>

  HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f002 feee 	bl	8003588 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80007ac:	4f2e      	ldr	r7, [pc, #184]	; (8000868 <fetchBleEvent+0xe4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	4638      	mov	r0, r7
 80007b6:	f003 f8f4 	bl	80039a2 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80007ba:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800086c <fetchBleEvent+0xe8>
 80007be:	2401      	movs	r4, #1
 80007c0:	9400      	str	r4, [sp, #0]
 80007c2:	2305      	movs	r3, #5
 80007c4:	aa04      	add	r2, sp, #16
 80007c6:	a906      	add	r1, sp, #24
 80007c8:	4640      	mov	r0, r8
 80007ca:	f005 f998 	bl	8005afe <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80007ce:	4622      	mov	r2, r4
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	4638      	mov	r0, r7
 80007d6:	f003 f8e4 	bl	80039a2 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80007da:	4620      	mov	r0, r4
 80007dc:	f002 fed4 	bl	8003588 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	4638      	mov	r0, r7
 80007e8:	f003 f8db 	bl	80039a2 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80007ec:	9400      	str	r4, [sp, #0]
 80007ee:	2305      	movs	r3, #5
 80007f0:	aa04      	add	r2, sp, #16
 80007f2:	a906      	add	r1, sp, #24
 80007f4:	4640      	mov	r0, r8
 80007f6:	f005 f982 	bl	8005afe <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 80007fa:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80007fe:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000802:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  int i;
  char dummy=0xff;
 8000806:	22ff      	movs	r2, #255	; 0xff
 8000808:	f88d 200f 	strb.w	r2, [sp, #15]

  if(dataSize>size){
 800080c:	42ab      	cmp	r3, r5
 800080e:	dc00      	bgt.n	8000812 <fetchBleEvent+0x8e>
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000810:	461d      	mov	r5, r3
	  dataSize=size;
  }

  if(dataSize>0){
 8000812:	2d00      	cmp	r5, #0
 8000814:	dd18      	ble.n	8000848 <fetchBleEvent+0xc4>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000816:	2400      	movs	r4, #0
 8000818:	e008      	b.n	800082c <fetchBleEvent+0xa8>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800081a:	2301      	movs	r3, #1
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	1932      	adds	r2, r6, r4
 8000820:	f10d 010f 	add.w	r1, sp, #15
 8000824:	4811      	ldr	r0, [pc, #68]	; (800086c <fetchBleEvent+0xe8>)
 8000826:	f005 f96a 	bl	8005afe <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 800082a:	3401      	adds	r4, #1
 800082c:	42a5      	cmp	r5, r4
 800082e:	dcf4      	bgt.n	800081a <fetchBleEvent+0x96>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <fetchBleEvent+0xe4>)
 8000838:	f003 f8b3 	bl	80039a2 <HAL_GPIO_WritePin>
  	}

  //let's stop the SPI2


  dataAvailable=0;
 800083c:	2000      	movs	r0, #0
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <fetchBleEvent+0xec>)
 8000840:	6018      	str	r0, [r3, #0]
  return BLE_OK;
  }else{
  return -2;
  }
}
 8000842:	b008      	add	sp, #32
 8000844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <fetchBleEvent+0xe4>)
 8000850:	f003 f8a7 	bl	80039a2 <HAL_GPIO_WritePin>
        return -1;
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	e7f3      	b.n	8000842 <fetchBleEvent+0xbe>
  return -2;
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	e7f0      	b.n	8000842 <fetchBleEvent+0xbe>
 8000860:	080078d0 	.word	0x080078d0
 8000864:	48001000 	.word	0x48001000
 8000868:	48000c00 	.word	0x48000c00
 800086c:	200007dc 	.word	0x200007dc
 8000870:	20000564 	.word	0x20000564

08000874 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
	int j=0;

	for(j=0;j<size;j++){
 8000874:	2300      	movs	r3, #0
 8000876:	4293      	cmp	r3, r2
 8000878:	da0f      	bge.n	800089a <checkEventResp+0x26>
int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 800087a:	b500      	push	{lr}

		if(event[j]!=reference[j]){
 800087c:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000880:	f811 c003 	ldrb.w	ip, [r1, r3]
 8000884:	45e6      	cmp	lr, ip
 8000886:	d105      	bne.n	8000894 <checkEventResp+0x20>
	for(j=0;j<size;j++){
 8000888:	3301      	adds	r3, #1
 800088a:	4293      	cmp	r3, r2
 800088c:	dbf6      	blt.n	800087c <checkEventResp+0x8>
			return -1;
		}
	}

return BLE_OK;
 800088e:	2000      	movs	r0, #0
}
 8000890:	f85d fb04 	ldr.w	pc, [sp], #4
			return -1;
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	e7fa      	b.n	8000890 <checkEventResp+0x1c>
return BLE_OK;
 800089a:	2000      	movs	r0, #0
}
 800089c:	4770      	bx	lr
	...

080008a0 <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	4605      	mov	r5, r0
 80008a6:	460c      	mov	r4, r1

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <sendCommand+0x70>)
 80008aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008ae:	9004      	str	r0, [sp, #16]
 80008b0:	f88d 1014 	strb.w	r1, [sp, #20]
	  int result;

	do{


	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ba:	4816      	ldr	r0, [pc, #88]	; (8000914 <sendCommand+0x74>)
 80008bc:	f003 f871 	bl	80039a2 <HAL_GPIO_WritePin>

	//wait until it is possible to write
	//while(!dataAvailable);
	HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80008c0:	2301      	movs	r3, #1
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2305      	movs	r3, #5
 80008c6:	aa02      	add	r2, sp, #8
 80008c8:	a904      	add	r1, sp, #16
 80008ca:	4813      	ldr	r0, [pc, #76]	; (8000918 <sendCommand+0x78>)
 80008cc:	f005 f917 	bl	8005afe <HAL_SPI_TransmitReceive>
	int bufferSize=(slave_header[2]<<8|slave_header[1]);
 80008d0:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80008d4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80008d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if(bufferSize>=size){
 80008dc:	42a3      	cmp	r3, r4
 80008de:	da0e      	bge.n	80008fe <sendCommand+0x5e>
		HAL_SPI_Transmit(&hspi3,command,size,1);
		result=0;
	}else{
		result=-1;
 80008e0:	f04f 36ff 	mov.w	r6, #4294967295
	}
	//HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ea:	480a      	ldr	r0, [pc, #40]	; (8000914 <sendCommand+0x74>)
 80008ec:	f003 f859 	bl	80039a2 <HAL_GPIO_WritePin>
	dataAvailable=0;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <sendCommand+0x7c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d1dc      	bne.n	80008b4 <sendCommand+0x14>

}
 80008fa:	b006      	add	sp, #24
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_SPI_Transmit(&hspi3,command,size,1);
 80008fe:	2301      	movs	r3, #1
 8000900:	b2a2      	uxth	r2, r4
 8000902:	4629      	mov	r1, r5
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <sendCommand+0x78>)
 8000906:	f004 fff9 	bl	80058fc <HAL_SPI_Transmit>
		result=0;
 800090a:	2600      	movs	r6, #0
 800090c:	e7ea      	b.n	80008e4 <sendCommand+0x44>
 800090e:	bf00      	nop
 8000910:	080078d8 	.word	0x080078d8
 8000914:	48000c00 	.word	0x48000c00
 8000918:	200007dc 	.word	0x200007dc
 800091c:	20000564 	.word	0x20000564

08000920 <setConnectable>:



}

void setConnectable(){
 8000920:	b570      	push	{r4, r5, r6, lr}
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000922:	2012      	movs	r0, #18
 8000924:	f006 fb2a 	bl	8006f7c <malloc>
 8000928:	4604      	mov	r4, r0
	   memcpy(localname,deviceName,sizeof(deviceName));
 800092a:	4e2b      	ldr	r6, [pc, #172]	; (80009d8 <setConnectable+0xb8>)
 800092c:	4633      	mov	r3, r6
 800092e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000930:	6020      	str	r0, [r4, #0]
 8000932:	6061      	str	r1, [r4, #4]
 8000934:	60a2      	str	r2, [r4, #8]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	7323      	strb	r3, [r4, #12]
	   localname[sizeof(deviceName)+1]=0x00;
 800093a:	2300      	movs	r3, #0
 800093c:	73a3      	strb	r3, [r4, #14]
	   localname[sizeof(deviceName)+2]=0x00;
 800093e:	73e3      	strb	r3, [r4, #15]
	   localname[sizeof(deviceName)+3]=0x00;
 8000940:	7423      	strb	r3, [r4, #16]
	   localname[sizeof(deviceName)+4]=0x00;
 8000942:	7463      	strb	r3, [r4, #17]
	   localname[sizeof(deviceName)]=0x00;
 8000944:	7363      	strb	r3, [r4, #13]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000946:	230e      	movs	r3, #14
 8000948:	76f3      	strb	r3, [r6, #27]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800094a:	231b      	movs	r3, #27
 800094c:	74f3      	strb	r3, [r6, #19]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 800094e:	201f      	movs	r0, #31
 8000950:	f006 fb14 	bl	8006f7c <malloc>
 8000954:	4605      	mov	r5, r0
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000956:	f106 0310 	add.w	r3, r6, #16
 800095a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800095c:	6028      	str	r0, [r5, #0]
 800095e:	6069      	str	r1, [r5, #4]
 8000960:	60aa      	str	r2, [r5, #8]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	732b      	strb	r3, [r5, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000966:	6820      	ldr	r0, [r4, #0]
 8000968:	6861      	ldr	r1, [r4, #4]
 800096a:	68a2      	ldr	r2, [r4, #8]
 800096c:	68e3      	ldr	r3, [r4, #12]
 800096e:	f8c5 000d 	str.w	r0, [r5, #13]
 8000972:	f8c5 1011 	str.w	r1, [r5, #17]
 8000976:	f8c5 2015 	str.w	r2, [r5, #21]
 800097a:	f8c5 3019 	str.w	r3, [r5, #25]
 800097e:	8a23      	ldrh	r3, [r4, #16]
 8000980:	f8a5 301d 	strh.w	r3, [r5, #29]

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000984:	211f      	movs	r1, #31
 8000986:	4628      	mov	r0, r5
 8000988:	f7ff ff8a 	bl	80008a0 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 800098c:	2007      	movs	r0, #7
 800098e:	f006 faf5 	bl	8006f7c <malloc>
 8000992:	4606      	mov	r6, r0
	   while(!dataAvailable);
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <setConnectable+0xbc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0fb      	beq.n	8000994 <setConnectable+0x74>
	   res=fetchBleEvent(rxEvent,7);
 800099c:	2107      	movs	r1, #7
 800099e:	4630      	mov	r0, r6
 80009a0:	f7ff fef0 	bl	8000784 <fetchBleEvent>
	   if(res==BLE_OK){
 80009a4:	b950      	cbnz	r0, 80009bc <setConnectable+0x9c>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80009a6:	2207      	movs	r2, #7
 80009a8:	490d      	ldr	r1, [pc, #52]	; (80009e0 <setConnectable+0xc0>)
 80009aa:	4630      	mov	r0, r6
 80009ac:	f7ff ff62 	bl	8000874 <checkEventResp>
	   if(res==BLE_OK){
 80009b0:	b920      	cbnz	r0, 80009bc <setConnectable+0x9c>
		   stackInitCompleteFlag|=0x80;
 80009b2:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <setConnectable+0xc4>)
 80009b4:	8813      	ldrh	r3, [r2, #0]
 80009b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ba:	8013      	strh	r3, [r2, #0]
	   }
	   }

	   free(rxEvent);
 80009bc:	4630      	mov	r0, r6
 80009be:	f006 fae5 	bl	8006f8c <free>
	   free(discoverableCommand);
 80009c2:	4628      	mov	r0, r5
 80009c4:	f006 fae2 	bl	8006f8c <free>
	   free(localname);
 80009c8:	4620      	mov	r0, r4
 80009ca:	f006 fadf 	bl	8006f8c <free>
	   HAL_Delay(10);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f002 fdda 	bl	8003588 <HAL_Delay>
}
 80009d4:	bd70      	pop	{r4, r5, r6, pc}
 80009d6:	bf00      	nop
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000564 	.word	0x20000564
 80009e0:	20000020 	.word	0x20000020
 80009e4:	20000568 	.word	0x20000568

080009e8 <catchBLE>:
void catchBLE(){
 80009e8:	b508      	push	{r3, lr}
int result=fetchBleEvent(buffer,127);
 80009ea:	217f      	movs	r1, #127	; 0x7f
 80009ec:	4806      	ldr	r0, [pc, #24]	; (8000a08 <catchBLE+0x20>)
 80009ee:	f7ff fec9 	bl	8000784 <fetchBleEvent>
	  if(result==BLE_OK){
 80009f2:	b928      	cbnz	r0, 8000a00 <catchBLE+0x18>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80009f4:	2203      	movs	r2, #3
 80009f6:	4905      	ldr	r1, [pc, #20]	; (8000a0c <catchBLE+0x24>)
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <catchBLE+0x20>)
 80009fa:	f7ff ff3b 	bl	8000874 <checkEventResp>
 80009fe:	b100      	cbz	r0, 8000a02 <catchBLE+0x1a>
}
 8000a00:	bd08      	pop	{r3, pc}
			  setConnectable();
 8000a02:	f7ff ff8d 	bl	8000920 <setConnectable>
}
 8000a06:	e7fb      	b.n	8000a00 <catchBLE+0x18>
 8000a08:	2000056c 	.word	0x2000056c
 8000a0c:	20000028 	.word	0x20000028

08000a10 <BLE_command>:
}




int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a12:	4617      	mov	r7, r2
 8000a14:	461e      	mov	r6, r3
	   int response;

	   sendCommand(command,size);
 8000a16:	f7ff ff43 	bl	80008a0 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000a1a:	9d06      	ldr	r5, [sp, #24]
 8000a1c:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8000a20:	4628      	mov	r0, r5
 8000a22:	f006 faab 	bl	8006f7c <malloc>
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <BLE_command+0x5c>)
 8000a28:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104

	   long contatore=0;
 8000a2c:	2400      	movs	r4, #0
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000a2e:	2140      	movs	r1, #64	; 0x40
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <BLE_command+0x60>)
 8000a32:	f002 ffaf 	bl	8003994 <HAL_GPIO_ReadPin>
 8000a36:	b920      	cbnz	r0, 8000a42 <BLE_command+0x32>
		   contatore++;
 8000a38:	3401      	adds	r4, #1
		   if(contatore>30000){
 8000a3a:	f247 5030 	movw	r0, #30000	; 0x7530
 8000a3e:	4284      	cmp	r4, r0
 8000a40:	ddf5      	ble.n	8000a2e <BLE_command+0x1e>
			   break;
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000a42:	4629      	mov	r1, r5
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <BLE_command+0x5c>)
 8000a46:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000a4a:	f7ff fe9b 	bl	8000784 <fetchBleEvent>
	   if(response==BLE_OK){
 8000a4e:	4604      	mov	r4, r0
 8000a50:	b938      	cbnz	r0, 8000a62 <BLE_command+0x52>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000a52:	4632      	mov	r2, r6
 8000a54:	4639      	mov	r1, r7
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <BLE_command+0x5c>)
 8000a58:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000a5c:	f7ff ff0a 	bl	8000874 <checkEventResp>
 8000a60:	4604      	mov	r4, r0
	   }
	   HAL_Delay(10);
 8000a62:	200a      	movs	r0, #10
 8000a64:	f002 fd90 	bl	8003588 <HAL_Delay>


	return response;
}
 8000a68:	4620      	mov	r0, r4
 8000a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a6c:	20000568 	.word	0x20000568
 8000a70:	48001000 	.word	0x48001000

08000a74 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000a74:	b530      	push	{r4, r5, lr}
 8000a76:	b083      	sub	sp, #12
 8000a78:	460d      	mov	r5, r1


	//memcpy
	memcpy(ADD_CUSTOM_SERVICE+5,UUID,16);
 8000a7a:	4c16      	ldr	r4, [pc, #88]	; (8000ad4 <addService+0x60>)
 8000a7c:	f8d0 e000 	ldr.w	lr, [r0]
 8000a80:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8000a84:	6881      	ldr	r1, [r0, #8]
 8000a86:	68c3      	ldr	r3, [r0, #12]
 8000a88:	f8c4 e031 	str.w	lr, [r4, #49]	; 0x31
 8000a8c:	f8c4 c035 	str.w	ip, [r4, #53]	; 0x35
 8000a90:	f8c4 1039 	str.w	r1, [r4, #57]	; 0x39
 8000a94:	f8c4 303d 	str.w	r3, [r4, #61]	; 0x3d
    ADD_CUSTOM_SERVICE[22]=attributes;
 8000a98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
	   if(BLE_command(ADD_CUSTOM_SERVICE,sizeof(ADD_CUSTOM_SERVICE),ADD_CUSTOM_SERVICE_COMPLETE,sizeof(ADD_CUSTOM_SERVICE_COMPLETE),1)==BLE_OK){
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8000aa6:	2117      	movs	r1, #23
 8000aa8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8000aac:	f7ff ffb0 	bl	8000a10 <BLE_command>
 8000ab0:	b940      	cbnz	r0, 8000ac4 <addService+0x50>
		   handle[0]=rxEvent[7];
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <addService+0x64>)
 8000ab4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000ab8:	79d2      	ldrb	r2, [r2, #7]
 8000aba:	702a      	strb	r2, [r5, #0]
		   handle[1]=rxEvent[8];
 8000abc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ac0:	7a1b      	ldrb	r3, [r3, #8]
 8000ac2:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <addService+0x64>)
 8000ac6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000aca:	f006 fa5f 	bl	8006f8c <free>



}
 8000ace:	b003      	add	sp, #12
 8000ad0:	bd30      	pop	{r4, r5, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000568 	.word	0x20000568

08000adc <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	460d      	mov	r5, r1



	memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000ae2:	4c1b      	ldr	r4, [pc, #108]	; (8000b50 <addCharacteristic+0x74>)
 8000ae4:	6806      	ldr	r6, [r0, #0]
 8000ae6:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000aea:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000aee:	68c1      	ldr	r1, [r0, #12]
 8000af0:	f8c4 6053 	str.w	r6, [r4, #83]	; 0x53
 8000af4:	f8c4 e057 	str.w	lr, [r4, #87]	; 0x57
 8000af8:	f8c4 c05b 	str.w	ip, [r4, #91]	; 0x5b
 8000afc:	f8c4 105f 	str.w	r1, [r4, #95]	; 0x5f


	   ADD_CUSTOM_CHAR[4]= handleService[0];
 8000b00:	7811      	ldrb	r1, [r2, #0]
 8000b02:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	   ADD_CUSTOM_CHAR[5]= handleService[1];
 8000b06:	7852      	ldrb	r2, [r2, #1]
 8000b08:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
	   ADD_CUSTOM_CHAR[23]= maxsize;
 8000b0c:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	   ADD_CUSTOM_CHAR[25]= proprieties;
 8000b10:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000b14:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	   if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000b18:	2301      	movs	r3, #1
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8000b22:	211e      	movs	r1, #30
 8000b24:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8000b28:	f7ff ff72 	bl	8000a10 <BLE_command>
 8000b2c:	b940      	cbnz	r0, 8000b40 <addCharacteristic+0x64>
		   handleChar[0]=rxEvent[7];
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <addCharacteristic+0x78>)
 8000b30:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000b34:	79d2      	ldrb	r2, [r2, #7]
 8000b36:	702a      	strb	r2, [r5, #0]
		   handleChar[1]=rxEvent[8];
 8000b38:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000b3c:	7a1b      	ldrb	r3, [r3, #8]
 8000b3e:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <addCharacteristic+0x78>)
 8000b42:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000b46:	f006 fa21 	bl	8006f8c <free>





}
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000568 	.word	0x20000568

08000b58 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	461e      	mov	r6, r3

	UPDATE_CHAR[3]=size+6;
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	1d9d      	adds	r5, r3, #6
 8000b62:	4c1c      	ldr	r4, [pc, #112]	; (8000bd4 <updateCharValue+0x7c>)
 8000b64:	f884 5077 	strb.w	r5, [r4, #119]	; 0x77
	UPDATE_CHAR[4]=handleService[0];
 8000b68:	7805      	ldrb	r5, [r0, #0]
 8000b6a:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
	UPDATE_CHAR[5]=handleService[1];
 8000b6e:	7840      	ldrb	r0, [r0, #1]
 8000b70:	f884 0079 	strb.w	r0, [r4, #121]	; 0x79
	UPDATE_CHAR[6]=handleChar[0];
 8000b74:	7808      	ldrb	r0, [r1, #0]
 8000b76:	f884 007a 	strb.w	r0, [r4, #122]	; 0x7a
	UPDATE_CHAR[7]=handleChar[1];
 8000b7a:	7849      	ldrb	r1, [r1, #1]
 8000b7c:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
	UPDATE_CHAR[8]=offset;
 8000b80:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
	UPDATE_CHAR[9]=size;
 8000b84:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000b88:	f106 070a 	add.w	r7, r6, #10
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	f006 f9f5 	bl	8006f7c <malloc>
 8000b92:	4605      	mov	r5, r0
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000b94:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8000b98:	cb03      	ldmia	r3!, {r0, r1}
 8000b9a:	6028      	str	r0, [r5, #0]
 8000b9c:	6069      	str	r1, [r5, #4]
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	812b      	strh	r3, [r5, #8]
	memcpy(commandComplete+10,data,size);
 8000ba2:	4632      	mov	r2, r6
 8000ba4:	9908      	ldr	r1, [sp, #32]
 8000ba6:	f105 000a 	add.w	r0, r5, #10
 8000baa:	f006 f9f7 	bl	8006f9c <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8000bb8:	4639      	mov	r1, r7
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f7ff ff28 	bl	8000a10 <BLE_command>

	free(commandComplete);
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f006 f9e3 	bl	8006f8c <free>
	free(rxEvent);
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <updateCharValue+0x80>)
 8000bc8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000bcc:	f006 f9de 	bl	8006f8c <free>

}
 8000bd0:	b003      	add	sp, #12
 8000bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000568 	.word	0x20000568

08000bdc <ble_init>:
void ble_init(){
 8000bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000be0:	b083      	sub	sp, #12
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000be2:	2006      	movs	r0, #6
 8000be4:	f006 f9ca 	bl	8006f7c <malloc>
 8000be8:	4bd3      	ldr	r3, [pc, #844]	; (8000f38 <ble_init+0x35c>)
 8000bea:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	while(!dataAvailable);
 8000bee:	4bd3      	ldr	r3, [pc, #844]	; (8000f3c <ble_init+0x360>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0fb      	beq.n	8000bee <ble_init+0x12>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 8000bf6:	2106      	movs	r1, #6
 8000bf8:	f7ff fdc4 	bl	8000784 <fetchBleEvent>
	if(res==BLE_OK){
 8000bfc:	b960      	cbnz	r0, 8000c18 <ble_init+0x3c>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 8000bfe:	2206      	movs	r2, #6
 8000c00:	49cf      	ldr	r1, [pc, #828]	; (8000f40 <ble_init+0x364>)
 8000c02:	4bcd      	ldr	r3, [pc, #820]	; (8000f38 <ble_init+0x35c>)
 8000c04:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000c08:	f7ff fe34 	bl	8000874 <checkEventResp>
	if(res==BLE_OK){
 8000c0c:	b920      	cbnz	r0, 8000c18 <ble_init+0x3c>
	   stackInitCompleteFlag|=0x01;
 8000c0e:	4aca      	ldr	r2, [pc, #808]	; (8000f38 <ble_init+0x35c>)
 8000c10:	8813      	ldrh	r3, [r2, #0]
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	8013      	strh	r3, [r2, #0]
	HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f002 fcb5 	bl	8003588 <HAL_Delay>
	free(rxEvent);
 8000c1e:	4bc6      	ldr	r3, [pc, #792]	; (8000f38 <ble_init+0x35c>)
 8000c20:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000c24:	f006 f9b2 	bl	8006f8c <free>
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000c28:	48c6      	ldr	r0, [pc, #792]	; (8000f44 <ble_init+0x368>)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2307      	movs	r3, #7
 8000c30:	f100 028c 	add.w	r2, r0, #140	; 0x8c
 8000c34:	2104      	movs	r1, #4
 8000c36:	3094      	adds	r0, #148	; 0x94
 8000c38:	f7ff feea 	bl	8000a10 <BLE_command>
 8000c3c:	b920      	cbnz	r0, 8000c48 <ble_init+0x6c>
	   stackInitCompleteFlag|=0x02;
 8000c3e:	4abe      	ldr	r2, [pc, #760]	; (8000f38 <ble_init+0x35c>)
 8000c40:	8813      	ldrh	r3, [r2, #0]
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000c48:	4bbb      	ldr	r3, [pc, #748]	; (8000f38 <ble_init+0x35c>)
 8000c4a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000c4e:	f006 f99d 	bl	8006f8c <free>
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000c52:	48bc      	ldr	r0, [pc, #752]	; (8000f44 <ble_init+0x368>)
 8000c54:	2303      	movs	r3, #3
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2307      	movs	r3, #7
 8000c5a:	f100 0298 	add.w	r2, r0, #152	; 0x98
 8000c5e:	4619      	mov	r1, r3
 8000c60:	30a0      	adds	r0, #160	; 0xa0
 8000c62:	f7ff fed5 	bl	8000a10 <BLE_command>
 8000c66:	b990      	cbnz	r0, 8000c8e <ble_init+0xb2>
	   stackInitCompleteFlag|=0x04;
 8000c68:	4bb3      	ldr	r3, [pc, #716]	; (8000f38 <ble_init+0x35c>)
 8000c6a:	881a      	ldrh	r2, [r3, #0]
 8000c6c:	f042 0204 	orr.w	r2, r2, #4
 8000c70:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000c72:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000c76:	f8b2 1007 	ldrh.w	r1, [r2, #7]
 8000c7a:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000c7e:	f8b2 1009 	ldrh.w	r1, [r2, #9]
 8000c82:	f8a3 110c 	strh.w	r1, [r3, #268]	; 0x10c
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000c86:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8000c8a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	free(rxEvent);
 8000c8e:	4caa      	ldr	r4, [pc, #680]	; (8000f38 <ble_init+0x35c>)
 8000c90:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 8000c94:	f006 f97a 	bl	8006f8c <free>
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000c98:	4daa      	ldr	r5, [pc, #680]	; (8000f44 <ble_init+0x368>)
 8000c9a:	9500      	str	r5, [sp, #0]
 8000c9c:	230d      	movs	r3, #13
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f504 7186 	add.w	r1, r4, #268	; 0x10c
 8000ca4:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8000ca8:	f7ff ff56 	bl	8000b58 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 8000cac:	8823      	ldrh	r3, [r4, #0]
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 8000cb4:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 8000cb8:	f006 f968 	bl	8006f8c <free>
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
 8000ccc:	f7ff fea0 	bl	8000a10 <BLE_command>
 8000cd0:	b918      	cbnz	r0, 8000cda <ble_init+0xfe>
	   stackInitCompleteFlag|=0x10;
 8000cd2:	8823      	ldrh	r3, [r4, #0]
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 8000cda:	4b97      	ldr	r3, [pc, #604]	; (8000f38 <ble_init+0x35c>)
 8000cdc:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000ce0:	f006 f954 	bl	8006f8c <free>
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 8000ce4:	4897      	ldr	r0, [pc, #604]	; (8000f44 <ble_init+0x368>)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2307      	movs	r3, #7
 8000cec:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
 8000cf0:	2106      	movs	r1, #6
 8000cf2:	30c8      	adds	r0, #200	; 0xc8
 8000cf4:	f7ff fe8c 	bl	8000a10 <BLE_command>
 8000cf8:	b920      	cbnz	r0, 8000d04 <ble_init+0x128>
	   stackInitCompleteFlag|=0x20;
 8000cfa:	4a8f      	ldr	r2, [pc, #572]	; (8000f38 <ble_init+0x35c>)
 8000cfc:	8813      	ldrh	r3, [r2, #0]
 8000cfe:	f043 0320 	orr.w	r3, r3, #32
 8000d02:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000d04:	4b8c      	ldr	r3, [pc, #560]	; (8000f38 <ble_init+0x35c>)
 8000d06:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000d0a:	f006 f93f 	bl	8006f8c <free>
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000d0e:	488d      	ldr	r0, [pc, #564]	; (8000f44 <ble_init+0x368>)
 8000d10:	2300      	movs	r3, #0
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2307      	movs	r3, #7
 8000d16:	f100 02d0 	add.w	r2, r0, #208	; 0xd0
 8000d1a:	2124      	movs	r1, #36	; 0x24
 8000d1c:	30d8      	adds	r0, #216	; 0xd8
 8000d1e:	f7ff fe77 	bl	8000a10 <BLE_command>
 8000d22:	b920      	cbnz	r0, 8000d2e <ble_init+0x152>
	   stackInitCompleteFlag|=0x40;
 8000d24:	4a84      	ldr	r2, [pc, #528]	; (8000f38 <ble_init+0x35c>)
 8000d26:	8813      	ldrh	r3, [r2, #0]
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000d2e:	4d82      	ldr	r5, [pc, #520]	; (8000f38 <ble_init+0x35c>)
 8000d30:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
 8000d34:	f006 f92a 	bl	8006f8c <free>
	setConnectable();
 8000d38:	f7ff fdf2 	bl	8000920 <setConnectable>
	addService(UUID_SERVICE_1,CUSTOM_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000d3c:	f505 778a 	add.w	r7, r5, #276	; 0x114
 8000d40:	4c80      	ldr	r4, [pc, #512]	; (8000f44 <ble_init+0x368>)
 8000d42:	220f      	movs	r2, #15
 8000d44:	4639      	mov	r1, r7
 8000d46:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 8000d4a:	f7ff fe93 	bl	8000a74 <addService>
	addCharacteristic(UUID_CHAR_1,CUSTOM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(22),READABLE);
 8000d4e:	f505 768c 	add.w	r6, r5, #280	; 0x118
 8000d52:	f04f 0802 	mov.w	r8, #2
 8000d56:	f8cd 8000 	str.w	r8, [sp]
 8000d5a:	2316      	movs	r3, #22
 8000d5c:	463a      	mov	r2, r7
 8000d5e:	4631      	mov	r1, r6
 8000d60:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8000d64:	f7ff feba 	bl	8000adc <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,CUSTOM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(22),VALUE1);
 8000d68:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2316      	movs	r3, #22
 8000d70:	2200      	movs	r2, #0
 8000d72:	4631      	mov	r1, r6
 8000d74:	4638      	mov	r0, r7
 8000d76:	f7ff feef 	bl	8000b58 <updateCharValue>
	addCharacteristic(UUID_CHAR_TEMP,TEMP_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000d7a:	f505 798e 	add.w	r9, r5, #284	; 0x11c
 8000d7e:	2612      	movs	r6, #18
 8000d80:	9600      	str	r6, [sp, #0]
 8000d82:	2311      	movs	r3, #17
 8000d84:	463a      	mov	r2, r7
 8000d86:	4649      	mov	r1, r9
 8000d88:	f504 709a 	add.w	r0, r4, #308	; 0x134
 8000d8c:	f7ff fea6 	bl	8000adc <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),VALUE_TEMP);
 8000d90:	f504 73a2 	add.w	r3, r4, #324	; 0x144
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2311      	movs	r3, #17
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	f7ff fedb 	bl	8000b58 <updateCharValue>
	addCharacteristic(UUID_CHAR_HUM,HUM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(16),READABLE|NOTIFIBLE);
 8000da2:	f505 7990 	add.w	r9, r5, #288	; 0x120
 8000da6:	9600      	str	r6, [sp, #0]
 8000da8:	2310      	movs	r3, #16
 8000daa:	463a      	mov	r2, r7
 8000dac:	4649      	mov	r1, r9
 8000dae:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8000db2:	f7ff fe93 	bl	8000adc <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(16),VALUE_HUM);
 8000db6:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4649      	mov	r1, r9
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	f7ff fec8 	bl	8000b58 <updateCharValue>
	addCharacteristic(UUID_CHAR_PRESS,PRESS_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(18),READABLE|NOTIFIBLE);
 8000dc8:	f505 7992 	add.w	r9, r5, #292	; 0x124
 8000dcc:	9600      	str	r6, [sp, #0]
 8000dce:	4633      	mov	r3, r6
 8000dd0:	463a      	mov	r2, r7
 8000dd2:	4649      	mov	r1, r9
 8000dd4:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 8000dd8:	f7ff fe80 	bl	8000adc <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,0,SET_CONTENT_LENGTH(18),VALUE_PRESS);
 8000ddc:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	4633      	mov	r3, r6
 8000de4:	2200      	movs	r2, #0
 8000de6:	4649      	mov	r1, r9
 8000de8:	4638      	mov	r0, r7
 8000dea:	f7ff feb5 	bl	8000b58 <updateCharValue>
	addCharacteristic(UUID_CHAR_TOF_VALUE,TOF_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),READABLE|NOTIFIBLE);
 8000dee:	f505 7994 	add.w	r9, r5, #296	; 0x128
 8000df2:	9600      	str	r6, [sp, #0]
 8000df4:	2314      	movs	r3, #20
 8000df6:	463a      	mov	r2, r7
 8000df8:	4649      	mov	r1, r9
 8000dfa:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8000dfe:	f7ff fe6d 	bl	8000adc <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,0,SET_CONTENT_LENGTH(20),TOF_VALUE);
 8000e02:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2314      	movs	r3, #20
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	4638      	mov	r0, r7
 8000e10:	f7ff fea2 	bl	8000b58 <updateCharValue>
	 addService(UUID_INERTIAL_SERVICE,INERTIAL_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3+3+3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 8000e14:	f505 7796 	add.w	r7, r5, #300	; 0x12c
 8000e18:	220c      	movs	r2, #12
 8000e1a:	4639      	mov	r1, r7
 8000e1c:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 8000e20:	f7ff fe28 	bl	8000a74 <addService>
	 addCharacteristic(UUID_CHAR_INERTIAL_NAME,NAME_INERTIAL_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(24),READABLE);
 8000e24:	f505 7998 	add.w	r9, r5, #304	; 0x130
 8000e28:	f8cd 8000 	str.w	r8, [sp]
 8000e2c:	2318      	movs	r3, #24
 8000e2e:	463a      	mov	r2, r7
 8000e30:	4649      	mov	r1, r9
 8000e32:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e36:	f7ff fe51 	bl	8000adc <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,NAME_INERTIAL_HANDLE,0,SET_CONTENT_LENGTH(24),NAME_INERTIAL_VALUE);
 8000e3a:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2318      	movs	r3, #24
 8000e42:	2200      	movs	r2, #0
 8000e44:	4649      	mov	r1, r9
 8000e46:	4638      	mov	r0, r7
 8000e48:	f7ff fe86 	bl	8000b58 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCX,ACCX_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000e4c:	f505 799a 	add.w	r9, r5, #308	; 0x134
 8000e50:	9600      	str	r6, [sp, #0]
 8000e52:	2311      	movs	r3, #17
 8000e54:	463a      	mov	r2, r7
 8000e56:	4649      	mov	r1, r9
 8000e58:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 8000e5c:	f7ff fe3e 	bl	8000adc <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCX_INERTIAL_VALUE);
 8000e60:	f504 7302 	add.w	r3, r4, #520	; 0x208
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2311      	movs	r3, #17
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	f7ff fe73 	bl	8000b58 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCY,ACCY_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000e72:	f505 799c 	add.w	r9, r5, #312	; 0x138
 8000e76:	9600      	str	r6, [sp, #0]
 8000e78:	2311      	movs	r3, #17
 8000e7a:	463a      	mov	r2, r7
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8000e82:	f7ff fe2b 	bl	8000adc <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCY_INERTIAL_VALUE);
 8000e86:	f504 730b 	add.w	r3, r4, #556	; 0x22c
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2311      	movs	r3, #17
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4649      	mov	r1, r9
 8000e92:	4638      	mov	r0, r7
 8000e94:	f7ff fe60 	bl	8000b58 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCZ,ACCZ_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000e98:	f505 799e 	add.w	r9, r5, #316	; 0x13c
 8000e9c:	9600      	str	r6, [sp, #0]
 8000e9e:	2311      	movs	r3, #17
 8000ea0:	463a      	mov	r2, r7
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	f504 7010 	add.w	r0, r4, #576	; 0x240
 8000ea8:	f7ff fe18 	bl	8000adc <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCZ_INERTIAL_VALUE);
 8000eac:	f504 7314 	add.w	r3, r4, #592	; 0x250
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2311      	movs	r3, #17
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	4638      	mov	r0, r7
 8000eba:	f7ff fe4d 	bl	8000b58 <updateCharValue>
	 addService(UUID_MAGNETIC_SERVICE,MAGNETIC_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 8000ebe:	f505 77a0 	add.w	r7, r5, #320	; 0x140
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	f504 7019 	add.w	r0, r4, #612	; 0x264
 8000eca:	f7ff fdd3 	bl	8000a74 <addService>
	 addCharacteristic(UUID_CHAR_MAGNETIC_NAME,NAME_MAGNETIC_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(23),READABLE);
 8000ece:	f505 79a2 	add.w	r9, r5, #324	; 0x144
 8000ed2:	f8cd 8000 	str.w	r8, [sp]
 8000ed6:	2317      	movs	r3, #23
 8000ed8:	463a      	mov	r2, r7
 8000eda:	4649      	mov	r1, r9
 8000edc:	f504 701d 	add.w	r0, r4, #628	; 0x274
 8000ee0:	f7ff fdfc 	bl	8000adc <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,NAME_MAGNETIC_HANDLE,0,SET_CONTENT_LENGTH(23),NAME_MAGNETIC_VALUE);
 8000ee4:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2317      	movs	r3, #23
 8000eec:	2200      	movs	r2, #0
 8000eee:	4649      	mov	r1, r9
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	f7ff fe31 	bl	8000b58 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGX,MAGX_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000ef6:	f505 78a4 	add.w	r8, r5, #328	; 0x148
 8000efa:	9600      	str	r6, [sp, #0]
 8000efc:	2311      	movs	r3, #17
 8000efe:	463a      	mov	r2, r7
 8000f00:	4641      	mov	r1, r8
 8000f02:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 8000f06:	f7ff fde9 	bl	8000adc <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),X_VALUE);
 8000f0a:	f504 732b 	add.w	r3, r4, #684	; 0x2ac
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2311      	movs	r3, #17
 8000f12:	2200      	movs	r2, #0
 8000f14:	4641      	mov	r1, r8
 8000f16:	4638      	mov	r0, r7
 8000f18:	f7ff fe1e 	bl	8000b58 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGY,MAGY_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000f1c:	f505 78a6 	add.w	r8, r5, #332	; 0x14c
 8000f20:	9600      	str	r6, [sp, #0]
 8000f22:	2311      	movs	r3, #17
 8000f24:	463a      	mov	r2, r7
 8000f26:	4641      	mov	r1, r8
 8000f28:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
 8000f2c:	f7ff fdd6 	bl	8000adc <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Y_VALUE);
 8000f30:	f504 7334 	add.w	r3, r4, #720	; 0x2d0
 8000f34:	e008      	b.n	8000f48 <ble_init+0x36c>
 8000f36:	bf00      	nop
 8000f38:	20000568 	.word	0x20000568
 8000f3c:	20000564 	.word	0x20000564
 8000f40:	20000084 	.word	0x20000084
 8000f44:	20000000 	.word	0x20000000
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2311      	movs	r3, #17
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4641      	mov	r1, r8
 8000f50:	4638      	mov	r0, r7
 8000f52:	f7ff fe01 	bl	8000b58 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGZ,MAGZ_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000f56:	f505 75a8 	add.w	r5, r5, #336	; 0x150
 8000f5a:	9600      	str	r6, [sp, #0]
 8000f5c:	2311      	movs	r3, #17
 8000f5e:	463a      	mov	r2, r7
 8000f60:	4629      	mov	r1, r5
 8000f62:	f504 7039 	add.w	r0, r4, #740	; 0x2e4
 8000f66:	f7ff fdb9 	bl	8000adc <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Z_VALUE);
 8000f6a:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
 8000f6e:	9400      	str	r4, [sp, #0]
 8000f70:	2311      	movs	r3, #17
 8000f72:	2200      	movs	r2, #0
 8000f74:	4629      	mov	r1, r5
 8000f76:	4638      	mov	r0, r7
 8000f78:	f7ff fdee 	bl	8000b58 <updateCharValue>
}
 8000f7c:	b003      	add	sp, #12
 8000f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f82:	bf00      	nop

08000f84 <updateSignedMillesimal>:
void updateSignedMillesimal(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, int16_t data){
 8000f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	4607      	mov	r7, r0
 8000f8c:	4688      	mov	r8, r1
 8000f8e:	4614      	mov	r4, r2
 8000f90:	461e      	mov	r6, r3
 8000f92:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
    newstring=(uint8_t*)malloc(offset+7);
 8000f96:	f103 0907 	add.w	r9, r3, #7
 8000f9a:	4648      	mov	r0, r9
 8000f9c:	f005 ffee 	bl	8006f7c <malloc>
 8000fa0:	4605      	mov	r5, r0
    memcpy(newstring,defaultValue,offset);
 8000fa2:	4632      	mov	r2, r6
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	f005 fff9 	bl	8006f9c <memcpy>
	if(data<0){
 8000faa:	f1ba 0f00 	cmp.w	sl, #0
 8000fae:	db67      	blt.n	8001080 <updateSignedMillesimal+0xfc>
	numberInChar[0]=43;
 8000fb0:	232b      	movs	r3, #43	; 0x2b
 8000fb2:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=data/1000;
 8000fb6:	4b55      	ldr	r3, [pc, #340]	; (800110c <updateSignedMillesimal+0x188>)
 8000fb8:	fb83 230a 	smull	r2, r3, r3, sl
 8000fbc:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8000fc0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(data-numberInChar[1]*1000)/100;
 8000fca:	4951      	ldr	r1, [pc, #324]	; (8001110 <updateSignedMillesimal+0x18c>)
 8000fcc:	fb02 f101 	mul.w	r1, r2, r1
 8000fd0:	eb0a 0001 	add.w	r0, sl, r1
 8000fd4:	4c4f      	ldr	r4, [pc, #316]	; (8001114 <updateSignedMillesimal+0x190>)
 8000fd6:	fb84 3400 	smull	r3, r4, r4, r0
 8000fda:	17c3      	asrs	r3, r0, #31
 8000fdc:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(data-numberInChar[2]*100-numberInChar[1]*1000)/10;
 8000fe6:	f06f 0463 	mvn.w	r4, #99	; 0x63
 8000fea:	fb04 a403 	mla	r4, r4, r3, sl
 8000fee:	4421      	add	r1, r4
 8000ff0:	4849      	ldr	r0, [pc, #292]	; (8001118 <updateSignedMillesimal+0x194>)
 8000ff2:	fb80 4001 	smull	r4, r0, r0, r1
 8000ff6:	17cc      	asrs	r4, r1, #31
 8000ff8:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 8000ffc:	b2e4      	uxtb	r4, r4
 8000ffe:	f88d 400b 	strb.w	r4, [sp, #11]
    numberInChar[4]=(data-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 8001002:	ebc4 1c44 	rsb	ip, r4, r4, lsl #5
 8001006:	ebc4 018c 	rsb	r1, r4, ip, lsl #2
 800100a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800100e:	ebc3 0ccc 	rsb	ip, r3, ip, lsl #3
 8001012:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001016:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
 800101a:	44d4      	add	ip, sl
 800101c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001020:	00c9      	lsls	r1, r1, #3
 8001022:	fa51 fc8c 	uxtab	ip, r1, ip
 8001026:	fa5f fc8c 	uxtb.w	ip, ip
 800102a:	f88d c00c 	strb.w	ip, [sp, #12]
    if(numberInChar[1]==0){
 800102e:	b37a      	cbz	r2, 8001090 <updateSignedMillesimal+0x10c>
        numberInChar[1]+='0';
 8001030:	3230      	adds	r2, #48	; 0x30
 8001032:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 8001036:	3330      	adds	r3, #48	; 0x30
 8001038:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 800103c:	3430      	adds	r4, #48	; 0x30
 800103e:	f88d 400b 	strb.w	r4, [sp, #11]
    	numberInChar[4]+='0';
 8001042:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001046:	f88d c00c 	strb.w	ip, [sp, #12]
    	numberInChar[5]='\"';
 800104a:	2322      	movs	r3, #34	; 0x22
 800104c:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 8001050:	237d      	movs	r3, #125	; 0x7d
 8001052:	f88d 300e 	strb.w	r3, [sp, #14]
	int flagEmpty=0;
 8001056:	2400      	movs	r4, #0
    memcpy(newstring+offset,numberInChar,7-flagEmpty);
 8001058:	f1c4 0207 	rsb	r2, r4, #7
 800105c:	a902      	add	r1, sp, #8
 800105e:	19a8      	adds	r0, r5, r6
 8001060:	f005 ff9c 	bl	8006f9c <memcpy>
	updateCharValue(service, characteristic, 0,offset+7-flagEmpty, newstring);
 8001064:	9500      	str	r5, [sp, #0]
 8001066:	eba9 0304 	sub.w	r3, r9, r4
 800106a:	2200      	movs	r2, #0
 800106c:	4641      	mov	r1, r8
 800106e:	4638      	mov	r0, r7
 8001070:	f7ff fd72 	bl	8000b58 <updateCharValue>
	free(newstring);
 8001074:	4628      	mov	r0, r5
 8001076:	f005 ff89 	bl	8006f8c <free>
}
 800107a:	b004      	add	sp, #16
 800107c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numberInChar[0]=45;
 8001080:	232d      	movs	r3, #45	; 0x2d
 8001082:	f88d 3008 	strb.w	r3, [sp, #8]
    data=-data;
 8001086:	f1ca 0c00 	rsb	ip, sl, #0
 800108a:	fa0f fa8c 	sxth.w	sl, ip
 800108e:	e792      	b.n	8000fb6 <updateSignedMillesimal+0x32>
    	if(numberInChar[2]==0){
 8001090:	bb3b      	cbnz	r3, 80010e2 <updateSignedMillesimal+0x15e>
        	if(numberInChar[3]==0){
 8001092:	b994      	cbnz	r4, 80010ba <updateSignedMillesimal+0x136>
        numberInChar[1]='0'+numberInChar[4];
 8001094:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001098:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='\"';
 800109c:	2322      	movs	r3, #34	; 0x22
 800109e:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='}';
 80010a2:	237d      	movs	r3, #125	; 0x7d
 80010a4:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]=' ';
 80010a8:	2320      	movs	r3, #32
 80010aa:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 80010ae:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 80010b2:	f88d 300e 	strb.w	r3, [sp, #14]
        		flagEmpty++;
 80010b6:	2403      	movs	r4, #3
    }break;
 80010b8:	e7ce      	b.n	8001058 <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[3];
 80010ba:	3430      	adds	r4, #48	; 0x30
 80010bc:	f88d 4009 	strb.w	r4, [sp, #9]
    	numberInChar[2]='0'+numberInChar[4];
 80010c0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80010c4:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='\"';
 80010c8:	2322      	movs	r3, #34	; 0x22
 80010ca:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='}';
 80010ce:	237d      	movs	r3, #125	; 0x7d
 80010d0:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 80010d4:	2320      	movs	r3, #32
 80010d6:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 80010da:	f88d 300e 	strb.w	r3, [sp, #14]
    		flagEmpty++;
 80010de:	2402      	movs	r4, #2
    }break;
 80010e0:	e7ba      	b.n	8001058 <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[2];
 80010e2:	3330      	adds	r3, #48	; 0x30
 80010e4:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 80010e8:	3430      	adds	r4, #48	; 0x30
 80010ea:	f88d 400a 	strb.w	r4, [sp, #10]
    	numberInChar[3]='0'+numberInChar[4];
 80010ee:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80010f2:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='\"';
 80010f6:	2322      	movs	r3, #34	; 0x22
 80010f8:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 80010fc:	237d      	movs	r3, #125	; 0x7d
 80010fe:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8001102:	2320      	movs	r3, #32
 8001104:	f88d 300e 	strb.w	r3, [sp, #14]
    	flagEmpty++;
 8001108:	2401      	movs	r4, #1
    }break;
 800110a:	e7a5      	b.n	8001058 <updateSignedMillesimal+0xd4>
 800110c:	10624dd3 	.word	0x10624dd3
 8001110:	fffffc18 	.word	0xfffffc18
 8001114:	51eb851f 	.word	0x51eb851f
 8001118:	66666667 	.word	0x66666667

0800111c <updateSignedFloat>:
void updateSignedFloat(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, float data){
 800111c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001120:	ed2d 8b02 	vpush	{d8}
 8001124:	b085      	sub	sp, #20
 8001126:	4606      	mov	r6, r0
 8001128:	460f      	mov	r7, r1
 800112a:	4691      	mov	r9, r2
 800112c:	461d      	mov	r5, r3
 800112e:	eeb0 8a40 	vmov.f32	s16, s0
	 newstring=(uint8_t*)malloc(offset+8);
 8001132:	f103 0808 	add.w	r8, r3, #8
 8001136:	4640      	mov	r0, r8
 8001138:	f005 ff20 	bl	8006f7c <malloc>
 800113c:	4604      	mov	r4, r0
	 memcpy(newstring,defaultValue,offset);
 800113e:	462a      	mov	r2, r5
 8001140:	4649      	mov	r1, r9
 8001142:	f005 ff2b 	bl	8006f9c <memcpy>
    int16_t newdata=(int16_t)(data*10);
 8001146:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800114a:	ee28 8a00 	vmul.f32	s16, s16, s0
 800114e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8001152:	ee18 3a10 	vmov	r3, s16
 8001156:	b219      	sxth	r1, r3
	if(newdata<0){
 8001158:	2900      	cmp	r1, #0
 800115a:	db71      	blt.n	8001240 <updateSignedFloat+0x124>
	numberInChar[0]=43;
 800115c:	232b      	movs	r3, #43	; 0x2b
 800115e:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=newdata/1000;
 8001162:	4b55      	ldr	r3, [pc, #340]	; (80012b8 <updateSignedFloat+0x19c>)
 8001164:	fb83 2301 	smull	r2, r3, r3, r1
 8001168:	17ca      	asrs	r2, r1, #31
 800116a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(newdata-numberInChar[1]*1000)/100;
 8001174:	4851      	ldr	r0, [pc, #324]	; (80012bc <updateSignedFloat+0x1a0>)
 8001176:	fb02 f000 	mul.w	r0, r2, r0
 800117a:	eb01 0c00 	add.w	ip, r1, r0
 800117e:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <updateSignedFloat+0x1a4>)
 8001180:	fb83 3e0c 	smull	r3, lr, r3, ip
 8001184:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8001188:	ebc3 136e 	rsb	r3, r3, lr, asr #5
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(newdata-numberInChar[2]*100-numberInChar[1]*1000)/10;
 8001192:	f06f 0c63 	mvn.w	ip, #99	; 0x63
 8001196:	fb0c 1c03 	mla	ip, ip, r3, r1
 800119a:	4460      	add	r0, ip
 800119c:	f8df e124 	ldr.w	lr, [pc, #292]	; 80012c4 <updateSignedFloat+0x1a8>
 80011a0:	fb8e ce00 	smull	ip, lr, lr, r0
 80011a4:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 80011a8:	ebcc 0cae 	rsb	ip, ip, lr, asr #2
 80011ac:	fa5f fc8c 	uxtb.w	ip, ip
 80011b0:	f88d c00b 	strb.w	ip, [sp, #11]
    numberInChar[5]=(newdata-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 80011b4:	ebcc 1e4c 	rsb	lr, ip, ip, lsl #5
 80011b8:	ebcc 008e 	rsb	r0, ip, lr, lsl #2
 80011bc:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80011c0:	ebc3 0ece 	rsb	lr, r3, lr, lsl #3
 80011c4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011c8:	eb0e 0e40 	add.w	lr, lr, r0, lsl #1
 80011cc:	448e      	add	lr, r1
 80011ce:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80011d2:	00c9      	lsls	r1, r1, #3
 80011d4:	fa51 fe8e 	uxtab	lr, r1, lr
 80011d8:	fa5f fe8e 	uxtb.w	lr, lr
 80011dc:	f88d e00d 	strb.w	lr, [sp, #13]
    if(numberInChar[1]==0){
 80011e0:	b3b2      	cbz	r2, 8001250 <updateSignedFloat+0x134>
        numberInChar[1]+='0';
 80011e2:	3230      	adds	r2, #48	; 0x30
 80011e4:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 80011e8:	3330      	adds	r3, #48	; 0x30
 80011ea:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 80011ee:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80011f2:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='.';
 80011f6:	232e      	movs	r3, #46	; 0x2e
 80011f8:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]+='0';
 80011fc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001200:	f88d e00d 	strb.w	lr, [sp, #13]
    	numberInChar[6]='\"';
 8001204:	2322      	movs	r3, #34	; 0x22
 8001206:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]='}';
 800120a:	237d      	movs	r3, #125	; 0x7d
 800120c:	f88d 300f 	strb.w	r3, [sp, #15]
	int flagEmpty=0;
 8001210:	f04f 0900 	mov.w	r9, #0
    memcpy(newstring+offset,numberInChar,8-flagEmpty);
 8001214:	f1c9 0208 	rsb	r2, r9, #8
 8001218:	a902      	add	r1, sp, #8
 800121a:	1960      	adds	r0, r4, r5
 800121c:	f005 febe 	bl	8006f9c <memcpy>
	updateCharValue(service, characteristic, 0, offset+8-flagEmpty, newstring);
 8001220:	9400      	str	r4, [sp, #0]
 8001222:	eba8 0309 	sub.w	r3, r8, r9
 8001226:	2200      	movs	r2, #0
 8001228:	4639      	mov	r1, r7
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff fc94 	bl	8000b58 <updateCharValue>
	free(newstring);
 8001230:	4620      	mov	r0, r4
 8001232:	f005 feab 	bl	8006f8c <free>
}
 8001236:	b005      	add	sp, #20
 8001238:	ecbd 8b02 	vpop	{d8}
 800123c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    numberInChar[0]=45;
 8001240:	232d      	movs	r3, #45	; 0x2d
 8001242:	f88d 3008 	strb.w	r3, [sp, #8]
    newdata=-newdata;
 8001246:	f1c1 0e00 	rsb	lr, r1, #0
 800124a:	fa0f f18e 	sxth.w	r1, lr
 800124e:	e788      	b.n	8001162 <updateSignedFloat+0x46>
    	if(numberInChar[2]==0){
 8001250:	b9c3      	cbnz	r3, 8001284 <updateSignedFloat+0x168>
        numberInChar[1]='0'+numberInChar[3];
 8001252:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001256:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='.';
 800125a:	232e      	movs	r3, #46	; 0x2e
 800125c:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='0'+numberInChar[5];
 8001260:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001264:	f88d e00b 	strb.w	lr, [sp, #11]
    	numberInChar[4]='\"';
 8001268:	2322      	movs	r3, #34	; 0x22
 800126a:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 800126e:	237d      	movs	r3, #125	; 0x7d
 8001270:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8001274:	2320      	movs	r3, #32
 8001276:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 800127a:	f88d 300f 	strb.w	r3, [sp, #15]
    		flagEmpty++;
 800127e:	f04f 0902 	mov.w	r9, #2
    }break;
 8001282:	e7c7      	b.n	8001214 <updateSignedFloat+0xf8>
        numberInChar[1]='0'+numberInChar[2];
 8001284:	3330      	adds	r3, #48	; 0x30
 8001286:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 800128a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800128e:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='.';
 8001292:	232e      	movs	r3, #46	; 0x2e
 8001294:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='0'+numberInChar[5];
 8001298:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800129c:	f88d e00c 	strb.w	lr, [sp, #12]
    	numberInChar[5]='\"';
 80012a0:	2322      	movs	r3, #34	; 0x22
 80012a2:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 80012a6:	237d      	movs	r3, #125	; 0x7d
 80012a8:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 80012ac:	2320      	movs	r3, #32
 80012ae:	f88d 300f 	strb.w	r3, [sp, #15]
    	flagEmpty++;
 80012b2:	f04f 0901 	mov.w	r9, #1
    }break;
 80012b6:	e7ad      	b.n	8001214 <updateSignedFloat+0xf8>
 80012b8:	10624dd3 	.word	0x10624dd3
 80012bc:	fffffc18 	.word	0xfffffc18
 80012c0:	51eb851f 	.word	0x51eb851f
 80012c4:	66666667 	.word	0x66666667

080012c8 <buttonToggled>:
#include "state_machine.h"

static uint8_t button = 0;

uint8_t buttonToggled()
{
 80012c8:	b508      	push	{r3, lr}
	uint8_t newRead = readDigital(MF_Button);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f000 f916 	bl	80014fc <readDigital>

	uint8_t calc = newRead && !button;
 80012d0:	4602      	mov	r2, r0
 80012d2:	b120      	cbz	r0, 80012de <buttonToggled+0x16>
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <buttonToggled+0x24>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b12b      	cbz	r3, 80012e6 <buttonToggled+0x1e>
 80012da:	2000      	movs	r0, #0
 80012dc:	e000      	b.n	80012e0 <buttonToggled+0x18>
 80012de:	2000      	movs	r0, #0

	button = newRead;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <buttonToggled+0x24>)
 80012e2:	701a      	strb	r2, [r3, #0]

	return calc;
}
 80012e4:	bd08      	pop	{r3, pc}
	uint8_t calc = newRead && !button;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e7fa      	b.n	80012e0 <buttonToggled+0x18>
 80012ea:	bf00      	nop
 80012ec:	200006da 	.word	0x200006da

080012f0 <testBSPfunctions>:
static float temperature = 0, humidity = 0, pressure = 0,
		*acceleremeter = NULL, *magnetometer = NULL , *gyroscope = NULL;


void testBSPfunctions()
{
 80012f0:	b510      	push	{r4, lr}
 80012f2:	b090      	sub	sp, #64	; 0x40
    char Test[50];
    sprintf(Test, "Temperature = %d\n\r", (int)temperature);
 80012f4:	4c3c      	ldr	r4, [pc, #240]	; (80013e8 <testBSPfunctions+0xf8>)
 80012f6:	edd4 7a00 	vldr	s15, [r4]
 80012fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fe:	ee17 2a90 	vmov	r2, s15
 8001302:	493a      	ldr	r1, [pc, #232]	; (80013ec <testBSPfunctions+0xfc>)
 8001304:	a803      	add	r0, sp, #12
 8001306:	f005 ff57 	bl	80071b8 <siprintf>
    appendMessage(Test);
 800130a:	a803      	add	r0, sp, #12
 800130c:	f001 fb88 	bl	8002a20 <appendMessage>
    sprintf(Test, "Humidity = %d\n\r", (int)humidity);
 8001310:	edd4 7a01 	vldr	s15, [r4, #4]
 8001314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001318:	ee17 2a90 	vmov	r2, s15
 800131c:	4934      	ldr	r1, [pc, #208]	; (80013f0 <testBSPfunctions+0x100>)
 800131e:	a803      	add	r0, sp, #12
 8001320:	f005 ff4a 	bl	80071b8 <siprintf>
    appendMessage(Test);
 8001324:	a803      	add	r0, sp, #12
 8001326:	f001 fb7b 	bl	8002a20 <appendMessage>
    sprintf(Test, "Pressure = %d\n\r", (int)pressure);
 800132a:	edd4 7a02 	vldr	s15, [r4, #8]
 800132e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001332:	ee17 2a90 	vmov	r2, s15
 8001336:	492f      	ldr	r1, [pc, #188]	; (80013f4 <testBSPfunctions+0x104>)
 8001338:	a803      	add	r0, sp, #12
 800133a:	f005 ff3d 	bl	80071b8 <siprintf>
    appendMessage(Test);
 800133e:	a803      	add	r0, sp, #12
 8001340:	f001 fb6e 	bl	8002a20 <appendMessage>
    sprintf(Test, "Accellerometer = %d,%d,%d\n\r",
    	(int)acceleremeter[0], (int)acceleremeter[1], (int)acceleremeter[2]);
 8001344:	68e3      	ldr	r3, [r4, #12]
 8001346:	ed93 7a00 	vldr	s14, [r3]
 800134a:	edd3 6a01 	vldr	s13, [r3, #4]
 800134e:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(Test, "Accellerometer = %d,%d,%d\n\r",
 8001352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001356:	edcd 7a00 	vstr	s15, [sp]
 800135a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800135e:	ee17 3a90 	vmov	r3, s15
 8001362:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001366:	ee17 2a90 	vmov	r2, s15
 800136a:	4923      	ldr	r1, [pc, #140]	; (80013f8 <testBSPfunctions+0x108>)
 800136c:	a803      	add	r0, sp, #12
 800136e:	f005 ff23 	bl	80071b8 <siprintf>
    appendMessage(Test);
 8001372:	a803      	add	r0, sp, #12
 8001374:	f001 fb54 	bl	8002a20 <appendMessage>

    sprintf(Test, "Magneto = %d,%d,%d\n\r",
    	(int)magnetometer[0], (int)magnetometer[1], (int)magnetometer[2]);
 8001378:	6923      	ldr	r3, [r4, #16]
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001382:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(Test, "Magneto = %d,%d,%d\n\r",
 8001386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138a:	edcd 7a00 	vstr	s15, [sp]
 800138e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001392:	ee17 3a90 	vmov	r3, s15
 8001396:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800139a:	ee17 2a90 	vmov	r2, s15
 800139e:	4917      	ldr	r1, [pc, #92]	; (80013fc <testBSPfunctions+0x10c>)
 80013a0:	a803      	add	r0, sp, #12
 80013a2:	f005 ff09 	bl	80071b8 <siprintf>
    appendMessage(Test);
 80013a6:	a803      	add	r0, sp, #12
 80013a8:	f001 fb3a 	bl	8002a20 <appendMessage>

    sprintf(Test, "Gyro = %d,%d,%d\n\r",
    	(int)gyroscope[0], (int)gyroscope[1], (int)gyroscope[2]);
 80013ac:	6963      	ldr	r3, [r4, #20]
 80013ae:	ed93 7a00 	vldr	s14, [r3]
 80013b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80013b6:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(Test, "Gyro = %d,%d,%d\n\r",
 80013ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013be:	edcd 7a00 	vstr	s15, [sp]
 80013c2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80013c6:	ee17 3a90 	vmov	r3, s15
 80013ca:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80013ce:	ee17 2a90 	vmov	r2, s15
 80013d2:	490b      	ldr	r1, [pc, #44]	; (8001400 <testBSPfunctions+0x110>)
 80013d4:	a803      	add	r0, sp, #12
 80013d6:	f005 feef 	bl	80071b8 <siprintf>
    appendMessage(Test);
 80013da:	a803      	add	r0, sp, #12
 80013dc:	f001 fb20 	bl	8002a20 <appendMessage>

    sendMessage();
 80013e0:	f001 fb0c 	bl	80029fc <sendMessage>

}
 80013e4:	b010      	add	sp, #64	; 0x40
 80013e6:	bd10      	pop	{r4, pc}
 80013e8:	200006dc 	.word	0x200006dc
 80013ec:	08007928 	.word	0x08007928
 80013f0:	0800793c 	.word	0x0800793c
 80013f4:	0800794c 	.word	0x0800794c
 80013f8:	0800795c 	.word	0x0800795c
 80013fc:	08007978 	.word	0x08007978
 8001400:	08007990 	.word	0x08007990

08001404 <idle_enter>:



void idle_enter()
{
 8001404:	b508      	push	{r3, lr}
    setTimer(TF_Main, testBSPfunctions, 3000);
 8001406:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800140a:	2300      	movs	r3, #0
 800140c:	4908      	ldr	r1, [pc, #32]	; (8001430 <idle_enter+0x2c>)
 800140e:	2000      	movs	r0, #0
 8001410:	f001 fa4a 	bl	80028a8 <setTimer>

    setDigital(MF_led2, GPIO_PIN_RESET);
 8001414:	2100      	movs	r1, #0
 8001416:	2003      	movs	r0, #3
 8001418:	f000 f860 	bl	80014dc <setDigital>

    setDigital(MF_led1,GPIO_PIN_SET);
 800141c:	2101      	movs	r1, #1
 800141e:	2002      	movs	r0, #2
 8001420:	f000 f85c 	bl	80014dc <setDigital>

    setExitCondition(ST_BLE_CHECK, buttonToggled);
 8001424:	4903      	ldr	r1, [pc, #12]	; (8001434 <idle_enter+0x30>)
 8001426:	2003      	movs	r0, #3
 8001428:	f000 ffaa 	bl	8002380 <setExitCondition>
}
 800142c:	bd08      	pop	{r3, pc}
 800142e:	bf00      	nop
 8001430:	080012f1 	.word	0x080012f1
 8001434:	080012c9 	.word	0x080012c9

08001438 <idle_beforeLoop>:


void idle_beforeLoop(uint8_t deltaMs)
{
 8001438:	b510      	push	{r4, lr}
	temperature = bspGetValue(BSP_temperature);
 800143a:	2001      	movs	r0, #1
 800143c:	f000 f870 	bl	8001520 <bspGetValue>
 8001440:	4c0c      	ldr	r4, [pc, #48]	; (8001474 <idle_beforeLoop+0x3c>)
 8001442:	ed84 0a00 	vstr	s0, [r4]
	humidity = bspGetValue(BSP_humidity);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f86a 	bl	8001520 <bspGetValue>
 800144c:	ed84 0a01 	vstr	s0, [r4, #4]
	pressure = bspGetValue(BSP_pressure);
 8001450:	2002      	movs	r0, #2
 8001452:	f000 f865 	bl	8001520 <bspGetValue>
 8001456:	ed84 0a02 	vstr	s0, [r4, #8]
	magnetometer = bspGetTripleValue(BSPT_magneto);
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f870 	bl	8001540 <bspGetTripleValue>
 8001460:	6120      	str	r0, [r4, #16]
	acceleremeter = bspGetTripleValue(BSPT_accellero);
 8001462:	2002      	movs	r0, #2
 8001464:	f000 f86c 	bl	8001540 <bspGetTripleValue>
 8001468:	60e0      	str	r0, [r4, #12]
	gyroscope = bspGetTripleValue(BSPT_gyro);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 f868 	bl	8001540 <bspGetTripleValue>
 8001470:	6160      	str	r0, [r4, #20]
}
 8001472:	bd10      	pop	{r4, pc}
 8001474:	200006dc 	.word	0x200006dc

08001478 <idle_loop>:


void idle_loop(uint8_t deltaMs)
{

}
 8001478:	4770      	bx	lr

0800147a <idle_afterLoop>:

void idle_afterLoop(uint8_t deltaMs)
{
}
 800147a:	4770      	bx	lr

0800147c <bspFunctionInit>:

static int16_t placeHolderInt16[3];
static float placeHolderFloat[3];

void bspFunctionInit()
{
 800147c:	b510      	push	{r4, lr}
    BSP_HSENSOR_Init();
 800147e:	f001 ffaf 	bl	80033e0 <BSP_HSENSOR_Init>
    bspFunctionArray[BSP_humidity] = &BSP_HSENSOR_ReadHumidity;
 8001482:	4c09      	ldr	r4, [pc, #36]	; (80014a8 <bspFunctionInit+0x2c>)
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <bspFunctionInit+0x30>)
 8001486:	6023      	str	r3, [r4, #0]
    BSP_TSENSOR_Init();
 8001488:	f002 f81a 	bl	80034c0 <BSP_TSENSOR_Init>
    bspFunctionArray[BSP_temperature] = &BSP_TSENSOR_ReadTemp;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <bspFunctionInit+0x34>)
 800148e:	6063      	str	r3, [r4, #4]
    BSP_PSENSOR_Init();
 8001490:	f001 fff6 	bl	8003480 <BSP_PSENSOR_Init>
    bspFunctionArray[BSP_pressure] = &BSP_PSENSOR_ReadPressure;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <bspFunctionInit+0x38>)
 8001496:	60a3      	str	r3, [r4, #8]
    BSP_ACCELERO_Init();
 8001498:	f001 ff3e 	bl	8003318 <BSP_ACCELERO_Init>
    BSP_GYRO_Init();
 800149c:	f001 ff6c 	bl	8003378 <BSP_GYRO_Init>
    BSP_MAGNETO_Init();
 80014a0:	f001 ffbe 	bl	8003420 <BSP_MAGNETO_Init>
}
 80014a4:	bd10      	pop	{r4, pc}
 80014a6:	bf00      	nop
 80014a8:	200006f8 	.word	0x200006f8
 80014ac:	0800340d 	.word	0x0800340d
 80014b0:	080034e5 	.word	0x080034e5
 80014b4:	080034ad 	.word	0x080034ad

080014b8 <setMappedFunction>:

void setMappedFunction(MF mf, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, double offset, double factor)
{
 80014b8:	b410      	push	{r4}
    ios_manager[mf].m_type = GPIOx;
 80014ba:	4c07      	ldr	r4, [pc, #28]	; (80014d8 <setMappedFunction+0x20>)
 80014bc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80014c0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80014c4:	6119      	str	r1, [r3, #16]
    ios_manager[mf].m_pin = GPIO_Pin;
 80014c6:	829a      	strh	r2, [r3, #20]
    ios_manager[mf].m_offset = offset;
 80014c8:	ed83 0b08 	vstr	d0, [r3, #32]
    ios_manager[mf].m_factor = factor;
 80014cc:	ed83 1b06 	vstr	d1, [r3, #24]
}
 80014d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200006f8 	.word	0x200006f8

080014dc <setDigital>:

void setDigital(MF mf, GPIO_PinState state)
{
 80014dc:	b508      	push	{r3, lr}
 80014de:	460a      	mov	r2, r1
    HAL_GPIO_WritePin(ios_manager[mf].m_type, ios_manager[mf].m_pin, state);
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <setDigital+0x1c>)
 80014e2:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80014e6:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 80014ea:	f8bc 1014 	ldrh.w	r1, [ip, #20]
 80014ee:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80014f2:	f002 fa56 	bl	80039a2 <HAL_GPIO_WritePin>
}
 80014f6:	bd08      	pop	{r3, pc}
 80014f8:	200006f8 	.word	0x200006f8

080014fc <readDigital>:

GPIO_PinState readDigital(MF mf)
{

    if (mf >= MF_COUNT)
 80014fc:	2807      	cmp	r0, #7
 80014fe:	d901      	bls.n	8001504 <readDigital+0x8>
        return GPIO_PIN_RESET;
 8001500:	2000      	movs	r0, #0
    return HAL_GPIO_ReadPin(ios_manager[mf].m_type, ios_manager[mf].m_pin);
}
 8001502:	4770      	bx	lr
{
 8001504:	b508      	push	{r3, lr}
    return HAL_GPIO_ReadPin(ios_manager[mf].m_type, ios_manager[mf].m_pin);
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <readDigital+0x20>)
 8001508:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800150c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001510:	8a91      	ldrh	r1, [r2, #20]
 8001512:	6910      	ldr	r0, [r2, #16]
 8001514:	f002 fa3e 	bl	8003994 <HAL_GPIO_ReadPin>
}
 8001518:	bd08      	pop	{r3, pc}
 800151a:	bf00      	nop
 800151c:	200006f8 	.word	0x200006f8

08001520 <bspGetValue>:

float bspGetValue(bspF function)
{
    if (function >= BSP_COUNT)
 8001520:	2802      	cmp	r0, #2
 8001522:	d805      	bhi.n	8001530 <bspGetValue+0x10>
{
 8001524:	b508      	push	{r3, lr}
        return 404;
    return (bspFunctionArray[function])();
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <bspGetValue+0x18>)
 8001528:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800152c:	4798      	blx	r3
}
 800152e:	bd08      	pop	{r3, pc}
        return 404;
 8001530:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800153c <bspGetValue+0x1c>
}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200006f8 	.word	0x200006f8
 800153c:	43ca0000 	.word	0x43ca0000

08001540 <bspGetTripleValue>:

float *bspGetTripleValue(bspTF function)
{
    if (function >= BSPT_COUNT)
 8001540:	2802      	cmp	r0, #2
 8001542:	d827      	bhi.n	8001594 <bspGetTripleValue+0x54>
{
 8001544:	b510      	push	{r4, lr}
        return NULL;
    switch (function)
 8001546:	2801      	cmp	r0, #1
 8001548:	d004      	beq.n	8001554 <bspGetTripleValue+0x14>
 800154a:	2802      	cmp	r0, #2
 800154c:	d00c      	beq.n	8001568 <bspGetTripleValue+0x28>
 800154e:	b138      	cbz	r0, 8001560 <bspGetTripleValue+0x20>
{
 8001550:	2300      	movs	r3, #0
 8001552:	e01b      	b.n	800158c <bspGetTripleValue+0x4c>
    {
    case BSPT_gyro:
        BSP_GYRO_GetXYZ(placeHolderFloat);
 8001554:	4c10      	ldr	r4, [pc, #64]	; (8001598 <bspGetTripleValue+0x58>)
 8001556:	4620      	mov	r0, r4
 8001558:	f001 ff38 	bl	80033cc <BSP_GYRO_GetXYZ>
        return placeHolderFloat;
 800155c:	4620      	mov	r0, r4
 800155e:	e018      	b.n	8001592 <bspGetTripleValue+0x52>

    case BSPT_magneto:
        BSP_MAGNETO_GetXYZ(placeHolderInt16);
 8001560:	480e      	ldr	r0, [pc, #56]	; (800159c <bspGetTripleValue+0x5c>)
 8001562:	f001 ff83 	bl	800346c <BSP_MAGNETO_GetXYZ>
        break;
 8001566:	e7f3      	b.n	8001550 <bspGetTripleValue+0x10>

    case BSPT_accellero:
        BSP_ACCELERO_AccGetXYZ(placeHolderInt16);
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <bspGetTripleValue+0x5c>)
 800156a:	f001 fefb 	bl	8003364 <BSP_ACCELERO_AccGetXYZ>
        break;
 800156e:	e7ef      	b.n	8001550 <bspGetTripleValue+0x10>
    default:
        break;
    }

    for (int i = 0; i < 3; i++)
        placeHolderFloat[i] = placeHolderInt16[i];
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <bspGetTripleValue+0x60>)
 8001572:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8001576:	f9b1 10dc 	ldrsh.w	r1, [r1, #220]	; 0xdc
 800157a:	ee07 1a90 	vmov	s15, r1
 800157e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001586:	edc2 7a34 	vstr	s15, [r2, #208]	; 0xd0
    for (int i = 0; i < 3; i++)
 800158a:	3301      	adds	r3, #1
 800158c:	2b02      	cmp	r3, #2
 800158e:	ddef      	ble.n	8001570 <bspGetTripleValue+0x30>
    return placeHolderFloat;
 8001590:	4801      	ldr	r0, [pc, #4]	; (8001598 <bspGetTripleValue+0x58>)
}
 8001592:	bd10      	pop	{r4, pc}
        return NULL;
 8001594:	2000      	movs	r0, #0
}
 8001596:	4770      	bx	lr
 8001598:	200007c8 	.word	0x200007c8
 800159c:	200007d4 	.word	0x200007d4
 80015a0:	200006f8 	.word	0x200006f8

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015a8:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	2400      	movs	r4, #0
 80015ac:	9405      	str	r4, [sp, #20]
 80015ae:	9406      	str	r4, [sp, #24]
 80015b0:	9407      	str	r4, [sp, #28]
 80015b2:	9408      	str	r4, [sp, #32]
 80015b4:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b6:	4b45      	ldr	r3, [pc, #276]	; (80016cc <MX_GPIO_Init+0x128>)
 80015b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ba:	f042 0210 	orr.w	r2, r2, #16
 80015be:	64da      	str	r2, [r3, #76]	; 0x4c
 80015c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c2:	f002 0210 	and.w	r2, r2, #16
 80015c6:	9200      	str	r2, [sp, #0]
 80015c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015cc:	f042 0202 	orr.w	r2, r2, #2
 80015d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80015d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015d4:	f002 0202 	and.w	r2, r2, #2
 80015d8:	9201      	str	r2, [sp, #4]
 80015da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015de:	f042 0208 	orr.w	r2, r2, #8
 80015e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80015e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e6:	f002 0208 	and.w	r2, r2, #8
 80015ea:	9202      	str	r2, [sp, #8]
 80015ec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f0:	f042 0204 	orr.w	r2, r2, #4
 80015f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80015f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f8:	f002 0204 	and.w	r2, r2, #4
 80015fc:	9203      	str	r2, [sp, #12]
 80015fe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	9304      	str	r3, [sp, #16]
 8001610:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001612:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80016dc <MX_GPIO_Init+0x138>
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161c:	4648      	mov	r0, r9
 800161e:	f002 f9c0 	bl	80039a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port, TOF_RESET_Pin, GPIO_PIN_RESET);
 8001622:	4e2b      	ldr	r6, [pc, #172]	; (80016d0 <MX_GPIO_Init+0x12c>)
 8001624:	4622      	mov	r2, r4
 8001626:	2140      	movs	r1, #64	; 0x40
 8001628:	4630      	mov	r0, r6
 800162a:	f002 f9ba 	bl	80039a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f002 f9b3 	bl	80039a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 800163c:	f04f 0840 	mov.w	r8, #64	; 0x40
 8001640:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <MX_GPIO_Init+0x130>)
 8001646:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800164a:	a905      	add	r1, sp, #20
 800164c:	4822      	ldr	r0, [pc, #136]	; (80016d8 <MX_GPIO_Init+0x134>)
 800164e:	f002 f81b 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001652:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8001656:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2501      	movs	r5, #1
 800165a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001662:	a905      	add	r1, sp, #20
 8001664:	4648      	mov	r0, r9
 8001666:	f002 f80f 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_RESET_Pin */
  GPIO_InitStruct.Pin = TOF_RESET_Pin;
 800166a:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(TOF_RESET_GPIO_Port, &GPIO_InitStruct);
 8001674:	a905      	add	r1, sp, #20
 8001676:	4630      	mov	r0, r6
 8001678:	f002 f806 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RESET_Pin */
  GPIO_InitStruct.Pin = BLE_RESET_Pin;
 800167c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001680:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BLE_RESET_GPIO_Port, &GPIO_InitStruct);
 8001688:	a905      	add	r1, sp, #20
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f001 fffb 	bl	8003688 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001692:	2320      	movs	r3, #32
 8001694:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	a905      	add	r1, sp, #20
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f001 fff1 	bl	8003688 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016a6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	a905      	add	r1, sp, #20
 80016ae:	4630      	mov	r0, r6
 80016b0:	f001 ffea 	bl	8003688 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016b4:	4622      	mov	r2, r4
 80016b6:	4621      	mov	r1, r4
 80016b8:	2017      	movs	r0, #23
 80016ba:	f001 ff8b 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016be:	2017      	movs	r0, #23
 80016c0:	f001 ffc0 	bl	8003644 <HAL_NVIC_EnableIRQ>

}
 80016c4:	b00b      	add	sp, #44	; 0x2c
 80016c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000800 	.word	0x48000800
 80016d4:	10110000 	.word	0x10110000
 80016d8:	48001000 	.word	0x48001000
 80016dc:	48000c00 	.word	0x48000c00

080016e0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <Error_Handler+0x2>

080016e4 <MX_SPI3_Init>:
{
 80016e4:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 80016e6:	480f      	ldr	r0, [pc, #60]	; (8001724 <MX_SPI3_Init+0x40>)
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_SPI3_Init+0x44>)
 80016ea:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016ec:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016f0:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016f2:	2300      	movs	r3, #0
 80016f4:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016fa:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016fc:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016fe:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001704:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001706:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001708:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800170e:	2207      	movs	r2, #7
 8001710:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001712:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001714:	2308      	movs	r3, #8
 8001716:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001718:	f004 f881 	bl	800581e <HAL_SPI_Init>
 800171c:	b900      	cbnz	r0, 8001720 <MX_SPI3_Init+0x3c>
}
 800171e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001720:	f7ff ffde 	bl	80016e0 <Error_Handler>
 8001724:	200007dc 	.word	0x200007dc
 8001728:	40003c00 	.word	0x40003c00

0800172c <MX_I2C2_Init>:
{
 800172c:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800172e:	4812      	ldr	r0, [pc, #72]	; (8001778 <MX_I2C2_Init+0x4c>)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_I2C2_Init+0x50>)
 8001732:	6643      	str	r3, [r0, #100]	; 0x64
  hi2c2.Init.Timing = 0x2000090E;
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_I2C2_Init+0x54>)
 8001736:	6683      	str	r3, [r0, #104]	; 0x68
  hi2c2.Init.OwnAddress1 = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	66c3      	str	r3, [r0, #108]	; 0x6c
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173c:	2201      	movs	r2, #1
 800173e:	6702      	str	r2, [r0, #112]	; 0x70
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	6743      	str	r3, [r0, #116]	; 0x74
  hi2c2.Init.OwnAddress2 = 0;
 8001742:	6783      	str	r3, [r0, #120]	; 0x78
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001744:	67c3      	str	r3, [r0, #124]	; 0x7c
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001746:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800174e:	3064      	adds	r0, #100	; 0x64
 8001750:	f002 faf8 	bl	8003d44 <HAL_I2C_Init>
 8001754:	b950      	cbnz	r0, 800176c <MX_I2C2_Init+0x40>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <MX_I2C2_Init+0x58>)
 800175a:	f002 fe93 	bl	8004484 <HAL_I2CEx_ConfigAnalogFilter>
 800175e:	b938      	cbnz	r0, 8001770 <MX_I2C2_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <MX_I2C2_Init+0x58>)
 8001764:	f002 febc 	bl	80044e0 <HAL_I2CEx_ConfigDigitalFilter>
 8001768:	b920      	cbnz	r0, 8001774 <MX_I2C2_Init+0x48>
}
 800176a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800176c:	f7ff ffb8 	bl	80016e0 <Error_Handler>
    Error_Handler();
 8001770:	f7ff ffb6 	bl	80016e0 <Error_Handler>
    Error_Handler();
 8001774:	f7ff ffb4 	bl	80016e0 <Error_Handler>
 8001778:	200007dc 	.word	0x200007dc
 800177c:	40005800 	.word	0x40005800
 8001780:	2000090e 	.word	0x2000090e
 8001784:	20000840 	.word	0x20000840

08001788 <MX_TIM6_Init>:
{
 8001788:	b500      	push	{lr}
 800178a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	2300      	movs	r3, #0
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	9303      	str	r3, [sp, #12]
  htim6.Instance = TIM6;
 8001794:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_TIM6_Init+0x54>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <MX_TIM6_Init+0x58>)
 8001798:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  htim6.Init.Prescaler = 3999;
 800179c:	f640 729f 	movw	r2, #3999	; 0xf9f
 80017a0:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  htim6.Init.Period = 1000;
 80017a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ac:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017b4:	30b0      	adds	r0, #176	; 0xb0
 80017b6:	f004 fdc3 	bl	8006340 <HAL_TIM_Base_Init>
 80017ba:	b950      	cbnz	r0, 80017d2 <MX_TIM6_Init+0x4a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017c2:	a901      	add	r1, sp, #4
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM6_Init+0x5c>)
 80017c6:	f004 ffb5 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 80017ca:	b920      	cbnz	r0, 80017d6 <MX_TIM6_Init+0x4e>
}
 80017cc:	b005      	add	sp, #20
 80017ce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017d2:	f7ff ff85 	bl	80016e0 <Error_Handler>
    Error_Handler();
 80017d6:	f7ff ff83 	bl	80016e0 <Error_Handler>
 80017da:	bf00      	nop
 80017dc:	200007dc 	.word	0x200007dc
 80017e0:	40001000 	.word	0x40001000
 80017e4:	2000088c 	.word	0x2000088c

080017e8 <MX_TIM15_Init>:
{
 80017e8:	b510      	push	{r4, lr}
 80017ea:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ec:	2400      	movs	r4, #0
 80017ee:	9413      	str	r4, [sp, #76]	; 0x4c
 80017f0:	9414      	str	r4, [sp, #80]	; 0x50
 80017f2:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f4:	940c      	str	r4, [sp, #48]	; 0x30
 80017f6:	940d      	str	r4, [sp, #52]	; 0x34
 80017f8:	940e      	str	r4, [sp, #56]	; 0x38
 80017fa:	940f      	str	r4, [sp, #60]	; 0x3c
 80017fc:	9410      	str	r4, [sp, #64]	; 0x40
 80017fe:	9411      	str	r4, [sp, #68]	; 0x44
 8001800:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001802:	222c      	movs	r2, #44	; 0x2c
 8001804:	4621      	mov	r1, r4
 8001806:	a801      	add	r0, sp, #4
 8001808:	f005 fbd6 	bl	8006fb8 <memset>
  htim15.Instance = TIM15;
 800180c:	4824      	ldr	r0, [pc, #144]	; (80018a0 <MX_TIM15_Init+0xb8>)
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <MX_TIM15_Init+0xbc>)
 8001810:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
  htim15.Init.Prescaler = 100;
 8001814:	2364      	movs	r3, #100	; 0x64
 8001816:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
  htim15.Init.Period = 500;
 800181e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001822:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	f8c0 410c 	str.w	r4, [r0, #268]	; 0x10c
  htim15.Init.RepetitionCounter = 0;
 800182a:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001832:	30fc      	adds	r0, #252	; 0xfc
 8001834:	f004 fdb4 	bl	80063a0 <HAL_TIM_PWM_Init>
 8001838:	2800      	cmp	r0, #0
 800183a:	d129      	bne.n	8001890 <MX_TIM15_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001842:	a913      	add	r1, sp, #76	; 0x4c
 8001844:	4818      	ldr	r0, [pc, #96]	; (80018a8 <MX_TIM15_Init+0xc0>)
 8001846:	f004 ff75 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	bb18      	cbnz	r0, 8001894 <MX_TIM15_Init+0xac>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184c:	2360      	movs	r3, #96	; 0x60
 800184e:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001850:	2200      	movs	r2, #0
 8001852:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001854:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001856:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001858:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800185a:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800185c:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185e:	a90c      	add	r1, sp, #48	; 0x30
 8001860:	4811      	ldr	r0, [pc, #68]	; (80018a8 <MX_TIM15_Init+0xc0>)
 8001862:	f004 fe13 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8001866:	b9b8      	cbnz	r0, 8001898 <MX_TIM15_Init+0xb0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800186c:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800186e:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001870:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001872:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001878:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800187a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800187c:	a901      	add	r1, sp, #4
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <MX_TIM15_Init+0xc0>)
 8001880:	f004 ffa4 	bl	80067cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001884:	b950      	cbnz	r0, 800189c <MX_TIM15_Init+0xb4>
  HAL_TIM_MspPostInit(&htim15);
 8001886:	4808      	ldr	r0, [pc, #32]	; (80018a8 <MX_TIM15_Init+0xc0>)
 8001888:	f000 ff54 	bl	8002734 <HAL_TIM_MspPostInit>
}
 800188c:	b016      	add	sp, #88	; 0x58
 800188e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001890:	f7ff ff26 	bl	80016e0 <Error_Handler>
    Error_Handler();
 8001894:	f7ff ff24 	bl	80016e0 <Error_Handler>
    Error_Handler();
 8001898:	f7ff ff22 	bl	80016e0 <Error_Handler>
    Error_Handler();
 800189c:	f7ff ff20 	bl	80016e0 <Error_Handler>
 80018a0:	200007dc 	.word	0x200007dc
 80018a4:	40014000 	.word	0x40014000
 80018a8:	200008d8 	.word	0x200008d8

080018ac <SystemClock_Config>:
{
 80018ac:	b500      	push	{lr}
 80018ae:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b0:	2244      	movs	r2, #68	; 0x44
 80018b2:	2100      	movs	r1, #0
 80018b4:	a827      	add	r0, sp, #156	; 0x9c
 80018b6:	f005 fb7f 	bl	8006fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ba:	2100      	movs	r1, #0
 80018bc:	9122      	str	r1, [sp, #136]	; 0x88
 80018be:	9123      	str	r1, [sp, #140]	; 0x8c
 80018c0:	9124      	str	r1, [sp, #144]	; 0x90
 80018c2:	9125      	str	r1, [sp, #148]	; 0x94
 80018c4:	9126      	str	r1, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c6:	2288      	movs	r2, #136	; 0x88
 80018c8:	4668      	mov	r0, sp
 80018ca:	f005 fb75 	bl	8006fb8 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80018ce:	2310      	movs	r3, #16
 80018d0:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018d2:	2301      	movs	r3, #1
 80018d4:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80018d6:	2370      	movs	r3, #112	; 0x70
 80018d8:	932f      	str	r3, [sp, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018da:	a827      	add	r0, sp, #156	; 0x9c
 80018dc:	f002 ff1e 	bl	800471c <HAL_RCC_OscConfig>
 80018e0:	b9d0      	cbnz	r0, 8001918 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e2:	230f      	movs	r3, #15
 80018e4:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80018e6:	2100      	movs	r1, #0
 80018e8:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ea:	9124      	str	r1, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ec:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ee:	9126      	str	r1, [sp, #152]	; 0x98
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018f0:	a822      	add	r0, sp, #136	; 0x88
 80018f2:	f003 fa29 	bl	8004d48 <HAL_RCC_ClockConfig>
 80018f6:	b988      	cbnz	r0, 800191c <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001900:	4668      	mov	r0, sp
 8001902:	f003 fc57 	bl	80051b4 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	b958      	cbnz	r0, 8001920 <SystemClock_Config+0x74>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001908:	f44f 7000 	mov.w	r0, #512	; 0x200
 800190c:	f002 fe1c 	bl	8004548 <HAL_PWREx_ControlVoltageScaling>
 8001910:	b940      	cbnz	r0, 8001924 <SystemClock_Config+0x78>
}
 8001912:	b039      	add	sp, #228	; 0xe4
 8001914:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001918:	f7ff fee2 	bl	80016e0 <Error_Handler>
    Error_Handler();
 800191c:	f7ff fee0 	bl	80016e0 <Error_Handler>
    Error_Handler();
 8001920:	f7ff fede 	bl	80016e0 <Error_Handler>
    Error_Handler();
 8001924:	f7ff fedc 	bl	80016e0 <Error_Handler>

08001928 <main>:
{
 8001928:	b508      	push	{r3, lr}
  HAL_Init();
 800192a:	f001 fe0b 	bl	8003544 <HAL_Init>
  SystemClock_Config();
 800192e:	f7ff ffbd 	bl	80018ac <SystemClock_Config>
  MX_GPIO_Init();
 8001932:	f7ff fe37 	bl	80015a4 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001936:	f7ff fed5 	bl	80016e4 <MX_SPI3_Init>
  MX_I2C2_Init();
 800193a:	f7ff fef7 	bl	800172c <MX_I2C2_Init>
  MX_TIM6_Init();
 800193e:	f7ff ff23 	bl	8001788 <MX_TIM6_Init>
  MX_TIM15_Init();
 8001942:	f7ff ff51 	bl	80017e8 <MX_TIM15_Init>
  setup();
 8001946:	f000 fd55 	bl	80023f4 <setup>
	  loop(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f000 fd96 	bl	800247c <loop>
  while (1)
 8001950:	e7fb      	b.n	800194a <main+0x22>
	...

08001954 <initLPS22hh>:
int16_t H_0_lsb=0;
int16_t H_1_lsb=0;
float mh=0;


void initLPS22hh(){
 8001954:	b500      	push	{lr}
 8001956:	b085      	sub	sp, #20
	uint8_t addressWrite=0xba;
	uint8_t turnOn[]={0x10,0x20};//The address of the register and the value of the register to turn on the sensor
 8001958:	f242 0310 	movw	r3, #8208	; 0x2010
 800195c:	f8ad 300c 	strh.w	r3, [sp, #12]

    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001960:	2301      	movs	r3, #1
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2302      	movs	r3, #2
 8001966:	aa03      	add	r2, sp, #12
 8001968:	21ba      	movs	r1, #186	; 0xba
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <initLPS22hh+0x24>)
 800196c:	f002 fa62 	bl	8003e34 <HAL_I2C_Master_Transmit>
}
 8001970:	b005      	add	sp, #20
 8001972:	f85d fb04 	ldr.w	pc, [sp], #4
 8001976:	bf00      	nop
 8001978:	20000840 	.word	0x20000840

0800197c <getPressure>:

void getPressure(float *pressure){
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	b087      	sub	sp, #28
 8001980:	4607      	mov	r7, r0

	int lsb;
	uint8_t addressWrite=0xba;
	uint8_t addressRead=0xbb;
	uint8_t pressXL[]={0x28};
 8001982:	2328      	movs	r3, #40	; 0x28
 8001984:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t pressL[]={0x29};
 8001988:	2329      	movs	r3, #41	; 0x29
 800198a:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t pressH[]={0x2a};
 800198e:	232a      	movs	r3, #42	; 0x2a
 8001990:	f88d 300c 	strb.w	r3, [sp, #12]
	uint8_t data[2];

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressXL,2,1);
 8001994:	4d22      	ldr	r5, [pc, #136]	; (8001a20 <getPressure+0xa4>)
 8001996:	2601      	movs	r6, #1
 8001998:	9600      	str	r6, [sp, #0]
 800199a:	2302      	movs	r3, #2
 800199c:	aa05      	add	r2, sp, #20
 800199e:	21ba      	movs	r1, #186	; 0xba
 80019a0:	4628      	mov	r0, r5
 80019a2:	f002 fa47 	bl	8003e34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2,addressRead,data,2,1);
 80019a6:	9600      	str	r6, [sp, #0]
 80019a8:	2302      	movs	r3, #2
 80019aa:	aa02      	add	r2, sp, #8
 80019ac:	21bb      	movs	r1, #187	; 0xbb
 80019ae:	4628      	mov	r0, r5
 80019b0:	f002 fa40 	bl	8003e34 <HAL_I2C_Master_Transmit>
	lsb=data[0];
 80019b4:	f89d 4008 	ldrb.w	r4, [sp, #8]

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressL,2,1);
 80019b8:	9600      	str	r6, [sp, #0]
 80019ba:	2302      	movs	r3, #2
 80019bc:	aa04      	add	r2, sp, #16
 80019be:	21ba      	movs	r1, #186	; 0xba
 80019c0:	4628      	mov	r0, r5
 80019c2:	f002 fa37 	bl	8003e34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2,addressRead,data,2,1);
 80019c6:	9600      	str	r6, [sp, #0]
 80019c8:	2302      	movs	r3, #2
 80019ca:	aa02      	add	r2, sp, #8
 80019cc:	21bb      	movs	r1, #187	; 0xbb
 80019ce:	4628      	mov	r0, r5
 80019d0:	f002 fa30 	bl	8003e34 <HAL_I2C_Master_Transmit>
	lsb|=data[0]<<8;
 80019d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80019d8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressH,2,1);
 80019dc:	9600      	str	r6, [sp, #0]
 80019de:	2302      	movs	r3, #2
 80019e0:	aa03      	add	r2, sp, #12
 80019e2:	21ba      	movs	r1, #186	; 0xba
 80019e4:	4628      	mov	r0, r5
 80019e6:	f002 fa25 	bl	8003e34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2,addressRead,data,2,1);
 80019ea:	9600      	str	r6, [sp, #0]
 80019ec:	2302      	movs	r3, #2
 80019ee:	aa02      	add	r2, sp, #8
 80019f0:	21bb      	movs	r1, #187	; 0xbb
 80019f2:	4628      	mov	r0, r5
 80019f4:	f002 fa1e 	bl	8003e34 <HAL_I2C_Master_Transmit>
	lsb|=data[0]<<16;
 80019f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80019fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16


	if(lsb>8388607){
 8001a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a04:	db00      	blt.n	8001a08 <getPressure+0x8c>
		lsb=lsb-1;
		lsb=~lsb;
 8001a06:	425b      	negs	r3, r3
	}

	*pressure=((float)lsb)/((float)(4096));
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001a24 <getPressure+0xa8>
 8001a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a18:	edc7 7a00 	vstr	s15, [r7]

}
 8001a1c:	b007      	add	sp, #28
 8001a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a20:	20000840 	.word	0x20000840
 8001a24:	39800000 	.word	0x39800000

08001a28 <initHTS221>:

void initHTS221(){
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	b08e      	sub	sp, #56	; 0x38
	uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	uint8_t turnOn[]={0x20,0x81};//The address of the register and the value of the register to turn on the sensor
 8001a2c:	f248 1320 	movw	r3, #33056	; 0x8120
 8001a30:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    uint8_t data[2];

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001a34:	4eab      	ldr	r6, [pc, #684]	; (8001ce4 <initHTS221+0x2bc>)
 8001a36:	2401      	movs	r4, #1
 8001a38:	9400      	str	r4, [sp, #0]
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	aa0d      	add	r2, sp, #52	; 0x34
 8001a3e:	21be      	movs	r1, #190	; 0xbe
 8001a40:	4630      	mov	r0, r6
 8001a42:	f002 f9f7 	bl	8003e34 <HAL_I2C_Master_Transmit>


    uint8_t tempMinAddress[]={0x32};
 8001a46:	2332      	movs	r3, #50	; 0x32
 8001a48:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    uint8_t tempMaxAddress[]={0x33};
 8001a4c:	2333      	movs	r3, #51	; 0x33
 8001a4e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    //reading low temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMinAddress,1,1);
 8001a52:	9400      	str	r4, [sp, #0]
 8001a54:	4623      	mov	r3, r4
 8001a56:	aa0b      	add	r2, sp, #44	; 0x2c
 8001a58:	21be      	movs	r1, #190	; 0xbe
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f002 f9ea 	bl	8003e34 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001a60:	9400      	str	r4, [sp, #0]
 8001a62:	4623      	mov	r3, r4
 8001a64:	aa0c      	add	r2, sp, #48	; 0x30
 8001a66:	21bf      	movs	r1, #191	; 0xbf
 8001a68:	4630      	mov	r0, r6
 8001a6a:	f002 faa1 	bl	8003fb0 <HAL_I2C_Master_Receive>
    T_C0=data[0];
 8001a6e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001a72:	4d9d      	ldr	r5, [pc, #628]	; (8001ce8 <initHTS221+0x2c0>)
 8001a74:	602b      	str	r3, [r5, #0]

    //reading high temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMaxAddress,1,1);
 8001a76:	9400      	str	r4, [sp, #0]
 8001a78:	4623      	mov	r3, r4
 8001a7a:	aa0a      	add	r2, sp, #40	; 0x28
 8001a7c:	21be      	movs	r1, #190	; 0xbe
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f002 f9d8 	bl	8003e34 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001a84:	9400      	str	r4, [sp, #0]
 8001a86:	4623      	mov	r3, r4
 8001a88:	aa0c      	add	r2, sp, #48	; 0x30
 8001a8a:	21bf      	movs	r1, #191	; 0xbf
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f002 fa8f 	bl	8003fb0 <HAL_I2C_Master_Receive>
    T_C1=data[0];
 8001a92:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001a96:	606b      	str	r3, [r5, #4]

	uint8_t MSB_temp[]={0x35};
 8001a98:	2335      	movs	r3, #53	; 0x35
 8001a9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MSB_temp,1,1);
 8001a9e:	9400      	str	r4, [sp, #0]
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	aa09      	add	r2, sp, #36	; 0x24
 8001aa4:	21be      	movs	r1, #190	; 0xbe
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	f002 f9c4 	bl	8003e34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001aac:	9400      	str	r4, [sp, #0]
 8001aae:	4623      	mov	r3, r4
 8001ab0:	aa0c      	add	r2, sp, #48	; 0x30
 8001ab2:	21bf      	movs	r1, #191	; 0xbf
 8001ab4:	4630      	mov	r0, r6
 8001ab6:	f002 fa7b 	bl	8003fb0 <HAL_I2C_Master_Receive>

	T_C0|=((data[0]&0x03)<<8);
 8001aba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001abe:	021a      	lsls	r2, r3, #8
 8001ac0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ac4:	6829      	ldr	r1, [r5, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	602a      	str	r2, [r5, #0]
	T_C1|=(((data[0]&0x0c)>>2)<<8);
 8001aca:	109b      	asrs	r3, r3, #2
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ad2:	6869      	ldr	r1, [r5, #4]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	606b      	str	r3, [r5, #4]

	T_C0=T_C0>>3;
 8001ad8:	10d2      	asrs	r2, r2, #3
 8001ada:	602a      	str	r2, [r5, #0]
	T_C1=T_C1>>3;
 8001adc:	10db      	asrs	r3, r3, #3
 8001ade:	606b      	str	r3, [r5, #4]

	uint8_t ADC0L[]={0x3c};
 8001ae0:	233c      	movs	r3, #60	; 0x3c
 8001ae2:	f88d 3020 	strb.w	r3, [sp, #32]
	uint8_t ADC0H[]={0x3d};
 8001ae6:	233d      	movs	r3, #61	; 0x3d
 8001ae8:	f88d 301c 	strb.w	r3, [sp, #28]
	//get the calibration adc min
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 8001aec:	9400      	str	r4, [sp, #0]
 8001aee:	4623      	mov	r3, r4
 8001af0:	aa08      	add	r2, sp, #32
 8001af2:	21be      	movs	r1, #190	; 0xbe
 8001af4:	4630      	mov	r0, r6
 8001af6:	f002 f99d 	bl	8003e34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001afa:	9400      	str	r4, [sp, #0]
 8001afc:	4623      	mov	r3, r4
 8001afe:	aa0c      	add	r2, sp, #48	; 0x30
 8001b00:	21bf      	movs	r1, #191	; 0xbf
 8001b02:	4630      	mov	r0, r6
 8001b04:	f002 fa54 	bl	8003fb0 <HAL_I2C_Master_Receive>
	T_C0_lsb=data[0];
 8001b08:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001b0c:	812b      	strh	r3, [r5, #8]

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 8001b0e:	9400      	str	r4, [sp, #0]
 8001b10:	4623      	mov	r3, r4
 8001b12:	aa07      	add	r2, sp, #28
 8001b14:	21be      	movs	r1, #190	; 0xbe
 8001b16:	4630      	mov	r0, r6
 8001b18:	f002 f98c 	bl	8003e34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001b1c:	9400      	str	r4, [sp, #0]
 8001b1e:	4623      	mov	r3, r4
 8001b20:	aa0c      	add	r2, sp, #48	; 0x30
 8001b22:	21bf      	movs	r1, #191	; 0xbf
 8001b24:	4630      	mov	r0, r6
 8001b26:	f002 fa43 	bl	8003fb0 <HAL_I2C_Master_Receive>
	T_C0_lsb|=data[0]<<8;
 8001b2a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001b2e:	892b      	ldrh	r3, [r5, #8]
 8001b30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b34:	812b      	strh	r3, [r5, #8]


    uint8_t ADC1L[]={0x3e};
 8001b36:	233e      	movs	r3, #62	; 0x3e
 8001b38:	f88d 3018 	strb.w	r3, [sp, #24]
    uint8_t ADC1H[]={0x3f};
 8001b3c:	233f      	movs	r3, #63	; 0x3f
 8001b3e:	f88d 3014 	strb.w	r3, [sp, #20]
    //leggo temperatura
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 8001b42:	9400      	str	r4, [sp, #0]
 8001b44:	4623      	mov	r3, r4
 8001b46:	aa06      	add	r2, sp, #24
 8001b48:	21be      	movs	r1, #190	; 0xbe
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f002 f972 	bl	8003e34 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001b50:	9400      	str	r4, [sp, #0]
 8001b52:	4623      	mov	r3, r4
 8001b54:	aa0c      	add	r2, sp, #48	; 0x30
 8001b56:	21bf      	movs	r1, #191	; 0xbf
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f002 fa29 	bl	8003fb0 <HAL_I2C_Master_Receive>
    T_C1_lsb=data[0];
 8001b5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001b62:	816b      	strh	r3, [r5, #10]

    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 8001b64:	9400      	str	r4, [sp, #0]
 8001b66:	4623      	mov	r3, r4
 8001b68:	aa05      	add	r2, sp, #20
 8001b6a:	21be      	movs	r1, #190	; 0xbe
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	f002 f961 	bl	8003e34 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001b72:	9400      	str	r4, [sp, #0]
 8001b74:	4623      	mov	r3, r4
 8001b76:	aa0c      	add	r2, sp, #48	; 0x30
 8001b78:	21bf      	movs	r1, #191	; 0xbf
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f002 fa18 	bl	8003fb0 <HAL_I2C_Master_Receive>
    T_C1_lsb|=data[0]<<8;
 8001b80:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001b84:	896b      	ldrh	r3, [r5, #10]
 8001b86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	816b      	strh	r3, [r5, #10]

    m=((float)(T_C1-T_C0))/((float)(T_C1_lsb-T_C0_lsb));
 8001b8e:	686a      	ldr	r2, [r5, #4]
 8001b90:	6829      	ldr	r1, [r5, #0]
 8001b92:	1a52      	subs	r2, r2, r1
 8001b94:	ee07 2a90 	vmov	s15, r2
 8001b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001baa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bae:	edc5 6a03 	vstr	s13, [r5, #12]


    uint8_t HumMinAddress[]={0x30};
 8001bb2:	2330      	movs	r3, #48	; 0x30
 8001bb4:	f88d 3010 	strb.w	r3, [sp, #16]
     uint8_t HumMaxAddress[]={0x31};
 8001bb8:	2331      	movs	r3, #49	; 0x31
 8001bba:	f88d 300c 	strb.w	r3, [sp, #12]
     //reading low temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMinAddress,1,1);
 8001bbe:	9400      	str	r4, [sp, #0]
 8001bc0:	4623      	mov	r3, r4
 8001bc2:	aa04      	add	r2, sp, #16
 8001bc4:	21be      	movs	r1, #190	; 0xbe
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f002 f934 	bl	8003e34 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001bcc:	9400      	str	r4, [sp, #0]
 8001bce:	4623      	mov	r3, r4
 8001bd0:	aa0c      	add	r2, sp, #48	; 0x30
 8001bd2:	21bf      	movs	r1, #191	; 0xbf
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	f002 f9eb 	bl	8003fb0 <HAL_I2C_Master_Receive>
     H_0=data[0];
 8001bda:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001bde:	742b      	strb	r3, [r5, #16]

     //reading high temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMaxAddress,1,1);
 8001be0:	9400      	str	r4, [sp, #0]
 8001be2:	4623      	mov	r3, r4
 8001be4:	aa03      	add	r2, sp, #12
 8001be6:	21be      	movs	r1, #190	; 0xbe
 8001be8:	4630      	mov	r0, r6
 8001bea:	f002 f923 	bl	8003e34 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001bee:	9400      	str	r4, [sp, #0]
 8001bf0:	4623      	mov	r3, r4
 8001bf2:	aa0c      	add	r2, sp, #48	; 0x30
 8001bf4:	21bf      	movs	r1, #191	; 0xbf
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f002 f9da 	bl	8003fb0 <HAL_I2C_Master_Receive>
     H_1=data[0];
 8001bfc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001c00:	746b      	strb	r3, [r5, #17]


 	H_0=H_0>>1;
 8001c02:	7c2a      	ldrb	r2, [r5, #16]
 8001c04:	40e2      	lsrs	r2, r4
 8001c06:	742a      	strb	r2, [r5, #16]
 	H_1=H_1>>1;
 8001c08:	40e3      	lsrs	r3, r4
 8001c0a:	746b      	strb	r3, [r5, #17]

 	ADC0L[0]=0x36;
 8001c0c:	2336      	movs	r3, #54	; 0x36
 8001c0e:	f88d 3020 	strb.w	r3, [sp, #32]
 	ADC0H[0]=0x37;
 8001c12:	2337      	movs	r3, #55	; 0x37
 8001c14:	f88d 301c 	strb.w	r3, [sp, #28]
 	//get the calibration adc min
 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 8001c18:	9400      	str	r4, [sp, #0]
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	aa08      	add	r2, sp, #32
 8001c1e:	21be      	movs	r1, #190	; 0xbe
 8001c20:	4630      	mov	r0, r6
 8001c22:	f002 f907 	bl	8003e34 <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001c26:	9400      	str	r4, [sp, #0]
 8001c28:	4623      	mov	r3, r4
 8001c2a:	aa0c      	add	r2, sp, #48	; 0x30
 8001c2c:	21bf      	movs	r1, #191	; 0xbf
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f002 f9be 	bl	8003fb0 <HAL_I2C_Master_Receive>
 	H_0_lsb=data[0];
 8001c34:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001c38:	826b      	strh	r3, [r5, #18]

 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 8001c3a:	9400      	str	r4, [sp, #0]
 8001c3c:	4623      	mov	r3, r4
 8001c3e:	aa07      	add	r2, sp, #28
 8001c40:	21be      	movs	r1, #190	; 0xbe
 8001c42:	4630      	mov	r0, r6
 8001c44:	f002 f8f6 	bl	8003e34 <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001c48:	9400      	str	r4, [sp, #0]
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	aa0c      	add	r2, sp, #48	; 0x30
 8001c4e:	21bf      	movs	r1, #191	; 0xbf
 8001c50:	4630      	mov	r0, r6
 8001c52:	f002 f9ad 	bl	8003fb0 <HAL_I2C_Master_Receive>
 	H_0_lsb|=data[0]<<8;
 8001c56:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001c5a:	8a6b      	ldrh	r3, [r5, #18]
 8001c5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c60:	826b      	strh	r3, [r5, #18]


    ADC1L[0]=0x3a;
 8001c62:	233a      	movs	r3, #58	; 0x3a
 8001c64:	f88d 3018 	strb.w	r3, [sp, #24]
    ADC1H[0]=0x3b;
 8001c68:	233b      	movs	r3, #59	; 0x3b
 8001c6a:	f88d 3014 	strb.w	r3, [sp, #20]
     //leggo temperatura
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 8001c6e:	9400      	str	r4, [sp, #0]
 8001c70:	4623      	mov	r3, r4
 8001c72:	aa06      	add	r2, sp, #24
 8001c74:	21be      	movs	r1, #190	; 0xbe
 8001c76:	4630      	mov	r0, r6
 8001c78:	f002 f8dc 	bl	8003e34 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001c7c:	9400      	str	r4, [sp, #0]
 8001c7e:	4623      	mov	r3, r4
 8001c80:	aa0c      	add	r2, sp, #48	; 0x30
 8001c82:	21bf      	movs	r1, #191	; 0xbf
 8001c84:	4630      	mov	r0, r6
 8001c86:	f002 f993 	bl	8003fb0 <HAL_I2C_Master_Receive>
     H_1_lsb=data[0];
 8001c8a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001c8e:	82ab      	strh	r3, [r5, #20]

     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 8001c90:	9400      	str	r4, [sp, #0]
 8001c92:	4623      	mov	r3, r4
 8001c94:	aa05      	add	r2, sp, #20
 8001c96:	21be      	movs	r1, #190	; 0xbe
 8001c98:	4630      	mov	r0, r6
 8001c9a:	f002 f8cb 	bl	8003e34 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001c9e:	9400      	str	r4, [sp, #0]
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	aa0c      	add	r2, sp, #48	; 0x30
 8001ca4:	21bf      	movs	r1, #191	; 0xbf
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	f002 f982 	bl	8003fb0 <HAL_I2C_Master_Receive>
     H_1_lsb|=data[0]<<8;
 8001cac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001cb0:	8aab      	ldrh	r3, [r5, #20]
 8001cb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	82ab      	strh	r3, [r5, #20]

     mh=((float)(H_1-H_0))/((float)(H_1_lsb-H_0_lsb));
 8001cba:	7c6a      	ldrb	r2, [r5, #17]
 8001cbc:	7c29      	ldrb	r1, [r5, #16]
 8001cbe:	1a52      	subs	r2, r2, r1
 8001cc0:	ee07 2a90 	vmov	s15, r2
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cda:	edc5 6a06 	vstr	s13, [r5, #24]



}
 8001cde:	b00e      	add	sp, #56	; 0x38
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000840 	.word	0x20000840
 8001ce8:	200009a8 	.word	0x200009a8

08001cec <getHumidity>:

void getHumidity(float *humidity){
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	4607      	mov	r7, r0

    uint8_t humL[]={0x28};
 8001cf2:	2328      	movs	r3, #40	; 0x28
 8001cf4:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t humH[]={0x29};
 8001cf8:	2329      	movs	r3, #41	; 0x29
 8001cfa:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t hum;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humL,1,1);
 8001cfe:	4e1c      	ldr	r6, [pc, #112]	; (8001d70 <getHumidity+0x84>)
 8001d00:	2401      	movs	r4, #1
 8001d02:	9400      	str	r4, [sp, #0]
 8001d04:	4623      	mov	r3, r4
 8001d06:	aa05      	add	r2, sp, #20
 8001d08:	21be      	movs	r1, #190	; 0xbe
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f002 f892 	bl	8003e34 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001d10:	9400      	str	r4, [sp, #0]
 8001d12:	4623      	mov	r3, r4
 8001d14:	aa03      	add	r2, sp, #12
 8001d16:	21bf      	movs	r1, #191	; 0xbf
 8001d18:	4630      	mov	r0, r6
 8001d1a:	f002 f949 	bl	8003fb0 <HAL_I2C_Master_Receive>
    hum=data[0];
 8001d1e:	f89d 500c 	ldrb.w	r5, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humH,1,1);
 8001d22:	9400      	str	r4, [sp, #0]
 8001d24:	4623      	mov	r3, r4
 8001d26:	aa04      	add	r2, sp, #16
 8001d28:	21be      	movs	r1, #190	; 0xbe
 8001d2a:	4630      	mov	r0, r6
 8001d2c:	f002 f882 	bl	8003e34 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001d30:	9400      	str	r4, [sp, #0]
 8001d32:	4623      	mov	r3, r4
 8001d34:	aa03      	add	r2, sp, #12
 8001d36:	21bf      	movs	r1, #191	; 0xbf
 8001d38:	4630      	mov	r0, r6
 8001d3a:	f002 f939 	bl	8003fb0 <HAL_I2C_Master_Receive>
    hum|=data[0]<<1;
 8001d3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001d42:	ea45 0343 	orr.w	r3, r5, r3, lsl #1
 8001d46:	ee07 3a90 	vmov	s15, r3

    *humidity=H_0+mh*hum;
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <getHumidity+0x88>)
 8001d50:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d58:	7c1b      	ldrb	r3, [r3, #16]
 8001d5a:	ee07 3a10 	vmov	s14, r3
 8001d5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d66:	edc7 7a00 	vstr	s15, [r7]

}
 8001d6a:	b007      	add	sp, #28
 8001d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000840 	.word	0x20000840
 8001d74:	200009a8 	.word	0x200009a8

08001d78 <getTemperature>:



void getTemperature(float *temperature){
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	4607      	mov	r7, r0

    uint8_t tempL[]={0x2A};
 8001d7e:	232a      	movs	r3, #42	; 0x2a
 8001d80:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t tempH[]={0x2B};
 8001d84:	232b      	movs	r3, #43	; 0x2b
 8001d86:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t temp;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempL,1,1);
 8001d8a:	4e1c      	ldr	r6, [pc, #112]	; (8001dfc <getTemperature+0x84>)
 8001d8c:	2501      	movs	r5, #1
 8001d8e:	9500      	str	r5, [sp, #0]
 8001d90:	462b      	mov	r3, r5
 8001d92:	aa05      	add	r2, sp, #20
 8001d94:	21be      	movs	r1, #190	; 0xbe
 8001d96:	4630      	mov	r0, r6
 8001d98:	f002 f84c 	bl	8003e34 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001d9c:	9500      	str	r5, [sp, #0]
 8001d9e:	462b      	mov	r3, r5
 8001da0:	aa03      	add	r2, sp, #12
 8001da2:	21bf      	movs	r1, #191	; 0xbf
 8001da4:	4630      	mov	r0, r6
 8001da6:	f002 f903 	bl	8003fb0 <HAL_I2C_Master_Receive>
    temp=data[0];
 8001daa:	f89d 400c 	ldrb.w	r4, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempH,1,1);
 8001dae:	9500      	str	r5, [sp, #0]
 8001db0:	462b      	mov	r3, r5
 8001db2:	aa04      	add	r2, sp, #16
 8001db4:	21be      	movs	r1, #190	; 0xbe
 8001db6:	4630      	mov	r0, r6
 8001db8:	f002 f83c 	bl	8003e34 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001dbc:	9500      	str	r5, [sp, #0]
 8001dbe:	462b      	mov	r3, r5
 8001dc0:	aa03      	add	r2, sp, #12
 8001dc2:	21bf      	movs	r1, #191	; 0xbf
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	f002 f8f3 	bl	8003fb0 <HAL_I2C_Master_Receive>
    temp|=data[0]<<8;
 8001dca:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001dce:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001dd2:	b224      	sxth	r4, r4

    *temperature=T_C0+m*temp;
 8001dd4:	ee07 4a90 	vmov	s15, r4
 8001dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <getTemperature+0x88>)
 8001dde:	ed93 7a03 	vldr	s14, [r3, #12]
 8001de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	edc7 7a00 	vstr	s15, [r7]

}
 8001df6:	b007      	add	sp, #28
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000840 	.word	0x20000840
 8001e00:	200009a8 	.word	0x200009a8

08001e04 <startToF>:


void startToF(){
 8001e04:	b500      	push	{lr}
 8001e06:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x52;
	 uint8_t turnOn[]={0x00,0x01};
 8001e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0c:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001e10:	2301      	movs	r3, #1
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2302      	movs	r3, #2
 8001e16:	aa03      	add	r2, sp, #12
 8001e18:	2152      	movs	r1, #82	; 0x52
 8001e1a:	4803      	ldr	r0, [pc, #12]	; (8001e28 <startToF+0x24>)
 8001e1c:	f002 f80a 	bl	8003e34 <HAL_I2C_Master_Transmit>
}
 8001e20:	b005      	add	sp, #20
 8001e22:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e26:	bf00      	nop
 8001e28:	20000840 	.word	0x20000840

08001e2c <getDistance>:

void getDistance(int *distance){
 8001e2c:	b570      	push	{r4, r5, r6, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	4604      	mov	r4, r0
	 uint8_t addressWrite=0x52;
	  uint8_t addressRead=0x53;
	  uint8_t resultAddress[]={0x1e};
 8001e32:	231e      	movs	r3, #30
 8001e34:	f88d 300c 	strb.w	r3, [sp, #12]
	  uint8_t rawData[]={0,0};
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8ad 3008 	strh.w	r3, [sp, #8]

	  HAL_I2C_Master_Transmit(&hi2c2,addressWrite,resultAddress,1,1);
 8001e3e:	4e13      	ldr	r6, [pc, #76]	; (8001e8c <getDistance+0x60>)
 8001e40:	2501      	movs	r5, #1
 8001e42:	9500      	str	r5, [sp, #0]
 8001e44:	462b      	mov	r3, r5
 8001e46:	aa03      	add	r2, sp, #12
 8001e48:	2152      	movs	r1, #82	; 0x52
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	f001 fff2 	bl	8003e34 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2,addressRead,rawData,2,1);
 8001e50:	9500      	str	r5, [sp, #0]
 8001e52:	2302      	movs	r3, #2
 8001e54:	aa02      	add	r2, sp, #8
 8001e56:	2153      	movs	r1, #83	; 0x53
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f002 f8a9 	bl	8003fb0 <HAL_I2C_Master_Receive>
	  *distance=(rawData[0]<<8)+rawData[1]-20;
 8001e5e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001e62:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001e66:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001e6a:	3b14      	subs	r3, #20
 8001e6c:	6023      	str	r3, [r4, #0]

	  if(*distance<0){
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db08      	blt.n	8001e84 <getDistance+0x58>
		  *distance=0;
	  }
	  if(*distance>2000){
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e78:	dd02      	ble.n	8001e80 <getDistance+0x54>
		  *distance=2000;
 8001e7a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e7e:	6023      	str	r3, [r4, #0]
	  }
}
 8001e80:	b004      	add	sp, #16
 8001e82:	bd70      	pop	{r4, r5, r6, pc}
		  *distance=0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	6023      	str	r3, [r4, #0]
 8001e88:	e7f3      	b.n	8001e72 <getDistance+0x46>
 8001e8a:	bf00      	nop
 8001e8c:	20000840 	.word	0x20000840

08001e90 <init_accelerometer>:



void init_accelerometer(){
 8001e90:	b500      	push	{lr}
 8001e92:	b085      	sub	sp, #20

	 uint8_t addressWrite=0xd4;
	 uint8_t turnOn[]={0x10,0x10};
 8001e94:	f241 0310 	movw	r3, #4112	; 0x1010
 8001e98:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	aa03      	add	r2, sp, #12
 8001ea4:	21d4      	movs	r1, #212	; 0xd4
 8001ea6:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <init_accelerometer+0x24>)
 8001ea8:	f001 ffc4 	bl	8003e34 <HAL_I2C_Master_Transmit>


	}
 8001eac:	b005      	add	sp, #20
 8001eae:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eb2:	bf00      	nop
 8001eb4:	20000840 	.word	0x20000840

08001eb8 <getAxisAccelerometer>:


void getAxisAccelerometer(int16_t *accx, int16_t *accy, int16_t *accz){
 8001eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	4680      	mov	r8, r0
 8001ec0:	460f      	mov	r7, r1
 8001ec2:	4616      	mov	r6, r2
	 uint8_t ACCcmd[1];
	 uint8_t ACCread[1];


	   //ACC X
	   ACCcmd[0]=0x28;
 8001ec4:	2328      	movs	r3, #40	; 0x28
 8001ec6:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001eca:	4d4f      	ldr	r5, [pc, #316]	; (8002008 <getAxisAccelerometer+0x150>)
 8001ecc:	2401      	movs	r4, #1
 8001ece:	9400      	str	r4, [sp, #0]
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	aa03      	add	r2, sp, #12
 8001ed4:	21d4      	movs	r1, #212	; 0xd4
 8001ed6:	4628      	mov	r0, r5
 8001ed8:	f001 ffac 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001edc:	9400      	str	r4, [sp, #0]
 8001ede:	4623      	mov	r3, r4
 8001ee0:	aa02      	add	r2, sp, #8
 8001ee2:	21d5      	movs	r1, #213	; 0xd5
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f002 f863 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *accx=ACCread[0];
 8001eea:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001eee:	f8a8 3000 	strh.w	r3, [r8]

	   ACCcmd[0]=0x29;
 8001ef2:	2329      	movs	r3, #41	; 0x29
 8001ef4:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001ef8:	9400      	str	r4, [sp, #0]
 8001efa:	4623      	mov	r3, r4
 8001efc:	aa03      	add	r2, sp, #12
 8001efe:	21d4      	movs	r1, #212	; 0xd4
 8001f00:	4628      	mov	r0, r5
 8001f02:	f001 ff97 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001f06:	9400      	str	r4, [sp, #0]
 8001f08:	4623      	mov	r3, r4
 8001f0a:	aa02      	add	r2, sp, #8
 8001f0c:	21d5      	movs	r1, #213	; 0xd5
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f002 f84e 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *accx|=((ACCread[0])<<8);
 8001f14:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001f18:	f8b8 3000 	ldrh.w	r3, [r8]
 8001f1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f20:	f8a8 3000 	strh.w	r3, [r8]



	   //ACC Y

	   ACCcmd[0]=0x2a;
 8001f24:	232a      	movs	r3, #42	; 0x2a
 8001f26:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001f2a:	9400      	str	r4, [sp, #0]
 8001f2c:	4623      	mov	r3, r4
 8001f2e:	aa03      	add	r2, sp, #12
 8001f30:	21d4      	movs	r1, #212	; 0xd4
 8001f32:	4628      	mov	r0, r5
 8001f34:	f001 ff7e 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001f38:	9400      	str	r4, [sp, #0]
 8001f3a:	4623      	mov	r3, r4
 8001f3c:	aa02      	add	r2, sp, #8
 8001f3e:	21d5      	movs	r1, #213	; 0xd5
 8001f40:	4628      	mov	r0, r5
 8001f42:	f002 f835 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *accy=ACCread[0];
 8001f46:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001f4a:	803b      	strh	r3, [r7, #0]

	   ACCcmd[0]=0x2b;
 8001f4c:	232b      	movs	r3, #43	; 0x2b
 8001f4e:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001f52:	9400      	str	r4, [sp, #0]
 8001f54:	4623      	mov	r3, r4
 8001f56:	aa03      	add	r2, sp, #12
 8001f58:	21d4      	movs	r1, #212	; 0xd4
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f001 ff6a 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001f60:	9400      	str	r4, [sp, #0]
 8001f62:	4623      	mov	r3, r4
 8001f64:	aa02      	add	r2, sp, #8
 8001f66:	21d5      	movs	r1, #213	; 0xd5
 8001f68:	4628      	mov	r0, r5
 8001f6a:	f002 f821 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *accy|=((ACCread[0])<<8);
 8001f6e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001f72:	883b      	ldrh	r3, [r7, #0]
 8001f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f78:	803b      	strh	r3, [r7, #0]



	   //ACC Z

	   ACCcmd[0]=0x2c;
 8001f7a:	232c      	movs	r3, #44	; 0x2c
 8001f7c:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001f80:	9400      	str	r4, [sp, #0]
 8001f82:	4623      	mov	r3, r4
 8001f84:	aa03      	add	r2, sp, #12
 8001f86:	21d4      	movs	r1, #212	; 0xd4
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f001 ff53 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001f8e:	9400      	str	r4, [sp, #0]
 8001f90:	4623      	mov	r3, r4
 8001f92:	aa02      	add	r2, sp, #8
 8001f94:	21d5      	movs	r1, #213	; 0xd5
 8001f96:	4628      	mov	r0, r5
 8001f98:	f002 f80a 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *accz=ACCread[0];
 8001f9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001fa0:	8033      	strh	r3, [r6, #0]

	   ACCcmd[0]=0x2d;
 8001fa2:	232d      	movs	r3, #45	; 0x2d
 8001fa4:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001fa8:	9400      	str	r4, [sp, #0]
 8001faa:	4623      	mov	r3, r4
 8001fac:	aa03      	add	r2, sp, #12
 8001fae:	21d4      	movs	r1, #212	; 0xd4
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f001 ff3f 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001fb6:	9400      	str	r4, [sp, #0]
 8001fb8:	4623      	mov	r3, r4
 8001fba:	aa02      	add	r2, sp, #8
 8001fbc:	21d5      	movs	r1, #213	; 0xd5
 8001fbe:	4628      	mov	r0, r5
 8001fc0:	f001 fff6 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *accz|=((ACCread[0])<<8);
 8001fc4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001fc8:	8833      	ldrh	r3, [r6, #0]
 8001fca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fce:	8033      	strh	r3, [r6, #0]

	   *accx=*accx/16;
 8001fd0:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db11      	blt.n	8001ffc <getAxisAccelerometer+0x144>
 8001fd8:	111b      	asrs	r3, r3, #4
 8001fda:	f8a8 3000 	strh.w	r3, [r8]
	   *accy=*accy/16;
 8001fde:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0c      	blt.n	8002000 <getAxisAccelerometer+0x148>
 8001fe6:	111b      	asrs	r3, r3, #4
 8001fe8:	803b      	strh	r3, [r7, #0]
	   *accz=*accz/16;
 8001fea:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db08      	blt.n	8002004 <getAxisAccelerometer+0x14c>
 8001ff2:	111b      	asrs	r3, r3, #4
 8001ff4:	8033      	strh	r3, [r6, #0]



}
 8001ff6:	b004      	add	sp, #16
 8001ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *accx=*accx/16;
 8001ffc:	330f      	adds	r3, #15
 8001ffe:	e7eb      	b.n	8001fd8 <getAxisAccelerometer+0x120>
	   *accy=*accy/16;
 8002000:	330f      	adds	r3, #15
 8002002:	e7f0      	b.n	8001fe6 <getAxisAccelerometer+0x12e>
	   *accz=*accz/16;
 8002004:	330f      	adds	r3, #15
 8002006:	e7f4      	b.n	8001ff2 <getAxisAccelerometer+0x13a>
 8002008:	20000840 	.word	0x20000840

0800200c <init_magnetometer>:
	counter++;
	}
	return counter;
}

void init_magnetometer(){
 800200c:	b500      	push	{lr}
 800200e:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x3c;
	 uint8_t turnOn[]={0x22,0x00};
 8002010:	2322      	movs	r3, #34	; 0x22
 8002012:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8002016:	2301      	movs	r3, #1
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2302      	movs	r3, #2
 800201c:	aa03      	add	r2, sp, #12
 800201e:	213c      	movs	r1, #60	; 0x3c
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <init_magnetometer+0x20>)
 8002022:	f001 ff07 	bl	8003e34 <HAL_I2C_Master_Transmit>


}
 8002026:	b005      	add	sp, #20
 8002028:	f85d fb04 	ldr.w	pc, [sp], #4
 800202c:	20000840 	.word	0x20000840

08002030 <getAxisMagnetometer>:


void getAxisMagnetometer(int16_t *magx, int16_t *magy, int16_t *magz){
 8002030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	4680      	mov	r8, r0
 8002038:	460f      	mov	r7, r1
 800203a:	4616      	mov	r6, r2

	 uint8_t MAGcmd[1];
	 uint8_t MAGread[1];

	   //MAG X
	   MAGcmd[0]=0x28;
 800203c:	2328      	movs	r3, #40	; 0x28
 800203e:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8002042:	4d4f      	ldr	r5, [pc, #316]	; (8002180 <getAxisMagnetometer+0x150>)
 8002044:	2401      	movs	r4, #1
 8002046:	9400      	str	r4, [sp, #0]
 8002048:	4623      	mov	r3, r4
 800204a:	aa03      	add	r2, sp, #12
 800204c:	213c      	movs	r1, #60	; 0x3c
 800204e:	4628      	mov	r0, r5
 8002050:	f001 fef0 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8002054:	9400      	str	r4, [sp, #0]
 8002056:	4623      	mov	r3, r4
 8002058:	aa02      	add	r2, sp, #8
 800205a:	213d      	movs	r1, #61	; 0x3d
 800205c:	4628      	mov	r0, r5
 800205e:	f001 ffa7 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *magx=MAGread[0];
 8002062:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002066:	f8a8 3000 	strh.w	r3, [r8]

	   MAGcmd[0]=0x29;
 800206a:	2329      	movs	r3, #41	; 0x29
 800206c:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8002070:	9400      	str	r4, [sp, #0]
 8002072:	4623      	mov	r3, r4
 8002074:	aa03      	add	r2, sp, #12
 8002076:	213c      	movs	r1, #60	; 0x3c
 8002078:	4628      	mov	r0, r5
 800207a:	f001 fedb 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 800207e:	9400      	str	r4, [sp, #0]
 8002080:	4623      	mov	r3, r4
 8002082:	aa02      	add	r2, sp, #8
 8002084:	213d      	movs	r1, #61	; 0x3d
 8002086:	4628      	mov	r0, r5
 8002088:	f001 ff92 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *magx|=((MAGread[0])<<8);
 800208c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002090:	f8b8 3000 	ldrh.w	r3, [r8]
 8002094:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002098:	f8a8 3000 	strh.w	r3, [r8]

	   //MAG Y
	   MAGcmd[0]=0x2a;
 800209c:	232a      	movs	r3, #42	; 0x2a
 800209e:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80020a2:	9400      	str	r4, [sp, #0]
 80020a4:	4623      	mov	r3, r4
 80020a6:	aa03      	add	r2, sp, #12
 80020a8:	213c      	movs	r1, #60	; 0x3c
 80020aa:	4628      	mov	r0, r5
 80020ac:	f001 fec2 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80020b0:	9400      	str	r4, [sp, #0]
 80020b2:	4623      	mov	r3, r4
 80020b4:	aa02      	add	r2, sp, #8
 80020b6:	213d      	movs	r1, #61	; 0x3d
 80020b8:	4628      	mov	r0, r5
 80020ba:	f001 ff79 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *magy=MAGread[0];
 80020be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80020c2:	803b      	strh	r3, [r7, #0]

	   MAGcmd[0]=0x2b;
 80020c4:	232b      	movs	r3, #43	; 0x2b
 80020c6:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80020ca:	9400      	str	r4, [sp, #0]
 80020cc:	4623      	mov	r3, r4
 80020ce:	aa03      	add	r2, sp, #12
 80020d0:	213c      	movs	r1, #60	; 0x3c
 80020d2:	4628      	mov	r0, r5
 80020d4:	f001 feae 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80020d8:	9400      	str	r4, [sp, #0]
 80020da:	4623      	mov	r3, r4
 80020dc:	aa02      	add	r2, sp, #8
 80020de:	213d      	movs	r1, #61	; 0x3d
 80020e0:	4628      	mov	r0, r5
 80020e2:	f001 ff65 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *magy|=((MAGread[0])<<8);
 80020e6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80020ea:	883b      	ldrh	r3, [r7, #0]
 80020ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020f0:	803b      	strh	r3, [r7, #0]

	   //MAG Z
	   MAGcmd[0]=0x2c;
 80020f2:	232c      	movs	r3, #44	; 0x2c
 80020f4:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80020f8:	9400      	str	r4, [sp, #0]
 80020fa:	4623      	mov	r3, r4
 80020fc:	aa03      	add	r2, sp, #12
 80020fe:	213c      	movs	r1, #60	; 0x3c
 8002100:	4628      	mov	r0, r5
 8002102:	f001 fe97 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8002106:	9400      	str	r4, [sp, #0]
 8002108:	4623      	mov	r3, r4
 800210a:	aa02      	add	r2, sp, #8
 800210c:	213d      	movs	r1, #61	; 0x3d
 800210e:	4628      	mov	r0, r5
 8002110:	f001 ff4e 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *magz=MAGread[0];
 8002114:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002118:	8033      	strh	r3, [r6, #0]

	   MAGcmd[0]=0x2d;
 800211a:	232d      	movs	r3, #45	; 0x2d
 800211c:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8002120:	9400      	str	r4, [sp, #0]
 8002122:	4623      	mov	r3, r4
 8002124:	aa03      	add	r2, sp, #12
 8002126:	213c      	movs	r1, #60	; 0x3c
 8002128:	4628      	mov	r0, r5
 800212a:	f001 fe83 	bl	8003e34 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 800212e:	9400      	str	r4, [sp, #0]
 8002130:	4623      	mov	r3, r4
 8002132:	aa02      	add	r2, sp, #8
 8002134:	213d      	movs	r1, #61	; 0x3d
 8002136:	4628      	mov	r0, r5
 8002138:	f001 ff3a 	bl	8003fb0 <HAL_I2C_Master_Receive>
	   *magz|=((MAGread[0])<<8);
 800213c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002140:	8833      	ldrh	r3, [r6, #0]
 8002142:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002146:	8033      	strh	r3, [r6, #0]

	   *magx=*magx/8;
 8002148:	f9b8 3000 	ldrsh.w	r3, [r8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db11      	blt.n	8002174 <getAxisMagnetometer+0x144>
 8002150:	10db      	asrs	r3, r3, #3
 8002152:	f8a8 3000 	strh.w	r3, [r8]
	   *magy=*magy/8;
 8002156:	f9b7 3000 	ldrsh.w	r3, [r7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	db0c      	blt.n	8002178 <getAxisMagnetometer+0x148>
 800215e:	10db      	asrs	r3, r3, #3
 8002160:	803b      	strh	r3, [r7, #0]
	   *magz=*magz/8;
 8002162:	f9b6 3000 	ldrsh.w	r3, [r6]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db08      	blt.n	800217c <getAxisMagnetometer+0x14c>
 800216a:	10db      	asrs	r3, r3, #3
 800216c:	8033      	strh	r3, [r6, #0]



}
 800216e:	b004      	add	sp, #16
 8002170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *magx=*magx/8;
 8002174:	3307      	adds	r3, #7
 8002176:	e7eb      	b.n	8002150 <getAxisMagnetometer+0x120>
	   *magy=*magy/8;
 8002178:	3307      	adds	r3, #7
 800217a:	e7f0      	b.n	800215e <getAxisMagnetometer+0x12e>
	   *magz=*magz/8;
 800217c:	3307      	adds	r3, #7
 800217e:	e7f4      	b.n	800216a <getAxisMagnetometer+0x13a>
 8002180:	20000840 	.word	0x20000840
 8002184:	00000000 	.word	0x00000000

08002188 <startup_enter>:




void startup_enter()
{
 8002188:	b510      	push	{r4, lr}
 800218a:	ed2d 8b04 	vpush	{d8-d9}
    setMappedFunction(MF_Button, GPIOC, GPIO_PIN_13, 0, 1);
 800218e:	ed9f 9b52 	vldr	d9, [pc, #328]	; 80022d8 <startup_enter+0x150>
 8002192:	ed9f 8b53 	vldr	d8, [pc, #332]	; 80022e0 <startup_enter+0x158>
 8002196:	4c54      	ldr	r4, [pc, #336]	; (80022e8 <startup_enter+0x160>)
 8002198:	eeb0 1a49 	vmov.f32	s2, s18
 800219c:	eef0 1a69 	vmov.f32	s3, s19
 80021a0:	eeb0 0a48 	vmov.f32	s0, s16
 80021a4:	eef0 0a68 	vmov.f32	s1, s17
 80021a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ac:	4621      	mov	r1, r4
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7ff f982 	bl	80014b8 <setMappedFunction>
    setMappedFunction(MF_led1, GPIOA, GPIO_PIN_5, 0, 1);
 80021b4:	eeb0 1a49 	vmov.f32	s2, s18
 80021b8:	eef0 1a69 	vmov.f32	s3, s19
 80021bc:	eeb0 0a48 	vmov.f32	s0, s16
 80021c0:	eef0 0a68 	vmov.f32	s1, s17
 80021c4:	2220      	movs	r2, #32
 80021c6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80021ca:	2002      	movs	r0, #2
 80021cc:	f7ff f974 	bl	80014b8 <setMappedFunction>
    setMappedFunction(MF_led2, GPIOB, GPIO_PIN_14, 0, 1);
 80021d0:	eeb0 1a49 	vmov.f32	s2, s18
 80021d4:	eef0 1a69 	vmov.f32	s3, s19
 80021d8:	eeb0 0a48 	vmov.f32	s0, s16
 80021dc:	eef0 0a68 	vmov.f32	s1, s17
 80021e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e4:	4941      	ldr	r1, [pc, #260]	; (80022ec <startup_enter+0x164>)
 80021e6:	2003      	movs	r0, #3
 80021e8:	f7ff f966 	bl	80014b8 <setMappedFunction>
    setMappedFunction(MF_BleInt, GPIOE, GPIO_PIN_6, 0, 1);
 80021ec:	eeb0 1a49 	vmov.f32	s2, s18
 80021f0:	eef0 1a69 	vmov.f32	s3, s19
 80021f4:	eeb0 0a48 	vmov.f32	s0, s16
 80021f8:	eef0 0a68 	vmov.f32	s1, s17
 80021fc:	2240      	movs	r2, #64	; 0x40
 80021fe:	493c      	ldr	r1, [pc, #240]	; (80022f0 <startup_enter+0x168>)
 8002200:	2004      	movs	r0, #4
 8002202:	f7ff f959 	bl	80014b8 <setMappedFunction>
    setMappedFunction(MF_BleCS, GPIOD, GPIO_PIN_13, 0, 1);
 8002206:	eeb0 1a49 	vmov.f32	s2, s18
 800220a:	eef0 1a69 	vmov.f32	s3, s19
 800220e:	eeb0 0a48 	vmov.f32	s0, s16
 8002212:	eef0 0a68 	vmov.f32	s1, s17
 8002216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800221a:	4936      	ldr	r1, [pc, #216]	; (80022f4 <startup_enter+0x16c>)
 800221c:	2005      	movs	r0, #5
 800221e:	f7ff f94b 	bl	80014b8 <setMappedFunction>
    setMappedFunction(MF_BleReset, GPIOA, GPIO_PIN_8, 0, 1);
 8002222:	eeb0 1a49 	vmov.f32	s2, s18
 8002226:	eef0 1a69 	vmov.f32	s3, s19
 800222a:	eeb0 0a48 	vmov.f32	s0, s16
 800222e:	eef0 0a68 	vmov.f32	s1, s17
 8002232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002236:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800223a:	2006      	movs	r0, #6
 800223c:	f7ff f93c 	bl	80014b8 <setMappedFunction>
	setMappedFunction(MF_TOF, GPIOC, GPIO_PIN_8, 0, 1);
 8002240:	eeb0 1a49 	vmov.f32	s2, s18
 8002244:	eef0 1a69 	vmov.f32	s3, s19
 8002248:	eeb0 0a48 	vmov.f32	s0, s16
 800224c:	eef0 0a68 	vmov.f32	s1, s17
 8002250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002254:	4621      	mov	r1, r4
 8002256:	2007      	movs	r0, #7
 8002258:	f7ff f92e 	bl	80014b8 <setMappedFunction>


    initTimers();
 800225c:	f000 fb04 	bl	8002868 <initTimers>

    uart_init();
 8002260:	f000 fbe8 	bl	8002a34 <uart_init>

    bspFunctionInit();
 8002264:	f7ff f90a 	bl	800147c <bspFunctionInit>

    setDigital(MF_led2, GPIO_PIN_RESET);
 8002268:	2100      	movs	r1, #0
 800226a:	2003      	movs	r0, #3
 800226c:	f7ff f936 	bl	80014dc <setDigital>

    setStateTimeout(ST_IDLE,200);
 8002270:	22c8      	movs	r2, #200	; 0xc8
 8002272:	2300      	movs	r3, #0
 8002274:	2002      	movs	r0, #2
 8002276:	f000 f8a5 	bl	80023c4 <setStateTimeout>

    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002284:	f001 fb8d 	bl	80039a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002288:	200a      	movs	r0, #10
 800228a:	f001 f97d 	bl	8003588 <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 800228e:	2201      	movs	r2, #1
 8002290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002298:	f001 fb83 	bl	80039a2 <HAL_GPIO_WritePin>

	ble_init();
 800229c:	f7fe fc9e 	bl	8000bdc <ble_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(TOF_RESET_GPIO_Port,TOF_RESET_Pin,GPIO_PIN_SET);
 80022a0:	2201      	movs	r2, #1
 80022a2:	2140      	movs	r1, #64	; 0x40
 80022a4:	4620      	mov	r0, r4
 80022a6:	f001 fb7c 	bl	80039a2 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80022aa:	200a      	movs	r0, #10
 80022ac:	f001 f96c 	bl	8003588 <HAL_Delay>

	startToF();
 80022b0:	f7ff fda8 	bl	8001e04 <startToF>
	initLPS22hh();
 80022b4:	f7ff fb4e 	bl	8001954 <initLPS22hh>

	HAL_TIM_Base_Start_IT(&htim6);
 80022b8:	480f      	ldr	r0, [pc, #60]	; (80022f8 <startup_enter+0x170>)
 80022ba:	f003 fec5 	bl	8006048 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80022be:	2100      	movs	r1, #0
 80022c0:	480e      	ldr	r0, [pc, #56]	; (80022fc <startup_enter+0x174>)
 80022c2:	f004 f987 	bl	80065d4 <HAL_TIM_PWM_Start>

	initHTS221();
 80022c6:	f7ff fbaf 	bl	8001a28 <initHTS221>
	init_accelerometer();
 80022ca:	f7ff fde1 	bl	8001e90 <init_accelerometer>
	init_magnetometer();
 80022ce:	f7ff fe9d 	bl	800200c <init_magnetometer>

}
 80022d2:	ecbd 8b04 	vpop	{d8-d9}
 80022d6:	bd10      	pop	{r4, pc}
 80022d8:	00000000 	.word	0x00000000
 80022dc:	3ff00000 	.word	0x3ff00000
	...
 80022e8:	48000800 	.word	0x48000800
 80022ec:	48000400 	.word	0x48000400
 80022f0:	48001000 	.word	0x48001000
 80022f4:	48000c00 	.word	0x48000c00
 80022f8:	2000088c 	.word	0x2000088c
 80022fc:	200008d8 	.word	0x200008d8

08002300 <startup_beforeLoop>:


void startup_beforeLoop(uint8_t deltaMs)
{
}
 8002300:	4770      	bx	lr

08002302 <startup_loop>:

void startup_loop(uint8_t deltaMs)
{
}
 8002302:	4770      	bx	lr

08002304 <startup_afterLoop>:

void startup_afterLoop(uint8_t deltaMs)
{

}
 8002304:	4770      	bx	lr
	...

08002308 <externalSetup>:
#include "state_all.h"

void externalSetup(StateStruct states[])
{

    states[ST_STARTUP].enter = startup_enter;
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <externalSetup+0x38>)
 800230a:	6283      	str	r3, [r0, #40]	; 0x28
    states[ST_STARTUP].beforeLoop = startup_beforeLoop;
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <externalSetup+0x3c>)
 800230e:	62c3      	str	r3, [r0, #44]	; 0x2c
    states[ST_STARTUP].loop = startup_loop;
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <externalSetup+0x40>)
 8002312:	6303      	str	r3, [r0, #48]	; 0x30
    states[ST_STARTUP].afterLoop = startup_afterLoop;
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <externalSetup+0x44>)
 8002316:	6343      	str	r3, [r0, #52]	; 0x34

    states[ST_IDLE].enter = idle_enter;
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <externalSetup+0x48>)
 800231a:	6503      	str	r3, [r0, #80]	; 0x50
    states[ST_IDLE].beforeLoop = idle_beforeLoop;
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <externalSetup+0x4c>)
 800231e:	6543      	str	r3, [r0, #84]	; 0x54
    states[ST_IDLE].loop = idle_loop;
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <externalSetup+0x50>)
 8002322:	6583      	str	r3, [r0, #88]	; 0x58
    states[ST_IDLE].afterLoop = idle_afterLoop;
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <externalSetup+0x54>)
 8002326:	65c3      	str	r3, [r0, #92]	; 0x5c

    states[ST_BLE_CHECK].enter = ble_check_enter;
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <externalSetup+0x58>)
 800232a:	6783      	str	r3, [r0, #120]	; 0x78
    states[ST_BLE_CHECK].beforeLoop = ble_check_beforeLoop;
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <externalSetup+0x5c>)
 800232e:	67c3      	str	r3, [r0, #124]	; 0x7c
    states[ST_BLE_CHECK].loop = ble_check_loop;
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <externalSetup+0x60>)
 8002332:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    states[ST_BLE_CHECK].afterLoop = ble_check_afterLoop;
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <externalSetup+0x64>)
 8002338:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
} // Set all the callbacks
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	08002189 	.word	0x08002189
 8002344:	08002301 	.word	0x08002301
 8002348:	08002303 	.word	0x08002303
 800234c:	08002305 	.word	0x08002305
 8002350:	08001405 	.word	0x08001405
 8002354:	08001439 	.word	0x08001439
 8002358:	08001479 	.word	0x08001479
 800235c:	0800147b 	.word	0x0800147b
 8002360:	080005a1 	.word	0x080005a1
 8002364:	080005d5 	.word	0x080005d5
 8002368:	080005d9 	.word	0x080005d9
 800236c:	08000781 	.word	0x08000781

08002370 <isValidState>:

// This struct must be only in this file

uint8_t isValidState(States state)
{
    return state > ST_UNDEFINED && state < ST_COUNT; 
 8002370:	3801      	subs	r0, #1
 8002372:	b2c0      	uxtb	r0, r0
}
 8002374:	2802      	cmp	r0, #2
 8002376:	bf8c      	ite	hi
 8002378:	2000      	movhi	r0, #0
 800237a:	2001      	movls	r0, #1
 800237c:	4770      	bx	lr
	...

08002380 <setExitCondition>:
{
    return timeInCurrentStateTimer;
}

void setExitCondition(States nextState,uint8_t (*exitCondition)() )
{
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4605      	mov	r5, r0
 8002384:	460c      	mov	r4, r1
	if(!isValidState(nextState) || !exitCondition)
 8002386:	f7ff fff3 	bl	8002370 <isValidState>
 800238a:	b148      	cbz	r0, 80023a0 <setExitCondition+0x20>
 800238c:	b144      	cbz	r4, 80023a0 <setExitCondition+0x20>
		return;
	states[actualState].exitCondition = exitCondition;
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <setExitCondition+0x24>)
 8002390:	7a13      	ldrb	r3, [r2, #8]
 8002392:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002396:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800239a:	620c      	str	r4, [r1, #32]
	states[actualState].nextState = nextState;
 800239c:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
}
 80023a0:	bd38      	pop	{r3, r4, r5, pc}
 80023a2:	bf00      	nop
 80023a4:	200009c8 	.word	0x200009c8

080023a8 <setState>:

uint8_t setState(States newState)
{
 80023a8:	b510      	push	{r4, lr}
 80023aa:	4604      	mov	r4, r0
    if(!isValidState(newState))
 80023ac:	f7ff ffe0 	bl	8002370 <isValidState>
 80023b0:	b128      	cbz	r0, 80023be <setState+0x16>
    	return 0;
	previousState = actualState;
 80023b2:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <setState+0x18>)
 80023b4:	7a1a      	ldrb	r2, [r3, #8]
 80023b6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	actualState = newState;
 80023ba:	721c      	strb	r4, [r3, #8]
	return 1;
 80023bc:	2001      	movs	r0, #1

}
 80023be:	bd10      	pop	{r4, pc}
 80023c0:	200009c8 	.word	0x200009c8

080023c4 <setStateTimeout>:
{
    return actualState;
}

void setStateTimeout(States state, uint64_t timeout)
{
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	4606      	mov	r6, r0
 80023c8:	4615      	mov	r5, r2
 80023ca:	461c      	mov	r4, r3
    if(!isValidState(state) || !timeout)
 80023cc:	f7ff ffd0 	bl	8002370 <isValidState>
 80023d0:	b160      	cbz	r0, 80023ec <setStateTimeout+0x28>
 80023d2:	ea55 0304 	orrs.w	r3, r5, r4
 80023d6:	d009      	beq.n	80023ec <setStateTimeout+0x28>
        return;

    states[actualState].nextState = state;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <setStateTimeout+0x2c>)
 80023da:	7a19      	ldrb	r1, [r3, #8]
 80023dc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80023e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80023e4:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
    states[actualState].timeout = timeout;
 80023e8:	6295      	str	r5, [r2, #40]	; 0x28
 80023ea:	62d4      	str	r4, [r2, #44]	; 0x2c
    
}
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
 80023ee:	bf00      	nop
 80023f0:	200009c8 	.word	0x200009c8

080023f4 <setup>:
// This function must be called in enter

void setup()
{
 80023f4:	b510      	push	{r4, lr}
    externalSetup(states);
 80023f6:	4c20      	ldr	r4, [pc, #128]	; (8002478 <setup+0x84>)
 80023f8:	f104 0010 	add.w	r0, r4, #16
 80023fc:	f7ff ff84 	bl	8002308 <externalSetup>

    setStateMachineTimer(&timeInCurrentStateTimer);
 8002400:	4620      	mov	r0, r4
 8002402:	f000 fa7b 	bl	80028fc <setStateMachineTimer>

    initDone = 1;
 8002406:	2301      	movs	r3, #1
 8002408:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    for(int i = ST_UNDEFINED + 1; i < ST_COUNT; i++)
 800240c:	e007      	b.n	800241e <setup+0x2a>
    {
        states[i].timeout = 0;
        states[i].nextState = ST_UNDEFINED;
        states[i].exitCondition = NULL;
        initDone &= states[i].enter && states[i].beforeLoop && states[i].loop && states[i].afterLoop;
 800240e:	2000      	movs	r0, #0
 8002410:	4919      	ldr	r1, [pc, #100]	; (8002478 <setup+0x84>)
 8002412:	f891 20b1 	ldrb.w	r2, [r1, #177]	; 0xb1
 8002416:	4002      	ands	r2, r0
 8002418:	f881 20b1 	strb.w	r2, [r1, #177]	; 0xb1
    for(int i = ST_UNDEFINED + 1; i < ST_COUNT; i++)
 800241c:	3301      	adds	r3, #1
 800241e:	2b03      	cmp	r3, #3
 8002420:	dc25      	bgt.n	800246e <setup+0x7a>
        states[i].timeout = 0;
 8002422:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002426:	00d1      	lsls	r1, r2, #3
 8002428:	4a13      	ldr	r2, [pc, #76]	; (8002478 <setup+0x84>)
 800242a:	440a      	add	r2, r1
 800242c:	2000      	movs	r0, #0
 800242e:	2100      	movs	r1, #0
 8002430:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
        states[i].nextState = ST_UNDEFINED;
 8002434:	2100      	movs	r1, #0
 8002436:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
        states[i].exitCondition = NULL;
 800243a:	6211      	str	r1, [r2, #32]
        initDone &= states[i].enter && states[i].beforeLoop && states[i].loop && states[i].afterLoop;
 800243c:	6912      	ldr	r2, [r2, #16]
 800243e:	2a00      	cmp	r2, #0
 8002440:	d0e5      	beq.n	800240e <setup+0x1a>
 8002442:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002446:	00d1      	lsls	r1, r2, #3
 8002448:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <setup+0x84>)
 800244a:	440a      	add	r2, r1
 800244c:	6952      	ldr	r2, [r2, #20]
 800244e:	b152      	cbz	r2, 8002466 <setup+0x72>
 8002450:	4a09      	ldr	r2, [pc, #36]	; (8002478 <setup+0x84>)
 8002452:	440a      	add	r2, r1
 8002454:	6992      	ldr	r2, [r2, #24]
 8002456:	b142      	cbz	r2, 800246a <setup+0x76>
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <setup+0x84>)
 800245a:	440a      	add	r2, r1
 800245c:	69d2      	ldr	r2, [r2, #28]
 800245e:	2a00      	cmp	r2, #0
 8002460:	d0d6      	beq.n	8002410 <setup+0x1c>
 8002462:	2001      	movs	r0, #1
 8002464:	e7d4      	b.n	8002410 <setup+0x1c>
 8002466:	2000      	movs	r0, #0
 8002468:	e7d2      	b.n	8002410 <setup+0x1c>
 800246a:	2000      	movs	r0, #0
 800246c:	e7d0      	b.n	8002410 <setup+0x1c>
    }
    
    setState(ST_STARTUP);
 800246e:	2001      	movs	r0, #1
 8002470:	f7ff ff9a 	bl	80023a8 <setState>
    
    
}
 8002474:	bd10      	pop	{r4, pc}
 8002476:	bf00      	nop
 8002478:	200009c8 	.word	0x200009c8

0800247c <loop>:

void loop(uint8_t dt)
{
    if(!initDone || !isValidState(actualState))
 800247c:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <loop+0xfc>)
 800247e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d077      	beq.n	8002576 <loop+0xfa>
{
 8002486:	b570      	push	{r4, r5, r6, lr}
 8002488:	b088      	sub	sp, #32
 800248a:	4604      	mov	r4, r0
    if(!initDone || !isValidState(actualState))
 800248c:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <loop+0xfc>)
 800248e:	7a18      	ldrb	r0, [r3, #8]
 8002490:	f7ff ff6e 	bl	8002370 <isValidState>
 8002494:	b908      	cbnz	r0, 800249a <loop+0x1e>

    }



}
 8002496:	b008      	add	sp, #32
 8002498:	bd70      	pop	{r4, r5, r6, pc}
    resetDeltaTime();
 800249a:	f000 f9d9 	bl	8002850 <resetDeltaTime>
    sleep(dt);
 800249e:	4620      	mov	r0, r4
 80024a0:	f000 fa36 	bl	8002910 <sleep>
    if(debugEnabled)
 80024a4:	4b34      	ldr	r3, [pc, #208]	; (8002578 <loop+0xfc>)
 80024a6:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80024aa:	b143      	cbz	r3, 80024be <loop+0x42>
        if((timeInCurrentStateTimer % 10) == 0){
 80024ac:	220a      	movs	r2, #10
 80024ae:	2300      	movs	r3, #0
 80024b0:	4931      	ldr	r1, [pc, #196]	; (8002578 <loop+0xfc>)
 80024b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024b6:	f7fd fee3 	bl	8000280 <__aeabi_uldivmod>
 80024ba:	4313      	orrs	r3, r2
 80024bc:	d04d      	beq.n	800255a <loop+0xde>
    StateStruct * stActualState = &states[actualState];
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <loop+0xfc>)
 80024c0:	7a1e      	ldrb	r6, [r3, #8]
    if(actualState != previousState){
 80024c2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80024c6:	429e      	cmp	r6, r3
 80024c8:	d00d      	beq.n	80024e6 <loop+0x6a>
        timeInCurrentStateTimer = 0;
 80024ca:	4d2b      	ldr	r5, [pc, #172]	; (8002578 <loop+0xfc>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	2300      	movs	r3, #0
 80024d0:	e9c5 2300 	strd	r2, r3, [r5]
        stActualState->enter();
 80024d4:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80024d8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	4798      	blx	r3
        previousState = actualState;
 80024e0:	7a2b      	ldrb	r3, [r5, #8]
 80024e2:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
    stActualState->beforeLoop(dt);
 80024e6:	eb06 0586 	add.w	r5, r6, r6, lsl #2
 80024ea:	4b23      	ldr	r3, [pc, #140]	; (8002578 <loop+0xfc>)
 80024ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80024f0:	696b      	ldr	r3, [r5, #20]
 80024f2:	4620      	mov	r0, r4
 80024f4:	4798      	blx	r3
    stActualState->loop(dt);
 80024f6:	69ab      	ldr	r3, [r5, #24]
 80024f8:	4620      	mov	r0, r4
 80024fa:	4798      	blx	r3
    stActualState->afterLoop(dt);
 80024fc:	69eb      	ldr	r3, [r5, #28]
 80024fe:	4620      	mov	r0, r4
 8002500:	4798      	blx	r3
    if(isValidState(stActualState->nextState)
 8002502:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
 8002506:	4620      	mov	r0, r4
 8002508:	f7ff ff32 	bl	8002370 <isValidState>
 800250c:	2800      	cmp	r0, #0
 800250e:	d0c2      	beq.n	8002496 <loop+0x1a>
    	&& stActualState->nextState != actualState)
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <loop+0xfc>)
 8002512:	7a1b      	ldrb	r3, [r3, #8]
 8002514:	429c      	cmp	r4, r3
 8002516:	d0be      	beq.n	8002496 <loop+0x1a>
    	if(stActualState->timeout
 8002518:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800251a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800251c:	ea52 0103 	orrs.w	r1, r2, r3
 8002520:	d006      	beq.n	8002530 <loop+0xb4>
    		&& timeInCurrentStateTimer >= stActualState->timeout){
 8002522:	4915      	ldr	r1, [pc, #84]	; (8002578 <loop+0xfc>)
 8002524:	6808      	ldr	r0, [r1, #0]
 8002526:	6849      	ldr	r1, [r1, #4]
 8002528:	4290      	cmp	r0, r2
 800252a:	eb71 0303 	sbcs.w	r3, r1, r3
 800252e:	d21e      	bcs.n	800256e <loop+0xf2>
    	if(!stActualState->exitCondition)
 8002530:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8002534:	4a10      	ldr	r2, [pc, #64]	; (8002578 <loop+0xfc>)
 8002536:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0aa      	beq.n	8002496 <loop+0x1a>
		if(stActualState->exitCondition())
 8002540:	4798      	blx	r3
 8002542:	2800      	cmp	r0, #0
 8002544:	d0a7      	beq.n	8002496 <loop+0x1a>
			setState(stActualState->nextState);
 8002546:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <loop+0xfc>)
 800254c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002550:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8002554:	f7ff ff28 	bl	80023a8 <setState>
 8002558:	e79d      	b.n	8002496 <loop+0x1a>
            sprintf(text,"Actual state: %d",actualState);
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <loop+0xfc>)
 800255c:	7a1a      	ldrb	r2, [r3, #8]
 800255e:	4907      	ldr	r1, [pc, #28]	; (800257c <loop+0x100>)
 8002560:	4668      	mov	r0, sp
 8002562:	f004 fe29 	bl	80071b8 <siprintf>
            sendMessage(text);
 8002566:	4668      	mov	r0, sp
 8002568:	f000 fa48 	bl	80029fc <sendMessage>
 800256c:	e7a7      	b.n	80024be <loop+0x42>
    		setState(stActualState->nextState);
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff ff1a 	bl	80023a8 <setState>
 8002574:	e7dc      	b.n	8002530 <loop+0xb4>
 8002576:	4770      	bx	lr
 8002578:	200009c8 	.word	0x200009c8
 800257c:	080079a4 	.word	0x080079a4

08002580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002580:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_MspInit+0x2c>)
 8002584:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	661a      	str	r2, [r3, #96]	; 0x60
 800258c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800258e:	f002 0201 	and.w	r2, r2, #1
 8002592:	9200      	str	r2, [sp, #0]
 8002594:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002598:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800259c:	659a      	str	r2, [r3, #88]	; 0x58
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a8:	b002      	add	sp, #8
 80025aa:	4770      	bx	lr
 80025ac:	40021000 	.word	0x40021000

080025b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b0:	b510      	push	{r4, lr}
 80025b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	2300      	movs	r3, #0
 80025b6:	9303      	str	r3, [sp, #12]
 80025b8:	9304      	str	r3, [sp, #16]
 80025ba:	9305      	str	r3, [sp, #20]
 80025bc:	9306      	str	r3, [sp, #24]
 80025be:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 80025c0:	6802      	ldr	r2, [r0, #0]
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_I2C_MspInit+0x64>)
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80025c8:	b008      	add	sp, #32
 80025ca:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025cc:	4c12      	ldr	r4, [pc, #72]	; (8002618 <HAL_I2C_MspInit+0x68>)
 80025ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80025d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e6:	2312      	movs	r3, #18
 80025e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025f2:	2304      	movs	r3, #4
 80025f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	a903      	add	r1, sp, #12
 80025f8:	4808      	ldr	r0, [pc, #32]	; (800261c <HAL_I2C_MspInit+0x6c>)
 80025fa:	f001 f845 	bl	8003688 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002604:	65a3      	str	r3, [r4, #88]	; 0x58
 8002606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	9b02      	ldr	r3, [sp, #8]
}
 8002610:	e7da      	b.n	80025c8 <HAL_I2C_MspInit+0x18>
 8002612:	bf00      	nop
 8002614:	40005800 	.word	0x40005800
 8002618:	40021000 	.word	0x40021000
 800261c:	48000400 	.word	0x48000400

08002620 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C2)
 8002620:	6802      	ldr	r2, [r0, #0]
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_I2C_MspDeInit+0x30>)
 8002624:	429a      	cmp	r2, r3
 8002626:	d000      	beq.n	800262a <HAL_I2C_MspDeInit+0xa>
 8002628:	4770      	bx	lr
{
 800262a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800262c:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_I2C_MspDeInit+0x34>)
 800262e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002630:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002634:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002636:	4c08      	ldr	r4, [pc, #32]	; (8002658 <HAL_I2C_MspDeInit+0x38>)
 8002638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800263c:	4620      	mov	r0, r4
 800263e:	f001 f911 	bl	8003864 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002646:	4620      	mov	r0, r4
 8002648:	f001 f90c 	bl	8003864 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800264c:	bd10      	pop	{r4, pc}
 800264e:	bf00      	nop
 8002650:	40005800 	.word	0x40005800
 8002654:	40021000 	.word	0x40021000
 8002658:	48000400 	.word	0x48000400

0800265c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800265c:	b500      	push	{lr}
 800265e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	2300      	movs	r3, #0
 8002662:	9303      	str	r3, [sp, #12]
 8002664:	9304      	str	r3, [sp, #16]
 8002666:	9305      	str	r3, [sp, #20]
 8002668:	9306      	str	r3, [sp, #24]
 800266a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 800266c:	6802      	ldr	r2, [r0, #0]
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_SPI_MspInit+0x64>)
 8002670:	429a      	cmp	r2, r3
 8002672:	d002      	beq.n	800267a <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002674:	b009      	add	sp, #36	; 0x24
 8002676:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 800267a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800267e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002684:	659a      	str	r2, [r3, #88]	; 0x58
 8002686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002688:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800268c:	9201      	str	r2, [sp, #4]
 800268e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002692:	f042 0204 	orr.w	r2, r2, #4
 8002696:	64da      	str	r2, [r3, #76]	; 0x4c
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80026a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026b0:	2306      	movs	r3, #6
 80026b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b4:	a903      	add	r1, sp, #12
 80026b6:	4803      	ldr	r0, [pc, #12]	; (80026c4 <HAL_SPI_MspInit+0x68>)
 80026b8:	f000 ffe6 	bl	8003688 <HAL_GPIO_Init>
}
 80026bc:	e7da      	b.n	8002674 <HAL_SPI_MspInit+0x18>
 80026be:	bf00      	nop
 80026c0:	40003c00 	.word	0x40003c00
 80026c4:	48000800 	.word	0x48000800

080026c8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80026c8:	6802      	ldr	r2, [r0, #0]
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_TIM_Base_MspInit+0x3c>)
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d000      	beq.n	80026d2 <HAL_TIM_Base_MspInit+0xa>
 80026d0:	4770      	bx	lr
{
 80026d2:	b500      	push	{lr}
 80026d4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026d6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80026da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026dc:	f042 0210 	orr.w	r2, r2, #16
 80026e0:	659a      	str	r2, [r3, #88]	; 0x58
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	4611      	mov	r1, r2
 80026f0:	2036      	movs	r0, #54	; 0x36
 80026f2:	f000 ff6f 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026f6:	2036      	movs	r0, #54	; 0x36
 80026f8:	f000 ffa4 	bl	8003644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80026fc:	b003      	add	sp, #12
 80026fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002702:	bf00      	nop
 8002704:	40001000 	.word	0x40001000

08002708 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM15)
 8002708:	6802      	ldr	r2, [r0, #0]
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_TIM_PWM_MspInit+0x28>)
 800270c:	429a      	cmp	r2, r3
 800270e:	d000      	beq.n	8002712 <HAL_TIM_PWM_MspInit+0xa>
 8002710:	4770      	bx	lr
{
 8002712:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002714:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8002718:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800271a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800271e:	661a      	str	r2, [r3, #96]	; 0x60
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800272a:	b002      	add	sp, #8
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40014000 	.word	0x40014000

08002734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002734:	b500      	push	{lr}
 8002736:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	2300      	movs	r3, #0
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	9303      	str	r3, [sp, #12]
 8002740:	9304      	str	r3, [sp, #16]
 8002742:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM15)
 8002744:	6802      	ldr	r2, [r0, #0]
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_TIM_MspPostInit+0x4c>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d002      	beq.n	8002752 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800274c:	b007      	add	sp, #28
 800274e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8002756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002758:	f042 0202 	orr.w	r2, r2, #2
 800275c:	64da      	str	r2, [r3, #76]	; 0x4c
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800276c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002772:	230e      	movs	r3, #14
 8002774:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002776:	a901      	add	r1, sp, #4
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <HAL_TIM_MspPostInit+0x50>)
 800277a:	f000 ff85 	bl	8003688 <HAL_GPIO_Init>
}
 800277e:	e7e5      	b.n	800274c <HAL_TIM_MspPostInit+0x18>
 8002780:	40014000 	.word	0x40014000
 8002784:	48000400 	.word	0x48000400

08002788 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <NMI_Handler>

0800278a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <HardFault_Handler>

0800278c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800278c:	e7fe      	b.n	800278c <MemManage_Handler>

0800278e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278e:	e7fe      	b.n	800278e <BusFault_Handler>

08002790 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler>

08002792 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002792:	4770      	bx	lr

08002794 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002794:	4770      	bx	lr

08002796 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002796:	4770      	bx	lr

08002798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002798:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279a:	f000 fee3 	bl	8003564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279e:	bd08      	pop	{r3, pc}

080027a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	dataAvailable=1;
 80027a2:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <EXTI9_5_IRQHandler+0x10>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80027a8:	2040      	movs	r0, #64	; 0x40
 80027aa:	f001 f901 	bl	80039b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027ae:	bd08      	pop	{r3, pc}
 80027b0:	20000564 	.word	0x20000564

080027b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
update=1;
 80027b6:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <TIM6_DAC_IRQHandler+0x10>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <TIM6_DAC_IRQHandler+0x14>)
 80027be:	f003 fc8e 	bl	80060de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027c2:	bd08      	pop	{r3, pc}
 80027c4:	20000560 	.word	0x20000560
 80027c8:	2000088c 	.word	0x2000088c

080027cc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80027cc:	b508      	push	{r3, lr}
 80027ce:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <_sbrk+0x34>)
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	b142      	cbz	r2, 80027e8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <_sbrk+0x34>)
 80027d8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80027da:	4403      	add	r3, r0
 80027dc:	466a      	mov	r2, sp
 80027de:	4293      	cmp	r3, r2
 80027e0:	d806      	bhi.n	80027f0 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80027e2:	4a07      	ldr	r2, [pc, #28]	; (8002800 <_sbrk+0x34>)
 80027e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80027e6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80027e8:	4a05      	ldr	r2, [pc, #20]	; (8002800 <_sbrk+0x34>)
 80027ea:	4906      	ldr	r1, [pc, #24]	; (8002804 <_sbrk+0x38>)
 80027ec:	6011      	str	r1, [r2, #0]
 80027ee:	e7f2      	b.n	80027d6 <_sbrk+0xa>
		errno = ENOMEM;
 80027f0:	f004 fb9a 	bl	8006f28 <__errno>
 80027f4:	230c      	movs	r3, #12
 80027f6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	e7f3      	b.n	80027e6 <_sbrk+0x1a>
 80027fe:	bf00      	nop
 8002800:	20000a7c 	.word	0x20000a7c
 8002804:	20000bb0 	.word	0x20000bb0

08002808 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002808:	490f      	ldr	r1, [pc, #60]	; (8002848 <SystemInit+0x40>)
 800280a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800280e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <SystemInit+0x44>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002820:	2000      	movs	r0, #0
 8002822:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800282a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800282e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002834:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800283c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800283e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002840:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002844:	608b      	str	r3, [r1, #8]
#endif
}
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00
 800284c:	40021000 	.word	0x40021000

08002850 <resetDeltaTime>:

}timers[TF_COUNT];

void resetDeltaTime()
{
    deltaTimeCounter = 0;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <resetDeltaTime+0xc>)
 8002852:	2000      	movs	r0, #0
 8002854:	2100      	movs	r1, #0
 8002856:	e9c3 0100 	strd	r0, r1, [r3]
}
 800285a:	4770      	bx	lr
 800285c:	20000a88 	.word	0x20000a88

08002860 <isValidTimer>:
}

uint8_t isValidTimer(Timer_Function function)
{
	return function < TF_COUNT && function >= 0;
}
 8002860:	fab0 f080 	clz	r0, r0
 8002864:	0940      	lsrs	r0, r0, #5
 8002866:	4770      	bx	lr

08002868 <initTimers>:

void initTimers()
{
	for(uint8_t i = 0; i < TF_COUNT; i++)
 8002868:	2300      	movs	r3, #0
 800286a:	b103      	cbz	r3, 800286e <initTimers+0x6>
	{
		timers[i].value = 0;
		timers[i].timeout  = 0;
		timers[i].callback = NULL;
	}
}
 800286c:	4770      	bx	lr
		timers[i].value = 0;
 800286e:	490c      	ldr	r1, [pc, #48]	; (80028a0 <initTimers+0x38>)
 8002870:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8002874:	00c2      	lsls	r2, r0, #3
 8002876:	440a      	add	r2, r1
 8002878:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8002898 <initTimers+0x30>
 800287c:	ed82 7b02 	vstr	d7, [r2, #8]
		timers[i].timeout  = 0;
 8002880:	ed82 7b06 	vstr	d7, [r2, #24]
		timers[i].callback = NULL;
 8002884:	00c2      	lsls	r2, r0, #3
 8002886:	4411      	add	r1, r2
 8002888:	2200      	movs	r2, #0
 800288a:	610a      	str	r2, [r1, #16]
	for(uint8_t i = 0; i < TF_COUNT; i++)
 800288c:	3301      	adds	r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	e7eb      	b.n	800286a <initTimers+0x2>
 8002892:	bf00      	nop
 8002894:	f3af 8000 	nop.w
	...
 80028a0:	20000a88 	.word	0x20000a88
 80028a4:	00000000 	.word	0x00000000

080028a8 <setTimer>:

void setTimer(Timer_Function function,void (*callback)(void),uint64_t timeout)
{
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	4604      	mov	r4, r0
 80028ac:	460d      	mov	r5, r1
 80028ae:	4617      	mov	r7, r2
 80028b0:	461e      	mov	r6, r3
	if(!isValidTimer(function) || !callback)
 80028b2:	f7ff ffd5 	bl	8002860 <isValidTimer>
 80028b6:	b168      	cbz	r0, 80028d4 <setTimer+0x2c>
 80028b8:	b165      	cbz	r5, 80028d4 <setTimer+0x2c>
		timers[function].callback = NULL;
		timers[function].timeout = 0;
		return;
	}

	timers[function].value = 0;
 80028ba:	480f      	ldr	r0, [pc, #60]	; (80028f8 <setTimer+0x50>)
 80028bc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80028c0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80028c4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80028f0 <setTimer+0x48>
 80028c8:	ed83 7b02 	vstr	d7, [r3, #8]
	timers[function].callback = callback;
 80028cc:	611d      	str	r5, [r3, #16]
	timers[function].timeout = timeout;
 80028ce:	619f      	str	r7, [r3, #24]
 80028d0:	61de      	str	r6, [r3, #28]

}
 80028d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		timers[function].value = 0;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <setTimer+0x50>)
 80028d6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80028da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80028de:	2600      	movs	r6, #0
 80028e0:	2700      	movs	r7, #0
 80028e2:	e9c2 6702 	strd	r6, r7, [r2, #8]
		timers[function].callback = NULL;
 80028e6:	2100      	movs	r1, #0
 80028e8:	6111      	str	r1, [r2, #16]
		timers[function].timeout = 0;
 80028ea:	e9c2 6706 	strd	r6, r7, [r2, #24]
		return;
 80028ee:	e7f0      	b.n	80028d2 <setTimer+0x2a>
	...
 80028f8:	20000a88 	.word	0x20000a88

080028fc <setStateMachineTimer>:



void setStateMachineTimer(uint64_t * stateTimer)
{
    stateMachineTimer = stateTimer;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <setStateMachineTimer+0x10>)
 80028fe:	6218      	str	r0, [r3, #32]
    *stateMachineTimer = 0;
 8002900:	2200      	movs	r2, #0
 8002902:	2300      	movs	r3, #0
 8002904:	e9c0 2300 	strd	r2, r3, [r0]
}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000a88 	.word	0x20000a88

08002910 <sleep>:

void sleep(uint32_t time)
{
	if(!time)
 8002910:	2800      	cmp	r0, #0
 8002912:	d04c      	beq.n	80029ae <sleep+0x9e>
{
 8002914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002918:	4680      	mov	r8, r0
		return;
	for(uint8_t tick = 0; tick <= time; tick ++){
 800291a:	2400      	movs	r4, #0
 800291c:	e001      	b.n	8002922 <sleep+0x12>
 800291e:	3401      	adds	r4, #1
 8002920:	b2e4      	uxtb	r4, r4
 8002922:	4544      	cmp	r4, r8
 8002924:	d841      	bhi.n	80029aa <sleep+0x9a>
		HAL_Delay(tick);
 8002926:	4620      	mov	r0, r4
 8002928:	f000 fe2e 	bl	8003588 <HAL_Delay>
        *stateMachineTimer += tick;
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <sleep+0xa8>)
 800292e:	6a18      	ldr	r0, [r3, #32]
 8002930:	2700      	movs	r7, #0
 8002932:	4626      	mov	r6, r4
 8002934:	6802      	ldr	r2, [r0, #0]
 8002936:	6841      	ldr	r1, [r0, #4]
 8002938:	1912      	adds	r2, r2, r4
 800293a:	f141 0100 	adc.w	r1, r1, #0
 800293e:	6002      	str	r2, [r0, #0]
 8002940:	6041      	str	r1, [r0, #4]
        deltaTimeCounter += tick;
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	1912      	adds	r2, r2, r4
 8002948:	f141 0100 	adc.w	r1, r1, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	6059      	str	r1, [r3, #4]

		for(uint8_t i = 0; i < TF_COUNT; i++){
 8002950:	463d      	mov	r5, r7
 8002952:	2d00      	cmp	r5, #0
 8002954:	d1e3      	bne.n	800291e <sleep+0xe>
			timers[i].value += tick;
 8002956:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800295a:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <sleep+0xa8>)
 800295c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	68d9      	ldr	r1, [r3, #12]
 8002964:	18b2      	adds	r2, r6, r2
 8002966:	eb47 0101 	adc.w	r1, r7, r1
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60d9      	str	r1, [r3, #12]
			if(timers[i].value >= timers[i].timeout
 800296e:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4562      	cmp	r2, ip
 8002976:	eb71 0203 	sbcs.w	r2, r1, r3
 800297a:	d313      	bcc.n	80029a4 <sleep+0x94>
					&& timers[i].timeout
 800297c:	ea5c 0303 	orrs.w	r3, ip, r3
 8002980:	d010      	beq.n	80029a4 <sleep+0x94>
					&& timers[i].callback)
 8002982:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8002986:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <sleep+0xa8>)
 8002988:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	b14a      	cbz	r2, 80029a4 <sleep+0x94>
			{
				timers[i].value = 0;
 8002990:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <sleep+0xa8>)
 8002996:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800299a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80029b0 <sleep+0xa0>
 800299e:	ed80 7b02 	vstr	d7, [r0, #8]
				timers[i].callback();
 80029a2:	4790      	blx	r2
		for(uint8_t i = 0; i < TF_COUNT; i++){
 80029a4:	3501      	adds	r5, #1
 80029a6:	b2ed      	uxtb	r5, r5
 80029a8:	e7d3      	b.n	8002952 <sleep+0x42>

		}
	}


}
 80029aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ae:	4770      	bx	lr
	...
 80029b8:	20000a88 	.word	0x20000a88

080029bc <concat>:
}



static void concat(char * a, char * b)
{
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	4605      	mov	r5, r0
 80029c0:	460e      	mov	r6, r1
	realloc(a,(char) (strlen(a) +strlen(b)));
 80029c2:	f7fd fc05 	bl	80001d0 <strlen>
 80029c6:	4604      	mov	r4, r0
 80029c8:	4630      	mov	r0, r6
 80029ca:	f7fd fc01 	bl	80001d0 <strlen>
 80029ce:	4404      	add	r4, r0
 80029d0:	b2e1      	uxtb	r1, r4
 80029d2:	4628      	mov	r0, r5
 80029d4:	f004 fbd8 	bl	8007188 <realloc>
	strcat(a,b);
 80029d8:	4631      	mov	r1, r6
 80029da:	4628      	mov	r0, r5
 80029dc:	f004 fc0c 	bl	80071f8 <strcat>
}
 80029e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080029e4 <reset>:
{
 80029e4:	b510      	push	{r4, lr}
	free(txt);
 80029e6:	4c04      	ldr	r4, [pc, #16]	; (80029f8 <reset+0x14>)
 80029e8:	6820      	ldr	r0, [r4, #0]
 80029ea:	f004 facf 	bl	8006f8c <free>
	txt = malloc(sizeof(char) * 1);
 80029ee:	2001      	movs	r0, #1
 80029f0:	f004 fac4 	bl	8006f7c <malloc>
 80029f4:	6020      	str	r0, [r4, #0]
}
 80029f6:	bd10      	pop	{r4, pc}
 80029f8:	20000aac 	.word	0x20000aac

080029fc <sendMessage>:


HAL_StatusTypeDef sendMessage()
{
 80029fc:	b510      	push	{r4, lr}
	return HAL_UART_Transmit(&huart1,(char*)txt,strlen(txt),1000);
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <sendMessage+0x1c>)
 8002a00:	681c      	ldr	r4, [r3, #0]
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7fd fbe4 	bl	80001d0 <strlen>
 8002a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0c:	b282      	uxth	r2, r0
 8002a0e:	4621      	mov	r1, r4
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <sendMessage+0x20>)
 8002a12:	f004 f98a 	bl	8006d2a <HAL_UART_Transmit>
	reset();
}
 8002a16:	bd10      	pop	{r4, pc}
 8002a18:	20000aac 	.word	0x20000aac
 8002a1c:	20000924 	.word	0x20000924

08002a20 <appendMessage>:

void appendMessage(char * text)
{
 8002a20:	b508      	push	{r3, lr}
 8002a22:	4601      	mov	r1, r0
	concat(txt,text);
 8002a24:	4b02      	ldr	r3, [pc, #8]	; (8002a30 <appendMessage+0x10>)
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	f7ff ffc8 	bl	80029bc <concat>
}
 8002a2c:	bd08      	pop	{r3, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000aac 	.word	0x20000aac

08002a34 <uart_init>:



void uart_init(void)
{
 8002a34:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002a36:	480c      	ldr	r0, [pc, #48]	; (8002a68 <uart_init+0x34>)
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <uart_init+0x38>)
 8002a3a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002a3c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a40:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a42:	2300      	movs	r3, #0
 8002a44:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a46:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a48:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a4e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a50:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a52:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a54:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a56:	f004 fa0c 	bl	8006e72 <HAL_UART_Init>
 8002a5a:	b910      	cbnz	r0, 8002a62 <uart_init+0x2e>
  {
    Error_Handler();
  }
  reset();
 8002a5c:	f7ff ffc2 	bl	80029e4 <reset>



}
 8002a60:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a62:	f7fe fe3d 	bl	80016e0 <Error_Handler>
 8002a66:	e7f9      	b.n	8002a5c <uart_init+0x28>
 8002a68:	20000924 	.word	0x20000924
 8002a6c:	40013800 	.word	0x40013800

08002a70 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002a70:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002a72:	b2c4      	uxtb	r4, r0
 8002a74:	2120      	movs	r1, #32
 8002a76:	4620      	mov	r0, r4
 8002a78:	f000 fc28 	bl	80032cc <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002a7c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002a80:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8002a84:	2120      	movs	r1, #32
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 fc0c 	bl	80032a4 <SENSOR_IO_Write>
}
 8002a8c:	bd10      	pop	{r4, pc}

08002a8e <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002a8e:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002a90:	b2c4      	uxtb	r4, r0
 8002a92:	2120      	movs	r1, #32
 8002a94:	4620      	mov	r0, r4
 8002a96:	f000 fc19 	bl	80032cc <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002a9a:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002a9e:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8002aa2:	2120      	movs	r1, #32
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f000 fbfd 	bl	80032a4 <SENSOR_IO_Write>
}
 8002aaa:	bd10      	pop	{r4, pc}

08002aac <HTS221_H_ReadID>:
{  
 8002aac:	b510      	push	{r4, lr}
 8002aae:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8002ab0:	f000 fbf0 	bl	8003294 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002ab4:	210f      	movs	r1, #15
 8002ab6:	b2e0      	uxtb	r0, r4
 8002ab8:	f000 fc08 	bl	80032cc <SENSOR_IO_Read>
}
 8002abc:	bd10      	pop	{r4, pc}
	...

08002ac0 <HTS221_H_ReadHumidity>:
{
 8002ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ac4:	b083      	sub	sp, #12
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002ac6:	fa5f f980 	uxtb.w	r9, r0
 8002aca:	2302      	movs	r3, #2
 8002acc:	aa01      	add	r2, sp, #4
 8002ace:	21b0      	movs	r1, #176	; 0xb0
 8002ad0:	4648      	mov	r0, r9
 8002ad2:	f000 fc11 	bl	80032f8 <SENSOR_IO_ReadMultiple>
  H0_rh = buffer[0] >> 1;
 8002ad6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ada:	085f      	lsrs	r7, r3, #1
  H1_rh = buffer[1] >> 1;
 8002adc:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8002ae0:	0876      	lsrs	r6, r6, #1
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	aa01      	add	r2, sp, #4
 8002ae6:	21b6      	movs	r1, #182	; 0xb6
 8002ae8:	4648      	mov	r0, r9
 8002aea:	f000 fc05 	bl	80032f8 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002aee:	f89d 5005 	ldrb.w	r5, [sp, #5]
 8002af2:	022d      	lsls	r5, r5, #8
 8002af4:	b22d      	sxth	r5, r5
 8002af6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002afa:	431d      	orrs	r5, r3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002afc:	2302      	movs	r3, #2
 8002afe:	aa01      	add	r2, sp, #4
 8002b00:	21ba      	movs	r1, #186	; 0xba
 8002b02:	4648      	mov	r0, r9
 8002b04:	f000 fbf8 	bl	80032f8 <SENSOR_IO_ReadMultiple>
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b08:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8002b0c:	0224      	lsls	r4, r4, #8
 8002b0e:	b224      	sxth	r4, r4
 8002b10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b14:	431c      	orrs	r4, r3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002b16:	2302      	movs	r3, #2
 8002b18:	aa01      	add	r2, sp, #4
 8002b1a:	21a8      	movs	r1, #168	; 0xa8
 8002b1c:	4648      	mov	r0, r9
 8002b1e:	f000 fbeb 	bl	80032f8 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	b21b      	sxth	r3, r3
 8002b2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002b2e:	4313      	orrs	r3, r2
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002b30:	1b5b      	subs	r3, r3, r5
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b3a:	1bf3      	subs	r3, r6, r7
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b48:	1b64      	subs	r4, r4, r5
 8002b4a:	ee07 4a10 	vmov	s14, r4
 8002b4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b52:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8002b56:	ee07 7a90 	vmov	s15, r7
 8002b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5e:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8002b62:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002b66:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8002b6a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b9c <HTS221_H_ReadHumidity+0xdc>
 8002b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b76:	dc07      	bgt.n	8002b88 <HTS221_H_ReadHumidity+0xc8>
        : tmp_f;
 8002b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	d504      	bpl.n	8002b8c <HTS221_H_ReadHumidity+0xcc>
 8002b82:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002ba0 <HTS221_H_ReadHumidity+0xe0>
 8002b86:	e001      	b.n	8002b8c <HTS221_H_ReadHumidity+0xcc>
        : ( tmp_f <    0.0f ) ?    0.0f
 8002b88:	eddf 7a04 	vldr	s15, [pc, #16]	; 8002b9c <HTS221_H_ReadHumidity+0xdc>
}
 8002b8c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002b90:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002b94:	b003      	add	sp, #12
 8002b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b9a:	bf00      	nop
 8002b9c:	447a0000 	.word	0x447a0000
 8002ba0:	00000000 	.word	0x00000000

08002ba4 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba8:	b082      	sub	sp, #8
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002baa:	fa5f f880 	uxtb.w	r8, r0
 8002bae:	2302      	movs	r3, #2
 8002bb0:	aa01      	add	r2, sp, #4
 8002bb2:	21b2      	movs	r1, #178	; 0xb2
 8002bb4:	4640      	mov	r0, r8
 8002bb6:	f000 fb9f 	bl	80032f8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002bba:	2135      	movs	r1, #53	; 0x35
 8002bbc:	4640      	mov	r0, r8
 8002bbe:	f000 fb85 	bl	80032cc <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002bc2:	0207      	lsls	r7, r0, #8
 8002bc4:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8002bc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bcc:	431f      	orrs	r7, r3
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002bce:	0184      	lsls	r4, r0, #6
 8002bd0:	f404 7440 	and.w	r4, r4, #768	; 0x300
 8002bd4:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8002bd8:	4304      	orrs	r4, r0
  T0_degC = T0_degC_x8_u16 >> 3;
 8002bda:	08ff      	lsrs	r7, r7, #3
  T1_degC = T1_degC_x8_u16 >> 3;
 8002bdc:	08e4      	lsrs	r4, r4, #3

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002bde:	2304      	movs	r3, #4
 8002be0:	eb0d 0203 	add.w	r2, sp, r3
 8002be4:	21bc      	movs	r1, #188	; 0xbc
 8002be6:	4640      	mov	r0, r8
 8002be8:	f000 fb86 	bl	80032f8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002bec:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8002bf0:	0236      	lsls	r6, r6, #8
 8002bf2:	b236      	sxth	r6, r6
 8002bf4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bf8:	431e      	orrs	r6, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002bfa:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002bfe:	022d      	lsls	r5, r5, #8
 8002c00:	b22d      	sxth	r5, r5
 8002c02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002c06:	431d      	orrs	r5, r3

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002c08:	2302      	movs	r3, #2
 8002c0a:	aa01      	add	r2, sp, #4
 8002c0c:	21aa      	movs	r1, #170	; 0xaa
 8002c0e:	4640      	mov	r0, r8
 8002c10:	f000 fb72 	bl	80032f8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c14:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002c20:	4313      	orrs	r3, r2

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002c22:	1b9b      	subs	r3, r3, r6
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2c:	1be3      	subs	r3, r4, r7
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3a:	1bad      	subs	r5, r5, r6
 8002c3c:	ee07 5a10 	vmov	s14, r5
 8002c40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c48:	ee07 7a90 	vmov	s15, r7
 8002c4c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8002c50:	ee36 0a80 	vadd.f32	s0, s13, s0
 8002c54:	b002      	add	sp, #8
 8002c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c5a <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002c5a:	b500      	push	{lr}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	ab02      	add	r3, sp, #8
 8002c60:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002c64:	f89d 2000 	ldrb.w	r2, [sp]
 8002c68:	2120      	movs	r1, #32
 8002c6a:	203c      	movs	r0, #60	; 0x3c
 8002c6c:	f000 fb1a 	bl	80032a4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002c70:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002c74:	2121      	movs	r1, #33	; 0x21
 8002c76:	203c      	movs	r0, #60	; 0x3c
 8002c78:	f000 fb14 	bl	80032a4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002c7c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002c80:	2122      	movs	r1, #34	; 0x22
 8002c82:	203c      	movs	r0, #60	; 0x3c
 8002c84:	f000 fb0e 	bl	80032a4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002c88:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002c8c:	2123      	movs	r1, #35	; 0x23
 8002c8e:	203c      	movs	r0, #60	; 0x3c
 8002c90:	f000 fb08 	bl	80032a4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002c94:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002c98:	2124      	movs	r1, #36	; 0x24
 8002c9a:	203c      	movs	r0, #60	; 0x3c
 8002c9c:	f000 fb02 	bl	80032a4 <SENSOR_IO_Write>
}
 8002ca0:	b003      	add	sp, #12
 8002ca2:	f85d fb04 	ldr.w	pc, [sp], #4

08002ca6 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002ca6:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002ca8:	2122      	movs	r1, #34	; 0x22
 8002caa:	203c      	movs	r0, #60	; 0x3c
 8002cac:	f000 fb0e 	bl	80032cc <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002cb0:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002cb4:	f042 0203 	orr.w	r2, r2, #3
 8002cb8:	2122      	movs	r1, #34	; 0x22
 8002cba:	203c      	movs	r0, #60	; 0x3c
 8002cbc:	f000 faf2 	bl	80032a4 <SENSOR_IO_Write>
}
 8002cc0:	bd08      	pop	{r3, pc}

08002cc2 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002cc2:	b510      	push	{r4, lr}
 8002cc4:	4604      	mov	r4, r0
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002cc6:	2122      	movs	r1, #34	; 0x22
 8002cc8:	203c      	movs	r0, #60	; 0x3c
 8002cca:	f000 faff 	bl	80032cc <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002cce:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 8002cd2:	b10c      	cbz	r4, 8002cd8 <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002cd4:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002cd8:	2122      	movs	r1, #34	; 0x22
 8002cda:	203c      	movs	r0, #60	; 0x3c
 8002cdc:	f000 fae2 	bl	80032a4 <SENSOR_IO_Write>
}
 8002ce0:	bd10      	pop	{r4, pc}

08002ce2 <LIS3MDL_MagReadID>:
{
 8002ce2:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8002ce4:	f000 fad6 	bl	8003294 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002ce8:	210f      	movs	r1, #15
 8002cea:	203c      	movs	r0, #60	; 0x3c
 8002cec:	f000 faee 	bl	80032cc <SENSOR_IO_Read>
}
 8002cf0:	bd08      	pop	{r3, pc}
	...

08002cf4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002cf4:	b530      	push	{r4, r5, lr}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002cfa:	2121      	movs	r1, #33	; 0x21
 8002cfc:	203c      	movs	r0, #60	; 0x3c
 8002cfe:	f000 fae5 	bl	80032cc <SENSOR_IO_Read>
 8002d02:	4605      	mov	r5, r0
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002d04:	2306      	movs	r3, #6
 8002d06:	466a      	mov	r2, sp
 8002d08:	21a8      	movs	r1, #168	; 0xa8
 8002d0a:	203c      	movs	r0, #60	; 0x3c
 8002d0c:	f000 faf4 	bl	80032f8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	e00f      	b.n	8002d34 <LIS3MDL_MagReadXYZ+0x40>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002d14:	005a      	lsls	r2, r3, #1
 8002d16:	f102 0111 	add.w	r1, r2, #17
 8002d1a:	4469      	add	r1, sp
 8002d1c:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8002d20:	3210      	adds	r2, #16
 8002d22:	446a      	add	r2, sp
 8002d24:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8002d28:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8002d2c:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 8002d30:	3301      	adds	r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d9ed      	bls.n	8002d14 <LIS3MDL_MagReadXYZ+0x20>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002d38:	f005 0560 	and.w	r5, r5, #96	; 0x60
 8002d3c:	2d40      	cmp	r5, #64	; 0x40
 8002d3e:	d00c      	beq.n	8002d5a <LIS3MDL_MagReadXYZ+0x66>
 8002d40:	d806      	bhi.n	8002d50 <LIS3MDL_MagReadXYZ+0x5c>
 8002d42:	b16d      	cbz	r5, 8002d60 <LIS3MDL_MagReadXYZ+0x6c>
 8002d44:	2d20      	cmp	r5, #32
 8002d46:	d10e      	bne.n	8002d66 <LIS3MDL_MagReadXYZ+0x72>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
    break;
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002d48:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002da0 <LIS3MDL_MagReadXYZ+0xac>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
    break;    
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e023      	b.n	8002d98 <LIS3MDL_MagReadXYZ+0xa4>
  switch(ctrlm & 0x60)
 8002d50:	2d60      	cmp	r5, #96	; 0x60
 8002d52:	d10b      	bne.n	8002d6c <LIS3MDL_MagReadXYZ+0x78>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002d54:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002da4 <LIS3MDL_MagReadXYZ+0xb0>
 8002d58:	e7f8      	b.n	8002d4c <LIS3MDL_MagReadXYZ+0x58>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002d5a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002da8 <LIS3MDL_MagReadXYZ+0xb4>
 8002d5e:	e7f5      	b.n	8002d4c <LIS3MDL_MagReadXYZ+0x58>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002d60:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002dac <LIS3MDL_MagReadXYZ+0xb8>
 8002d64:	e7f2      	b.n	8002d4c <LIS3MDL_MagReadXYZ+0x58>
  switch(ctrlm & 0x60)
 8002d66:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002db0 <LIS3MDL_MagReadXYZ+0xbc>
 8002d6a:	e7ef      	b.n	8002d4c <LIS3MDL_MagReadXYZ+0x58>
 8002d6c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002db0 <LIS3MDL_MagReadXYZ+0xbc>
 8002d70:	e7ec      	b.n	8002d4c <LIS3MDL_MagReadXYZ+0x58>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002d72:	aa04      	add	r2, sp, #16
 8002d74:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002d78:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 8002d7c:	ee07 2a90 	vmov	s15, r2
 8002d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d8c:	ee17 2a90 	vmov	r2, s15
 8002d90:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for(i=0; i<3; i++)
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d9ea      	bls.n	8002d72 <LIS3MDL_MagReadXYZ+0x7e>
  }
}
 8002d9c:	b005      	add	sp, #20
 8002d9e:	bd30      	pop	{r4, r5, pc}
 8002da0:	3e947ae1 	.word	0x3e947ae1
 8002da4:	3f147ae1 	.word	0x3f147ae1
 8002da8:	3edc28f6 	.word	0x3edc28f6
 8002dac:	3e0f5c29 	.word	0x3e0f5c29
 8002db0:	00000000 	.word	0x00000000

08002db4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002db4:	b530      	push	{r4, r5, lr}
 8002db6:	b083      	sub	sp, #12
 8002db8:	4605      	mov	r5, r0
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002dba:	2400      	movs	r4, #0
 8002dbc:	e00c      	b.n	8002dd8 <LPS22HB_P_ReadPressure+0x24>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002dbe:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002dc2:	b2c9      	uxtb	r1, r1
 8002dc4:	b2e8      	uxtb	r0, r5
 8002dc6:	f000 fa81 	bl	80032cc <SENSOR_IO_Read>
 8002dca:	f104 0308 	add.w	r3, r4, #8
 8002dce:	446b      	add	r3, sp
 8002dd0:	f803 0c04 	strb.w	r0, [r3, #-4]
  for(i = 0; i < 3; i++)
 8002dd4:	3401      	adds	r4, #1
 8002dd6:	b2e4      	uxtb	r4, r4
 8002dd8:	2c02      	cmp	r4, #2
 8002dda:	d9f0      	bls.n	8002dbe <LPS22HB_P_ReadPressure+0xa>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002ddc:	2300      	movs	r3, #0
  uint32_t tmp = 0;
 8002dde:	461a      	mov	r2, r3
 8002de0:	e009      	b.n	8002df6 <LPS22HB_P_ReadPressure+0x42>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002de2:	f103 0108 	add.w	r1, r3, #8
 8002de6:	4469      	add	r1, sp
 8002de8:	f811 1c04 	ldrb.w	r1, [r1, #-4]
 8002dec:	00d8      	lsls	r0, r3, #3
 8002dee:	4081      	lsls	r1, r0
 8002df0:	430a      	orrs	r2, r1
  for(i = 0; i < 3; i++)
 8002df2:	3301      	adds	r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d9f3      	bls.n	8002de2 <LPS22HB_P_ReadPressure+0x2e>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002dfa:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8002dfe:	d001      	beq.n	8002e04 <LPS22HB_P_ReadPressure+0x50>
    tmp |= 0xFF000000;
 8002e00:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 8002e04:	2364      	movs	r3, #100	; 0x64
 8002e06:	fb03 f202 	mul.w	r2, r3, r2
 8002e0a:	2a00      	cmp	r2, #0
 8002e0c:	db0a      	blt.n	8002e24 <LPS22HB_P_ReadPressure+0x70>
 8002e0e:	1312      	asrs	r2, r2, #12

  return (float)((float)raw_press / 100.0f);
 8002e10:	ee07 2a90 	vmov	s15, r2
 8002e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002e18:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002e2c <LPS22HB_P_ReadPressure+0x78>
 8002e1c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002e20:	b003      	add	sp, #12
 8002e22:	bd30      	pop	{r4, r5, pc}
  raw_press = (raw_press * 100) / 4096;
 8002e24:	f602 72ff 	addw	r2, r2, #4095	; 0xfff
 8002e28:	e7f1      	b.n	8002e0e <LPS22HB_P_ReadPressure+0x5a>
 8002e2a:	bf00      	nop
 8002e2c:	42c80000 	.word	0x42c80000

08002e30 <LPS22HB_T_ReadTemp>:
  * @brief  Read temperature value of LPS22HB
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float LPS22HB_T_ReadTemp(uint16_t DeviceAddr)
{
 8002e30:	b530      	push	{r4, r5, lr}
 8002e32:	b083      	sub	sp, #12
 8002e34:	4605      	mov	r5, r0
  int16_t raw_data;
  uint8_t buffer[2];
  uint16_t tmp;
  uint8_t i;

  for(i = 0; i < 2; i++)
 8002e36:	2400      	movs	r4, #0
 8002e38:	e00c      	b.n	8002e54 <LPS22HB_T_ReadTemp+0x24>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_TEMP_OUT_L_REG + i));
 8002e3a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8002e3e:	b2c9      	uxtb	r1, r1
 8002e40:	b2e8      	uxtb	r0, r5
 8002e42:	f000 fa43 	bl	80032cc <SENSOR_IO_Read>
 8002e46:	f104 0308 	add.w	r3, r4, #8
 8002e4a:	446b      	add	r3, sp
 8002e4c:	f803 0c04 	strb.w	r0, [r3, #-4]
  for(i = 0; i < 2; i++)
 8002e50:	3401      	adds	r4, #1
 8002e52:	b2e4      	uxtb	r4, r4
 8002e54:	2c01      	cmp	r4, #1
 8002e56:	d9f0      	bls.n	8002e3a <LPS22HB_T_ReadTemp+0xa>
  }

  /* Build the raw tmp */
  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 8002e58:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002e5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e64:	b29b      	uxth	r3, r3

  raw_data = (tmp * 10) / 100;
 8002e66:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <LPS22HB_T_ReadTemp+0x54>)
 8002e68:	fb82 2303 	smull	r2, r3, r2, r3
 8002e6c:	089b      	lsrs	r3, r3, #2
  
  return ((float)(raw_data / 10.0f));
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002e76:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002e7a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002e7e:	b003      	add	sp, #12
 8002e80:	bd30      	pop	{r4, r5, pc}
 8002e82:	bf00      	nop
 8002e84:	66666667 	.word	0x66666667

08002e88 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002e88:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002e8a:	b2c4      	uxtb	r4, r0
 8002e8c:	211a      	movs	r1, #26
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f000 fa1c 	bl	80032cc <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8002e94:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	211a      	movs	r1, #26
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f000 fa00 	bl	80032a4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002ea4:	2110      	movs	r1, #16
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f000 fa10 	bl	80032cc <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002eac:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002eb0:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8002eb4:	2110      	movs	r1, #16
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f000 f9f4 	bl	80032a4 <SENSOR_IO_Write>
}  
 8002ebc:	bd10      	pop	{r4, pc}

08002ebe <LPS22HB_P_Init>:
{
 8002ebe:	b508      	push	{r3, lr}
  LPS22HB_Init(DeviceAddr);
 8002ec0:	f7ff ffe2 	bl	8002e88 <LPS22HB_Init>
}
 8002ec4:	bd08      	pop	{r3, pc}

08002ec6 <LPS22HB_T_Init>:
{  
 8002ec6:	b508      	push	{r3, lr}
  LPS22HB_Init(DeviceAddr);
 8002ec8:	f7ff ffde 	bl	8002e88 <LPS22HB_Init>
}
 8002ecc:	bd08      	pop	{r3, pc}

08002ece <LPS22HB_P_ReadID>:
{  
 8002ece:	b510      	push	{r4, lr}
 8002ed0:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 8002ed2:	f000 f9df 	bl	8003294 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	b2e0      	uxtb	r0, r4
 8002eda:	f000 f9f7 	bl	80032cc <SENSOR_IO_Read>
}
 8002ede:	bd10      	pop	{r4, pc}

08002ee0 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002ee4:	2110      	movs	r1, #16
 8002ee6:	20d4      	movs	r0, #212	; 0xd4
 8002ee8:	f000 f9f0 	bl	80032cc <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002eec:	b2e2      	uxtb	r2, r4
  tmp &= ~(0xFC);
 8002eee:	f000 0003 	and.w	r0, r0, #3
  tmp |= ctrl;
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002ef2:	4302      	orrs	r2, r0
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	20d4      	movs	r0, #212	; 0xd4
 8002ef8:	f000 f9d4 	bl	80032a4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002efc:	2112      	movs	r1, #18
 8002efe:	20d4      	movs	r0, #212	; 0xd4
 8002f00:	f000 f9e4 	bl	80032cc <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8002f04:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002f08:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8002f0c:	2112      	movs	r1, #18
 8002f0e:	20d4      	movs	r0, #212	; 0xd4
 8002f10:	f000 f9c8 	bl	80032a4 <SENSOR_IO_Write>
}
 8002f14:	bd10      	pop	{r4, pc}

08002f16 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002f16:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002f18:	2110      	movs	r1, #16
 8002f1a:	20d4      	movs	r0, #212	; 0xd4
 8002f1c:	f000 f9d6 	bl	80032cc <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002f20:	f000 020f 	and.w	r2, r0, #15
 8002f24:	2110      	movs	r1, #16
 8002f26:	20d4      	movs	r0, #212	; 0xd4
 8002f28:	f000 f9bc 	bl	80032a4 <SENSOR_IO_Write>
}
 8002f2c:	bd08      	pop	{r3, pc}

08002f2e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002f32:	2115      	movs	r1, #21
 8002f34:	20d4      	movs	r0, #212	; 0xd4
 8002f36:	f000 f9c9 	bl	80032cc <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002f3a:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8002f3e:	b10c      	cbz	r4, 8002f44 <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002f40:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002f44:	2115      	movs	r1, #21
 8002f46:	20d4      	movs	r0, #212	; 0xd4
 8002f48:	f000 f9ac 	bl	80032a4 <SENSOR_IO_Write>
}
 8002f4c:	bd10      	pop	{r4, pc}

08002f4e <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002f4e:	b510      	push	{r4, lr}
 8002f50:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002f52:	2111      	movs	r1, #17
 8002f54:	20d4      	movs	r0, #212	; 0xd4
 8002f56:	f000 f9b9 	bl	80032cc <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002f5a:	b2e2      	uxtb	r2, r4
  tmp &= ~(0xFC);
 8002f5c:	f000 0003 	and.w	r0, r0, #3
  tmp |= ctrl;
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002f60:	4302      	orrs	r2, r0
 8002f62:	2111      	movs	r1, #17
 8002f64:	20d4      	movs	r0, #212	; 0xd4
 8002f66:	f000 f99d 	bl	80032a4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002f6a:	2112      	movs	r1, #18
 8002f6c:	20d4      	movs	r0, #212	; 0xd4
 8002f6e:	f000 f9ad 	bl	80032cc <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8002f72:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002f76:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8002f7a:	2112      	movs	r1, #18
 8002f7c:	20d4      	movs	r0, #212	; 0xd4
 8002f7e:	f000 f991 	bl	80032a4 <SENSOR_IO_Write>
}
 8002f82:	bd10      	pop	{r4, pc}

08002f84 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002f84:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002f86:	2111      	movs	r1, #17
 8002f88:	20d4      	movs	r0, #212	; 0xd4
 8002f8a:	f000 f99f 	bl	80032cc <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002f8e:	f000 020f 	and.w	r2, r0, #15
 8002f92:	2111      	movs	r1, #17
 8002f94:	20d4      	movs	r0, #212	; 0xd4
 8002f96:	f000 f985 	bl	80032a4 <SENSOR_IO_Write>
}
 8002f9a:	bd08      	pop	{r3, pc}

08002f9c <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002fa0:	2116      	movs	r1, #22
 8002fa2:	20d4      	movs	r0, #212	; 0xd4
 8002fa4:	f000 f992 	bl	80032cc <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002fa8:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 8002fac:	b10c      	cbz	r4, 8002fb2 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002fae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002fb2:	2116      	movs	r1, #22
 8002fb4:	20d4      	movs	r0, #212	; 0xd4
 8002fb6:	f000 f975 	bl	80032a4 <SENSOR_IO_Write>
}
 8002fba:	bd10      	pop	{r4, pc}

08002fbc <LSM6DSL_AccReadID>:
{  
 8002fbc:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 8002fbe:	f000 f969 	bl	8003294 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002fc2:	210f      	movs	r1, #15
 8002fc4:	20d4      	movs	r0, #212	; 0xd4
 8002fc6:	f000 f981 	bl	80032cc <SENSOR_IO_Read>
}
 8002fca:	bd08      	pop	{r3, pc}

08002fcc <LSM6DSL_GyroReadID>:
{
 8002fcc:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8002fce:	f000 f961 	bl	8003294 <SENSOR_IO_Init>
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	20d4      	movs	r0, #212	; 0xd4
 8002fd6:	f000 f979 	bl	80032cc <SENSOR_IO_Read>
}
 8002fda:	bd08      	pop	{r3, pc}

08002fdc <LSM6DSL_AccReadXYZ>:
{
 8002fdc:	b530      	push	{r4, r5, lr}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	20d4      	movs	r0, #212	; 0xd4
 8002fe6:	f000 f971 	bl	80032cc <SENSOR_IO_Read>
 8002fea:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002fec:	2306      	movs	r3, #6
 8002fee:	466a      	mov	r2, sp
 8002ff0:	2128      	movs	r1, #40	; 0x28
 8002ff2:	20d4      	movs	r0, #212	; 0xd4
 8002ff4:	f000 f980 	bl	80032f8 <SENSOR_IO_ReadMultiple>
  for(i=0; i<3; i++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e00f      	b.n	800301c <LSM6DSL_AccReadXYZ+0x40>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002ffc:	005a      	lsls	r2, r3, #1
 8002ffe:	f102 0111 	add.w	r1, r2, #17
 8003002:	4469      	add	r1, sp
 8003004:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8003008:	3210      	adds	r2, #16
 800300a:	446a      	add	r2, sp
 800300c:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8003010:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8003014:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 8003018:	3301      	adds	r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d9ed      	bls.n	8002ffc <LSM6DSL_AccReadXYZ+0x20>
  switch(ctrlx & 0x0C)
 8003020:	f005 050c 	and.w	r5, r5, #12
 8003024:	2d0c      	cmp	r5, #12
 8003026:	d808      	bhi.n	800303a <LSM6DSL_AccReadXYZ+0x5e>
 8003028:	e8df f005 	tbb	[pc, r5]
 800302c:	07070714 	.word	0x07070714
 8003030:	07070711 	.word	0x07070711
 8003034:	0707070b 	.word	0x0707070b
 8003038:	0e          	.byte	0x0e
 8003039:	00          	.byte	0x00
 800303a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003088 <LSM6DSL_AccReadXYZ+0xac>
  for(i=0; i<3; i++)
 800303e:	2300      	movs	r3, #0
 8003040:	e01e      	b.n	8003080 <LSM6DSL_AccReadXYZ+0xa4>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003042:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800308c <LSM6DSL_AccReadXYZ+0xb0>
    break;
 8003046:	e7fa      	b.n	800303e <LSM6DSL_AccReadXYZ+0x62>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003048:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003090 <LSM6DSL_AccReadXYZ+0xb4>
    break;
 800304c:	e7f7      	b.n	800303e <LSM6DSL_AccReadXYZ+0x62>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800304e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003094 <LSM6DSL_AccReadXYZ+0xb8>
    break;    
 8003052:	e7f4      	b.n	800303e <LSM6DSL_AccReadXYZ+0x62>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003054:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003098 <LSM6DSL_AccReadXYZ+0xbc>
 8003058:	e7f1      	b.n	800303e <LSM6DSL_AccReadXYZ+0x62>
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800305a:	aa04      	add	r2, sp, #16
 800305c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003060:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 8003064:	ee07 2a90 	vmov	s15, r2
 8003068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003074:	ee17 2a90 	vmov	r2, s15
 8003078:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for(i=0; i<3; i++)
 800307c:	3301      	adds	r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d9ea      	bls.n	800305a <LSM6DSL_AccReadXYZ+0x7e>
}
 8003084:	b005      	add	sp, #20
 8003086:	bd30      	pop	{r4, r5, pc}
 8003088:	00000000 	.word	0x00000000
 800308c:	3df9db23 	.word	0x3df9db23
 8003090:	3e79db23 	.word	0x3e79db23
 8003094:	3ef9db23 	.word	0x3ef9db23
 8003098:	3d79db23 	.word	0x3d79db23

0800309c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800309c:	b530      	push	{r4, r5, lr}
 800309e:	b085      	sub	sp, #20
 80030a0:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80030a2:	2111      	movs	r1, #17
 80030a4:	20d4      	movs	r0, #212	; 0xd4
 80030a6:	f000 f911 	bl	80032cc <SENSOR_IO_Read>
 80030aa:	4605      	mov	r5, r0
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80030ac:	2306      	movs	r3, #6
 80030ae:	466a      	mov	r2, sp
 80030b0:	2122      	movs	r1, #34	; 0x22
 80030b2:	20d4      	movs	r0, #212	; 0xd4
 80030b4:	f000 f920 	bl	80032f8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	e00f      	b.n	80030dc <LSM6DSL_GyroReadXYZAngRate+0x40>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80030bc:	005a      	lsls	r2, r3, #1
 80030be:	f102 0111 	add.w	r1, r2, #17
 80030c2:	4469      	add	r1, sp
 80030c4:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80030c8:	3210      	adds	r2, #16
 80030ca:	446a      	add	r2, sp
 80030cc:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80030d0:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80030d4:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 80030d8:	3301      	adds	r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d9ed      	bls.n	80030bc <LSM6DSL_GyroReadXYZAngRate+0x20>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80030e0:	f005 050c 	and.w	r5, r5, #12
 80030e4:	2d0c      	cmp	r5, #12
 80030e6:	d808      	bhi.n	80030fa <LSM6DSL_GyroReadXYZAngRate+0x5e>
 80030e8:	e8df f005 	tbb	[pc, r5]
 80030ec:	07070714 	.word	0x07070714
 80030f0:	0707070b 	.word	0x0707070b
 80030f4:	0707070e 	.word	0x0707070e
 80030f8:	11          	.byte	0x11
 80030f9:	00          	.byte	0x00
 80030fa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003144 <LSM6DSL_GyroReadXYZAngRate+0xa8>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
    break;    
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	e01c      	b.n	800313c <LSM6DSL_GyroReadXYZAngRate+0xa0>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8003102:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003148 <LSM6DSL_GyroReadXYZAngRate+0xac>
    break;
 8003106:	e7fa      	b.n	80030fe <LSM6DSL_GyroReadXYZAngRate+0x62>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003108:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800314c <LSM6DSL_GyroReadXYZAngRate+0xb0>
    break;
 800310c:	e7f7      	b.n	80030fe <LSM6DSL_GyroReadXYZAngRate+0x62>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800310e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003150 <LSM6DSL_GyroReadXYZAngRate+0xb4>
    break;    
 8003112:	e7f4      	b.n	80030fe <LSM6DSL_GyroReadXYZAngRate+0x62>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003114:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003154 <LSM6DSL_GyroReadXYZAngRate+0xb8>
 8003118:	e7f1      	b.n	80030fe <LSM6DSL_GyroReadXYZAngRate+0x62>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800311a:	aa04      	add	r2, sp, #16
 800311c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003120:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 8003124:	ee07 2a90 	vmov	s15, r2
 8003128:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800312c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003134:	edc2 7a00 	vstr	s15, [r2]
  for(i=0; i<3; i++)
 8003138:	3301      	adds	r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d9ec      	bls.n	800311a <LSM6DSL_GyroReadXYZAngRate+0x7e>
  }
}
 8003140:	b005      	add	sp, #20
 8003142:	bd30      	pop	{r4, r5, pc}
 8003144:	00000000 	.word	0x00000000
 8003148:	418c0000 	.word	0x418c0000
 800314c:	420c0000 	.word	0x420c0000
 8003150:	428c0000 	.word	0x428c0000
 8003154:	410c0000 	.word	0x410c0000

08003158 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003158:	b530      	push	{r4, r5, lr}
 800315a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800315c:	4c20      	ldr	r4, [pc, #128]	; (80031e0 <I2Cx_MspInit+0x88>)
 800315e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003166:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003170:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003174:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003176:	2312      	movs	r3, #18
 8003178:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800317a:	2301      	movs	r3, #1
 800317c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317e:	2303      	movs	r3, #3
 8003180:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003182:	2304      	movs	r3, #4
 8003184:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003186:	4d17      	ldr	r5, [pc, #92]	; (80031e4 <I2Cx_MspInit+0x8c>)
 8003188:	a903      	add	r1, sp, #12
 800318a:	4628      	mov	r0, r5
 800318c:	f000 fa7c 	bl	8003688 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003190:	a903      	add	r1, sp, #12
 8003192:	4628      	mov	r0, r5
 8003194:	f000 fa78 	bl	8003688 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003198:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800319a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800319e:	65a3      	str	r3, [r4, #88]	; 0x58
 80031a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	9302      	str	r3, [sp, #8]
 80031a8:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80031aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031b0:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80031b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80031b8:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	210f      	movs	r1, #15
 80031be:	2021      	movs	r0, #33	; 0x21
 80031c0:	f000 fa08 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80031c4:	2021      	movs	r0, #33	; 0x21
 80031c6:	f000 fa3d 	bl	8003644 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	210f      	movs	r1, #15
 80031ce:	2022      	movs	r0, #34	; 0x22
 80031d0:	f000 fa00 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80031d4:	2022      	movs	r0, #34	; 0x22
 80031d6:	f000 fa35 	bl	8003644 <HAL_NVIC_EnableIRQ>
}
 80031da:	b009      	add	sp, #36	; 0x24
 80031dc:	bd30      	pop	{r4, r5, pc}
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	48000400 	.word	0x48000400

080031e8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	4604      	mov	r4, r0
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <I2Cx_Init+0x30>)
 80031ee:	6003      	str	r3, [r0, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <I2Cx_Init+0x34>)
 80031f2:	6043      	str	r3, [r0, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80031f4:	2500      	movs	r5, #0
 80031f6:	6085      	str	r5, [r0, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80031f8:	2301      	movs	r3, #1
 80031fa:	60c3      	str	r3, [r0, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80031fc:	6105      	str	r5, [r0, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80031fe:	6145      	str	r5, [r0, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003200:	61c5      	str	r5, [r0, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003202:	6205      	str	r5, [r0, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003204:	f7ff ffa8 	bl	8003158 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003208:	4620      	mov	r0, r4
 800320a:	f000 fd9b 	bl	8003d44 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800320e:	4629      	mov	r1, r5
 8003210:	4620      	mov	r0, r4
 8003212:	f001 f937 	bl	8004484 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003216:	bd38      	pop	{r3, r4, r5, pc}
 8003218:	40005800 	.word	0x40005800
 800321c:	00702681 	.word	0x00702681

08003220 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003220:	b510      	push	{r4, lr}
 8003222:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003224:	f000 fdec 	bl	8003e00 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff ffdd 	bl	80031e8 <I2Cx_Init>
}
 800322e:	bd10      	pop	{r4, pc}

08003230 <I2Cx_WriteMultiple>:
{
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	4605      	mov	r5, r0
 8003236:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003238:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800323c:	9102      	str	r1, [sp, #8]
 800323e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003242:	9101      	str	r1, [sp, #4]
 8003244:	9908      	ldr	r1, [sp, #32]
 8003246:	9100      	str	r1, [sp, #0]
 8003248:	4621      	mov	r1, r4
 800324a:	f000 ff6f 	bl	800412c <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800324e:	4606      	mov	r6, r0
 8003250:	b910      	cbnz	r0, 8003258 <I2Cx_WriteMultiple+0x28>
}
 8003252:	4630      	mov	r0, r6
 8003254:	b004      	add	sp, #16
 8003256:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8003258:	4621      	mov	r1, r4
 800325a:	4628      	mov	r0, r5
 800325c:	f7ff ffe0 	bl	8003220 <I2Cx_Error>
 8003260:	e7f7      	b.n	8003252 <I2Cx_WriteMultiple+0x22>

08003262 <I2Cx_ReadMultiple>:
{
 8003262:	b570      	push	{r4, r5, r6, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	4605      	mov	r5, r0
 8003268:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800326a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800326e:	9102      	str	r1, [sp, #8]
 8003270:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003274:	9101      	str	r1, [sp, #4]
 8003276:	9908      	ldr	r1, [sp, #32]
 8003278:	9100      	str	r1, [sp, #0]
 800327a:	4621      	mov	r1, r4
 800327c:	f001 f82a 	bl	80042d4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8003280:	4606      	mov	r6, r0
 8003282:	b910      	cbnz	r0, 800328a <I2Cx_ReadMultiple+0x28>
}
 8003284:	4630      	mov	r0, r6
 8003286:	b004      	add	sp, #16
 8003288:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800328a:	4621      	mov	r1, r4
 800328c:	4628      	mov	r0, r5
 800328e:	f7ff ffc7 	bl	8003220 <I2Cx_Error>
 8003292:	e7f7      	b.n	8003284 <I2Cx_ReadMultiple+0x22>

08003294 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003294:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cHandler);
 8003296:	4802      	ldr	r0, [pc, #8]	; (80032a0 <SENSOR_IO_Init+0xc>)
 8003298:	f7ff ffa6 	bl	80031e8 <I2Cx_Init>
}
 800329c:	bd08      	pop	{r3, pc}
 800329e:	bf00      	nop
 80032a0:	20000ab0 	.word	0x20000ab0

080032a4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80032a4:	b500      	push	{lr}
 80032a6:	b085      	sub	sp, #20
 80032a8:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80032ac:	2301      	movs	r3, #1
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	f10d 020f 	add.w	r2, sp, #15
 80032b4:	9200      	str	r2, [sp, #0]
 80032b6:	460a      	mov	r2, r1
 80032b8:	4601      	mov	r1, r0
 80032ba:	4803      	ldr	r0, [pc, #12]	; (80032c8 <SENSOR_IO_Write+0x24>)
 80032bc:	f7ff ffb8 	bl	8003230 <I2Cx_WriteMultiple>
}
 80032c0:	b005      	add	sp, #20
 80032c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80032c6:	bf00      	nop
 80032c8:	20000ab0 	.word	0x20000ab0

080032cc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80032cc:	b500      	push	{lr}
 80032ce:	b085      	sub	sp, #20
 80032d0:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f88d 300f 	strb.w	r3, [sp, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80032d8:	2301      	movs	r3, #1
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	f10d 010f 	add.w	r1, sp, #15
 80032e0:	9100      	str	r1, [sp, #0]
 80032e2:	4601      	mov	r1, r0
 80032e4:	4803      	ldr	r0, [pc, #12]	; (80032f4 <SENSOR_IO_Read+0x28>)
 80032e6:	f7ff ffbc 	bl	8003262 <I2Cx_ReadMultiple>

  return read_value;
}
 80032ea:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80032ee:	b005      	add	sp, #20
 80032f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80032f4:	20000ab0 	.word	0x20000ab0

080032f8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80032f8:	b500      	push	{lr}
 80032fa:	b083      	sub	sp, #12
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	9200      	str	r2, [sp, #0]
 8003300:	2301      	movs	r3, #1
 8003302:	460a      	mov	r2, r1
 8003304:	4601      	mov	r1, r0
 8003306:	4803      	ldr	r0, [pc, #12]	; (8003314 <SENSOR_IO_ReadMultiple+0x1c>)
 8003308:	f7ff ffab 	bl	8003262 <I2Cx_ReadMultiple>
}
 800330c:	b280      	uxth	r0, r0
 800330e:	b003      	add	sp, #12
 8003310:	f85d fb04 	ldr.w	pc, [sp], #4
 8003314:	20000ab0 	.word	0x20000ab0

08003318 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003318:	b510      	push	{r4, lr}
 800331a:	b082      	sub	sp, #8
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <BSP_ACCELERO_Init+0x44>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4798      	blx	r3
 8003322:	286a      	cmp	r0, #106	; 0x6a
 8003324:	d002      	beq.n	800332c <BSP_ACCELERO_Init+0x14>
  {
    ret = ACCELERO_ERROR;
 8003326:	2001      	movs	r0, #1
    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
  }  

  return ret;
}
 8003328:	b002      	add	sp, #8
 800332a:	bd10      	pop	{r4, pc}
    AccelerometerDrv = &Lsm6dslAccDrv;
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <BSP_ACCELERO_Init+0x44>)
 800332e:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <BSP_ACCELERO_Init+0x48>)
 8003330:	6013      	str	r3, [r2, #0]
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003332:	2230      	movs	r2, #48	; 0x30
 8003334:	f88d 2001 	strb.w	r2, [sp, #1]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003338:	2400      	movs	r4, #0
 800333a:	f88d 4002 	strb.w	r4, [sp, #2]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800333e:	f88d 4006 	strb.w	r4, [sp, #6]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003342:	2240      	movs	r2, #64	; 0x40
 8003344:	f88d 2004 	strb.w	r2, [sp, #4]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003348:	f88d 4003 	strb.w	r4, [sp, #3]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800334c:	f88d 4007 	strb.w	r4, [sp, #7]
    AccelerometerDrv->Init(ctrl);
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f244 4030 	movw	r0, #17456	; 0x4430
 8003356:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003358:	4620      	mov	r0, r4
 800335a:	e7e5      	b.n	8003328 <BSP_ACCELERO_Init+0x10>
 800335c:	2000049c 	.word	0x2000049c
 8003360:	20000b80 	.word	0x20000b80

08003364 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003364:	b508      	push	{r3, lr}
  if(AccelerometerDrv != NULL)
 8003366:	4b03      	ldr	r3, [pc, #12]	; (8003374 <BSP_ACCELERO_AccGetXYZ+0x10>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b113      	cbz	r3, 8003372 <BSP_ACCELERO_AccGetXYZ+0xe>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	b103      	cbz	r3, 8003372 <BSP_ACCELERO_AccGetXYZ+0xe>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003370:	4798      	blx	r3
    }
  }
}
 8003372:	bd08      	pop	{r3, pc}
 8003374:	20000b80 	.word	0x20000b80

08003378 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8003378:	b510      	push	{r4, lr}
 800337a:	b082      	sub	sp, #8
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <BSP_GYRO_Init+0x4c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4798      	blx	r3
 8003382:	286a      	cmp	r0, #106	; 0x6a
 8003384:	d002      	beq.n	800338c <BSP_GYRO_Init+0x14>
  {
    ret = GYRO_ERROR;
 8003386:	2001      	movs	r0, #1
    
    ret = GYRO_OK;
  }
  
  return ret;
}
 8003388:	b002      	add	sp, #8
 800338a:	bd10      	pop	{r4, pc}
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800338c:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <BSP_GYRO_Init+0x4c>)
 800338e:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <BSP_GYRO_Init+0x50>)
 8003390:	6013      	str	r3, [r2, #0]
    LSM6DSL_InitStructure.Power_Mode = 0;
 8003392:	2400      	movs	r4, #0
 8003394:	f88d 4000 	strb.w	r4, [sp]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8003398:	2230      	movs	r2, #48	; 0x30
 800339a:	f88d 2001 	strb.w	r2, [sp, #1]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800339e:	f88d 4002 	strb.w	r4, [sp, #2]
    LSM6DSL_InitStructure.Band_Width = 0;
 80033a2:	f88d 4003 	strb.w	r4, [sp, #3]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	f88d 2004 	strb.w	r2, [sp, #4]
    LSM6DSL_InitStructure.Endianness = 0;
 80033ac:	f88d 4005 	strb.w	r4, [sp, #5]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80033b0:	220c      	movs	r2, #12
 80033b2:	f88d 2006 	strb.w	r2, [sp, #6]
    GyroscopeDrv->Init(ctrl);
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f244 403c 	movw	r0, #17468	; 0x443c
 80033bc:	4798      	blx	r3
    ret = GYRO_OK;
 80033be:	4620      	mov	r0, r4
 80033c0:	e7e2      	b.n	8003388 <BSP_GYRO_Init+0x10>
 80033c2:	bf00      	nop
 80033c4:	20000468 	.word	0x20000468
 80033c8:	20000b84 	.word	0x20000b84

080033cc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80033cc:	b508      	push	{r3, lr}
  if(GyroscopeDrv != NULL)
 80033ce:	4b03      	ldr	r3, [pc, #12]	; (80033dc <BSP_GYRO_GetXYZ+0x10>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b113      	cbz	r3, 80033da <BSP_GYRO_GetXYZ+0xe>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	b103      	cbz	r3, 80033da <BSP_GYRO_GetXYZ+0xe>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80033d8:	4798      	blx	r3
    }
  }
}
 80033da:	bd08      	pop	{r3, pc}
 80033dc:	20000b84 	.word	0x20000b84

080033e0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80033e0:	b508      	push	{r3, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <BSP_HSENSOR_Init+0x24>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	20be      	movs	r0, #190	; 0xbe
 80033e8:	4798      	blx	r3
 80033ea:	28bc      	cmp	r0, #188	; 0xbc
 80033ec:	d001      	beq.n	80033f2 <BSP_HSENSOR_Init+0x12>
  {
    ret = HSENSOR_ERROR;
 80033ee:	2001      	movs	r0, #1
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
    ret = HSENSOR_OK;
  }
  
  return ret;
}
 80033f0:	bd08      	pop	{r3, pc}
    Hsensor_drv = &HTS221_H_Drv;
 80033f2:	4b04      	ldr	r3, [pc, #16]	; (8003404 <BSP_HSENSOR_Init+0x24>)
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <BSP_HSENSOR_Init+0x28>)
 80033f6:	6013      	str	r3, [r2, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	20be      	movs	r0, #190	; 0xbe
 80033fc:	4798      	blx	r3
    ret = HSENSOR_OK;
 80033fe:	2000      	movs	r0, #0
 8003400:	e7f6      	b.n	80033f0 <BSP_HSENSOR_Init+0x10>
 8003402:	bf00      	nop
 8003404:	2000040c 	.word	0x2000040c
 8003408:	20000b88 	.word	0x20000b88

0800340c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800340c:	b508      	push	{r3, lr}
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800340e:	4b03      	ldr	r3, [pc, #12]	; (800341c <BSP_HSENSOR_ReadHumidity+0x10>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	20be      	movs	r0, #190	; 0xbe
 8003416:	4798      	blx	r3
}
 8003418:	bd08      	pop	{r3, pc}
 800341a:	bf00      	nop
 800341c:	20000b88 	.word	0x20000b88

08003420 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003420:	b510      	push	{r4, lr}
 8003422:	b082      	sub	sp, #8
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <BSP_MAGNETO_Init+0x44>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4798      	blx	r3
 800342a:	283d      	cmp	r0, #61	; 0x3d
 800342c:	d002      	beq.n	8003434 <BSP_MAGNETO_Init+0x14>
  {
    ret = MAGNETO_ERROR;
 800342e:	2001      	movs	r0, #1
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
  } 

  return ret;  
}
 8003430:	b002      	add	sp, #8
 8003432:	bd10      	pop	{r4, pc}
    MagnetoDrv = &Lis3mdlMagDrv;
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <BSP_MAGNETO_Init+0x44>)
 8003436:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <BSP_MAGNETO_Init+0x48>)
 8003438:	6013      	str	r3, [r2, #0]
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800343a:	2258      	movs	r2, #88	; 0x58
 800343c:	f88d 2000 	strb.w	r2, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003440:	2400      	movs	r4, #0
 8003442:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8003446:	f88d 4002 	strb.w	r4, [sp, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800344a:	2208      	movs	r2, #8
 800344c:	f88d 2003 	strb.w	r2, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003450:	2240      	movs	r2, #64	; 0x40
 8003452:	f88d 2004 	strb.w	r2, [sp, #4]
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	aa02      	add	r2, sp, #8
 800345a:	e912 0003 	ldmdb	r2, {r0, r1}
 800345e:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003460:	4620      	mov	r0, r4
 8003462:	e7e5      	b.n	8003430 <BSP_MAGNETO_Init+0x10>
 8003464:	20000418 	.word	0x20000418
 8003468:	20000b8c 	.word	0x20000b8c

0800346c <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 800346c:	b508      	push	{r3, lr}
  if(MagnetoDrv != NULL)
 800346e:	4b03      	ldr	r3, [pc, #12]	; (800347c <BSP_MAGNETO_GetXYZ+0x10>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b113      	cbz	r3, 800347a <BSP_MAGNETO_GetXYZ+0xe>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	b103      	cbz	r3, 800347a <BSP_MAGNETO_GetXYZ+0xe>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8003478:	4798      	blx	r3
    }
  }
}
 800347a:	bd08      	pop	{r3, pc}
 800347c:	20000b8c 	.word	0x20000b8c

08003480 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003480:	b508      	push	{r3, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <BSP_PSENSOR_Init+0x24>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	20ba      	movs	r0, #186	; 0xba
 8003488:	4798      	blx	r3
 800348a:	28b1      	cmp	r0, #177	; 0xb1
 800348c:	d001      	beq.n	8003492 <BSP_PSENSOR_Init+0x12>
  {
    ret = PSENSOR_ERROR;
 800348e:	2001      	movs	r0, #1
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
    ret = PSENSOR_OK;
  }
  
  return ret;
}
 8003490:	bd08      	pop	{r3, pc}
     Psensor_drv = &LPS22HB_P_Drv;
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <BSP_PSENSOR_Init+0x24>)
 8003494:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <BSP_PSENSOR_Init+0x28>)
 8003496:	6013      	str	r3, [r2, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	20ba      	movs	r0, #186	; 0xba
 800349c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800349e:	2000      	movs	r0, #0
 80034a0:	e7f6      	b.n	8003490 <BSP_PSENSOR_Init+0x10>
 80034a2:	bf00      	nop
 80034a4:	2000045c 	.word	0x2000045c
 80034a8:	20000b90 	.word	0x20000b90

080034ac <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80034ac:	b508      	push	{r3, lr}
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80034ae:	4b03      	ldr	r3, [pc, #12]	; (80034bc <BSP_PSENSOR_ReadPressure+0x10>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	20ba      	movs	r0, #186	; 0xba
 80034b6:	4798      	blx	r3
}
 80034b8:	bd08      	pop	{r3, pc}
 80034ba:	bf00      	nop
 80034bc:	20000b90 	.word	0x20000b90

080034c0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80034c0:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80034c2:	4c06      	ldr	r4, [pc, #24]	; (80034dc <BSP_TSENSOR_Init+0x1c>)
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <BSP_TSENSOR_Init+0x20>)
 80034c6:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80034c8:	f7ff fee4 	bl	8003294 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2100      	movs	r1, #0
 80034d2:	20be      	movs	r0, #190	; 0xbe
 80034d4:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 80034d6:	2000      	movs	r0, #0
 80034d8:	bd10      	pop	{r4, pc}
 80034da:	bf00      	nop
 80034dc:	20000b94 	.word	0x20000b94
 80034e0:	200003fc 	.word	0x200003fc

080034e4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80034e4:	b508      	push	{r3, lr}
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80034e6:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <BSP_TSENSOR_ReadTemp+0x10>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	20be      	movs	r0, #190	; 0xbe
 80034ee:	4798      	blx	r3
}
 80034f0:	bd08      	pop	{r3, pc}
 80034f2:	bf00      	nop
 80034f4:	20000b94 	.word	0x20000b94

080034f8 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_InitTick+0x44>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b90b      	cbnz	r3, 8003502 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80034fe:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003500:	4770      	bx	lr
{
 8003502:	b510      	push	{r4, lr}
 8003504:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800350a:	fbb0 f3f3 	udiv	r3, r0, r3
 800350e:	4a0c      	ldr	r2, [pc, #48]	; (8003540 <HAL_InitTick+0x48>)
 8003510:	6810      	ldr	r0, [r2, #0]
 8003512:	fbb0 f0f3 	udiv	r0, r0, r3
 8003516:	f000 f8a3 	bl	8003660 <HAL_SYSTICK_Config>
 800351a:	b968      	cbnz	r0, 8003538 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800351c:	2c0f      	cmp	r4, #15
 800351e:	d901      	bls.n	8003524 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8003520:	2001      	movs	r0, #1
 8003522:	e00a      	b.n	800353a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003524:	2200      	movs	r2, #0
 8003526:	4621      	mov	r1, r4
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f000 f852 	bl	80035d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003530:	4b02      	ldr	r3, [pc, #8]	; (800353c <HAL_InitTick+0x44>)
 8003532:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003534:	2000      	movs	r0, #0
 8003536:	e000      	b.n	800353a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8003538:	2001      	movs	r0, #1
}
 800353a:	bd10      	pop	{r4, pc}
 800353c:	200004d0 	.word	0x200004d0
 8003540:	200003f8 	.word	0x200003f8

08003544 <HAL_Init>:
{
 8003544:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003546:	2003      	movs	r0, #3
 8003548:	f000 f832 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800354c:	2000      	movs	r0, #0
 800354e:	f7ff ffd3 	bl	80034f8 <HAL_InitTick>
 8003552:	b110      	cbz	r0, 800355a <HAL_Init+0x16>
    status = HAL_ERROR;
 8003554:	2401      	movs	r4, #1
}
 8003556:	4620      	mov	r0, r4
 8003558:	bd10      	pop	{r4, pc}
 800355a:	4604      	mov	r4, r0
    HAL_MspInit();
 800355c:	f7ff f810 	bl	8002580 <HAL_MspInit>
 8003560:	e7f9      	b.n	8003556 <HAL_Init+0x12>
	...

08003564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_IncTick+0x10>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4a03      	ldr	r2, [pc, #12]	; (8003578 <HAL_IncTick+0x14>)
 800356a:	6811      	ldr	r1, [r2, #0]
 800356c:	440b      	add	r3, r1
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	200004d0 	.word	0x200004d0
 8003578:	20000b98 	.word	0x20000b98

0800357c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800357c:	4b01      	ldr	r3, [pc, #4]	; (8003584 <HAL_GetTick+0x8>)
 800357e:	6818      	ldr	r0, [r3, #0]
}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000b98 	.word	0x20000b98

08003588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003588:	b538      	push	{r3, r4, r5, lr}
 800358a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff fff6 	bl	800357c <HAL_GetTick>
 8003590:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003592:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003596:	d002      	beq.n	800359e <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <HAL_Delay+0x24>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800359e:	f7ff ffed 	bl	800357c <HAL_GetTick>
 80035a2:	1b40      	subs	r0, r0, r5
 80035a4:	42a0      	cmp	r0, r4
 80035a6:	d3fa      	bcc.n	800359e <HAL_Delay+0x16>
  {
  }
}
 80035a8:	bd38      	pop	{r3, r4, r5, pc}
 80035aa:	bf00      	nop
 80035ac:	200004d0 	.word	0x200004d0

080035b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035bc:	0200      	lsls	r0, r0, #8
 80035be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80035c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80035cc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d6:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_NVIC_SetPriority+0x68>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035de:	f1c3 0c07 	rsb	ip, r3, #7
 80035e2:	f1bc 0f04 	cmp.w	ip, #4
 80035e6:	bf28      	it	cs
 80035e8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ec:	f103 0e04 	add.w	lr, r3, #4
 80035f0:	f1be 0f06 	cmp.w	lr, #6
 80035f4:	d918      	bls.n	8003628 <HAL_NVIC_SetPriority+0x54>
 80035f6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	f04f 3eff 	mov.w	lr, #4294967295
 80035fc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003600:	ea21 010c 	bic.w	r1, r1, ip
 8003604:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003606:	fa0e f303 	lsl.w	r3, lr, r3
 800360a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003610:	2800      	cmp	r0, #0
 8003612:	db0b      	blt.n	800362c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003614:	0109      	lsls	r1, r1, #4
 8003616:	b2c9      	uxtb	r1, r1
 8003618:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800361c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003620:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003624:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003628:	2300      	movs	r3, #0
 800362a:	e7e5      	b.n	80035f8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362c:	f000 000f 	and.w	r0, r0, #15
 8003630:	0109      	lsls	r1, r1, #4
 8003632:	b2c9      	uxtb	r1, r1
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <HAL_NVIC_SetPriority+0x6c>)
 8003636:	5419      	strb	r1, [r3, r0]
 8003638:	e7f4      	b.n	8003624 <HAL_NVIC_SetPriority+0x50>
 800363a:	bf00      	nop
 800363c:	e000ed00 	.word	0xe000ed00
 8003640:	e000ed14 	.word	0xe000ed14

08003644 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003644:	2800      	cmp	r0, #0
 8003646:	db07      	blt.n	8003658 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003648:	f000 021f 	and.w	r2, r0, #31
 800364c:	0940      	lsrs	r0, r0, #5
 800364e:	2301      	movs	r3, #1
 8003650:	4093      	lsls	r3, r2
 8003652:	4a02      	ldr	r2, [pc, #8]	; (800365c <HAL_NVIC_EnableIRQ+0x18>)
 8003654:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000e100 	.word	0xe000e100

08003660 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003660:	3801      	subs	r0, #1
 8003662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003666:	d20b      	bcs.n	8003680 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003668:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800366c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366e:	4a05      	ldr	r2, [pc, #20]	; (8003684 <HAL_SYSTICK_Config+0x24>)
 8003670:	21f0      	movs	r1, #240	; 0xf0
 8003672:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003676:	2000      	movs	r0, #0
 8003678:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367a:	2207      	movs	r2, #7
 800367c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800367e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003680:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800368a:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800368c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800368e:	e040      	b.n	8003712 <HAL_GPIO_Init+0x8a>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003690:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003692:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003696:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800369a:	409c      	lsls	r4, r3
 800369c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->ASCR = temp;
 80036a0:	62c4      	str	r4, [r0, #44]	; 0x2c
 80036a2:	e062      	b.n	800376a <HAL_GPIO_Init+0xe2>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036a4:	2406      	movs	r4, #6
 80036a6:	e000      	b.n	80036aa <HAL_GPIO_Init+0x22>
 80036a8:	2400      	movs	r4, #0
 80036aa:	40b4      	lsls	r4, r6
 80036ac:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036ae:	3502      	adds	r5, #2
 80036b0:	4e68      	ldr	r6, [pc, #416]	; (8003854 <HAL_GPIO_Init+0x1cc>)
 80036b2:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036b6:	4c68      	ldr	r4, [pc, #416]	; (8003858 <HAL_GPIO_Init+0x1d0>)
 80036b8:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80036ba:	43d4      	mvns	r4, r2
 80036bc:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036c0:	684f      	ldr	r7, [r1, #4]
 80036c2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80036c6:	d001      	beq.n	80036cc <HAL_GPIO_Init+0x44>
        {
          temp |= iocurrent;
 80036c8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80036cc:	4d62      	ldr	r5, [pc, #392]	; (8003858 <HAL_GPIO_Init+0x1d0>)
 80036ce:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 80036d0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80036d2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036d6:	684f      	ldr	r7, [r1, #4]
 80036d8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80036dc:	d001      	beq.n	80036e2 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 80036de:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80036e2:	4d5d      	ldr	r5, [pc, #372]	; (8003858 <HAL_GPIO_Init+0x1d0>)
 80036e4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036e6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80036e8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ec:	684f      	ldr	r7, [r1, #4]
 80036ee:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80036f2:	d001      	beq.n	80036f8 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80036f4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80036f8:	4d57      	ldr	r5, [pc, #348]	; (8003858 <HAL_GPIO_Init+0x1d0>)
 80036fa:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80036fc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80036fe:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003700:	684e      	ldr	r6, [r1, #4]
 8003702:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003706:	d001      	beq.n	800370c <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 8003708:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 800370c:	4a52      	ldr	r2, [pc, #328]	; (8003858 <HAL_GPIO_Init+0x1d0>)
 800370e:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8003710:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003712:	680a      	ldr	r2, [r1, #0]
 8003714:	fa32 f403 	lsrs.w	r4, r2, r3
 8003718:	f000 8099 	beq.w	800384e <HAL_GPIO_Init+0x1c6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800371c:	f04f 0c01 	mov.w	ip, #1
 8003720:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003724:	ea1c 0202 	ands.w	r2, ip, r2
 8003728:	d0f2      	beq.n	8003710 <HAL_GPIO_Init+0x88>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800372a:	684c      	ldr	r4, [r1, #4]
 800372c:	1e65      	subs	r5, r4, #1
 800372e:	2d01      	cmp	r5, #1
 8003730:	d903      	bls.n	800373a <HAL_GPIO_Init+0xb2>
 8003732:	2c11      	cmp	r4, #17
 8003734:	d001      	beq.n	800373a <HAL_GPIO_Init+0xb2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003736:	2c12      	cmp	r4, #18
 8003738:	d112      	bne.n	8003760 <HAL_GPIO_Init+0xd8>
        temp = GPIOx->OSPEEDR;
 800373a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800373c:	005e      	lsls	r6, r3, #1
 800373e:	2403      	movs	r4, #3
 8003740:	40b4      	lsls	r4, r6
 8003742:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003746:	68cc      	ldr	r4, [r1, #12]
 8003748:	40b4      	lsls	r4, r6
 800374a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800374c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800374e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003750:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003754:	684c      	ldr	r4, [r1, #4]
 8003756:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800375a:	409c      	lsls	r4, r3
 800375c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800375e:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003760:	684c      	ldr	r4, [r1, #4]
 8003762:	f004 0503 	and.w	r5, r4, #3
 8003766:	2d03      	cmp	r5, #3
 8003768:	d092      	beq.n	8003690 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 800376a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800376c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003770:	2503      	movs	r5, #3
 8003772:	fa05 f50c 	lsl.w	r5, r5, ip
 8003776:	43ec      	mvns	r4, r5
 8003778:	ea26 0e05 	bic.w	lr, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800377c:	688d      	ldr	r5, [r1, #8]
 800377e:	fa05 f50c 	lsl.w	r5, r5, ip
 8003782:	ea45 050e 	orr.w	r5, r5, lr
      GPIOx->PUPDR = temp;
 8003786:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003788:	684d      	ldr	r5, [r1, #4]
 800378a:	2d02      	cmp	r5, #2
 800378c:	d001      	beq.n	8003792 <HAL_GPIO_Init+0x10a>
 800378e:	2d12      	cmp	r5, #18
 8003790:	d112      	bne.n	80037b8 <HAL_GPIO_Init+0x130>
        temp = GPIOx->AFR[position >> 3u];
 8003792:	08de      	lsrs	r6, r3, #3
 8003794:	3608      	adds	r6, #8
 8003796:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800379a:	f003 0507 	and.w	r5, r3, #7
 800379e:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 80037a2:	250f      	movs	r5, #15
 80037a4:	fa05 f50e 	lsl.w	r5, r5, lr
 80037a8:	ea27 0705 	bic.w	r7, r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ac:	690d      	ldr	r5, [r1, #16]
 80037ae:	fa05 f50e 	lsl.w	r5, r5, lr
 80037b2:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 80037b4:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80037b8:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037ba:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037bc:	684c      	ldr	r4, [r1, #4]
 80037be:	f004 0403 	and.w	r4, r4, #3
 80037c2:	fa04 f40c 	lsl.w	r4, r4, ip
 80037c6:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80037c8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037ca:	684c      	ldr	r4, [r1, #4]
 80037cc:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80037d0:	d09e      	beq.n	8003710 <HAL_GPIO_Init+0x88>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d2:	4c22      	ldr	r4, [pc, #136]	; (800385c <HAL_GPIO_Init+0x1d4>)
 80037d4:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80037d6:	f045 0501 	orr.w	r5, r5, #1
 80037da:	6625      	str	r5, [r4, #96]	; 0x60
 80037dc:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80037de:	f004 0401 	and.w	r4, r4, #1
 80037e2:	9401      	str	r4, [sp, #4]
 80037e4:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80037e6:	089d      	lsrs	r5, r3, #2
 80037e8:	1cae      	adds	r6, r5, #2
 80037ea:	4c1a      	ldr	r4, [pc, #104]	; (8003854 <HAL_GPIO_Init+0x1cc>)
 80037ec:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037f0:	f003 0403 	and.w	r4, r3, #3
 80037f4:	00a6      	lsls	r6, r4, #2
 80037f6:	240f      	movs	r4, #15
 80037f8:	40b4      	lsls	r4, r6
 80037fa:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037fe:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003802:	f43f af51 	beq.w	80036a8 <HAL_GPIO_Init+0x20>
 8003806:	4c16      	ldr	r4, [pc, #88]	; (8003860 <HAL_GPIO_Init+0x1d8>)
 8003808:	42a0      	cmp	r0, r4
 800380a:	d016      	beq.n	800383a <HAL_GPIO_Init+0x1b2>
 800380c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003810:	42a0      	cmp	r0, r4
 8003812:	d014      	beq.n	800383e <HAL_GPIO_Init+0x1b6>
 8003814:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003818:	42a0      	cmp	r0, r4
 800381a:	d012      	beq.n	8003842 <HAL_GPIO_Init+0x1ba>
 800381c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003820:	42a0      	cmp	r0, r4
 8003822:	d010      	beq.n	8003846 <HAL_GPIO_Init+0x1be>
 8003824:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003828:	42a0      	cmp	r0, r4
 800382a:	d00e      	beq.n	800384a <HAL_GPIO_Init+0x1c2>
 800382c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003830:	42a0      	cmp	r0, r4
 8003832:	f43f af37 	beq.w	80036a4 <HAL_GPIO_Init+0x1c>
 8003836:	2407      	movs	r4, #7
 8003838:	e737      	b.n	80036aa <HAL_GPIO_Init+0x22>
 800383a:	2401      	movs	r4, #1
 800383c:	e735      	b.n	80036aa <HAL_GPIO_Init+0x22>
 800383e:	2402      	movs	r4, #2
 8003840:	e733      	b.n	80036aa <HAL_GPIO_Init+0x22>
 8003842:	2403      	movs	r4, #3
 8003844:	e731      	b.n	80036aa <HAL_GPIO_Init+0x22>
 8003846:	2404      	movs	r4, #4
 8003848:	e72f      	b.n	80036aa <HAL_GPIO_Init+0x22>
 800384a:	2405      	movs	r4, #5
 800384c:	e72d      	b.n	80036aa <HAL_GPIO_Init+0x22>
  }
}
 800384e:	b003      	add	sp, #12
 8003850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40010400 	.word	0x40010400
 800385c:	40021000 	.word	0x40021000
 8003860:	48000400 	.word	0x48000400

08003864 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003864:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003866:	fa31 f203 	lsrs.w	r2, r1, r3
 800386a:	f000 808b 	beq.w	8003984 <HAL_GPIO_DeInit+0x120>
{
 800386e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003870:	e032      	b.n	80038d8 <HAL_GPIO_DeInit+0x74>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003872:	2506      	movs	r5, #6
 8003874:	e000      	b.n	8003878 <HAL_GPIO_DeInit+0x14>
 8003876:	2500      	movs	r5, #0
 8003878:	fa05 fc0c 	lsl.w	ip, r5, ip
 800387c:	45a4      	cmp	ip, r4
 800387e:	d065      	beq.n	800394c <HAL_GPIO_DeInit+0xe8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003880:	6804      	ldr	r4, [r0, #0]
 8003882:	005d      	lsls	r5, r3, #1
 8003884:	f04f 0c03 	mov.w	ip, #3
 8003888:	fa0c fc05 	lsl.w	ip, ip, r5
 800388c:	ea44 040c 	orr.w	r4, r4, ip
 8003890:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003892:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003896:	f10e 0e08 	add.w	lr, lr, #8
 800389a:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800389e:	f003 0507 	and.w	r5, r3, #7
 80038a2:	00ae      	lsls	r6, r5, #2
 80038a4:	250f      	movs	r5, #15
 80038a6:	40b5      	lsls	r5, r6
 80038a8:	ea24 0405 	bic.w	r4, r4, r5
 80038ac:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038b0:	6884      	ldr	r4, [r0, #8]
 80038b2:	ea24 040c 	bic.w	r4, r4, ip
 80038b6:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80038b8:	6844      	ldr	r4, [r0, #4]
 80038ba:	ea24 0402 	bic.w	r4, r4, r2
 80038be:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038c0:	68c4      	ldr	r4, [r0, #12]
 80038c2:	ea24 040c 	bic.w	r4, r4, ip
 80038c6:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80038c8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80038ca:	ea24 0202 	bic.w	r2, r4, r2
 80038ce:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80038d0:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80038d2:	fa31 f203 	lsrs.w	r2, r1, r3
 80038d6:	d054      	beq.n	8003982 <HAL_GPIO_DeInit+0x11e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80038dc:	ea12 0701 	ands.w	r7, r2, r1
 80038e0:	d0f6      	beq.n	80038d0 <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80038e2:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80038e6:	f10e 0502 	add.w	r5, lr, #2
 80038ea:	4c27      	ldr	r4, [pc, #156]	; (8003988 <HAL_GPIO_DeInit+0x124>)
 80038ec:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80038f0:	f003 0c03 	and.w	ip, r3, #3
 80038f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80038f8:	250f      	movs	r5, #15
 80038fa:	fa05 f60c 	lsl.w	r6, r5, ip
 80038fe:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003900:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003904:	d0b7      	beq.n	8003876 <HAL_GPIO_DeInit+0x12>
 8003906:	4d21      	ldr	r5, [pc, #132]	; (800398c <HAL_GPIO_DeInit+0x128>)
 8003908:	42a8      	cmp	r0, r5
 800390a:	d015      	beq.n	8003938 <HAL_GPIO_DeInit+0xd4>
 800390c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003910:	42a8      	cmp	r0, r5
 8003912:	d013      	beq.n	800393c <HAL_GPIO_DeInit+0xd8>
 8003914:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003918:	42a8      	cmp	r0, r5
 800391a:	d011      	beq.n	8003940 <HAL_GPIO_DeInit+0xdc>
 800391c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003920:	42a8      	cmp	r0, r5
 8003922:	d00f      	beq.n	8003944 <HAL_GPIO_DeInit+0xe0>
 8003924:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003928:	42a8      	cmp	r0, r5
 800392a:	d00d      	beq.n	8003948 <HAL_GPIO_DeInit+0xe4>
 800392c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003930:	42a8      	cmp	r0, r5
 8003932:	d09e      	beq.n	8003872 <HAL_GPIO_DeInit+0xe>
 8003934:	2507      	movs	r5, #7
 8003936:	e79f      	b.n	8003878 <HAL_GPIO_DeInit+0x14>
 8003938:	2501      	movs	r5, #1
 800393a:	e79d      	b.n	8003878 <HAL_GPIO_DeInit+0x14>
 800393c:	2502      	movs	r5, #2
 800393e:	e79b      	b.n	8003878 <HAL_GPIO_DeInit+0x14>
 8003940:	2503      	movs	r5, #3
 8003942:	e799      	b.n	8003878 <HAL_GPIO_DeInit+0x14>
 8003944:	2504      	movs	r5, #4
 8003946:	e797      	b.n	8003878 <HAL_GPIO_DeInit+0x14>
 8003948:	2505      	movs	r5, #5
 800394a:	e795      	b.n	8003878 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 800394c:	4c10      	ldr	r4, [pc, #64]	; (8003990 <HAL_GPIO_DeInit+0x12c>)
 800394e:	6825      	ldr	r5, [r4, #0]
 8003950:	ea25 0507 	bic.w	r5, r5, r7
 8003954:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003956:	6865      	ldr	r5, [r4, #4]
 8003958:	ea25 0507 	bic.w	r5, r5, r7
 800395c:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800395e:	68a5      	ldr	r5, [r4, #8]
 8003960:	ea25 0507 	bic.w	r5, r5, r7
 8003964:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003966:	68e5      	ldr	r5, [r4, #12]
 8003968:	ea25 0707 	bic.w	r7, r5, r7
 800396c:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800396e:	4f06      	ldr	r7, [pc, #24]	; (8003988 <HAL_GPIO_DeInit+0x124>)
 8003970:	f10e 0402 	add.w	r4, lr, #2
 8003974:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003978:	ea25 0506 	bic.w	r5, r5, r6
 800397c:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8003980:	e77e      	b.n	8003880 <HAL_GPIO_DeInit+0x1c>
  }
}
 8003982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000
 800398c:	48000400 	.word	0x48000400
 8003990:	40010400 	.word	0x40010400

08003994 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003994:	6903      	ldr	r3, [r0, #16]
 8003996:	4219      	tst	r1, r3
 8003998:	d001      	beq.n	800399e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800399a:	2001      	movs	r0, #1
 800399c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800399e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80039a0:	4770      	bx	lr

080039a2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a2:	b10a      	cbz	r2, 80039a8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039a4:	6181      	str	r1, [r0, #24]
 80039a6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039a8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80039aa:	4770      	bx	lr

080039ac <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80039ac:	4770      	bx	lr
	...

080039b0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80039b0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4203      	tst	r3, r0
 80039b8:	d100      	bne.n	80039bc <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80039ba:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039bc:	4b02      	ldr	r3, [pc, #8]	; (80039c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80039be:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039c0:	f7ff fff4 	bl	80039ac <HAL_GPIO_EXTI_Callback>
}
 80039c4:	e7f9      	b.n	80039ba <HAL_GPIO_EXTI_IRQHandler+0xa>
 80039c6:	bf00      	nop
 80039c8:	40010400 	.word	0x40010400

080039cc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039cc:	6803      	ldr	r3, [r0, #0]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	f012 0f02 	tst.w	r2, #2
 80039d4:	d001      	beq.n	80039da <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039d6:	2200      	movs	r2, #0
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	f012 0f01 	tst.w	r2, #1
 80039e2:	d103      	bne.n	80039ec <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	619a      	str	r2, [r3, #24]
  }
}
 80039ec:	4770      	bx	lr

080039ee <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039ee:	b430      	push	{r4, r5}
 80039f0:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80039f2:	6804      	ldr	r4, [r0, #0]
 80039f4:	6860      	ldr	r0, [r4, #4]
 80039f6:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 80039fa:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 80039fe:	f04c 7c7f 	orr.w	ip, ip, #66846720	; 0x3fc0000
 8003a02:	f44c 3c58 	orr.w	ip, ip, #221184	; 0x36000
 8003a06:	f44c 7c7f 	orr.w	ip, ip, #1020	; 0x3fc
 8003a0a:	f04c 0c03 	orr.w	ip, ip, #3
 8003a0e:	ea20 000c 	bic.w	r0, r0, ip
 8003a12:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003a16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003a1a:	4319      	orrs	r1, r3
 8003a1c:	4329      	orrs	r1, r5
 8003a1e:	4301      	orrs	r1, r0
 8003a20:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003a22:	bc30      	pop	{r4, r5}
 8003a24:	4770      	bx	lr

08003a26 <I2C_IsAcknowledgeFailed>:
{
 8003a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a28:	4605      	mov	r5, r0
 8003a2a:	460e      	mov	r6, r1
 8003a2c:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a2e:	6803      	ldr	r3, [r0, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f013 0f10 	tst.w	r3, #16
 8003a36:	d101      	bne.n	8003a3c <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8003a38:	2000      	movs	r0, #0
}
 8003a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	699c      	ldr	r4, [r3, #24]
 8003a40:	f014 0f20 	tst.w	r4, #32
 8003a44:	d117      	bne.n	8003a76 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8003a46:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003a4a:	d0f7      	beq.n	8003a3c <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4c:	f7ff fd96 	bl	800357c <HAL_GetTick>
 8003a50:	1bc0      	subs	r0, r0, r7
 8003a52:	42b0      	cmp	r0, r6
 8003a54:	d801      	bhi.n	8003a5a <I2C_IsAcknowledgeFailed+0x34>
 8003a56:	2e00      	cmp	r6, #0
 8003a58:	d1f0      	bne.n	8003a3c <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a5a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003a5c:	f043 0320 	orr.w	r3, r3, #32
 8003a60:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	2320      	movs	r3, #32
 8003a64:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003a6e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8003a72:	2001      	movs	r0, #1
 8003a74:	e7e1      	b.n	8003a3a <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a76:	2210      	movs	r2, #16
 8003a78:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7a:	682b      	ldr	r3, [r5, #0]
 8003a7c:	2420      	movs	r4, #32
 8003a7e:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003a80:	4628      	mov	r0, r5
 8003a82:	f7ff ffa3 	bl	80039cc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003a86:	682a      	ldr	r2, [r5, #0]
 8003a88:	6853      	ldr	r3, [r2, #4]
 8003a8a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003a8e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003a92:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a9c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003a9e:	f043 0304 	orr.w	r3, r3, #4
 8003aa2:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003aae:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	e7c1      	b.n	8003a3a <I2C_IsAcknowledgeFailed+0x14>

08003ab6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003ab6:	b570      	push	{r4, r5, r6, lr}
 8003ab8:	4604      	mov	r4, r0
 8003aba:	460d      	mov	r5, r1
 8003abc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f013 0f02 	tst.w	r3, #2
 8003ac6:	d11d      	bne.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac8:	4632      	mov	r2, r6
 8003aca:	4629      	mov	r1, r5
 8003acc:	4620      	mov	r0, r4
 8003ace:	f7ff ffaa 	bl	8003a26 <I2C_IsAcknowledgeFailed>
 8003ad2:	b9c8      	cbnz	r0, 8003b08 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ad8:	d0f1      	beq.n	8003abe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7ff fd4f 	bl	800357c <HAL_GetTick>
 8003ade:	1b80      	subs	r0, r0, r6
 8003ae0:	42a8      	cmp	r0, r5
 8003ae2:	d801      	bhi.n	8003ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	d1ea      	bne.n	8003abe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003aea:	f043 0320 	orr.w	r3, r3, #32
 8003aee:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	2320      	movs	r3, #32
 8003af2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003afc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003b00:	2001      	movs	r0, #1
 8003b02:	e000      	b.n	8003b06 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8003b04:	2000      	movs	r0, #0
}
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003b08:	2001      	movs	r0, #1
 8003b0a:	e7fc      	b.n	8003b06 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003b0c <I2C_WaitOnFlagUntilTimeout>:
{
 8003b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b10:	4606      	mov	r6, r0
 8003b12:	4688      	mov	r8, r1
 8003b14:	4617      	mov	r7, r2
 8003b16:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b18:	6834      	ldr	r4, [r6, #0]
 8003b1a:	69a4      	ldr	r4, [r4, #24]
 8003b1c:	ea38 0304 	bics.w	r3, r8, r4
 8003b20:	bf0c      	ite	eq
 8003b22:	f04f 0c01 	moveq.w	ip, #1
 8003b26:	f04f 0c00 	movne.w	ip, #0
 8003b2a:	45bc      	cmp	ip, r7
 8003b2c:	d118      	bne.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b32:	d0f1      	beq.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b34:	f7ff fd22 	bl	800357c <HAL_GetTick>
 8003b38:	9b06      	ldr	r3, [sp, #24]
 8003b3a:	1ac0      	subs	r0, r0, r3
 8003b3c:	42a8      	cmp	r0, r5
 8003b3e:	d801      	bhi.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003b40:	2d00      	cmp	r5, #0
 8003b42:	d1e9      	bne.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b44:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8003b46:	f043 0320 	orr.w	r3, r3, #32
 8003b4a:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4c:	2320      	movs	r3, #32
 8003b4e:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003b58:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	e000      	b.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8003b60:	2000      	movs	r0, #0
}
 8003b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003b68 <I2C_RequestMemoryWrite>:
{
 8003b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	4604      	mov	r4, r0
 8003b70:	4690      	mov	r8, r2
 8003b72:	461d      	mov	r5, r3
 8003b74:	9e08      	ldr	r6, [sp, #32]
 8003b76:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <I2C_RequestMemoryWrite+0x78>)
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b80:	b2ea      	uxtb	r2, r5
 8003b82:	f7ff ff34 	bl	80039ee <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	463a      	mov	r2, r7
 8003b88:	4631      	mov	r1, r6
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f7ff ff93 	bl	8003ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b90:	b9f8      	cbnz	r0, 8003bd2 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b92:	2d01      	cmp	r5, #1
 8003b94:	d10e      	bne.n	8003bb4 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	fa5f f288 	uxtb.w	r2, r8
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9e:	9700      	str	r7, [sp, #0]
 8003ba0:	4633      	mov	r3, r6
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f7ff ffb0 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003bac:	b9a8      	cbnz	r0, 8003bda <I2C_RequestMemoryWrite+0x72>
}
 8003bae:	b002      	add	sp, #8
 8003bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbc:	463a      	mov	r2, r7
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7ff ff78 	bl	8003ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc6:	b930      	cbnz	r0, 8003bd6 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	fa5f f288 	uxtb.w	r2, r8
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
 8003bd0:	e7e5      	b.n	8003b9e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	e7eb      	b.n	8003bae <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	e7e9      	b.n	8003bae <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8003bda:	2001      	movs	r0, #1
 8003bdc:	e7e7      	b.n	8003bae <I2C_RequestMemoryWrite+0x46>
 8003bde:	bf00      	nop
 8003be0:	80002000 	.word	0x80002000

08003be4 <I2C_RequestMemoryRead>:
{
 8003be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	4604      	mov	r4, r0
 8003bec:	4690      	mov	r8, r2
 8003bee:	461d      	mov	r5, r3
 8003bf0:	9e08      	ldr	r6, [sp, #32]
 8003bf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <I2C_RequestMemoryRead+0x74>)
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	b2ea      	uxtb	r2, r5
 8003bfc:	f7ff fef7 	bl	80039ee <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c00:	463a      	mov	r2, r7
 8003c02:	4631      	mov	r1, r6
 8003c04:	4620      	mov	r0, r4
 8003c06:	f7ff ff56 	bl	8003ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c0a:	b9f8      	cbnz	r0, 8003c4c <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c0c:	2d01      	cmp	r5, #1
 8003c0e:	d10e      	bne.n	8003c2e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	fa5f f288 	uxtb.w	r2, r8
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c18:	9700      	str	r7, [sp, #0]
 8003c1a:	4633      	mov	r3, r6
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2140      	movs	r1, #64	; 0x40
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff ff73 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003c26:	b9a8      	cbnz	r0, 8003c54 <I2C_RequestMemoryRead+0x70>
}
 8003c28:	b002      	add	sp, #8
 8003c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c36:	463a      	mov	r2, r7
 8003c38:	4631      	mov	r1, r6
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f7ff ff3b 	bl	8003ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c40:	b930      	cbnz	r0, 8003c50 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	fa5f f288 	uxtb.w	r2, r8
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
 8003c4a:	e7e5      	b.n	8003c18 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	e7eb      	b.n	8003c28 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8003c50:	2001      	movs	r0, #1
 8003c52:	e7e9      	b.n	8003c28 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8003c54:	2001      	movs	r0, #1
 8003c56:	e7e7      	b.n	8003c28 <I2C_RequestMemoryRead+0x44>
 8003c58:	80002000 	.word	0x80002000

08003c5c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4605      	mov	r5, r0
 8003c60:	460c      	mov	r4, r1
 8003c62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f013 0f20 	tst.w	r3, #32
 8003c6c:	d11a      	bne.n	8003ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6e:	4632      	mov	r2, r6
 8003c70:	4621      	mov	r1, r4
 8003c72:	4628      	mov	r0, r5
 8003c74:	f7ff fed7 	bl	8003a26 <I2C_IsAcknowledgeFailed>
 8003c78:	b9b0      	cbnz	r0, 8003ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7ff fc7f 	bl	800357c <HAL_GetTick>
 8003c7e:	1b80      	subs	r0, r0, r6
 8003c80:	42a0      	cmp	r0, r4
 8003c82:	d801      	bhi.n	8003c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003c84:	2c00      	cmp	r4, #0
 8003c86:	d1ed      	bne.n	8003c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003c8a:	f043 0320 	orr.w	r3, r3, #32
 8003c8e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	2320      	movs	r3, #32
 8003c92:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003c9c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003ca0:	2001      	movs	r0, #1
}
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	e7fc      	b.n	8003ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003ca8:	2001      	movs	r0, #1
 8003caa:	e7fa      	b.n	8003ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003cac <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	4604      	mov	r4, r0
 8003cb0:	460d      	mov	r5, r1
 8003cb2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f013 0f04 	tst.w	r3, #4
 8003cbc:	d13e      	bne.n	8003d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7ff feaf 	bl	8003a26 <I2C_IsAcknowledgeFailed>
 8003cc8:	4601      	mov	r1, r0
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d138      	bne.n	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	f012 0f20 	tst.w	r2, #32
 8003cd6:	d113      	bne.n	8003d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd8:	f7ff fc50 	bl	800357c <HAL_GetTick>
 8003cdc:	1b80      	subs	r0, r0, r6
 8003cde:	42a8      	cmp	r0, r5
 8003ce0:	d801      	bhi.n	8003ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8003ce2:	2d00      	cmp	r5, #0
 8003ce4:	d1e6      	bne.n	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ce8:	f043 0320 	orr.w	r3, r3, #32
 8003cec:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003cfa:	2101      	movs	r1, #1
}
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	f012 0f04 	tst.w	r2, #4
 8003d06:	d002      	beq.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003d08:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003d0a:	2a00      	cmp	r2, #0
 8003d0c:	d1f6      	bne.n	8003cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0e:	2220      	movs	r2, #32
 8003d10:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003d12:	6821      	ldr	r1, [r4, #0]
 8003d14:	684b      	ldr	r3, [r1, #4]
 8003d16:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003d1a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003d1e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003d34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003d38:	2101      	movs	r1, #1
 8003d3a:	e7df      	b.n	8003cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	e7dd      	b.n	8003cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8003d40:	2101      	movs	r1, #1
 8003d42:	e7db      	b.n	8003cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08003d44 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d059      	beq.n	8003dfc <HAL_I2C_Init+0xb8>
{
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d4c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d043      	beq.n	8003ddc <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d54:	2324      	movs	r3, #36	; 0x24
 8003d56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	6813      	ldr	r3, [r2, #0]
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d64:	6863      	ldr	r3, [r4, #4]
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003d6c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	6893      	ldr	r3, [r2, #8]
 8003d72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d76:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d78:	68e3      	ldr	r3, [r4, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d033      	beq.n	8003de6 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d7e:	68a3      	ldr	r3, [r4, #8]
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003d86:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d88:	68e3      	ldr	r3, [r4, #12]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d031      	beq.n	8003df2 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	6853      	ldr	r3, [r2, #4]
 8003d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	68d3      	ldr	r3, [r2, #12]
 8003da0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003da4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003da6:	6923      	ldr	r3, [r4, #16]
 8003da8:	6962      	ldr	r2, [r4, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	69a1      	ldr	r1, [r4, #24]
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003db4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003db6:	69e3      	ldr	r3, [r4, #28]
 8003db8:	6a21      	ldr	r1, [r4, #32]
 8003dba:	6822      	ldr	r2, [r4, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003dc0:	6822      	ldr	r2, [r4, #0]
 8003dc2:	6813      	ldr	r3, [r2, #0]
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dca:	2000      	movs	r0, #0
 8003dcc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003dda:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003ddc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003de0:	f7fe fbe6 	bl	80025b0 <HAL_I2C_MspInit>
 8003de4:	e7b6      	b.n	8003d54 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	6822      	ldr	r2, [r4, #0]
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dee:	6093      	str	r3, [r2, #8]
 8003df0:	e7ca      	b.n	8003d88 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	e7c8      	b.n	8003d8e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003dfc:	2001      	movs	r0, #1
}
 8003dfe:	4770      	bx	lr

08003e00 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8003e00:	b1a8      	cbz	r0, 8003e2e <HAL_I2C_DeInit+0x2e>
{
 8003e02:	b510      	push	{r4, lr}
 8003e04:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e06:	2324      	movs	r3, #36	; 0x24
 8003e08:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003e0c:	6802      	ldr	r2, [r0, #0]
 8003e0e:	6813      	ldr	r3, [r2, #0]
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003e16:	f7fe fc03 	bl	8002620 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003e1e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e22:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e24:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8003e28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003e2c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e2e:	2001      	movs	r0, #1
}
 8003e30:	4770      	bx	lr
	...

08003e34 <HAL_I2C_Master_Transmit>:
{
 8003e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	460f      	mov	r7, r1
 8003e3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003e42:	b2c9      	uxtb	r1, r1
 8003e44:	2920      	cmp	r1, #32
 8003e46:	f040 80a3 	bne.w	8003f90 <HAL_I2C_Master_Transmit+0x15c>
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	4690      	mov	r8, r2
 8003e4e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8003e50:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	f000 809f 	beq.w	8003f98 <HAL_I2C_Master_Transmit+0x164>
 8003e5a:	f04f 0a01 	mov.w	sl, #1
 8003e5e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003e62:	f7ff fb8b 	bl	800357c <HAL_GetTick>
 8003e66:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e68:	9000      	str	r0, [sp, #0]
 8003e6a:	2319      	movs	r3, #25
 8003e6c:	4652      	mov	r2, sl
 8003e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e72:	4620      	mov	r0, r4
 8003e74:	f7ff fe4a 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	f040 808f 	bne.w	8003f9c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e7e:	2321      	movs	r3, #33	; 0x21
 8003e80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e84:	2310      	movs	r3, #16
 8003e86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003e8e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e92:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e96:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2bff      	cmp	r3, #255	; 0xff
 8003e9e:	d90a      	bls.n	8003eb6 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ea0:	22ff      	movs	r2, #255	; 0xff
 8003ea2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ea4:	4b41      	ldr	r3, [pc, #260]	; (8003fac <HAL_I2C_Master_Transmit+0x178>)
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eac:	4639      	mov	r1, r7
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f7ff fd9d 	bl	80039ee <I2C_TransferConfig>
 8003eb4:	e018      	b.n	8003ee8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8003eb6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <HAL_I2C_Master_Transmit+0x178>)
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f7ff fd90 	bl	80039ee <I2C_TransferConfig>
 8003ece:	e00b      	b.n	8003ee8 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8003ed0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	4639      	mov	r1, r7
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f7ff fd83 	bl	80039ee <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ee8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d033      	beq.n	8003f58 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef0:	462a      	mov	r2, r5
 8003ef2:	4631      	mov	r1, r6
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7ff fdde 	bl	8003ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d150      	bne.n	8003fa0 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003efe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	7812      	ldrb	r2, [r2, #0]
 8003f04:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f08:	3301      	adds	r3, #1
 8003f0a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003f0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003f16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f1e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f20:	b292      	uxth	r2, r2
 8003f22:	2a00      	cmp	r2, #0
 8003f24:	d0e0      	beq.n	8003ee8 <HAL_I2C_Master_Transmit+0xb4>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1de      	bne.n	8003ee8 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f2a:	9500      	str	r5, [sp, #0]
 8003f2c:	4633      	mov	r3, r6
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	4620      	mov	r0, r4
 8003f34:	f7ff fdea 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003f38:	bba0      	cbnz	r0, 8003fa4 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2bff      	cmp	r3, #255	; 0xff
 8003f40:	d9c6      	bls.n	8003ed0 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f42:	22ff      	movs	r2, #255	; 0xff
 8003f44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f4e:	4639      	mov	r1, r7
 8003f50:	4620      	mov	r0, r4
 8003f52:	f7ff fd4c 	bl	80039ee <I2C_TransferConfig>
 8003f56:	e7c7      	b.n	8003ee8 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f58:	462a      	mov	r2, r5
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7ff fe7d 	bl	8003c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f62:	bb08      	cbnz	r0, 8003fa8 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	2220      	movs	r2, #32
 8003f68:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003f6a:	6821      	ldr	r1, [r4, #0]
 8003f6c:	684b      	ldr	r3, [r1, #4]
 8003f6e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003f72:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003f76:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003f8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003f8e:	e000      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8003f90:	2002      	movs	r0, #2
}
 8003f92:	b002      	add	sp, #8
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003f98:	2002      	movs	r0, #2
 8003f9a:	e7fa      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	e7f8      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	e7f6      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	e7f4      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8003fa8:	2001      	movs	r0, #1
 8003faa:	e7f2      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x15e>
 8003fac:	80002000 	.word	0x80002000

08003fb0 <HAL_I2C_Master_Receive>:
{
 8003fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	460f      	mov	r7, r1
 8003fb8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fba:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003fbe:	b2c9      	uxtb	r1, r1
 8003fc0:	2920      	cmp	r1, #32
 8003fc2:	f040 80a2 	bne.w	800410a <HAL_I2C_Master_Receive+0x15a>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4690      	mov	r8, r2
 8003fca:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8003fcc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	f000 809e 	beq.w	8004112 <HAL_I2C_Master_Receive+0x162>
 8003fd6:	f04f 0a01 	mov.w	sl, #1
 8003fda:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003fde:	f7ff facd 	bl	800357c <HAL_GetTick>
 8003fe2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fe4:	9000      	str	r0, [sp, #0]
 8003fe6:	2319      	movs	r3, #25
 8003fe8:	4652      	mov	r2, sl
 8003fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7ff fd8c 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	f040 808e 	bne.w	8004116 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ffa:	2322      	movs	r3, #34	; 0x22
 8003ffc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004000:	2310      	movs	r3, #16
 8004002:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004006:	2300      	movs	r3, #0
 8004008:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800400a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800400e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004012:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	2bff      	cmp	r3, #255	; 0xff
 800401a:	d90a      	bls.n	8004032 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004020:	4b41      	ldr	r3, [pc, #260]	; (8004128 <HAL_I2C_Master_Receive+0x178>)
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004028:	4639      	mov	r1, r7
 800402a:	4620      	mov	r0, r4
 800402c:	f7ff fcdf 	bl	80039ee <I2C_TransferConfig>
 8004030:	e018      	b.n	8004064 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8004032:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004034:	b292      	uxth	r2, r2
 8004036:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004038:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <HAL_I2C_Master_Receive+0x178>)
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	4639      	mov	r1, r7
 8004044:	4620      	mov	r0, r4
 8004046:	f7ff fcd2 	bl	80039ee <I2C_TransferConfig>
 800404a:	e00b      	b.n	8004064 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800404c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800404e:	b292      	uxth	r2, r2
 8004050:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004052:	2300      	movs	r3, #0
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	4639      	mov	r1, r7
 800405e:	4620      	mov	r0, r4
 8004060:	f7ff fcc5 	bl	80039ee <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004064:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d032      	beq.n	80040d2 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406c:	462a      	mov	r2, r5
 800406e:	4631      	mov	r1, r6
 8004070:	4620      	mov	r0, r4
 8004072:	f7ff fe1b 	bl	8003cac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004076:	2800      	cmp	r0, #0
 8004078:	d14f      	bne.n	800411a <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004080:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004084:	3301      	adds	r3, #1
 8004086:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004088:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800408a:	3a01      	subs	r2, #1
 800408c:	b292      	uxth	r2, r2
 800408e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004090:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29b      	uxth	r3, r3
 8004098:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800409a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0e0      	beq.n	8004064 <HAL_I2C_Master_Receive+0xb4>
 80040a2:	2a00      	cmp	r2, #0
 80040a4:	d1de      	bne.n	8004064 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	9500      	str	r5, [sp, #0]
 80040a8:	4633      	mov	r3, r6
 80040aa:	2180      	movs	r1, #128	; 0x80
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7ff fd2d 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 80040b2:	bba0      	cbnz	r0, 800411e <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2bff      	cmp	r3, #255	; 0xff
 80040ba:	d9c7      	bls.n	800404c <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040bc:	22ff      	movs	r2, #255	; 0xff
 80040be:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040c0:	2300      	movs	r3, #0
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c8:	4639      	mov	r1, r7
 80040ca:	4620      	mov	r0, r4
 80040cc:	f7ff fc8f 	bl	80039ee <I2C_TransferConfig>
 80040d0:	e7c8      	b.n	8004064 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d2:	462a      	mov	r2, r5
 80040d4:	4631      	mov	r1, r6
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff fdc0 	bl	8003c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80040dc:	bb08      	cbnz	r0, 8004122 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	2220      	movs	r2, #32
 80040e2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80040e4:	6821      	ldr	r1, [r4, #0]
 80040e6:	684b      	ldr	r3, [r1, #4]
 80040e8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80040ec:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80040f0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040fe:	2300      	movs	r3, #0
 8004100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004104:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004108:	e000      	b.n	800410c <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 800410a:	2002      	movs	r0, #2
}
 800410c:	b002      	add	sp, #8
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004112:	2002      	movs	r0, #2
 8004114:	e7fa      	b.n	800410c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8004116:	2001      	movs	r0, #1
 8004118:	e7f8      	b.n	800410c <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 800411a:	2001      	movs	r0, #1
 800411c:	e7f6      	b.n	800410c <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 800411e:	2001      	movs	r0, #1
 8004120:	e7f4      	b.n	800410c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8004122:	2001      	movs	r0, #1
 8004124:	e7f2      	b.n	800410c <HAL_I2C_Master_Receive+0x15c>
 8004126:	bf00      	nop
 8004128:	80002400 	.word	0x80002400

0800412c <HAL_I2C_Mem_Write>:
{
 800412c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	b083      	sub	sp, #12
 8004132:	460e      	mov	r6, r1
 8004134:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004138:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800413a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800413e:	b2c9      	uxtb	r1, r1
 8004140:	2920      	cmp	r1, #32
 8004142:	f040 80bb 	bne.w	80042bc <HAL_I2C_Mem_Write+0x190>
 8004146:	4604      	mov	r4, r0
 8004148:	4690      	mov	r8, r2
 800414a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800414c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800414e:	b1cb      	cbz	r3, 8004184 <HAL_I2C_Mem_Write+0x58>
 8004150:	f1ba 0f00 	cmp.w	sl, #0
 8004154:	d016      	beq.n	8004184 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8004156:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800415a:	2b01      	cmp	r3, #1
 800415c:	f000 80b2 	beq.w	80042c4 <HAL_I2C_Mem_Write+0x198>
 8004160:	f04f 0b01 	mov.w	fp, #1
 8004164:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004168:	f7ff fa08 	bl	800357c <HAL_GetTick>
 800416c:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800416e:	9000      	str	r0, [sp, #0]
 8004170:	2319      	movs	r3, #25
 8004172:	465a      	mov	r2, fp
 8004174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004178:	4620      	mov	r0, r4
 800417a:	f7ff fcc7 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 800417e:	b130      	cbz	r0, 800418e <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8004180:	2001      	movs	r0, #1
 8004182:	e09c      	b.n	80042be <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004188:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800418a:	2001      	movs	r0, #1
 800418c:	e097      	b.n	80042be <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800418e:	2321      	movs	r3, #33	; 0x21
 8004190:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004194:	2340      	movs	r3, #64	; 0x40
 8004196:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419a:	2300      	movs	r3, #0
 800419c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800419e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041a0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80041a2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041a6:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041a8:	9701      	str	r7, [sp, #4]
 80041aa:	9500      	str	r5, [sp, #0]
 80041ac:	464b      	mov	r3, r9
 80041ae:	4642      	mov	r2, r8
 80041b0:	4631      	mov	r1, r6
 80041b2:	4620      	mov	r0, r4
 80041b4:	f7ff fcd8 	bl	8003b68 <I2C_RequestMemoryWrite>
 80041b8:	b970      	cbnz	r0, 80041d8 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2bff      	cmp	r3, #255	; 0xff
 80041c0:	d90f      	bls.n	80041e2 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c2:	22ff      	movs	r2, #255	; 0xff
 80041c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041c6:	2300      	movs	r3, #0
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041ce:	4631      	mov	r1, r6
 80041d0:	4620      	mov	r0, r4
 80041d2:	f7ff fc0c 	bl	80039ee <I2C_TransferConfig>
 80041d6:	e021      	b.n	800421c <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 80041d8:	2300      	movs	r3, #0
 80041da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80041de:	4658      	mov	r0, fp
 80041e0:	e06d      	b.n	80042be <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 80041e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041e4:	b292      	uxth	r2, r2
 80041e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041e8:	2300      	movs	r3, #0
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	4631      	mov	r1, r6
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff fbfa 	bl	80039ee <I2C_TransferConfig>
 80041fa:	e00f      	b.n	800421c <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80041fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041fe:	b292      	uxth	r2, r2
 8004200:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004202:	2300      	movs	r3, #0
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	4631      	mov	r1, r6
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff fbed 	bl	80039ee <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004214:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d033      	beq.n	8004284 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421c:	463a      	mov	r2, r7
 800421e:	4629      	mov	r1, r5
 8004220:	4620      	mov	r0, r4
 8004222:	f7ff fc48 	bl	8003ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004226:	2800      	cmp	r0, #0
 8004228:	d14e      	bne.n	80042c8 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800422a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	7812      	ldrb	r2, [r2, #0]
 8004230:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004234:	3301      	adds	r3, #1
 8004236:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004238:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004242:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29b      	uxth	r3, r3
 8004248:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800424a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800424c:	b292      	uxth	r2, r2
 800424e:	2a00      	cmp	r2, #0
 8004250:	d0e0      	beq.n	8004214 <HAL_I2C_Mem_Write+0xe8>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1de      	bne.n	8004214 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004256:	9700      	str	r7, [sp, #0]
 8004258:	462b      	mov	r3, r5
 800425a:	2200      	movs	r2, #0
 800425c:	2180      	movs	r1, #128	; 0x80
 800425e:	4620      	mov	r0, r4
 8004260:	f7ff fc54 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8004264:	bb90      	cbnz	r0, 80042cc <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004266:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2bff      	cmp	r3, #255	; 0xff
 800426c:	d9c6      	bls.n	80041fc <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800426e:	22ff      	movs	r2, #255	; 0xff
 8004270:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004272:	2300      	movs	r3, #0
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800427a:	4631      	mov	r1, r6
 800427c:	4620      	mov	r0, r4
 800427e:	f7ff fbb6 	bl	80039ee <I2C_TransferConfig>
 8004282:	e7c7      	b.n	8004214 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004284:	463a      	mov	r2, r7
 8004286:	4629      	mov	r1, r5
 8004288:	4620      	mov	r0, r4
 800428a:	f7ff fce7 	bl	8003c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800428e:	b9f8      	cbnz	r0, 80042d0 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	2220      	movs	r2, #32
 8004294:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004296:	6821      	ldr	r1, [r4, #0]
 8004298:	684b      	ldr	r3, [r1, #4]
 800429a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800429e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80042a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042ac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80042b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80042ba:	e000      	b.n	80042be <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 80042bc:	2002      	movs	r0, #2
}
 80042be:	b003      	add	sp, #12
 80042c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80042c4:	2002      	movs	r0, #2
 80042c6:	e7fa      	b.n	80042be <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 80042c8:	2001      	movs	r0, #1
 80042ca:	e7f8      	b.n	80042be <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 80042cc:	2001      	movs	r0, #1
 80042ce:	e7f6      	b.n	80042be <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 80042d0:	2001      	movs	r0, #1
 80042d2:	e7f4      	b.n	80042be <HAL_I2C_Mem_Write+0x192>

080042d4 <HAL_I2C_Mem_Read>:
{
 80042d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d8:	b083      	sub	sp, #12
 80042da:	460e      	mov	r6, r1
 80042dc:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80042e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80042e6:	b2c9      	uxtb	r1, r1
 80042e8:	2920      	cmp	r1, #32
 80042ea:	f040 80bc 	bne.w	8004466 <HAL_I2C_Mem_Read+0x192>
 80042ee:	4604      	mov	r4, r0
 80042f0:	4690      	mov	r8, r2
 80042f2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80042f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042f6:	b1cb      	cbz	r3, 800432c <HAL_I2C_Mem_Read+0x58>
 80042f8:	f1ba 0f00 	cmp.w	sl, #0
 80042fc:	d016      	beq.n	800432c <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80042fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004302:	2b01      	cmp	r3, #1
 8004304:	f000 80b3 	beq.w	800446e <HAL_I2C_Mem_Read+0x19a>
 8004308:	f04f 0b01 	mov.w	fp, #1
 800430c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004310:	f7ff f934 	bl	800357c <HAL_GetTick>
 8004314:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004316:	9000      	str	r0, [sp, #0]
 8004318:	2319      	movs	r3, #25
 800431a:	465a      	mov	r2, fp
 800431c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004320:	4620      	mov	r0, r4
 8004322:	f7ff fbf3 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8004326:	b130      	cbz	r0, 8004336 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8004328:	2001      	movs	r0, #1
 800432a:	e09d      	b.n	8004468 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800432c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004330:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8004332:	2001      	movs	r0, #1
 8004334:	e098      	b.n	8004468 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004336:	2322      	movs	r3, #34	; 0x22
 8004338:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800433c:	2340      	movs	r3, #64	; 0x40
 800433e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004342:	2300      	movs	r3, #0
 8004344:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004348:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800434a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800434e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004350:	9701      	str	r7, [sp, #4]
 8004352:	9500      	str	r5, [sp, #0]
 8004354:	464b      	mov	r3, r9
 8004356:	4642      	mov	r2, r8
 8004358:	4631      	mov	r1, r6
 800435a:	4620      	mov	r0, r4
 800435c:	f7ff fc42 	bl	8003be4 <I2C_RequestMemoryRead>
 8004360:	b970      	cbnz	r0, 8004380 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004362:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2bff      	cmp	r3, #255	; 0xff
 8004368:	d90f      	bls.n	800438a <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800436a:	22ff      	movs	r2, #255	; 0xff
 800436c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800436e:	4b44      	ldr	r3, [pc, #272]	; (8004480 <HAL_I2C_Mem_Read+0x1ac>)
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004376:	4631      	mov	r1, r6
 8004378:	4620      	mov	r0, r4
 800437a:	f7ff fb38 	bl	80039ee <I2C_TransferConfig>
 800437e:	e021      	b.n	80043c4 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8004380:	2300      	movs	r3, #0
 8004382:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004386:	4658      	mov	r0, fp
 8004388:	e06e      	b.n	8004468 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800438a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800438c:	b292      	uxth	r2, r2
 800438e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004390:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <HAL_I2C_Mem_Read+0x1ac>)
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	4631      	mov	r1, r6
 800439c:	4620      	mov	r0, r4
 800439e:	f7ff fb26 	bl	80039ee <I2C_TransferConfig>
 80043a2:	e00f      	b.n	80043c4 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80043a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80043a6:	b292      	uxth	r2, r2
 80043a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043aa:	2300      	movs	r3, #0
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	4631      	mov	r1, r6
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7ff fb19 	bl	80039ee <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80043bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d034      	beq.n	800442e <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043c4:	9700      	str	r7, [sp, #0]
 80043c6:	462b      	mov	r3, r5
 80043c8:	2200      	movs	r2, #0
 80043ca:	2104      	movs	r1, #4
 80043cc:	4620      	mov	r0, r4
 80043ce:	f7ff fb9d 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d14d      	bne.n	8004472 <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043dc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80043de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043e0:	3301      	adds	r3, #1
 80043e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80043e4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80043e6:	3a01      	subs	r2, #1
 80043e8:	b292      	uxth	r2, r2
 80043ea:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80043ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0de      	beq.n	80043bc <HAL_I2C_Mem_Read+0xe8>
 80043fe:	2a00      	cmp	r2, #0
 8004400:	d1dc      	bne.n	80043bc <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004402:	9700      	str	r7, [sp, #0]
 8004404:	462b      	mov	r3, r5
 8004406:	2180      	movs	r1, #128	; 0x80
 8004408:	4620      	mov	r0, r4
 800440a:	f7ff fb7f 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 800440e:	bb90      	cbnz	r0, 8004476 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2bff      	cmp	r3, #255	; 0xff
 8004416:	d9c5      	bls.n	80043a4 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004418:	22ff      	movs	r2, #255	; 0xff
 800441a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800441c:	2300      	movs	r3, #0
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004424:	4631      	mov	r1, r6
 8004426:	4620      	mov	r0, r4
 8004428:	f7ff fae1 	bl	80039ee <I2C_TransferConfig>
 800442c:	e7c6      	b.n	80043bc <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800442e:	463a      	mov	r2, r7
 8004430:	4629      	mov	r1, r5
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff fc12 	bl	8003c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004438:	b9f8      	cbnz	r0, 800447a <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	2220      	movs	r2, #32
 800443e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004440:	6821      	ldr	r1, [r4, #0]
 8004442:	684b      	ldr	r3, [r1, #4]
 8004444:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004448:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800444c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004456:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800445a:	2300      	movs	r3, #0
 800445c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004460:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004464:	e000      	b.n	8004468 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8004466:	2002      	movs	r0, #2
}
 8004468:	b003      	add	sp, #12
 800446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800446e:	2002      	movs	r0, #2
 8004470:	e7fa      	b.n	8004468 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8004472:	2001      	movs	r0, #1
 8004474:	e7f8      	b.n	8004468 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8004476:	2001      	movs	r0, #1
 8004478:	e7f6      	b.n	8004468 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 800447a:	2001      	movs	r0, #1
 800447c:	e7f4      	b.n	8004468 <HAL_I2C_Mem_Read+0x194>
 800447e:	bf00      	nop
 8004480:	80002400 	.word	0x80002400

08004484 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004484:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b20      	cmp	r3, #32
 800448c:	d124      	bne.n	80044d8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800448e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004492:	2b01      	cmp	r3, #1
 8004494:	d022      	beq.n	80044dc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004496:	2301      	movs	r3, #1
 8004498:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800449c:	2324      	movs	r3, #36	; 0x24
 800449e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044a2:	6802      	ldr	r2, [r0, #0]
 80044a4:	6813      	ldr	r3, [r2, #0]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044ac:	6802      	ldr	r2, [r0, #0]
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044b4:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044b6:	6802      	ldr	r2, [r0, #0]
 80044b8:	6813      	ldr	r3, [r2, #0]
 80044ba:	4319      	orrs	r1, r3
 80044bc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044be:	6802      	ldr	r2, [r0, #0]
 80044c0:	6813      	ldr	r3, [r2, #0]
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c8:	2320      	movs	r3, #32
 80044ca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ce:	2300      	movs	r3, #0
 80044d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80044d4:	4618      	mov	r0, r3
 80044d6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2002      	movs	r0, #2
 80044da:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80044dc:	2002      	movs	r0, #2
  }
}
 80044de:	4770      	bx	lr

080044e0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d122      	bne.n	8004530 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d020      	beq.n	8004534 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80044f2:	2301      	movs	r3, #1
 80044f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044f8:	2324      	movs	r3, #36	; 0x24
 80044fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044fe:	6802      	ldr	r2, [r0, #0]
 8004500:	6813      	ldr	r3, [r2, #0]
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004508:	6802      	ldr	r2, [r0, #0]
 800450a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800450c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004510:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004514:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004516:	6802      	ldr	r2, [r0, #0]
 8004518:	6813      	ldr	r3, [r2, #0]
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004520:	2320      	movs	r3, #32
 8004522:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800452c:	4618      	mov	r0, r3
 800452e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004530:	2002      	movs	r0, #2
 8004532:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004534:	2002      	movs	r0, #2
  }
}
 8004536:	4770      	bx	lr

08004538 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004538:	4b02      	ldr	r3, [pc, #8]	; (8004544 <HAL_PWREx_GetVoltageRange+0xc>)
 800453a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800453c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40007000 	.word	0x40007000

08004548 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004548:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800454c:	d00f      	beq.n	800456e <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800454e:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0x84>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455a:	d034      	beq.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0x84>)
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004568:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800456a:	2000      	movs	r0, #0
 800456c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800456e:	4b17      	ldr	r3, [pc, #92]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0x84>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457a:	d020      	beq.n	80045be <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800457c:	4a13      	ldr	r2, [pc, #76]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0x84>)
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004588:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2232      	movs	r2, #50	; 0x32
 8004590:	fb02 f303 	mul.w	r3, r2, r3
 8004594:	4a0f      	ldr	r2, [pc, #60]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	0c9b      	lsrs	r3, r3, #18
 800459c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800459e:	e000      	b.n	80045a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 80045a0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045a2:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0x84>)
 80045a4:	6952      	ldr	r2, [r2, #20]
 80045a6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80045aa:	d001      	beq.n	80045b0 <HAL_PWREx_ControlVoltageScaling+0x68>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f7      	bne.n	80045a0 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0x84>)
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80045b8:	d103      	bne.n	80045c2 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 80045ba:	2000      	movs	r0, #0
 80045bc:	4770      	bx	lr
 80045be:	2000      	movs	r0, #0
 80045c0:	4770      	bx	lr
        return HAL_TIMEOUT;
 80045c2:	2003      	movs	r0, #3
 80045c4:	4770      	bx	lr
  return HAL_OK;
 80045c6:	2000      	movs	r0, #0
}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40007000 	.word	0x40007000
 80045d0:	200003f8 	.word	0x200003f8
 80045d4:	431bde83 	.word	0x431bde83

080045d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045d8:	b530      	push	{r4, r5, lr}
 80045da:	b083      	sub	sp, #12
 80045dc:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80045e6:	d00b      	beq.n	8004600 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045e8:	f7ff ffa6 	bl	8004538 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80045f0:	d017      	beq.n	8004622 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045f2:	2c80      	cmp	r4, #128	; 0x80
 80045f4:	d81f      	bhi.n	8004636 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045f6:	d02d      	beq.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045f8:	2c70      	cmp	r4, #112	; 0x70
 80045fa:	d02d      	beq.n	8004658 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045fc:	2100      	movs	r1, #0
 80045fe:	e01b      	b.n	8004638 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004600:	4d17      	ldr	r5, [pc, #92]	; (8004660 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8004602:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004608:	65ab      	str	r3, [r5, #88]	; 0x58
 800460a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004614:	f7ff ff90 	bl	8004538 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004618:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	65ab      	str	r3, [r5, #88]	; 0x58
 8004620:	e7e4      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8004622:	2c80      	cmp	r4, #128	; 0x80
 8004624:	d903      	bls.n	800462e <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8004626:	2ca0      	cmp	r4, #160	; 0xa0
 8004628:	d903      	bls.n	8004632 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800462a:	2102      	movs	r1, #2
 800462c:	e004      	b.n	8004638 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800462e:	2100      	movs	r1, #0
 8004630:	e002      	b.n	8004638 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8004632:	2101      	movs	r1, #1
 8004634:	e000      	b.n	8004638 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8004636:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004638:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800463a:	6813      	ldr	r3, [r2, #0]
 800463c:	f023 0307 	bic.w	r3, r3, #7
 8004640:	430b      	orrs	r3, r1
 8004642:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004644:	6813      	ldr	r3, [r2, #0]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	428b      	cmp	r3, r1
 800464c:	d106      	bne.n	800465c <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800464e:	2000      	movs	r0, #0
}
 8004650:	b003      	add	sp, #12
 8004652:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8004654:	2102      	movs	r1, #2
 8004656:	e7ef      	b.n	8004638 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8004658:	2101      	movs	r1, #1
 800465a:	e7ed      	b.n	8004638 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 800465c:	2001      	movs	r0, #1
 800465e:	e7f7      	b.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8004660:	40021000 	.word	0x40021000
 8004664:	40022000 	.word	0x40022000

08004668 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004668:	4a28      	ldr	r2, [pc, #160]	; (800470c <HAL_RCC_GetSysClockFreq+0xa4>)
 800466a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800466c:	68d2      	ldr	r2, [r2, #12]
 800466e:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004672:	f013 030c 	ands.w	r3, r3, #12
 8004676:	d00a      	beq.n	800468e <HAL_RCC_GetSysClockFreq+0x26>
 8004678:	2b0c      	cmp	r3, #12
 800467a:	d006      	beq.n	800468a <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800467c:	2b04      	cmp	r3, #4
 800467e:	d01f      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004680:	2b08      	cmp	r3, #8
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004684:	2000      	movs	r0, #0
 8004686:	4602      	mov	r2, r0
 8004688:	e010      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800468a:	2a01      	cmp	r2, #1
 800468c:	d1f6      	bne.n	800467c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800468e:	4a1f      	ldr	r2, [pc, #124]	; (800470c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	f012 0f08 	tst.w	r2, #8
 8004696:	d10c      	bne.n	80046b2 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004698:	4a1c      	ldr	r2, [pc, #112]	; (800470c <HAL_RCC_GetSysClockFreq+0xa4>)
 800469a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800469e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 80046a2:	491b      	ldr	r1, [pc, #108]	; (8004710 <HAL_RCC_GetSysClockFreq+0xa8>)
 80046a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046a8:	b143      	cbz	r3, 80046bc <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046aa:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	d00d      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x64>
}
 80046b0:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046b2:	4a16      	ldr	r2, [pc, #88]	; (800470c <HAL_RCC_GetSysClockFreq+0xa4>)
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80046ba:	e7f2      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 80046bc:	4610      	mov	r0, r2
 80046be:	e7f5      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 80046c0:	4814      	ldr	r0, [pc, #80]	; (8004714 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046c2:	2200      	movs	r2, #0
 80046c4:	e7f2      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80046c6:	4814      	ldr	r0, [pc, #80]	; (8004718 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046c8:	2200      	movs	r2, #0
 80046ca:	e7ef      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046cc:	4b0f      	ldr	r3, [pc, #60]	; (800470c <HAL_RCC_GetSysClockFreq+0xa4>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d016      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x9e>
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d100      	bne.n	80046de <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 80046dc:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046de:	490b      	ldr	r1, [pc, #44]	; (800470c <HAL_RCC_GetSysClockFreq+0xa4>)
 80046e0:	68c8      	ldr	r0, [r1, #12]
 80046e2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80046e6:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046e8:	68c8      	ldr	r0, [r1, #12]
 80046ea:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80046ee:	fb02 f000 	mul.w	r0, r2, r0
 80046f2:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046f6:	68cb      	ldr	r3, [r1, #12]
 80046f8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80046fc:	3301      	adds	r3, #1
 80046fe:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8004700:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8004704:	e7d4      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8004706:	4a03      	ldr	r2, [pc, #12]	; (8004714 <HAL_RCC_GetSysClockFreq+0xac>)
 8004708:	e7e9      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x76>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	080078e0 	.word	0x080078e0
 8004714:	00f42400 	.word	0x00f42400
 8004718:	007a1200 	.word	0x007a1200

0800471c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800471c:	2800      	cmp	r0, #0
 800471e:	f000 82fc 	beq.w	8004d1a <HAL_RCC_OscConfig+0x5fe>
{
 8004722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004724:	b083      	sub	sp, #12
 8004726:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004728:	4b96      	ldr	r3, [pc, #600]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800472a:	689d      	ldr	r5, [r3, #8]
 800472c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004730:	68de      	ldr	r6, [r3, #12]
 8004732:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004736:	6803      	ldr	r3, [r0, #0]
 8004738:	f013 0f10 	tst.w	r3, #16
 800473c:	d05a      	beq.n	80047f4 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800473e:	b1e5      	cbz	r5, 800477a <HAL_RCC_OscConfig+0x5e>
 8004740:	2d0c      	cmp	r5, #12
 8004742:	d018      	beq.n	8004776 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004744:	69a3      	ldr	r3, [r4, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80bb 	beq.w	80048c2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800474c:	4a8d      	ldr	r2, [pc, #564]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004756:	f7fe ff11 	bl	800357c <HAL_GetTick>
 800475a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800475c:	4b89      	ldr	r3, [pc, #548]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f013 0f02 	tst.w	r3, #2
 8004764:	f040 809a 	bne.w	800489c <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004768:	f7fe ff08 	bl	800357c <HAL_GetTick>
 800476c:	1bc0      	subs	r0, r0, r7
 800476e:	2802      	cmp	r0, #2
 8004770:	d9f4      	bls.n	800475c <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8004772:	2003      	movs	r0, #3
 8004774:	e2dc      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004776:	2e01      	cmp	r6, #1
 8004778:	d1e4      	bne.n	8004744 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800477a:	4b82      	ldr	r3, [pc, #520]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f013 0f02 	tst.w	r3, #2
 8004782:	d003      	beq.n	800478c <HAL_RCC_OscConfig+0x70>
 8004784:	69a3      	ldr	r3, [r4, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 82c9 	beq.w	8004d1e <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800478c:	6a20      	ldr	r0, [r4, #32]
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f013 0f08 	tst.w	r3, #8
 8004796:	d05b      	beq.n	8004850 <HAL_RCC_OscConfig+0x134>
 8004798:	4b7a      	ldr	r3, [pc, #488]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a0:	4298      	cmp	r0, r3
 80047a2:	d85c      	bhi.n	800485e <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047a4:	4b77      	ldr	r3, [pc, #476]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	f042 0208 	orr.w	r2, r2, #8
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80047b4:	6a21      	ldr	r1, [r4, #32]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80047c0:	69e1      	ldr	r1, [r4, #28]
 80047c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80047c6:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	d060      	beq.n	800488e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047cc:	f7ff ff4c 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 80047d0:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80047d8:	4a6b      	ldr	r2, [pc, #428]	; (8004988 <HAL_RCC_OscConfig+0x26c>)
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	40d8      	lsrs	r0, r3
 80047e2:	4b6a      	ldr	r3, [pc, #424]	; (800498c <HAL_RCC_OscConfig+0x270>)
 80047e4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80047e6:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCC_OscConfig+0x274>)
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	f7fe fe85 	bl	80034f8 <HAL_InitTick>
        if(status != HAL_OK)
 80047ee:	2800      	cmp	r0, #0
 80047f0:	f040 829e 	bne.w	8004d30 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	f013 0f01 	tst.w	r3, #1
 80047fa:	f000 8081 	beq.w	8004900 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047fe:	2d08      	cmp	r5, #8
 8004800:	d075      	beq.n	80048ee <HAL_RCC_OscConfig+0x1d2>
 8004802:	2d0c      	cmp	r5, #12
 8004804:	d071      	beq.n	80048ea <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004806:	6863      	ldr	r3, [r4, #4]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	f000 8097 	beq.w	800493e <HAL_RCC_OscConfig+0x222>
 8004810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004814:	f000 8099 	beq.w	800494a <HAL_RCC_OscConfig+0x22e>
 8004818:	4b5a      	ldr	r3, [pc, #360]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004828:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800482a:	6863      	ldr	r3, [r4, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8099 	beq.w	8004964 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8004832:	f7fe fea3 	bl	800357c <HAL_GetTick>
 8004836:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004838:	4b52      	ldr	r3, [pc, #328]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004840:	d15e      	bne.n	8004900 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004842:	f7fe fe9b 	bl	800357c <HAL_GetTick>
 8004846:	1bc0      	subs	r0, r0, r7
 8004848:	2864      	cmp	r0, #100	; 0x64
 800484a:	d9f5      	bls.n	8004838 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800484c:	2003      	movs	r0, #3
 800484e:	e26f      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004850:	4b4c      	ldr	r3, [pc, #304]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 8004852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485c:	e7a0      	b.n	80047a0 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800485e:	f7ff febb 	bl	80045d8 <RCC_SetFlashLatencyFromMSIRange>
 8004862:	2800      	cmp	r0, #0
 8004864:	f040 825d 	bne.w	8004d22 <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004868:	4b46      	ldr	r3, [pc, #280]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f042 0208 	orr.w	r2, r2, #8
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004878:	6a21      	ldr	r1, [r4, #32]
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004884:	69e1      	ldr	r1, [r4, #28]
 8004886:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800488a:	605a      	str	r2, [r3, #4]
 800488c:	e79e      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800488e:	6a20      	ldr	r0, [r4, #32]
 8004890:	f7ff fea2 	bl	80045d8 <RCC_SetFlashLatencyFromMSIRange>
 8004894:	2800      	cmp	r0, #0
 8004896:	d099      	beq.n	80047cc <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8004898:	2001      	movs	r0, #1
 800489a:	e249      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	f042 0208 	orr.w	r2, r2, #8
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048ac:	6a21      	ldr	r1, [r4, #32]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80048b8:	69e1      	ldr	r1, [r4, #28]
 80048ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	e798      	b.n	80047f4 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80048c2:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 80048c4:	6813      	ldr	r3, [r2, #0]
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80048cc:	f7fe fe56 	bl	800357c <HAL_GetTick>
 80048d0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048d2:	4b2c      	ldr	r3, [pc, #176]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f013 0f02 	tst.w	r3, #2
 80048da:	d08b      	beq.n	80047f4 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048dc:	f7fe fe4e 	bl	800357c <HAL_GetTick>
 80048e0:	1bc0      	subs	r0, r0, r7
 80048e2:	2802      	cmp	r0, #2
 80048e4:	d9f5      	bls.n	80048d2 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80048e6:	2003      	movs	r0, #3
 80048e8:	e222      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048ea:	2e03      	cmp	r6, #3
 80048ec:	d18b      	bne.n	8004806 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80048f6:	d003      	beq.n	8004900 <HAL_RCC_OscConfig+0x1e4>
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8213 	beq.w	8004d26 <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	f013 0f02 	tst.w	r3, #2
 8004906:	d058      	beq.n	80049ba <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004908:	2d04      	cmp	r5, #4
 800490a:	d045      	beq.n	8004998 <HAL_RCC_OscConfig+0x27c>
 800490c:	2d0c      	cmp	r5, #12
 800490e:	d041      	beq.n	8004994 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004910:	68e3      	ldr	r3, [r4, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d077      	beq.n	8004a06 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8004916:	4a1b      	ldr	r2, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 8004918:	6813      	ldr	r3, [r2, #0]
 800491a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004920:	f7fe fe2c 	bl	800357c <HAL_GetTick>
 8004924:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004926:	4b17      	ldr	r3, [pc, #92]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800492e:	d161      	bne.n	80049f4 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004930:	f7fe fe24 	bl	800357c <HAL_GetTick>
 8004934:	1b80      	subs	r0, r0, r6
 8004936:	2802      	cmp	r0, #2
 8004938:	d9f5      	bls.n	8004926 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800493a:	2003      	movs	r0, #3
 800493c:	e1f8      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800493e:	4a11      	ldr	r2, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 8004940:	6813      	ldr	r3, [r2, #0]
 8004942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	e76f      	b.n	800482a <HAL_RCC_OscConfig+0x10e>
 800494a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800494e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e762      	b.n	800482a <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8004964:	f7fe fe0a 	bl	800357c <HAL_GetTick>
 8004968:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x268>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004972:	d0c5      	beq.n	8004900 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fe fe02 	bl	800357c <HAL_GetTick>
 8004978:	1bc0      	subs	r0, r0, r7
 800497a:	2864      	cmp	r0, #100	; 0x64
 800497c:	d9f5      	bls.n	800496a <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800497e:	2003      	movs	r0, #3
 8004980:	e1d6      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000
 8004988:	08007910 	.word	0x08007910
 800498c:	200003f8 	.word	0x200003f8
 8004990:	200004d4 	.word	0x200004d4
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004994:	2e02      	cmp	r6, #2
 8004996:	d1bb      	bne.n	8004910 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004998:	4b95      	ldr	r3, [pc, #596]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_OscConfig+0x28e>
 80049a2:	68e3      	ldr	r3, [r4, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 81c0 	beq.w	8004d2a <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049aa:	4a91      	ldr	r2, [pc, #580]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 80049ac:	6853      	ldr	r3, [r2, #4]
 80049ae:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80049b2:	6921      	ldr	r1, [r4, #16]
 80049b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80049b8:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	f013 0f08 	tst.w	r3, #8
 80049c0:	d04c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c2:	6963      	ldr	r3, [r4, #20]
 80049c4:	b39b      	cbz	r3, 8004a2e <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80049c6:	4a8a      	ldr	r2, [pc, #552]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 80049c8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80049d4:	f7fe fdd2 	bl	800357c <HAL_GetTick>
 80049d8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049da:	4b85      	ldr	r3, [pc, #532]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 80049dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e0:	f013 0f02 	tst.w	r3, #2
 80049e4:	d13a      	bne.n	8004a5c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e6:	f7fe fdc9 	bl	800357c <HAL_GetTick>
 80049ea:	1b80      	subs	r0, r0, r6
 80049ec:	2802      	cmp	r0, #2
 80049ee:	d9f4      	bls.n	80049da <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80049f0:	2003      	movs	r0, #3
 80049f2:	e19d      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f4:	4a7e      	ldr	r2, [pc, #504]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 80049f6:	6853      	ldr	r3, [r2, #4]
 80049f8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80049fc:	6921      	ldr	r1, [r4, #16]
 80049fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004a02:	6053      	str	r3, [r2, #4]
 8004a04:	e7d9      	b.n	80049ba <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8004a06:	4a7a      	ldr	r2, [pc, #488]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004a08:	6813      	ldr	r3, [r2, #0]
 8004a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a0e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a10:	f7fe fdb4 	bl	800357c <HAL_GetTick>
 8004a14:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a16:	4b76      	ldr	r3, [pc, #472]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004a1e:	d0cc      	beq.n	80049ba <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fe fdac 	bl	800357c <HAL_GetTick>
 8004a24:	1b80      	subs	r0, r0, r6
 8004a26:	2802      	cmp	r0, #2
 8004a28:	d9f5      	bls.n	8004a16 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	e180      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 8004a2e:	4a70      	ldr	r2, [pc, #448]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004a30:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004a3c:	f7fe fd9e 	bl	800357c <HAL_GetTick>
 8004a40:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a42:	4b6b      	ldr	r3, [pc, #428]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a48:	f013 0f02 	tst.w	r3, #2
 8004a4c:	d006      	beq.n	8004a5c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4e:	f7fe fd95 	bl	800357c <HAL_GetTick>
 8004a52:	1b80      	subs	r0, r0, r6
 8004a54:	2802      	cmp	r0, #2
 8004a56:	d9f4      	bls.n	8004a42 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8004a58:	2003      	movs	r0, #3
 8004a5a:	e169      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	f013 0f04 	tst.w	r3, #4
 8004a62:	d07a      	beq.n	8004b5a <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a64:	4b62      	ldr	r3, [pc, #392]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004a6c:	d136      	bne.n	8004adc <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	4b60      	ldr	r3, [pc, #384]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004a70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a76:	659a      	str	r2, [r3, #88]	; 0x58
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004a82:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a84:	4b5b      	ldr	r3, [pc, #364]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a8c:	d028      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8e:	68a3      	ldr	r3, [r4, #8]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d039      	beq.n	8004b08 <HAL_RCC_OscConfig+0x3ec>
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d03f      	beq.n	8004b18 <HAL_RCC_OscConfig+0x3fc>
 8004a98:	4b55      	ldr	r3, [pc, #340]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004a9a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004aa6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004aaa:	f022 0204 	bic.w	r2, r2, #4
 8004aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ab2:	68a3      	ldr	r3, [r4, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d03d      	beq.n	8004b34 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8004ab8:	f7fe fd60 	bl	800357c <HAL_GetTick>
 8004abc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004abe:	4b4c      	ldr	r3, [pc, #304]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	f013 0f02 	tst.w	r3, #2
 8004ac8:	d146      	bne.n	8004b58 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fe fd57 	bl	800357c <HAL_GetTick>
 8004ace:	1bc0      	subs	r0, r0, r7
 8004ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ad4:	4298      	cmp	r0, r3
 8004ad6:	d9f2      	bls.n	8004abe <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8004ad8:	2003      	movs	r0, #3
 8004ada:	e129      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 8004adc:	2600      	movs	r6, #0
 8004ade:	e7d1      	b.n	8004a84 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae0:	4a44      	ldr	r2, [pc, #272]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004aea:	f7fe fd47 	bl	800357c <HAL_GetTick>
 8004aee:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af0:	4b40      	ldr	r3, [pc, #256]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004af8:	d1c9      	bne.n	8004a8e <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afa:	f7fe fd3f 	bl	800357c <HAL_GetTick>
 8004afe:	1bc0      	subs	r0, r0, r7
 8004b00:	2802      	cmp	r0, #2
 8004b02:	d9f5      	bls.n	8004af0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8004b04:	2003      	movs	r0, #3
 8004b06:	e113      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b08:	4a39      	ldr	r2, [pc, #228]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004b0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b16:	e7cc      	b.n	8004ab2 <HAL_RCC_OscConfig+0x396>
 8004b18:	4b35      	ldr	r3, [pc, #212]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004b1a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004b1e:	f042 0204 	orr.w	r2, r2, #4
 8004b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004b26:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004b32:	e7be      	b.n	8004ab2 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8004b34:	f7fe fd22 	bl	800357c <HAL_GetTick>
 8004b38:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b3a:	4b2d      	ldr	r3, [pc, #180]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f013 0f02 	tst.w	r3, #2
 8004b44:	d008      	beq.n	8004b58 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fe fd19 	bl	800357c <HAL_GetTick>
 8004b4a:	1bc0      	subs	r0, r0, r7
 8004b4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b50:	4298      	cmp	r0, r3
 8004b52:	d9f2      	bls.n	8004b3a <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8004b54:	2003      	movs	r0, #3
 8004b56:	e0eb      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 8004b58:	bb6e      	cbnz	r6, 8004bb6 <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80e6 	beq.w	8004d2e <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d02d      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b66:	2d0c      	cmp	r5, #12
 8004b68:	f000 80e8 	beq.w	8004d3c <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8004b6c:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004b74:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8004b7c:	d104      	bne.n	8004b88 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004b80:	68d3      	ldr	r3, [r2, #12]
 8004b82:	f023 0303 	bic.w	r3, r3, #3
 8004b86:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004b8a:	68d3      	ldr	r3, [r2, #12]
 8004b8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b94:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004b96:	f7fe fcf1 	bl	800357c <HAL_GetTick>
 8004b9a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b9c:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ba4:	f000 80b7 	beq.w	8004d16 <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba8:	f7fe fce8 	bl	800357c <HAL_GetTick>
 8004bac:	1b00      	subs	r0, r0, r4
 8004bae:	2802      	cmp	r0, #2
 8004bb0:	d9f4      	bls.n	8004b9c <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8004bb2:	2003      	movs	r0, #3
 8004bb4:	e0bc      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004bb8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc0:	e7cb      	b.n	8004b5a <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc6:	f003 0103 	and.w	r1, r3, #3
 8004bca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004bcc:	4291      	cmp	r1, r2
 8004bce:	d013      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bd0:	2d0c      	cmp	r5, #12
 8004bd2:	f000 80af 	beq.w	8004d34 <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8004bde:	f040 80ab 	bne.w	8004d38 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004be2:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004bea:	d031      	beq.n	8004c50 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 8004bec:	2001      	movs	r0, #1
 8004bee:	e09f      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bf8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004bfe:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c00:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004c04:	d1e4      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c0c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004c10:	d1de      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c12:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8004c16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c18:	3a07      	subs	r2, #7
 8004c1a:	bf18      	it	ne
 8004c1c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c1e:	4291      	cmp	r1, r2
 8004c20:	d1d6      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c22:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004c26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c28:	0852      	lsrs	r2, r2, #1
 8004c2a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c2c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004c30:	d1ce      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c32:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004c36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c38:	0852      	lsrs	r2, r2, #1
 8004c3a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c3c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004c40:	d1c6      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c42:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <HAL_RCC_OscConfig+0x624>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c4a:	d04a      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e06f      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8004c50:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <HAL_RCC_OscConfig+0x624>)
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c58:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8004c5a:	f7fe fc8f 	bl	800357c <HAL_GetTick>
 8004c5e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c60:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_RCC_OscConfig+0x624>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c68:	d006      	beq.n	8004c78 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6a:	f7fe fc87 	bl	800357c <HAL_GetTick>
 8004c6e:	1b40      	subs	r0, r0, r5
 8004c70:	2802      	cmp	r0, #2
 8004c72:	d9f5      	bls.n	8004c60 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 8004c74:	2003      	movs	r0, #3
 8004c76:	e05b      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c78:	4a31      	ldr	r2, [pc, #196]	; (8004d40 <HAL_RCC_OscConfig+0x624>)
 8004c7a:	68d3      	ldr	r3, [r2, #12]
 8004c7c:	4931      	ldr	r1, [pc, #196]	; (8004d44 <HAL_RCC_OscConfig+0x628>)
 8004c7e:	4019      	ands	r1, r3
 8004c80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c82:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004c84:	3801      	subs	r0, #1
 8004c86:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004c8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004c8c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004c90:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c92:	0840      	lsrs	r0, r0, #1
 8004c94:	3801      	subs	r0, #1
 8004c96:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8004c9a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004c9c:	0840      	lsrs	r0, r0, #1
 8004c9e:	3801      	subs	r0, #1
 8004ca0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004ca4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ca6:	0900      	lsrs	r0, r0, #4
 8004ca8:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8004cac:	430b      	orrs	r3, r1
 8004cae:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8004cb0:	6813      	ldr	r3, [r2, #0]
 8004cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb8:	68d3      	ldr	r3, [r2, #12]
 8004cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cbe:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8004cc0:	f7fe fc5c 	bl	800357c <HAL_GetTick>
 8004cc4:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <HAL_RCC_OscConfig+0x624>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004cce:	d106      	bne.n	8004cde <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fe fc54 	bl	800357c <HAL_GetTick>
 8004cd4:	1b00      	subs	r0, r0, r4
 8004cd6:	2802      	cmp	r0, #2
 8004cd8:	d9f5      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 8004cda:	2003      	movs	r0, #3
 8004cdc:	e028      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8004cde:	2000      	movs	r0, #0
 8004ce0:	e026      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <HAL_RCC_OscConfig+0x624>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004cea:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004cf2:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8004cf4:	f7fe fc42 	bl	800357c <HAL_GetTick>
 8004cf8:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <HAL_RCC_OscConfig+0x624>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004d02:	d106      	bne.n	8004d12 <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fe fc3a 	bl	800357c <HAL_GetTick>
 8004d08:	1b03      	subs	r3, r0, r4
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d9f5      	bls.n	8004cfa <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 8004d0e:	2003      	movs	r0, #3
 8004d10:	e00e      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8004d12:	2000      	movs	r0, #0
 8004d14:	e00c      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
 8004d16:	2000      	movs	r0, #0
 8004d18:	e00a      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 8004d1a:	2001      	movs	r0, #1
}
 8004d1c:	4770      	bx	lr
        return HAL_ERROR;
 8004d1e:	2001      	movs	r0, #1
 8004d20:	e006      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8004d22:	2001      	movs	r0, #1
 8004d24:	e004      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8004d26:	2001      	movs	r0, #1
 8004d28:	e002      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8004d2e:	2000      	movs	r0, #0
}
 8004d30:	b003      	add	sp, #12
 8004d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8004d34:	2001      	movs	r0, #1
 8004d36:	e7fb      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8004d38:	2001      	movs	r0, #1
 8004d3a:	e7f9      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	e7f7      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
 8004d40:	40021000 	.word	0x40021000
 8004d44:	f99d808c 	.word	0xf99d808c

08004d48 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	f000 8098 	beq.w	8004e7e <HAL_RCC_ClockConfig+0x136>
{
 8004d4e:	b570      	push	{r4, r5, r6, lr}
 8004d50:	460c      	mov	r4, r1
 8004d52:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d54:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <HAL_RCC_ClockConfig+0x148>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	d20b      	bcs.n	8004d78 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d60:	4a4b      	ldr	r2, [pc, #300]	; (8004e90 <HAL_RCC_ClockConfig+0x148>)
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	f023 0307 	bic.w	r3, r3, #7
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	428b      	cmp	r3, r1
 8004d74:	f040 8085 	bne.w	8004e82 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	f013 0f01 	tst.w	r3, #1
 8004d7e:	d039      	beq.n	8004df4 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d80:	686b      	ldr	r3, [r5, #4]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d009      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d026      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d8a:	bb63      	cbnz	r3, 8004de6 <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d8c:	4a41      	ldr	r2, [pc, #260]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	f012 0f02 	tst.w	r2, #2
 8004d94:	d106      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8004d96:	2001      	movs	r0, #1
 8004d98:	e070      	b.n	8004e7c <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9a:	4a3e      	ldr	r2, [pc, #248]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004da2:	d070      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004da4:	493b      	ldr	r1, [pc, #236]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004da6:	688a      	ldr	r2, [r1, #8]
 8004da8:	f022 0203 	bic.w	r2, r2, #3
 8004dac:	4313      	orrs	r3, r2
 8004dae:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004db0:	f7fe fbe4 	bl	800357c <HAL_GetTick>
 8004db4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	4b37      	ldr	r3, [pc, #220]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	686a      	ldr	r2, [r5, #4]
 8004dc0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004dc4:	d016      	beq.n	8004df4 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc6:	f7fe fbd9 	bl	800357c <HAL_GetTick>
 8004dca:	1b80      	subs	r0, r0, r6
 8004dcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004dd0:	4298      	cmp	r0, r3
 8004dd2:	d9f0      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8004dd4:	2003      	movs	r0, #3
 8004dd6:	e051      	b.n	8004e7c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd8:	4a2e      	ldr	r2, [pc, #184]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004de0:	d1e0      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8004de2:	2001      	movs	r0, #1
 8004de4:	e04a      	b.n	8004e7c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004de6:	4a2b      	ldr	r2, [pc, #172]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004dee:	d1d9      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8004df0:	2001      	movs	r0, #1
 8004df2:	e043      	b.n	8004e7c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	f013 0f02 	tst.w	r3, #2
 8004dfa:	d006      	beq.n	8004e0a <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dfc:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004dfe:	6893      	ldr	r3, [r2, #8]
 8004e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e04:	68a9      	ldr	r1, [r5, #8]
 8004e06:	430b      	orrs	r3, r1
 8004e08:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0a:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <HAL_RCC_ClockConfig+0x148>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	42a3      	cmp	r3, r4
 8004e14:	d90a      	bls.n	8004e2c <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_RCC_ClockConfig+0x148>)
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	4323      	orrs	r3, r4
 8004e20:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d12e      	bne.n	8004e8a <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	f013 0f04 	tst.w	r3, #4
 8004e32:	d006      	beq.n	8004e42 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e34:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004e36:	6893      	ldr	r3, [r2, #8]
 8004e38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e3c:	68e9      	ldr	r1, [r5, #12]
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	f013 0f08 	tst.w	r3, #8
 8004e48:	d007      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e4a:	4a12      	ldr	r2, [pc, #72]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004e4c:	6893      	ldr	r3, [r2, #8]
 8004e4e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004e52:	6929      	ldr	r1, [r5, #16]
 8004e54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e58:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e5a:	f7ff fc05 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <HAL_RCC_ClockConfig+0x14c>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e66:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <HAL_RCC_ClockConfig+0x150>)
 8004e68:	5cd3      	ldrb	r3, [r2, r3]
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	40d8      	lsrs	r0, r3
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <HAL_RCC_ClockConfig+0x154>)
 8004e72:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <HAL_RCC_ClockConfig+0x158>)
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	f7fe fb3e 	bl	80034f8 <HAL_InitTick>
}
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004e7e:	2001      	movs	r0, #1
}
 8004e80:	4770      	bx	lr
      return HAL_ERROR;
 8004e82:	2001      	movs	r0, #1
 8004e84:	e7fa      	b.n	8004e7c <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 8004e86:	2001      	movs	r0, #1
 8004e88:	e7f8      	b.n	8004e7c <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 8004e8a:	2001      	movs	r0, #1
 8004e8c:	e7f6      	b.n	8004e7c <HAL_RCC_ClockConfig+0x134>
 8004e8e:	bf00      	nop
 8004e90:	40022000 	.word	0x40022000
 8004e94:	40021000 	.word	0x40021000
 8004e98:	08007910 	.word	0x08007910
 8004e9c:	200003f8 	.word	0x200003f8
 8004ea0:	200004d4 	.word	0x200004d4

08004ea4 <HAL_RCC_GetHCLKFreq>:
}
 8004ea4:	4b01      	ldr	r3, [pc, #4]	; (8004eac <HAL_RCC_GetHCLKFreq+0x8>)
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	200003f8 	.word	0x200003f8

08004eb0 <HAL_RCC_GetPCLK1Freq>:
{
 8004eb0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004eb2:	f7ff fff7 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004ebe:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec0:	5cd3      	ldrb	r3, [r2, r3]
 8004ec2:	f003 031f 	and.w	r3, r3, #31
}
 8004ec6:	40d8      	lsrs	r0, r3
 8004ec8:	bd08      	pop	{r3, pc}
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	08007920 	.word	0x08007920

08004ed4 <HAL_RCC_GetPCLK2Freq>:
{
 8004ed4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ed6:	f7ff ffe5 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004ee2:	4a04      	ldr	r2, [pc, #16]	; (8004ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ee4:	5cd3      	ldrb	r3, [r2, r3]
 8004ee6:	f003 031f 	and.w	r3, r3, #31
}
 8004eea:	40d8      	lsrs	r0, r3
 8004eec:	bd08      	pop	{r3, pc}
 8004eee:	bf00      	nop
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	08007920 	.word	0x08007920

08004ef8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	4604      	mov	r4, r0
 8004efc:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004efe:	4b59      	ldr	r3, [pc, #356]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f013 0f03 	tst.w	r3, #3
 8004f06:	d018      	beq.n	8004f3a <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f08:	4b56      	ldr	r3, [pc, #344]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	6802      	ldr	r2, [r0, #0]
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d002      	beq.n	8004f1c <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f16:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8004f18:	4628      	mov	r0, r5
 8004f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004f1c:	2a00      	cmp	r2, #0
 8004f1e:	f000 809e 	beq.w	800505e <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f22:	4b50      	ldr	r3, [pc, #320]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	6842      	ldr	r2, [r0, #4]
       ||
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d001      	beq.n	8004f36 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8004f32:	2501      	movs	r5, #1
 8004f34:	e7f0      	b.n	8004f18 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2500      	movs	r5, #0
 8004f38:	e009      	b.n	8004f4e <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 8004f3a:	6803      	ldr	r3, [r0, #0]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d057      	beq.n	8004ff0 <RCCEx_PLLSAI1_Config+0xf8>
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d05c      	beq.n	8004ffe <RCCEx_PLLSAI1_Config+0x106>
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d042      	beq.n	8004fce <RCCEx_PLLSAI1_Config+0xd6>
 8004f48:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	d1e4      	bne.n	8004f18 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f4e:	4a45      	ldr	r2, [pc, #276]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f56:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004f58:	f7fe fb10 	bl	800357c <HAL_GetTick>
 8004f5c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f5e:	4b41      	ldr	r3, [pc, #260]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004f66:	d005      	beq.n	8004f74 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f68:	f7fe fb08 	bl	800357c <HAL_GetTick>
 8004f6c:	1b83      	subs	r3, r0, r6
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d9f5      	bls.n	8004f5e <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 8004f72:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	d1cf      	bne.n	8004f18 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8004f78:	2f00      	cmp	r7, #0
 8004f7a:	d14e      	bne.n	800501a <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f7c:	4939      	ldr	r1, [pc, #228]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f7e:	690b      	ldr	r3, [r1, #16]
 8004f80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f88:	68a0      	ldr	r0, [r4, #8]
 8004f8a:	68e2      	ldr	r2, [r4, #12]
 8004f8c:	0912      	lsrs	r2, r2, #4
 8004f8e:	0452      	lsls	r2, r2, #17
 8004f90:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004f94:	4313      	orrs	r3, r2
 8004f96:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f98:	4a32      	ldr	r2, [pc, #200]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fa0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004fa2:	f7fe faeb 	bl	800357c <HAL_GetTick>
 8004fa6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fa8:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004fb0:	d105      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fb2:	f7fe fae3 	bl	800357c <HAL_GetTick>
 8004fb6:	1b83      	subs	r3, r0, r6
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d9f5      	bls.n	8004fa8 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8004fbc:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	d1aa      	bne.n	8004f18 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fc2:	4a28      	ldr	r2, [pc, #160]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004fc4:	6913      	ldr	r3, [r2, #16]
 8004fc6:	69a1      	ldr	r1, [r4, #24]
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	6113      	str	r3, [r2, #16]
 8004fcc:	e7a4      	b.n	8004f18 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fce:	4a25      	ldr	r2, [pc, #148]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	f012 0f02 	tst.w	r2, #2
 8004fd6:	d01e      	beq.n	8005016 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fd8:	4822      	ldr	r0, [pc, #136]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004fda:	68c2      	ldr	r2, [r0, #12]
 8004fdc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004fe0:	6861      	ldr	r1, [r4, #4]
 8004fe2:	3901      	subs	r1, #1
 8004fe4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60c3      	str	r3, [r0, #12]
 8004fec:	2500      	movs	r5, #0
 8004fee:	e7ac      	b.n	8004f4a <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004ff8:	d1ee      	bne.n	8004fd8 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 8004ffa:	2501      	movs	r5, #1
 8004ffc:	e7a5      	b.n	8004f4a <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ffe:	4a19      	ldr	r2, [pc, #100]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005006:	d1e7      	bne.n	8004fd8 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005010:	d1e2      	bne.n	8004fd8 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 8005012:	2501      	movs	r5, #1
 8005014:	e799      	b.n	8004f4a <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 8005016:	2501      	movs	r5, #1
 8005018:	e797      	b.n	8004f4a <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 800501a:	2f01      	cmp	r7, #1
 800501c:	d00f      	beq.n	800503e <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800501e:	4811      	ldr	r0, [pc, #68]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8005020:	6902      	ldr	r2, [r0, #16]
 8005022:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005026:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800502a:	68a1      	ldr	r1, [r4, #8]
 800502c:	6963      	ldr	r3, [r4, #20]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	3b01      	subs	r3, #1
 8005032:	065b      	lsls	r3, r3, #25
 8005034:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005038:	4313      	orrs	r3, r2
 800503a:	6103      	str	r3, [r0, #16]
 800503c:	e7ac      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800503e:	4809      	ldr	r0, [pc, #36]	; (8005064 <RCCEx_PLLSAI1_Config+0x16c>)
 8005040:	6902      	ldr	r2, [r0, #16]
 8005042:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005046:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800504a:	68a1      	ldr	r1, [r4, #8]
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	3b01      	subs	r3, #1
 8005052:	055b      	lsls	r3, r3, #21
 8005054:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005058:	4313      	orrs	r3, r2
 800505a:	6103      	str	r3, [r0, #16]
 800505c:	e79c      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 800505e:	2501      	movs	r5, #1
 8005060:	e75a      	b.n	8004f18 <RCCEx_PLLSAI1_Config+0x20>
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000

08005068 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	4604      	mov	r4, r0
 800506c:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800506e:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f013 0f03 	tst.w	r3, #3
 8005076:	d018      	beq.n	80050aa <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005078:	4b4d      	ldr	r3, [pc, #308]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	6802      	ldr	r2, [r0, #0]
 8005082:	4293      	cmp	r3, r2
 8005084:	d002      	beq.n	800508c <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005086:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8005088:	4628      	mov	r0, r5
 800508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800508c:	2a00      	cmp	r2, #0
 800508e:	f000 808c 	beq.w	80051aa <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800509a:	3301      	adds	r3, #1
 800509c:	6842      	ldr	r2, [r0, #4]
       ||
 800509e:	4293      	cmp	r3, r2
 80050a0:	d001      	beq.n	80050a6 <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 80050a2:	2501      	movs	r5, #1
 80050a4:	e7f0      	b.n	8005088 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2500      	movs	r5, #0
 80050a8:	e009      	b.n	80050be <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 80050aa:	6803      	ldr	r3, [r0, #0]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d057      	beq.n	8005160 <RCCEx_PLLSAI2_Config+0xf8>
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d05c      	beq.n	800516e <RCCEx_PLLSAI2_Config+0x106>
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d042      	beq.n	800513e <RCCEx_PLLSAI2_Config+0xd6>
 80050b8:	2501      	movs	r5, #1
  if(status == HAL_OK)
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	d1e4      	bne.n	8005088 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 80050be:	4a3c      	ldr	r2, [pc, #240]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 80050c0:	6813      	ldr	r3, [r2, #0]
 80050c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80050c8:	f7fe fa58 	bl	800357c <HAL_GetTick>
 80050cc:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050ce:	4b38      	ldr	r3, [pc, #224]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80050d6:	d005      	beq.n	80050e4 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050d8:	f7fe fa50 	bl	800357c <HAL_GetTick>
 80050dc:	1b83      	subs	r3, r0, r6
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d9f5      	bls.n	80050ce <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 80050e2:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80050e4:	2d00      	cmp	r5, #0
 80050e6:	d1cf      	bne.n	8005088 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80050e8:	2f00      	cmp	r7, #0
 80050ea:	d14e      	bne.n	800518a <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050ec:	4930      	ldr	r1, [pc, #192]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 80050ee:	694b      	ldr	r3, [r1, #20]
 80050f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f8:	68a0      	ldr	r0, [r4, #8]
 80050fa:	68e2      	ldr	r2, [r4, #12]
 80050fc:	0912      	lsrs	r2, r2, #4
 80050fe:	0452      	lsls	r2, r2, #17
 8005100:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005104:	4313      	orrs	r3, r2
 8005106:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8005108:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005112:	f7fe fa33 	bl	800357c <HAL_GetTick>
 8005116:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005118:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005120:	d105      	bne.n	800512e <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005122:	f7fe fa2b 	bl	800357c <HAL_GetTick>
 8005126:	1b83      	subs	r3, r0, r6
 8005128:	2b02      	cmp	r3, #2
 800512a:	d9f5      	bls.n	8005118 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 800512c:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800512e:	2d00      	cmp	r5, #0
 8005130:	d1aa      	bne.n	8005088 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005132:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 8005134:	6953      	ldr	r3, [r2, #20]
 8005136:	6961      	ldr	r1, [r4, #20]
 8005138:	430b      	orrs	r3, r1
 800513a:	6153      	str	r3, [r2, #20]
 800513c:	e7a4      	b.n	8005088 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800513e:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	f012 0f02 	tst.w	r2, #2
 8005146:	d01e      	beq.n	8005186 <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005148:	4819      	ldr	r0, [pc, #100]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 800514a:	68c2      	ldr	r2, [r0, #12]
 800514c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005150:	6861      	ldr	r1, [r4, #4]
 8005152:	3901      	subs	r1, #1
 8005154:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005158:	4313      	orrs	r3, r2
 800515a:	60c3      	str	r3, [r0, #12]
 800515c:	2500      	movs	r5, #0
 800515e:	e7ac      	b.n	80050ba <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005168:	d1ee      	bne.n	8005148 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 800516a:	2501      	movs	r5, #1
 800516c:	e7a5      	b.n	80050ba <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005176:	d1e7      	bne.n	8005148 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005178:	4a0d      	ldr	r2, [pc, #52]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005180:	d1e2      	bne.n	8005148 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 8005182:	2501      	movs	r5, #1
 8005184:	e799      	b.n	80050ba <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8005186:	2501      	movs	r5, #1
 8005188:	e797      	b.n	80050ba <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800518a:	4809      	ldr	r0, [pc, #36]	; (80051b0 <RCCEx_PLLSAI2_Config+0x148>)
 800518c:	6942      	ldr	r2, [r0, #20]
 800518e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005192:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8005196:	68a1      	ldr	r1, [r4, #8]
 8005198:	6923      	ldr	r3, [r4, #16]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	3b01      	subs	r3, #1
 800519e:	065b      	lsls	r3, r3, #25
 80051a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80051a4:	4313      	orrs	r3, r2
 80051a6:	6143      	str	r3, [r0, #20]
 80051a8:	e7ae      	b.n	8005108 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 80051aa:	2501      	movs	r5, #1
 80051ac:	e76c      	b.n	8005088 <RCCEx_PLLSAI2_Config+0x20>
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000

080051b4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80051b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051bc:	6803      	ldr	r3, [r0, #0]
 80051be:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80051c2:	d033      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 80051c4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80051c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051ca:	d01f      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x58>
 80051cc:	d80c      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80051ce:	b323      	cbz	r3, 800521a <HAL_RCCEx_PeriphCLKConfig+0x66>
 80051d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d4:	d105      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051d6:	2100      	movs	r1, #0
 80051d8:	3020      	adds	r0, #32
 80051da:	f7ff ff45 	bl	8005068 <RCCEx_PLLSAI2_Config>
 80051de:	4606      	mov	r6, r0
      break;
 80051e0:	e020      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 80051e2:	2701      	movs	r7, #1
 80051e4:	463e      	mov	r6, r7
 80051e6:	e023      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051ec:	d10b      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051ee:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051f0:	4a60      	ldr	r2, [pc, #384]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80051f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80051fa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80051fc:	430b      	orrs	r3, r1
 80051fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005202:	2700      	movs	r7, #0
 8005204:	e014      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005206:	2701      	movs	r7, #1
 8005208:	463e      	mov	r6, r7
 800520a:	e011      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800520c:	4a59      	ldr	r2, [pc, #356]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800520e:	68d3      	ldr	r3, [r2, #12]
 8005210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005214:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005216:	2600      	movs	r6, #0
 8005218:	e7ea      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800521a:	2100      	movs	r1, #0
 800521c:	3004      	adds	r0, #4
 800521e:	f7ff fe6b 	bl	8004ef8 <RCCEx_PLLSAI1_Config>
 8005222:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005224:	2e00      	cmp	r6, #0
 8005226:	d0e3      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005228:	4637      	mov	r7, r6
 800522a:	e001      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800522c:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800522e:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005236:	d030      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005238:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800523a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800523e:	d01f      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005240:	d80d      	bhi.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8005242:	b31b      	cbz	r3, 800528c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8005244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005248:	d106      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800524a:	2100      	movs	r1, #0
 800524c:	f104 0020 	add.w	r0, r4, #32
 8005250:	f7ff ff0a 	bl	8005068 <RCCEx_PLLSAI2_Config>
 8005254:	4606      	mov	r6, r0
      break;
 8005256:	e005      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005258:	2701      	movs	r7, #1
 800525a:	463e      	mov	r6, r7
 800525c:	e01d      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800525e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005262:	d10a      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8005264:	b9c6      	cbnz	r6, 8005298 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005266:	4a43      	ldr	r2, [pc, #268]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005268:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800526c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005270:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005272:	430b      	orrs	r3, r1
 8005274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005278:	e00f      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 800527a:	2701      	movs	r7, #1
 800527c:	463e      	mov	r6, r7
 800527e:	e00c      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005280:	4a3c      	ldr	r2, [pc, #240]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005282:	68d3      	ldr	r3, [r2, #12]
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	60d3      	str	r3, [r2, #12]
      break;
 800528a:	e7eb      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800528c:	2100      	movs	r1, #0
 800528e:	1d20      	adds	r0, r4, #4
 8005290:	f7ff fe32 	bl	8004ef8 <RCCEx_PLLSAI1_Config>
 8005294:	4606      	mov	r6, r0
      break;
 8005296:	e7e5      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8005298:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80052a0:	d071      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052a2:	4b34      	ldr	r3, [pc, #208]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80052aa:	d14e      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ac:	4b31      	ldr	r3, [pc, #196]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052b4:	659a      	str	r2, [r3, #88]	; 0x58
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80052c0:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052c4:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052cc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80052ce:	f7fe f955 	bl	800357c <HAL_GetTick>
 80052d2:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052d4:	4b28      	ldr	r3, [pc, #160]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80052dc:	d105      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052de:	f7fe f94d 	bl	800357c <HAL_GetTick>
 80052e2:	1b40      	subs	r0, r0, r5
 80052e4:	2802      	cmp	r0, #2
 80052e6:	d9f5      	bls.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 80052e8:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	d146      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80052f8:	d016      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80052fa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80052fe:	429a      	cmp	r2, r3
 8005300:	d012      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005302:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005304:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800530c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005310:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005314:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005318:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800531c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005320:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005328:	f013 0f01 	tst.w	r3, #1
 800532c:	d110      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 800532e:	2e00      	cmp	r6, #0
 8005330:	f040 8127 	bne.w	8005582 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005334:	4a0f      	ldr	r2, [pc, #60]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005336:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800533a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005342:	430b      	orrs	r3, r1
 8005344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005348:	e019      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 800534a:	f04f 0800 	mov.w	r8, #0
 800534e:	e7b9      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8005350:	f7fe f914 	bl	800357c <HAL_GetTick>
 8005354:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535c:	f013 0f02 	tst.w	r3, #2
 8005360:	d1e5      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005362:	f7fe f90b 	bl	800357c <HAL_GetTick>
 8005366:	1b40      	subs	r0, r0, r5
 8005368:	f241 3388 	movw	r3, #5000	; 0x1388
 800536c:	4298      	cmp	r0, r3
 800536e:	d9f2      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8005370:	2603      	movs	r6, #3
 8005372:	e7dc      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005374:	40021000 	.word	0x40021000
 8005378:	40007000 	.word	0x40007000
      status = ret;
 800537c:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 800537e:	f1b8 0f00 	cmp.w	r8, #0
 8005382:	f040 8100 	bne.w	8005586 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	f013 0f01 	tst.w	r3, #1
 800538c:	d008      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800538e:	4a9d      	ldr	r2, [pc, #628]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005390:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005394:	f023 0303 	bic.w	r3, r3, #3
 8005398:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800539a:	430b      	orrs	r3, r1
 800539c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f013 0f02 	tst.w	r3, #2
 80053a6:	d008      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a8:	4a96      	ldr	r2, [pc, #600]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053ae:	f023 030c 	bic.w	r3, r3, #12
 80053b2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80053b4:	430b      	orrs	r3, r1
 80053b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	f013 0f04 	tst.w	r3, #4
 80053c0:	d008      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053c2:	4a90      	ldr	r2, [pc, #576]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80053cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80053ce:	430b      	orrs	r3, r1
 80053d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	f013 0f08 	tst.w	r3, #8
 80053da:	d008      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053dc:	4a89      	ldr	r2, [pc, #548]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80053e8:	430b      	orrs	r3, r1
 80053ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f013 0f10 	tst.w	r3, #16
 80053f4:	d008      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053f6:	4a83      	ldr	r2, [pc, #524]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005400:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005402:	430b      	orrs	r3, r1
 8005404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	f013 0f20 	tst.w	r3, #32
 800540e:	d008      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005410:	4a7c      	ldr	r2, [pc, #496]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005412:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005416:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800541a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800541c:	430b      	orrs	r3, r1
 800541e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005428:	d008      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800542a:	4a76      	ldr	r2, [pc, #472]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800542c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005430:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005434:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005436:	430b      	orrs	r3, r1
 8005438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005442:	d008      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005444:	4a6f      	ldr	r2, [pc, #444]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005446:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800544a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800544e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005450:	430b      	orrs	r3, r1
 8005452:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	f013 0f40 	tst.w	r3, #64	; 0x40
 800545c:	d008      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800545e:	4a69      	ldr	r2, [pc, #420]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005460:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005464:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005468:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800546a:	430b      	orrs	r3, r1
 800546c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005476:	d008      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005478:	4a62      	ldr	r2, [pc, #392]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800547a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800547e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005482:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005484:	430b      	orrs	r3, r1
 8005486:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005490:	d008      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005492:	4a5c      	ldr	r2, [pc, #368]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005494:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005498:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800549c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800549e:	430b      	orrs	r3, r1
 80054a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80054aa:	d00f      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ac:	4a55      	ldr	r2, [pc, #340]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054b2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80054b6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80054b8:	430b      	orrs	r3, r1
 80054ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80054c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054c4:	d065      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ca:	d067      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80054d2:	d00f      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054d4:	4a4b      	ldr	r2, [pc, #300]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054da:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80054de:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80054e0:	430b      	orrs	r3, r1
 80054e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80054e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ec:	d05e      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f2:	d060      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80054fa:	d00f      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054fc:	4a41      	ldr	r2, [pc, #260]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005502:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005506:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005508:	430b      	orrs	r3, r1
 800550a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005514:	d057      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800551a:	d059      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005522:	d00f      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005524:	4a37      	ldr	r2, [pc, #220]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005526:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800552a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800552e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005530:	430b      	orrs	r3, r1
 8005532:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005536:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800553c:	d050      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800553e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005542:	d055      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800554a:	d008      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800554c:	4a2d      	ldr	r2, [pc, #180]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800554e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005556:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005558:	430b      	orrs	r3, r1
 800555a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005564:	d009      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005566:	4a27      	ldr	r2, [pc, #156]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005568:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800556c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005570:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005574:	430b      	orrs	r3, r1
 8005576:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800557a:	4638      	mov	r0, r7
 800557c:	b002      	add	sp, #8
 800557e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8005582:	4637      	mov	r7, r6
 8005584:	e6fb      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005586:	4a1f      	ldr	r2, [pc, #124]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005588:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558e:	6593      	str	r3, [r2, #88]	; 0x58
 8005590:	e6f9      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005592:	68d3      	ldr	r3, [r2, #12]
 8005594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005598:	60d3      	str	r3, [r2, #12]
 800559a:	e797      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800559c:	2101      	movs	r1, #1
 800559e:	1d20      	adds	r0, r4, #4
 80055a0:	f7ff fcaa 	bl	8004ef8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d091      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 80055a8:	4607      	mov	r7, r0
 80055aa:	e78f      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ac:	68d3      	ldr	r3, [r2, #12]
 80055ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b2:	60d3      	str	r3, [r2, #12]
 80055b4:	e79e      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055b6:	2101      	movs	r1, #1
 80055b8:	1d20      	adds	r0, r4, #4
 80055ba:	f7ff fc9d 	bl	8004ef8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80055be:	2800      	cmp	r0, #0
 80055c0:	d098      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 80055c2:	4607      	mov	r7, r0
 80055c4:	e796      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c6:	68d3      	ldr	r3, [r2, #12]
 80055c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055cc:	60d3      	str	r3, [r2, #12]
 80055ce:	e7a5      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055d0:	2101      	movs	r1, #1
 80055d2:	1d20      	adds	r0, r4, #4
 80055d4:	f7ff fc90 	bl	8004ef8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80055d8:	2800      	cmp	r0, #0
 80055da:	d09f      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 80055dc:	4607      	mov	r7, r0
 80055de:	e79d      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055e0:	2102      	movs	r1, #2
 80055e2:	1d20      	adds	r0, r4, #4
 80055e4:	f7ff fc88 	bl	8004ef8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d0ab      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 80055ec:	4607      	mov	r7, r0
 80055ee:	e7a9      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055f0:	2102      	movs	r1, #2
 80055f2:	f104 0020 	add.w	r0, r4, #32
 80055f6:	f7ff fd37 	bl	8005068 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d0a2      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 80055fe:	4607      	mov	r7, r0
 8005600:	e7a0      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8005602:	bf00      	nop
 8005604:	40021000 	.word	0x40021000

08005608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	4605      	mov	r5, r0
 8005610:	4688      	mov	r8, r1
 8005612:	4617      	mov	r7, r2
 8005614:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005616:	f7fd ffb1 	bl	800357c <HAL_GetTick>
 800561a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561c:	1a1b      	subs	r3, r3, r0
 800561e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8005622:	f7fd ffab 	bl	800357c <HAL_GetTick>
 8005626:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005628:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005630:	fb09 f303 	mul.w	r3, r9, r3
 8005634:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005636:	682b      	ldr	r3, [r5, #0]
 8005638:	689c      	ldr	r4, [r3, #8]
 800563a:	ea38 0304 	bics.w	r3, r8, r4
 800563e:	bf0c      	ite	eq
 8005640:	f04f 0c01 	moveq.w	ip, #1
 8005644:	f04f 0c00 	movne.w	ip, #0
 8005648:	45bc      	cmp	ip, r7
 800564a:	d040      	beq.n	80056ce <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 800564c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005650:	d0f1      	beq.n	8005636 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005652:	f7fd ff93 	bl	800357c <HAL_GetTick>
 8005656:	eba0 000a 	sub.w	r0, r0, sl
 800565a:	4548      	cmp	r0, r9
 800565c:	d20a      	bcs.n	8005674 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800565e:	f1b9 0f00 	cmp.w	r9, #0
 8005662:	d007      	beq.n	8005674 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005664:	9a01      	ldr	r2, [sp, #4]
 8005666:	b102      	cbz	r2, 800566a <SPI_WaitFlagStateUntilTimeout+0x62>
 8005668:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800566a:	9b01      	ldr	r3, [sp, #4]
 800566c:	3b01      	subs	r3, #1
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	4691      	mov	r9, r2
 8005672:	e7e0      	b.n	8005636 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005674:	682a      	ldr	r2, [r5, #0]
 8005676:	6853      	ldr	r3, [r2, #4]
 8005678:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800567c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567e:	686b      	ldr	r3, [r5, #4]
 8005680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005684:	d00b      	beq.n	800569e <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005686:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568c:	d014      	beq.n	80056b8 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800568e:	2301      	movs	r3, #1
 8005690:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005694:	2300      	movs	r3, #0
 8005696:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800569a:	2003      	movs	r0, #3
 800569c:	e018      	b.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569e:	68ab      	ldr	r3, [r5, #8]
 80056a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a4:	d002      	beq.n	80056ac <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d1ec      	bne.n	8005686 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 80056ac:	682a      	ldr	r2, [r5, #0]
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e7e6      	b.n	8005686 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 80056b8:	682a      	ldr	r2, [r5, #0]
 80056ba:	6813      	ldr	r3, [r2, #0]
 80056bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	682a      	ldr	r2, [r5, #0]
 80056c4:	6813      	ldr	r3, [r2, #0]
 80056c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	e7df      	b.n	800568e <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 80056ce:	2000      	movs	r0, #0
}
 80056d0:	b002      	add	sp, #8
 80056d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d6:	bf00      	nop
 80056d8:	200003f8 	.word	0x200003f8

080056dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e0:	b082      	sub	sp, #8
 80056e2:	4607      	mov	r7, r0
 80056e4:	460d      	mov	r5, r1
 80056e6:	4616      	mov	r6, r2
 80056e8:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80056ea:	f7fd ff47 	bl	800357c <HAL_GetTick>
 80056ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f0:	1a1b      	subs	r3, r3, r0
 80056f2:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 80056f6:	f7fd ff41 	bl	800357c <HAL_GetTick>
 80056fa:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80056fc:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <SPI_WaitFifoStateUntilTimeout+0xdc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005704:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005708:	0d1b      	lsrs	r3, r3, #20
 800570a:	fb09 f303 	mul.w	r3, r9, r3
 800570e:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005710:	e002      	b.n	8005718 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8005712:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005716:	d10c      	bne.n	8005732 <SPI_WaitFifoStateUntilTimeout+0x56>
  while ((hspi->Instance->SR & Fifo) != State)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689c      	ldr	r4, [r3, #8]
 800571c:	ea04 0c05 	and.w	ip, r4, r5
 8005720:	45b4      	cmp	ip, r6
 8005722:	d044      	beq.n	80057ae <SPI_WaitFifoStateUntilTimeout+0xd2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005724:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8005728:	d1f3      	bne.n	8005712 <SPI_WaitFifoStateUntilTimeout+0x36>
 800572a:	2e00      	cmp	r6, #0
 800572c:	d1f1      	bne.n	8005712 <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800572e:	7b1b      	ldrb	r3, [r3, #12]
 8005730:	e7ef      	b.n	8005712 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005732:	f7fd ff23 	bl	800357c <HAL_GetTick>
 8005736:	eba0 000a 	sub.w	r0, r0, sl
 800573a:	4548      	cmp	r0, r9
 800573c:	d20a      	bcs.n	8005754 <SPI_WaitFifoStateUntilTimeout+0x78>
 800573e:	f1b9 0f00 	cmp.w	r9, #0
 8005742:	d007      	beq.n	8005754 <SPI_WaitFifoStateUntilTimeout+0x78>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005744:	9a01      	ldr	r2, [sp, #4]
 8005746:	b102      	cbz	r2, 800574a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005748:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 800574a:	9b01      	ldr	r3, [sp, #4]
 800574c:	3b01      	subs	r3, #1
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	4691      	mov	r9, r2
 8005752:	e7e1      	b.n	8005718 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	6853      	ldr	r3, [r2, #4]
 8005758:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800575c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005764:	d00b      	beq.n	800577e <SPI_WaitFifoStateUntilTimeout+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576c:	d014      	beq.n	8005798 <SPI_WaitFifoStateUntilTimeout+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005774:	2300      	movs	r3, #0
 8005776:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 800577a:	2003      	movs	r0, #3
 800577c:	e018      	b.n	80057b0 <SPI_WaitFifoStateUntilTimeout+0xd4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005784:	d002      	beq.n	800578c <SPI_WaitFifoStateUntilTimeout+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578a:	d1ec      	bne.n	8005766 <SPI_WaitFifoStateUntilTimeout+0x8a>
          __HAL_SPI_DISABLE(hspi);
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	6813      	ldr	r3, [r2, #0]
 8005790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e7e6      	b.n	8005766 <SPI_WaitFifoStateUntilTimeout+0x8a>
          SPI_RESET_CRC(hspi);
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	6813      	ldr	r3, [r2, #0]
 800579c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	6813      	ldr	r3, [r2, #0]
 80057a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e7df      	b.n	800576e <SPI_WaitFifoStateUntilTimeout+0x92>
    }
  }

  return HAL_OK;
 80057ae:	2000      	movs	r0, #0
}
 80057b0:	b002      	add	sp, #8
 80057b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b6:	bf00      	nop
 80057b8:	200003f8 	.word	0x200003f8

080057bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	4604      	mov	r4, r0
 80057c2:	460d      	mov	r5, r1
 80057c4:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057c6:	9200      	str	r2, [sp, #0]
 80057c8:	460b      	mov	r3, r1
 80057ca:	2200      	movs	r2, #0
 80057cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80057d0:	f7ff ff84 	bl	80056dc <SPI_WaitFifoStateUntilTimeout>
 80057d4:	b9b0      	cbnz	r0, 8005804 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057d6:	9600      	str	r6, [sp, #0]
 80057d8:	462b      	mov	r3, r5
 80057da:	2200      	movs	r2, #0
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	4620      	mov	r0, r4
 80057e0:	f7ff ff12 	bl	8005608 <SPI_WaitFlagStateUntilTimeout>
 80057e4:	b9a8      	cbnz	r0, 8005812 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057e6:	9600      	str	r6, [sp, #0]
 80057e8:	462b      	mov	r3, r5
 80057ea:	2200      	movs	r2, #0
 80057ec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff ff73 	bl	80056dc <SPI_WaitFifoStateUntilTimeout>
 80057f6:	b150      	cbz	r0, 800580e <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80057fa:	f043 0320 	orr.w	r3, r3, #32
 80057fe:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005800:	2003      	movs	r0, #3
 8005802:	e004      	b.n	800580e <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005804:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005806:	f043 0320 	orr.w	r3, r3, #32
 800580a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800580c:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800580e:	b002      	add	sp, #8
 8005810:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005812:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005814:	f043 0320 	orr.w	r3, r3, #32
 8005818:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800581a:	2003      	movs	r0, #3
 800581c:	e7f7      	b.n	800580e <SPI_EndRxTxTransaction+0x52>

0800581e <HAL_SPI_Init>:
  if (hspi == NULL)
 800581e:	2800      	cmp	r0, #0
 8005820:	d06a      	beq.n	80058f8 <HAL_SPI_Init+0xda>
{
 8005822:	b510      	push	{r4, lr}
 8005824:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005826:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005828:	b933      	cbnz	r3, 8005838 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800582a:	6843      	ldr	r3, [r0, #4]
 800582c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005830:	d005      	beq.n	800583e <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005832:	2300      	movs	r3, #0
 8005834:	61c3      	str	r3, [r0, #28]
 8005836:	e002      	b.n	800583e <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005838:	2300      	movs	r3, #0
 800583a:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800583c:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800583e:	2300      	movs	r3, #0
 8005840:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005842:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005846:	2b00      	cmp	r3, #0
 8005848:	d04d      	beq.n	80058e6 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 800584a:	2302      	movs	r3, #2
 800584c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005850:	6822      	ldr	r2, [r4, #0]
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005858:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005860:	d947      	bls.n	80058f2 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005862:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005864:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005868:	d004      	beq.n	8005874 <HAL_SPI_Init+0x56>
 800586a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800586e:	d001      	beq.n	8005874 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005870:	2300      	movs	r3, #0
 8005872:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005874:	6863      	ldr	r3, [r4, #4]
 8005876:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800587a:	68a1      	ldr	r1, [r4, #8]
 800587c:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8005880:	430b      	orrs	r3, r1
 8005882:	6921      	ldr	r1, [r4, #16]
 8005884:	f001 0102 	and.w	r1, r1, #2
 8005888:	430b      	orrs	r3, r1
 800588a:	6961      	ldr	r1, [r4, #20]
 800588c:	f001 0101 	and.w	r1, r1, #1
 8005890:	430b      	orrs	r3, r1
 8005892:	69a1      	ldr	r1, [r4, #24]
 8005894:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8005898:	430b      	orrs	r3, r1
 800589a:	69e1      	ldr	r1, [r4, #28]
 800589c:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6a21      	ldr	r1, [r4, #32]
 80058a4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80058ac:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80058b0:	6820      	ldr	r0, [r4, #0]
 80058b2:	430b      	orrs	r3, r1
 80058b4:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058b6:	8b63      	ldrh	r3, [r4, #26]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058be:	f001 0110 	and.w	r1, r1, #16
 80058c2:	430b      	orrs	r3, r1
 80058c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058c6:	f001 0108 	and.w	r1, r1, #8
 80058ca:	430b      	orrs	r3, r1
 80058cc:	68e1      	ldr	r1, [r4, #12]
 80058ce:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80058d2:	430b      	orrs	r3, r1
 80058d4:	6821      	ldr	r1, [r4, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058da:	2000      	movs	r0, #0
 80058dc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058de:	2301      	movs	r3, #1
 80058e0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80058e4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80058e6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80058ea:	4620      	mov	r0, r4
 80058ec:	f7fc feb6 	bl	800265c <HAL_SPI_MspInit>
 80058f0:	e7ab      	b.n	800584a <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058f6:	e7b5      	b.n	8005864 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80058f8:	2001      	movs	r0, #1
}
 80058fa:	4770      	bx	lr

080058fc <HAL_SPI_Transmit>:
{
 80058fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005900:	b083      	sub	sp, #12
 8005902:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005904:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005908:	2b01      	cmp	r3, #1
 800590a:	f000 80f6 	beq.w	8005afa <HAL_SPI_Transmit+0x1fe>
 800590e:	4604      	mov	r4, r0
 8005910:	4688      	mov	r8, r1
 8005912:	4691      	mov	r9, r2
 8005914:	2301      	movs	r3, #1
 8005916:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800591a:	f7fd fe2f 	bl	800357c <HAL_GetTick>
 800591e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005920:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8005924:	b2f6      	uxtb	r6, r6
 8005926:	2e01      	cmp	r6, #1
 8005928:	f040 80d4 	bne.w	8005ad4 <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 800592c:	f1b8 0f00 	cmp.w	r8, #0
 8005930:	f000 80d1 	beq.w	8005ad6 <HAL_SPI_Transmit+0x1da>
 8005934:	f1b9 0f00 	cmp.w	r9, #0
 8005938:	f000 80cd 	beq.w	8005ad6 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800593c:	2303      	movs	r3, #3
 800593e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005942:	2300      	movs	r3, #0
 8005944:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005946:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800594a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800594e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005952:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005954:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005958:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800595c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800595e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005960:	68a3      	ldr	r3, [r4, #8]
 8005962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005966:	d01e      	beq.n	80059a6 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005970:	d103      	bne.n	800597a <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005978:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800597a:	68e3      	ldr	r3, [r4, #12]
 800597c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005980:	d942      	bls.n	8005a08 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005982:	6863      	ldr	r3, [r4, #4]
 8005984:	b113      	cbz	r3, 800598c <HAL_SPI_Transmit+0x90>
 8005986:	f1b9 0f01 	cmp.w	r9, #1
 800598a:	d123      	bne.n	80059d4 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800598c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	8812      	ldrh	r2, [r2, #0]
 8005992:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005994:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005996:	3302      	adds	r3, #2
 8005998:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800599a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80059a4:	e016      	b.n	80059d4 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	6813      	ldr	r3, [r2, #0]
 80059aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ae:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80059b0:	6822      	ldr	r2, [r4, #0]
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e7d5      	b.n	8005968 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059bc:	f7fd fdde 	bl	800357c <HAL_GetTick>
 80059c0:	1bc0      	subs	r0, r0, r7
 80059c2:	42a8      	cmp	r0, r5
 80059c4:	d303      	bcc.n	80059ce <HAL_SPI_Transmit+0xd2>
 80059c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80059ca:	f040 808e 	bne.w	8005aea <HAL_SPI_Transmit+0x1ee>
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	f000 808d 	beq.w	8005aee <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 80059d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d066      	beq.n	8005aaa <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	f012 0f02 	tst.w	r2, #2
 80059e4:	d0ea      	beq.n	80059bc <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80059e8:	8812      	ldrh	r2, [r2, #0]
 80059ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059ee:	3302      	adds	r3, #2
 80059f0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80059f2:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 80059f6:	fa1f fc8c 	uxth.w	ip, ip
 80059fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80059fe:	fa1f fc8c 	uxth.w	ip, ip
 8005a02:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8005a06:	e7e5      	b.n	80059d4 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	b113      	cbz	r3, 8005a12 <HAL_SPI_Transmit+0x116>
 8005a0c:	f1b9 0f01 	cmp.w	r9, #1
 8005a10:	d133      	bne.n	8005a7a <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 8005a12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d90c      	bls.n	8005a34 <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	8812      	ldrh	r2, [r2, #0]
 8005a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a24:	3302      	adds	r3, #2
 8005a26:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b02      	subs	r3, #2
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005a32:	e022      	b.n	8005a7a <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	7812      	ldrb	r2, [r2, #0]
 8005a3a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8005a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a3e:	3301      	adds	r3, #1
 8005a40:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005a42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005a4c:	e015      	b.n	8005a7a <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005a54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a56:	3301      	adds	r3, #1
 8005a58:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005a5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005a64:	e009      	b.n	8005a7a <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a66:	f7fd fd89 	bl	800357c <HAL_GetTick>
 8005a6a:	1bc0      	subs	r0, r0, r7
 8005a6c:	42a8      	cmp	r0, r5
 8005a6e:	d302      	bcc.n	8005a76 <HAL_SPI_Transmit+0x17a>
 8005a70:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a74:	d13d      	bne.n	8005af2 <HAL_SPI_Transmit+0x1f6>
 8005a76:	2d00      	cmp	r5, #0
 8005a78:	d03d      	beq.n	8005af6 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8005a7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	b1a3      	cbz	r3, 8005aaa <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	6893      	ldr	r3, [r2, #8]
 8005a84:	f013 0f02 	tst.w	r3, #2
 8005a88:	d0ed      	beq.n	8005a66 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8005a8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d9dd      	bls.n	8005a4e <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a9a:	3302      	adds	r3, #2
 8005a9c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b02      	subs	r3, #2
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005aa8:	e7e7      	b.n	8005a7a <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005aaa:	463a      	mov	r2, r7
 8005aac:	4629      	mov	r1, r5
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7ff fe84 	bl	80057bc <SPI_EndRxTxTransaction>
 8005ab4:	b108      	cbz	r0, 8005aba <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aba:	68a3      	ldr	r3, [r4, #8]
 8005abc:	b933      	cbnz	r3, 8005acc <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	9201      	str	r2, [sp, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005acc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ace:	b913      	cbnz	r3, 8005ad6 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ad0:	2600      	movs	r6, #0
 8005ad2:	e000      	b.n	8005ad6 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 8005ad4:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005adc:	2300      	movs	r3, #0
 8005ade:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	b003      	add	sp, #12
 8005ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8005aea:	2603      	movs	r6, #3
 8005aec:	e7f3      	b.n	8005ad6 <HAL_SPI_Transmit+0x1da>
 8005aee:	2603      	movs	r6, #3
 8005af0:	e7f1      	b.n	8005ad6 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 8005af2:	2603      	movs	r6, #3
 8005af4:	e7ef      	b.n	8005ad6 <HAL_SPI_Transmit+0x1da>
 8005af6:	2603      	movs	r6, #3
 8005af8:	e7ed      	b.n	8005ad6 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8005afa:	2602      	movs	r6, #2
 8005afc:	e7f1      	b.n	8005ae2 <HAL_SPI_Transmit+0x1e6>

08005afe <HAL_SPI_TransmitReceive>:
{
 8005afe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b02:	461f      	mov	r7, r3
 8005b04:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8005b06:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	f000 8164 	beq.w	8005dd8 <HAL_SPI_TransmitReceive+0x2da>
 8005b10:	4604      	mov	r4, r0
 8005b12:	4688      	mov	r8, r1
 8005b14:	4691      	mov	r9, r2
 8005b16:	2301      	movs	r3, #1
 8005b18:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005b1c:	f7fd fd2e 	bl	800357c <HAL_GetTick>
 8005b20:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8005b22:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005b26:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8005b28:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d00a      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x46>
 8005b2e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005b32:	f040 8138 	bne.w	8005da6 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b36:	68a2      	ldr	r2, [r4, #8]
 8005b38:	2a00      	cmp	r2, #0
 8005b3a:	f040 813d 	bne.w	8005db8 <HAL_SPI_TransmitReceive+0x2ba>
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	f040 813c 	bne.w	8005dbc <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b44:	f1b8 0f00 	cmp.w	r8, #0
 8005b48:	f000 813a 	beq.w	8005dc0 <HAL_SPI_TransmitReceive+0x2c2>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	f000 8138 	beq.w	8005dc4 <HAL_SPI_TransmitReceive+0x2c6>
 8005b54:	2f00      	cmp	r7, #0
 8005b56:	f000 8137 	beq.w	8005dc8 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b5a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d002      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b64:	2305      	movs	r3, #5
 8005b66:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b6e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b72:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005b76:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b7a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005b7e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b80:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8005b82:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b84:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b86:	68e3      	ldr	r3, [r4, #12]
 8005b88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b8c:	d801      	bhi.n	8005b92 <HAL_SPI_TransmitReceive+0x94>
 8005b8e:	2f01      	cmp	r7, #1
 8005b90:	d923      	bls.n	8005bda <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	6853      	ldr	r3, [r2, #4]
 8005b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b9a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ba4:	d103      	bne.n	8005bae <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bac:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bae:	68e3      	ldr	r3, [r4, #12]
 8005bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bb4:	d958      	bls.n	8005c68 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bb6:	6863      	ldr	r3, [r4, #4]
 8005bb8:	b10b      	cbz	r3, 8005bbe <HAL_SPI_TransmitReceive+0xc0>
 8005bba:	2f01      	cmp	r7, #1
 8005bbc:	d10b      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	8812      	ldrh	r2, [r2, #0]
 8005bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bc8:	3302      	adds	r3, #2
 8005bca:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005bcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005bd6:	2701      	movs	r7, #1
 8005bd8:	e031      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bda:	6822      	ldr	r2, [r4, #0]
 8005bdc:	6853      	ldr	r3, [r2, #4]
 8005bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005be2:	6053      	str	r3, [r2, #4]
 8005be4:	e7da      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005be8:	8812      	ldrh	r2, [r2, #0]
 8005bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bee:	3302      	adds	r3, #2
 8005bf0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005bf2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005bfc:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	f012 0f01 	tst.w	r2, #1
 8005c06:	d011      	beq.n	8005c2c <HAL_SPI_TransmitReceive+0x12e>
 8005c08:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005c0c:	b292      	uxth	r2, r2
 8005c0e:	b16a      	cbz	r2, 8005c2c <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c18:	3302      	adds	r3, #2
 8005c1a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005c1c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005c2a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c2c:	f7fd fca6 	bl	800357c <HAL_GetTick>
 8005c30:	1b83      	subs	r3, r0, r6
 8005c32:	42ab      	cmp	r3, r5
 8005c34:	d303      	bcc.n	8005c3e <HAL_SPI_TransmitReceive+0x140>
 8005c36:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005c3a:	f040 80c7 	bne.w	8005dcc <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	b92b      	cbnz	r3, 8005c50 <HAL_SPI_TransmitReceive+0x152>
 8005c44:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 80a1 	beq.w	8005d92 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	f012 0f02 	tst.w	r2, #2
 8005c58:	d0d1      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x100>
 8005c5a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	2a00      	cmp	r2, #0
 8005c60:	d0cd      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x100>
 8005c62:	2f00      	cmp	r7, #0
 8005c64:	d0cb      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x100>
 8005c66:	e7be      	b.n	8005be6 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c68:	6863      	ldr	r3, [r4, #4]
 8005c6a:	b10b      	cbz	r3, 8005c70 <HAL_SPI_TransmitReceive+0x172>
 8005c6c:	2f01      	cmp	r7, #1
 8005c6e:	d10f      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8005c70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d90d      	bls.n	8005c94 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	8812      	ldrh	r2, [r2, #0]
 8005c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c82:	3302      	adds	r3, #2
 8005c84:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b02      	subs	r3, #2
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005c90:	2701      	movs	r7, #1
 8005c92:	e049      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005c9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005ca2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005cac:	e7f0      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8005cae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	2a01      	cmp	r2, #1
 8005cb4:	d90c      	bls.n	8005cd0 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005cb8:	8812      	ldrh	r2, [r2, #0]
 8005cba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005cc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b02      	subs	r3, #2
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005ccc:	2700      	movs	r7, #0
 8005cce:	e03d      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8005cd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd8:	3301      	adds	r3, #1
 8005cda:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005cdc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005ce6:	2700      	movs	r7, #0
 8005ce8:	e030      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cea:	6822      	ldr	r2, [r4, #0]
 8005cec:	6853      	ldr	r3, [r2, #4]
 8005cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cf2:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005cf4:	2701      	movs	r7, #1
 8005cf6:	e00d      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cf8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005cfa:	7b1b      	ldrb	r3, [r3, #12]
 8005cfc:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8005cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d00:	3301      	adds	r3, #1
 8005d02:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005d04:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005d12:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d14:	f7fd fc32 	bl	800357c <HAL_GetTick>
 8005d18:	1b80      	subs	r0, r0, r6
 8005d1a:	42a8      	cmp	r0, r5
 8005d1c:	d302      	bcc.n	8005d24 <HAL_SPI_TransmitReceive+0x226>
 8005d1e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005d22:	d155      	bne.n	8005dd0 <HAL_SPI_TransmitReceive+0x2d2>
 8005d24:	2d00      	cmp	r5, #0
 8005d26:	d055      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	b923      	cbnz	r3, 8005d38 <HAL_SPI_TransmitReceive+0x23a>
 8005d2e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d02c      	beq.n	8005d92 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	f012 0f02 	tst.w	r2, #2
 8005d40:	d004      	beq.n	8005d4c <HAL_SPI_TransmitReceive+0x24e>
 8005d42:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005d44:	b292      	uxth	r2, r2
 8005d46:	b10a      	cbz	r2, 8005d4c <HAL_SPI_TransmitReceive+0x24e>
 8005d48:	2f00      	cmp	r7, #0
 8005d4a:	d1b0      	bne.n	8005cae <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	f012 0f01 	tst.w	r2, #1
 8005d54:	d0de      	beq.n	8005d14 <HAL_SPI_TransmitReceive+0x216>
 8005d56:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	2a00      	cmp	r2, #0
 8005d5e:	d0d9      	beq.n	8005d14 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8005d60:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005d64:	b292      	uxth	r2, r2
 8005d66:	2a01      	cmp	r2, #1
 8005d68:	d9c6      	bls.n	8005cf8 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d72:	3302      	adds	r3, #2
 8005d74:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d76:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b02      	subs	r3, #2
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d84:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d9ad      	bls.n	8005cea <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8005d8e:	2701      	movs	r7, #1
 8005d90:	e7c0      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d92:	4632      	mov	r2, r6
 8005d94:	4629      	mov	r1, r5
 8005d96:	4620      	mov	r0, r4
 8005d98:	f7ff fd10 	bl	80057bc <SPI_EndRxTxTransaction>
 8005d9c:	b120      	cbz	r0, 8005da8 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d9e:	2320      	movs	r3, #32
 8005da0:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005da2:	2001      	movs	r0, #1
 8005da4:	e000      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8005da6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005dae:	2300      	movs	r3, #0
 8005db0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8005db8:	2002      	movs	r0, #2
 8005dba:	e7f5      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x2aa>
 8005dbc:	2002      	movs	r0, #2
 8005dbe:	e7f3      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	e7f1      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x2aa>
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	e7ef      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x2aa>
 8005dc8:	2001      	movs	r0, #1
 8005dca:	e7ed      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8005dcc:	2003      	movs	r0, #3
 8005dce:	e7eb      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8005dd0:	2003      	movs	r0, #3
 8005dd2:	e7e9      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x2aa>
 8005dd4:	2003      	movs	r0, #3
 8005dd6:	e7e7      	b.n	8005da8 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8005dd8:	2002      	movs	r0, #2
 8005dda:	e7eb      	b.n	8005db4 <HAL_SPI_TransmitReceive+0x2b6>

08005ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	6a03      	ldr	r3, [r0, #32]
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dea:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005df0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df4:	680c      	ldr	r4, [r1, #0]
 8005df6:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005df8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dfc:	688c      	ldr	r4, [r1, #8]
 8005dfe:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e00:	4c1d      	ldr	r4, [pc, #116]	; (8005e78 <TIM_OC1_SetConfig+0x9c>)
 8005e02:	42a0      	cmp	r0, r4
 8005e04:	d00f      	beq.n	8005e26 <TIM_OC1_SetConfig+0x4a>
 8005e06:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005e0a:	42a0      	cmp	r0, r4
 8005e0c:	d00b      	beq.n	8005e26 <TIM_OC1_SetConfig+0x4a>
 8005e0e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005e12:	42a0      	cmp	r0, r4
 8005e14:	d007      	beq.n	8005e26 <TIM_OC1_SetConfig+0x4a>
 8005e16:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005e1a:	42a0      	cmp	r0, r4
 8005e1c:	d003      	beq.n	8005e26 <TIM_OC1_SetConfig+0x4a>
 8005e1e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005e22:	42a0      	cmp	r0, r4
 8005e24:	d105      	bne.n	8005e32 <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e26:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e2a:	68cc      	ldr	r4, [r1, #12]
 8005e2c:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e2e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e32:	4c11      	ldr	r4, [pc, #68]	; (8005e78 <TIM_OC1_SetConfig+0x9c>)
 8005e34:	42a0      	cmp	r0, r4
 8005e36:	d00f      	beq.n	8005e58 <TIM_OC1_SetConfig+0x7c>
 8005e38:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d00b      	beq.n	8005e58 <TIM_OC1_SetConfig+0x7c>
 8005e40:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005e44:	42a0      	cmp	r0, r4
 8005e46:	d007      	beq.n	8005e58 <TIM_OC1_SetConfig+0x7c>
 8005e48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005e4c:	42a0      	cmp	r0, r4
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC1_SetConfig+0x7c>
 8005e50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005e54:	42a0      	cmp	r0, r4
 8005e56:	d107      	bne.n	8005e68 <TIM_OC1_SetConfig+0x8c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e58:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e5c:	694c      	ldr	r4, [r1, #20]
 8005e5e:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e62:	698d      	ldr	r5, [r1, #24]
 8005e64:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e68:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e6a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e6c:	684a      	ldr	r2, [r1, #4]
 8005e6e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e70:	6203      	str	r3, [r0, #32]
}
 8005e72:	bc30      	pop	{r4, r5}
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40012c00 	.word	0x40012c00

08005e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e7e:	6a03      	ldr	r3, [r0, #32]
 8005e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e8a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e90:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e94:	680d      	ldr	r5, [r1, #0]
 8005e96:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e9c:	688d      	ldr	r5, [r1, #8]
 8005e9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ea2:	4d18      	ldr	r5, [pc, #96]	; (8005f04 <TIM_OC3_SetConfig+0x88>)
 8005ea4:	42a8      	cmp	r0, r5
 8005ea6:	d003      	beq.n	8005eb0 <TIM_OC3_SetConfig+0x34>
 8005ea8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005eac:	42a8      	cmp	r0, r5
 8005eae:	d106      	bne.n	8005ebe <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb4:	68cd      	ldr	r5, [r1, #12]
 8005eb6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebe:	4d11      	ldr	r5, [pc, #68]	; (8005f04 <TIM_OC3_SetConfig+0x88>)
 8005ec0:	42a8      	cmp	r0, r5
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_OC3_SetConfig+0x68>
 8005ec4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ec8:	42a8      	cmp	r0, r5
 8005eca:	d00b      	beq.n	8005ee4 <TIM_OC3_SetConfig+0x68>
 8005ecc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005ed0:	42a8      	cmp	r0, r5
 8005ed2:	d007      	beq.n	8005ee4 <TIM_OC3_SetConfig+0x68>
 8005ed4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ed8:	42a8      	cmp	r0, r5
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC3_SetConfig+0x68>
 8005edc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ee0:	42a8      	cmp	r0, r5
 8005ee2:	d107      	bne.n	8005ef4 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ee4:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ee8:	694c      	ldr	r4, [r1, #20]
 8005eea:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eee:	698c      	ldr	r4, [r1, #24]
 8005ef0:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ef8:	684a      	ldr	r2, [r1, #4]
 8005efa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efc:	6203      	str	r3, [r0, #32]
}
 8005efe:	bc30      	pop	{r4, r5}
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40012c00 	.word	0x40012c00

08005f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f0a:	6a03      	ldr	r3, [r0, #32]
 8005f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f18:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005f1c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f20:	680d      	ldr	r5, [r1, #0]
 8005f22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f2a:	688d      	ldr	r5, [r1, #8]
 8005f2c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	4d0f      	ldr	r5, [pc, #60]	; (8005f70 <TIM_OC4_SetConfig+0x68>)
 8005f32:	42a8      	cmp	r0, r5
 8005f34:	d00f      	beq.n	8005f56 <TIM_OC4_SetConfig+0x4e>
 8005f36:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f3a:	42a8      	cmp	r0, r5
 8005f3c:	d00b      	beq.n	8005f56 <TIM_OC4_SetConfig+0x4e>
 8005f3e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005f42:	42a8      	cmp	r0, r5
 8005f44:	d007      	beq.n	8005f56 <TIM_OC4_SetConfig+0x4e>
 8005f46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f4a:	42a8      	cmp	r0, r5
 8005f4c:	d003      	beq.n	8005f56 <TIM_OC4_SetConfig+0x4e>
 8005f4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f52:	42a8      	cmp	r0, r5
 8005f54:	d104      	bne.n	8005f60 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f56:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f5a:	694d      	ldr	r5, [r1, #20]
 8005f5c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f60:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f62:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f64:	684a      	ldr	r2, [r1, #4]
 8005f66:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f68:	6203      	str	r3, [r0, #32]
}
 8005f6a:	bc30      	pop	{r4, r5}
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00

08005f74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f76:	6a03      	ldr	r3, [r0, #32]
 8005f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f82:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	680d      	ldr	r5, [r1, #0]
 8005f8e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f94:	688d      	ldr	r5, [r1, #8]
 8005f96:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9a:	4d0f      	ldr	r5, [pc, #60]	; (8005fd8 <TIM_OC5_SetConfig+0x64>)
 8005f9c:	42a8      	cmp	r0, r5
 8005f9e:	d00f      	beq.n	8005fc0 <TIM_OC5_SetConfig+0x4c>
 8005fa0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005fa4:	42a8      	cmp	r0, r5
 8005fa6:	d00b      	beq.n	8005fc0 <TIM_OC5_SetConfig+0x4c>
 8005fa8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005fac:	42a8      	cmp	r0, r5
 8005fae:	d007      	beq.n	8005fc0 <TIM_OC5_SetConfig+0x4c>
 8005fb0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fb4:	42a8      	cmp	r0, r5
 8005fb6:	d003      	beq.n	8005fc0 <TIM_OC5_SetConfig+0x4c>
 8005fb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005fbc:	42a8      	cmp	r0, r5
 8005fbe:	d104      	bne.n	8005fca <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fc0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fc4:	694d      	ldr	r5, [r1, #20]
 8005fc6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fcc:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fce:	684a      	ldr	r2, [r1, #4]
 8005fd0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd2:	6203      	str	r3, [r0, #32]
}
 8005fd4:	bc30      	pop	{r4, r5}
 8005fd6:	4770      	bx	lr
 8005fd8:	40012c00 	.word	0x40012c00

08005fdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fde:	6a03      	ldr	r3, [r0, #32]
 8005fe0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005fe4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fea:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fec:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005ff0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff4:	680d      	ldr	r5, [r1, #0]
 8005ff6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ffa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ffe:	688d      	ldr	r5, [r1, #8]
 8006000:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006004:	4d0f      	ldr	r5, [pc, #60]	; (8006044 <TIM_OC6_SetConfig+0x68>)
 8006006:	42a8      	cmp	r0, r5
 8006008:	d00f      	beq.n	800602a <TIM_OC6_SetConfig+0x4e>
 800600a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800600e:	42a8      	cmp	r0, r5
 8006010:	d00b      	beq.n	800602a <TIM_OC6_SetConfig+0x4e>
 8006012:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006016:	42a8      	cmp	r0, r5
 8006018:	d007      	beq.n	800602a <TIM_OC6_SetConfig+0x4e>
 800601a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800601e:	42a8      	cmp	r0, r5
 8006020:	d003      	beq.n	800602a <TIM_OC6_SetConfig+0x4e>
 8006022:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006026:	42a8      	cmp	r0, r5
 8006028:	d104      	bne.n	8006034 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800602a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800602e:	694d      	ldr	r5, [r1, #20]
 8006030:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006034:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006036:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006038:	684a      	ldr	r2, [r1, #4]
 800603a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603c:	6203      	str	r3, [r0, #32]
}
 800603e:	bc30      	pop	{r4, r5}
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	40012c00 	.word	0x40012c00

08006048 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006048:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d136      	bne.n	80060c0 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8006052:	2302      	movs	r3, #2
 8006054:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006058:	6802      	ldr	r2, [r0, #0]
 800605a:	68d3      	ldr	r3, [r2, #12]
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006062:	6803      	ldr	r3, [r0, #0]
 8006064:	4a19      	ldr	r2, [pc, #100]	; (80060cc <HAL_TIM_Base_Start_IT+0x84>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01c      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x5c>
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606e:	d019      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x5c>
 8006070:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006074:	4293      	cmp	r3, r2
 8006076:	d015      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x5c>
 8006078:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800607c:	4293      	cmp	r3, r2
 800607e:	d011      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x5c>
 8006080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006084:	4293      	cmp	r3, r2
 8006086:	d00d      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x5c>
 8006088:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800608c:	4293      	cmp	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x5c>
 8006090:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006094:	4293      	cmp	r3, r2
 8006096:	d005      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80060a0:	2000      	movs	r0, #0
 80060a2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a4:	6899      	ldr	r1, [r3, #8]
 80060a6:	4a0a      	ldr	r2, [pc, #40]	; (80060d0 <HAL_TIM_Base_Start_IT+0x88>)
 80060a8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	2a06      	cmp	r2, #6
 80060ac:	d00a      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x7c>
 80060ae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80060b2:	d009      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80060bc:	2000      	movs	r0, #0
 80060be:	4770      	bx	lr
    return HAL_ERROR;
 80060c0:	2001      	movs	r0, #1
 80060c2:	4770      	bx	lr
  return HAL_OK;
 80060c4:	2000      	movs	r0, #0
 80060c6:	4770      	bx	lr
 80060c8:	2000      	movs	r0, #0
}
 80060ca:	4770      	bx	lr
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	00010007 	.word	0x00010007

080060d4 <HAL_TIM_PeriodElapsedCallback>:
}
 80060d4:	4770      	bx	lr

080060d6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIM_IC_CaptureCallback>:
}
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_TriggerCallback>:
}
 80060dc:	4770      	bx	lr

080060de <HAL_TIM_IRQHandler>:
{
 80060de:	b510      	push	{r4, lr}
 80060e0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060e2:	6803      	ldr	r3, [r0, #0]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	f012 0f02 	tst.w	r2, #2
 80060ea:	d011      	beq.n	8006110 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	f012 0f02 	tst.w	r2, #2
 80060f2:	d00d      	beq.n	8006110 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060f4:	f06f 0202 	mvn.w	r2, #2
 80060f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060fa:	2301      	movs	r3, #1
 80060fc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060fe:	6803      	ldr	r3, [r0, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f013 0f03 	tst.w	r3, #3
 8006106:	d079      	beq.n	80061fc <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006108:	f7ff ffe6 	bl	80060d8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610c:	2300      	movs	r3, #0
 800610e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	f012 0f04 	tst.w	r2, #4
 8006118:	d012      	beq.n	8006140 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	f012 0f04 	tst.w	r2, #4
 8006120:	d00e      	beq.n	8006140 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006122:	f06f 0204 	mvn.w	r2, #4
 8006126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006128:	2302      	movs	r3, #2
 800612a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006134:	d068      	beq.n	8006208 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006136:	4620      	mov	r0, r4
 8006138:	f7ff ffce 	bl	80060d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613c:	2300      	movs	r3, #0
 800613e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	f012 0f08 	tst.w	r2, #8
 8006148:	d012      	beq.n	8006170 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	f012 0f08 	tst.w	r2, #8
 8006150:	d00e      	beq.n	8006170 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006152:	f06f 0208 	mvn.w	r2, #8
 8006156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006158:	2304      	movs	r3, #4
 800615a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f013 0f03 	tst.w	r3, #3
 8006164:	d057      	beq.n	8006216 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8006166:	4620      	mov	r0, r4
 8006168:	f7ff ffb6 	bl	80060d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616c:	2300      	movs	r3, #0
 800616e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	f012 0f10 	tst.w	r2, #16
 8006178:	d012      	beq.n	80061a0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	f012 0f10 	tst.w	r2, #16
 8006180:	d00e      	beq.n	80061a0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006182:	f06f 0210 	mvn.w	r2, #16
 8006186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006188:	2308      	movs	r3, #8
 800618a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006194:	d046      	beq.n	8006224 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	4620      	mov	r0, r4
 8006198:	f7ff ff9e 	bl	80060d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619c:	2300      	movs	r3, #0
 800619e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	f012 0f01 	tst.w	r2, #1
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	f012 0f01 	tst.w	r2, #1
 80061b0:	d13f      	bne.n	8006232 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80061ba:	d003      	beq.n	80061c4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80061c2:	d13d      	bne.n	8006240 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80061d4:	d13b      	bne.n	800624e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80061de:	d003      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80061e6:	d139      	bne.n	800625c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	f012 0f20 	tst.w	r2, #32
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	f012 0f20 	tst.w	r2, #32
 80061f8:	d137      	bne.n	800626a <HAL_TIM_IRQHandler+0x18c>
}
 80061fa:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fc:	f7ff ff6b 	bl	80060d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	4620      	mov	r0, r4
 8006202:	f7ff ff6a 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
 8006206:	e781      	b.n	800610c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006208:	4620      	mov	r0, r4
 800620a:	f7ff ff64 	bl	80060d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620e:	4620      	mov	r0, r4
 8006210:	f7ff ff63 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
 8006214:	e792      	b.n	800613c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006216:	4620      	mov	r0, r4
 8006218:	f7ff ff5d 	bl	80060d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621c:	4620      	mov	r0, r4
 800621e:	f7ff ff5c 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
 8006222:	e7a3      	b.n	800616c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006224:	4620      	mov	r0, r4
 8006226:	f7ff ff56 	bl	80060d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622a:	4620      	mov	r0, r4
 800622c:	f7ff ff55 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
 8006230:	e7b4      	b.n	800619c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006232:	f06f 0201 	mvn.w	r2, #1
 8006236:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006238:	4620      	mov	r0, r4
 800623a:	f7ff ff4b 	bl	80060d4 <HAL_TIM_PeriodElapsedCallback>
 800623e:	e7b8      	b.n	80061b2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006244:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006246:	4620      	mov	r0, r4
 8006248:	f000 fb09 	bl	800685e <HAL_TIMEx_BreakCallback>
 800624c:	e7ba      	b.n	80061c4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800624e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006252:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006254:	4620      	mov	r0, r4
 8006256:	f000 fb03 	bl	8006860 <HAL_TIMEx_Break2Callback>
 800625a:	e7bc      	b.n	80061d6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800625c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006260:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006262:	4620      	mov	r0, r4
 8006264:	f7ff ff3a 	bl	80060dc <HAL_TIM_TriggerCallback>
 8006268:	e7be      	b.n	80061e8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800626a:	f06f 0220 	mvn.w	r2, #32
 800626e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006270:	4620      	mov	r0, r4
 8006272:	f000 faf3 	bl	800685c <HAL_TIMEx_CommutCallback>
}
 8006276:	e7c0      	b.n	80061fa <HAL_TIM_IRQHandler+0x11c>

08006278 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006278:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800627a:	4a30      	ldr	r2, [pc, #192]	; (800633c <TIM_Base_SetConfig+0xc4>)
 800627c:	4290      	cmp	r0, r2
 800627e:	d012      	beq.n	80062a6 <TIM_Base_SetConfig+0x2e>
 8006280:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006284:	d00f      	beq.n	80062a6 <TIM_Base_SetConfig+0x2e>
 8006286:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800628a:	4290      	cmp	r0, r2
 800628c:	d00b      	beq.n	80062a6 <TIM_Base_SetConfig+0x2e>
 800628e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006292:	4290      	cmp	r0, r2
 8006294:	d007      	beq.n	80062a6 <TIM_Base_SetConfig+0x2e>
 8006296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800629a:	4290      	cmp	r0, r2
 800629c:	d003      	beq.n	80062a6 <TIM_Base_SetConfig+0x2e>
 800629e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80062a2:	4290      	cmp	r0, r2
 80062a4:	d103      	bne.n	80062ae <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80062aa:	684a      	ldr	r2, [r1, #4]
 80062ac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	4a23      	ldr	r2, [pc, #140]	; (800633c <TIM_Base_SetConfig+0xc4>)
 80062b0:	4290      	cmp	r0, r2
 80062b2:	d01e      	beq.n	80062f2 <TIM_Base_SetConfig+0x7a>
 80062b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80062b8:	d01b      	beq.n	80062f2 <TIM_Base_SetConfig+0x7a>
 80062ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80062be:	4290      	cmp	r0, r2
 80062c0:	d017      	beq.n	80062f2 <TIM_Base_SetConfig+0x7a>
 80062c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062c6:	4290      	cmp	r0, r2
 80062c8:	d013      	beq.n	80062f2 <TIM_Base_SetConfig+0x7a>
 80062ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062ce:	4290      	cmp	r0, r2
 80062d0:	d00f      	beq.n	80062f2 <TIM_Base_SetConfig+0x7a>
 80062d2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80062d6:	4290      	cmp	r0, r2
 80062d8:	d00b      	beq.n	80062f2 <TIM_Base_SetConfig+0x7a>
 80062da:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80062de:	4290      	cmp	r0, r2
 80062e0:	d007      	beq.n	80062f2 <TIM_Base_SetConfig+0x7a>
 80062e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062e6:	4290      	cmp	r0, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_Base_SetConfig+0x7a>
 80062ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062ee:	4290      	cmp	r0, r2
 80062f0:	d103      	bne.n	80062fa <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062f6:	68ca      	ldr	r2, [r1, #12]
 80062f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062fe:	694a      	ldr	r2, [r1, #20]
 8006300:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006302:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006304:	688b      	ldr	r3, [r1, #8]
 8006306:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006308:	680b      	ldr	r3, [r1, #0]
 800630a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <TIM_Base_SetConfig+0xc4>)
 800630e:	4298      	cmp	r0, r3
 8006310:	d00f      	beq.n	8006332 <TIM_Base_SetConfig+0xba>
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	4298      	cmp	r0, r3
 8006318:	d00b      	beq.n	8006332 <TIM_Base_SetConfig+0xba>
 800631a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800631e:	4298      	cmp	r0, r3
 8006320:	d007      	beq.n	8006332 <TIM_Base_SetConfig+0xba>
 8006322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006326:	4298      	cmp	r0, r3
 8006328:	d003      	beq.n	8006332 <TIM_Base_SetConfig+0xba>
 800632a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800632e:	4298      	cmp	r0, r3
 8006330:	d101      	bne.n	8006336 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8006332:	690b      	ldr	r3, [r1, #16]
 8006334:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006336:	2301      	movs	r3, #1
 8006338:	6143      	str	r3, [r0, #20]
}
 800633a:	4770      	bx	lr
 800633c:	40012c00 	.word	0x40012c00

08006340 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006340:	b360      	cbz	r0, 800639c <HAL_TIM_Base_Init+0x5c>
{
 8006342:	b510      	push	{r4, lr}
 8006344:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006346:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800634a:	b313      	cbz	r3, 8006392 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800634c:	2302      	movs	r3, #2
 800634e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006352:	4621      	mov	r1, r4
 8006354:	f851 0b04 	ldr.w	r0, [r1], #4
 8006358:	f7ff ff8e 	bl	8006278 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800635c:	2301      	movs	r3, #1
 800635e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006362:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006366:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800636a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800636e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800637e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006382:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006386:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800638a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800638e:	2000      	movs	r0, #0
}
 8006390:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006392:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006396:	f7fc f997 	bl	80026c8 <HAL_TIM_Base_MspInit>
 800639a:	e7d7      	b.n	800634c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800639c:	2001      	movs	r0, #1
}
 800639e:	4770      	bx	lr

080063a0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80063a0:	b360      	cbz	r0, 80063fc <HAL_TIM_PWM_Init+0x5c>
{
 80063a2:	b510      	push	{r4, lr}
 80063a4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80063a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80063aa:	b313      	cbz	r3, 80063f2 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	2302      	movs	r3, #2
 80063ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b2:	4621      	mov	r1, r4
 80063b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80063b8:	f7ff ff5e 	bl	8006278 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063bc:	2301      	movs	r3, #1
 80063be:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80063c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80063ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80063ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80063d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80063de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80063e6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80063ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80063ee:	2000      	movs	r0, #0
}
 80063f0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80063f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80063f6:	f7fc f987 	bl	8002708 <HAL_TIM_PWM_MspInit>
 80063fa:	e7d7      	b.n	80063ac <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80063fc:	2001      	movs	r0, #1
}
 80063fe:	4770      	bx	lr

08006400 <TIM_OC2_SetConfig>:
{
 8006400:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006402:	6a03      	ldr	r3, [r0, #32]
 8006404:	f023 0310 	bic.w	r3, r3, #16
 8006408:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800640a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800640c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800640e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006410:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006414:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006418:	680d      	ldr	r5, [r1, #0]
 800641a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800641e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006422:	688d      	ldr	r5, [r1, #8]
 8006424:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006428:	4d17      	ldr	r5, [pc, #92]	; (8006488 <TIM_OC2_SetConfig+0x88>)
 800642a:	42a8      	cmp	r0, r5
 800642c:	d003      	beq.n	8006436 <TIM_OC2_SetConfig+0x36>
 800642e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006432:	42a8      	cmp	r0, r5
 8006434:	d106      	bne.n	8006444 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800643a:	68cd      	ldr	r5, [r1, #12]
 800643c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006444:	4d10      	ldr	r5, [pc, #64]	; (8006488 <TIM_OC2_SetConfig+0x88>)
 8006446:	42a8      	cmp	r0, r5
 8006448:	d00f      	beq.n	800646a <TIM_OC2_SetConfig+0x6a>
 800644a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800644e:	42a8      	cmp	r0, r5
 8006450:	d00b      	beq.n	800646a <TIM_OC2_SetConfig+0x6a>
 8006452:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006456:	42a8      	cmp	r0, r5
 8006458:	d007      	beq.n	800646a <TIM_OC2_SetConfig+0x6a>
 800645a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800645e:	42a8      	cmp	r0, r5
 8006460:	d003      	beq.n	800646a <TIM_OC2_SetConfig+0x6a>
 8006462:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006466:	42a8      	cmp	r0, r5
 8006468:	d107      	bne.n	800647a <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800646a:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800646e:	694c      	ldr	r4, [r1, #20]
 8006470:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006474:	698c      	ldr	r4, [r1, #24]
 8006476:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800647a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800647c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800647e:	684a      	ldr	r2, [r1, #4]
 8006480:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006482:	6203      	str	r3, [r0, #32]
}
 8006484:	bc30      	pop	{r4, r5}
 8006486:	4770      	bx	lr
 8006488:	40012c00 	.word	0x40012c00

0800648c <HAL_TIM_PWM_ConfigChannel>:
{
 800648c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800648e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006492:	2b01      	cmp	r3, #1
 8006494:	f000 808c 	beq.w	80065b0 <HAL_TIM_PWM_ConfigChannel+0x124>
 8006498:	4604      	mov	r4, r0
 800649a:	460d      	mov	r5, r1
 800649c:	2301      	movs	r3, #1
 800649e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80064a2:	2a14      	cmp	r2, #20
 80064a4:	d81e      	bhi.n	80064e4 <HAL_TIM_PWM_ConfigChannel+0x58>
 80064a6:	e8df f002 	tbb	[pc, r2]
 80064aa:	1d0b      	.short	0x1d0b
 80064ac:	1d211d1d 	.word	0x1d211d1d
 80064b0:	1d351d1d 	.word	0x1d351d1d
 80064b4:	1d481d1d 	.word	0x1d481d1d
 80064b8:	1d5c1d1d 	.word	0x1d5c1d1d
 80064bc:	1d1d      	.short	0x1d1d
 80064be:	6f          	.byte	0x6f
 80064bf:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c0:	6800      	ldr	r0, [r0, #0]
 80064c2:	f7ff fc8b 	bl	8005ddc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	6993      	ldr	r3, [r2, #24]
 80064ca:	f043 0308 	orr.w	r3, r3, #8
 80064ce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064d0:	6822      	ldr	r2, [r4, #0]
 80064d2:	6993      	ldr	r3, [r2, #24]
 80064d4:	f023 0304 	bic.w	r3, r3, #4
 80064d8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	6993      	ldr	r3, [r2, #24]
 80064de:	6929      	ldr	r1, [r5, #16]
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80064e4:	2000      	movs	r0, #0
 80064e6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064ec:	6800      	ldr	r0, [r0, #0]
 80064ee:	f7ff ff87 	bl	8006400 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	6993      	ldr	r3, [r2, #24]
 80064f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064fa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	6993      	ldr	r3, [r2, #24]
 8006500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006504:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	6993      	ldr	r3, [r2, #24]
 800650a:	6929      	ldr	r1, [r5, #16]
 800650c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006510:	6193      	str	r3, [r2, #24]
      break;
 8006512:	e7e7      	b.n	80064e4 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006514:	6800      	ldr	r0, [r0, #0]
 8006516:	f7ff fcb1 	bl	8005e7c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	69d3      	ldr	r3, [r2, #28]
 800651e:	f043 0308 	orr.w	r3, r3, #8
 8006522:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	69d3      	ldr	r3, [r2, #28]
 8006528:	f023 0304 	bic.w	r3, r3, #4
 800652c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	69d3      	ldr	r3, [r2, #28]
 8006532:	6929      	ldr	r1, [r5, #16]
 8006534:	430b      	orrs	r3, r1
 8006536:	61d3      	str	r3, [r2, #28]
      break;
 8006538:	e7d4      	b.n	80064e4 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	f7ff fce4 	bl	8005f08 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006540:	6822      	ldr	r2, [r4, #0]
 8006542:	69d3      	ldr	r3, [r2, #28]
 8006544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006548:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	69d3      	ldr	r3, [r2, #28]
 800654e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006552:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006554:	6822      	ldr	r2, [r4, #0]
 8006556:	69d3      	ldr	r3, [r2, #28]
 8006558:	6929      	ldr	r1, [r5, #16]
 800655a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800655e:	61d3      	str	r3, [r2, #28]
      break;
 8006560:	e7c0      	b.n	80064e4 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006562:	6800      	ldr	r0, [r0, #0]
 8006564:	f7ff fd06 	bl	8005f74 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006568:	6822      	ldr	r2, [r4, #0]
 800656a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800656c:	f043 0308 	orr.w	r3, r3, #8
 8006570:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006576:	f023 0304 	bic.w	r3, r3, #4
 800657a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006580:	6929      	ldr	r1, [r5, #16]
 8006582:	430b      	orrs	r3, r1
 8006584:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8006586:	e7ad      	b.n	80064e4 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006588:	6800      	ldr	r0, [r0, #0]
 800658a:	f7ff fd27 	bl	8005fdc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800658e:	6822      	ldr	r2, [r4, #0]
 8006590:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006596:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800659c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065a6:	6929      	ldr	r1, [r5, #16]
 80065a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80065ac:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80065ae:	e799      	b.n	80064e4 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 80065b0:	2002      	movs	r0, #2
 80065b2:	e79a      	b.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x5e>

080065b4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065b4:	f001 011f 	and.w	r1, r1, #31
 80065b8:	2301      	movs	r3, #1
 80065ba:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065be:	6a03      	ldr	r3, [r0, #32]
 80065c0:	ea23 030c 	bic.w	r3, r3, ip
 80065c4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065c6:	6a03      	ldr	r3, [r0, #32]
 80065c8:	fa02 f101 	lsl.w	r1, r2, r1
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6203      	str	r3, [r0, #32]
}
 80065d0:	4770      	bx	lr
	...

080065d4 <HAL_TIM_PWM_Start>:
{
 80065d4:	b510      	push	{r4, lr}
 80065d6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065d8:	4608      	mov	r0, r1
 80065da:	2900      	cmp	r1, #0
 80065dc:	d14b      	bne.n	8006676 <HAL_TIM_PWM_Start+0xa2>
 80065de:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	bf18      	it	ne
 80065e8:	2301      	movne	r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f040 8098 	bne.w	8006720 <HAL_TIM_PWM_Start+0x14c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d16b      	bne.n	80066cc <HAL_TIM_PWM_Start+0xf8>
 80065f4:	2302      	movs	r3, #2
 80065f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065fa:	2201      	movs	r2, #1
 80065fc:	4601      	mov	r1, r0
 80065fe:	6820      	ldr	r0, [r4, #0]
 8006600:	f7ff ffd8 	bl	80065b4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	4a49      	ldr	r2, [pc, #292]	; (800672c <HAL_TIM_PWM_Start+0x158>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00f      	beq.n	800662c <HAL_TIM_PWM_Start+0x58>
 800660c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <HAL_TIM_PWM_Start+0x58>
 8006614:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <HAL_TIM_PWM_Start+0x58>
 800661c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <HAL_TIM_PWM_Start+0x58>
 8006624:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006628:	4293      	cmp	r3, r2
 800662a:	d103      	bne.n	8006634 <HAL_TIM_PWM_Start+0x60>
    __HAL_TIM_MOE_ENABLE(htim);
 800662c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800662e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006632:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	4a3d      	ldr	r2, [pc, #244]	; (800672c <HAL_TIM_PWM_Start+0x158>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d063      	beq.n	8006704 <HAL_TIM_PWM_Start+0x130>
 800663c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006640:	d060      	beq.n	8006704 <HAL_TIM_PWM_Start+0x130>
 8006642:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006646:	4293      	cmp	r3, r2
 8006648:	d05c      	beq.n	8006704 <HAL_TIM_PWM_Start+0x130>
 800664a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800664e:	4293      	cmp	r3, r2
 8006650:	d058      	beq.n	8006704 <HAL_TIM_PWM_Start+0x130>
 8006652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006656:	4293      	cmp	r3, r2
 8006658:	d054      	beq.n	8006704 <HAL_TIM_PWM_Start+0x130>
 800665a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800665e:	4293      	cmp	r3, r2
 8006660:	d050      	beq.n	8006704 <HAL_TIM_PWM_Start+0x130>
 8006662:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006666:	4293      	cmp	r3, r2
 8006668:	d04c      	beq.n	8006704 <HAL_TIM_PWM_Start+0x130>
    __HAL_TIM_ENABLE(htim);
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f042 0201 	orr.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006672:	2000      	movs	r0, #0
 8006674:	e055      	b.n	8006722 <HAL_TIM_PWM_Start+0x14e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006676:	2904      	cmp	r1, #4
 8006678:	d00c      	beq.n	8006694 <HAL_TIM_PWM_Start+0xc0>
 800667a:	2908      	cmp	r1, #8
 800667c:	d011      	beq.n	80066a2 <HAL_TIM_PWM_Start+0xce>
 800667e:	290c      	cmp	r1, #12
 8006680:	d016      	beq.n	80066b0 <HAL_TIM_PWM_Start+0xdc>
 8006682:	2910      	cmp	r1, #16
 8006684:	d01b      	beq.n	80066be <HAL_TIM_PWM_Start+0xea>
 8006686:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800668a:	b2db      	uxtb	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	bf18      	it	ne
 8006690:	2301      	movne	r3, #1
 8006692:	e7aa      	b.n	80065ea <HAL_TIM_PWM_Start+0x16>
 8006694:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8006698:	b2db      	uxtb	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	bf18      	it	ne
 800669e:	2301      	movne	r3, #1
 80066a0:	e7a3      	b.n	80065ea <HAL_TIM_PWM_Start+0x16>
 80066a2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	bf18      	it	ne
 80066ac:	2301      	movne	r3, #1
 80066ae:	e79c      	b.n	80065ea <HAL_TIM_PWM_Start+0x16>
 80066b0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	bf18      	it	ne
 80066ba:	2301      	movne	r3, #1
 80066bc:	e795      	b.n	80065ea <HAL_TIM_PWM_Start+0x16>
 80066be:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	bf18      	it	ne
 80066c8:	2301      	movne	r3, #1
 80066ca:	e78e      	b.n	80065ea <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066cc:	2804      	cmp	r0, #4
 80066ce:	d009      	beq.n	80066e4 <HAL_TIM_PWM_Start+0x110>
 80066d0:	2808      	cmp	r0, #8
 80066d2:	d00b      	beq.n	80066ec <HAL_TIM_PWM_Start+0x118>
 80066d4:	280c      	cmp	r0, #12
 80066d6:	d00d      	beq.n	80066f4 <HAL_TIM_PWM_Start+0x120>
 80066d8:	2810      	cmp	r0, #16
 80066da:	d00f      	beq.n	80066fc <HAL_TIM_PWM_Start+0x128>
 80066dc:	2302      	movs	r3, #2
 80066de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e2:	e78a      	b.n	80065fa <HAL_TIM_PWM_Start+0x26>
 80066e4:	2302      	movs	r3, #2
 80066e6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80066ea:	e786      	b.n	80065fa <HAL_TIM_PWM_Start+0x26>
 80066ec:	2302      	movs	r3, #2
 80066ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80066f2:	e782      	b.n	80065fa <HAL_TIM_PWM_Start+0x26>
 80066f4:	2302      	movs	r3, #2
 80066f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80066fa:	e77e      	b.n	80065fa <HAL_TIM_PWM_Start+0x26>
 80066fc:	2302      	movs	r3, #2
 80066fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006702:	e77a      	b.n	80065fa <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006704:	6899      	ldr	r1, [r3, #8]
 8006706:	4a0a      	ldr	r2, [pc, #40]	; (8006730 <HAL_TIM_PWM_Start+0x15c>)
 8006708:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800670a:	2a06      	cmp	r2, #6
 800670c:	d00a      	beq.n	8006724 <HAL_TIM_PWM_Start+0x150>
 800670e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006712:	d009      	beq.n	8006728 <HAL_TIM_PWM_Start+0x154>
      __HAL_TIM_ENABLE(htim);
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800671c:	2000      	movs	r0, #0
 800671e:	e000      	b.n	8006722 <HAL_TIM_PWM_Start+0x14e>
    return HAL_ERROR;
 8006720:	2001      	movs	r0, #1
}
 8006722:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8006724:	2000      	movs	r0, #0
 8006726:	e7fc      	b.n	8006722 <HAL_TIM_PWM_Start+0x14e>
 8006728:	2000      	movs	r0, #0
 800672a:	e7fa      	b.n	8006722 <HAL_TIM_PWM_Start+0x14e>
 800672c:	40012c00 	.word	0x40012c00
 8006730:	00010007 	.word	0x00010007

08006734 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006734:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d042      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 800673c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800673e:	2301      	movs	r3, #1
 8006740:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	2302      	movs	r3, #2
 8006746:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800674a:	6802      	ldr	r2, [r0, #0]
 800674c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800674e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006750:	4d1d      	ldr	r5, [pc, #116]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8006752:	42aa      	cmp	r2, r5
 8006754:	d003      	beq.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8006756:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800675a:	42aa      	cmp	r2, r5
 800675c:	d103      	bne.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800675e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006762:	684d      	ldr	r5, [r1, #4]
 8006764:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800676a:	680d      	ldr	r5, [r1, #0]
 800676c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800676e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006770:	6803      	ldr	r3, [r0, #0]
 8006772:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d016      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677c:	d013      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800677e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800678e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006796:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800679e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d104      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067aa:	688a      	ldr	r2, [r1, #8]
 80067ac:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ae:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b6:	2300      	movs	r3, #0
 80067b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80067bc:	4618      	mov	r0, r3
}
 80067be:	bc30      	pop	{r4, r5}
 80067c0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80067c2:	2002      	movs	r0, #2
}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00

080067cc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d03e      	beq.n	8006852 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 80067d4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80067d6:	2301      	movs	r3, #1
 80067d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067dc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e2:	688a      	ldr	r2, [r1, #8]
 80067e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ea:	684a      	ldr	r2, [r1, #4]
 80067ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067f2:	680a      	ldr	r2, [r1, #0]
 80067f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067fa:	690a      	ldr	r2, [r1, #16]
 80067fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006802:	694a      	ldr	r2, [r1, #20]
 8006804:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800680c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800680e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006812:	698a      	ldr	r2, [r1, #24]
 8006814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006818:	6802      	ldr	r2, [r0, #0]
 800681a:	4c0f      	ldr	r4, [pc, #60]	; (8006858 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800681c:	42a2      	cmp	r2, r4
 800681e:	d003      	beq.n	8006828 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8006820:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006824:	42a2      	cmp	r2, r4
 8006826:	d10c      	bne.n	8006842 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006828:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800682c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800682e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006836:	69cc      	ldr	r4, [r1, #28]
 8006838:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800683a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800683e:	6a09      	ldr	r1, [r1, #32]
 8006840:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006842:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006844:	2300      	movs	r3, #0
 8006846:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800684a:	4618      	mov	r0, r3
}
 800684c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006850:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006852:	2002      	movs	r0, #2
}
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40012c00 	.word	0x40012c00

0800685c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800685c:	4770      	bx	lr

0800685e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800685e:	4770      	bx	lr

08006860 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006860:	4770      	bx	lr

08006862 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006862:	4770      	bx	lr

08006864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006864:	b510      	push	{r4, lr}
 8006866:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006868:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800686a:	6883      	ldr	r3, [r0, #8]
 800686c:	6902      	ldr	r2, [r0, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	6942      	ldr	r2, [r0, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	69c2      	ldr	r2, [r0, #28]
 8006876:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006878:	6808      	ldr	r0, [r1, #0]
 800687a:	4a8e      	ldr	r2, [pc, #568]	; (8006ab4 <UART_SetConfig+0x250>)
 800687c:	4002      	ands	r2, r0
 800687e:	4313      	orrs	r3, r2
 8006880:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	6853      	ldr	r3, [r2, #4]
 8006886:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800688a:	68e1      	ldr	r1, [r4, #12]
 800688c:	430b      	orrs	r3, r1
 800688e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006890:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	4b88      	ldr	r3, [pc, #544]	; (8006ab8 <UART_SetConfig+0x254>)
 8006896:	429a      	cmp	r2, r3
 8006898:	d001      	beq.n	800689e <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800689a:	6a23      	ldr	r3, [r4, #32]
 800689c:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800689e:	6893      	ldr	r3, [r2, #8]
 80068a0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80068a4:	430b      	orrs	r3, r1
 80068a6:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	4a84      	ldr	r2, [pc, #528]	; (8006abc <UART_SetConfig+0x258>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d010      	beq.n	80068d2 <UART_SetConfig+0x6e>
 80068b0:	4a83      	ldr	r2, [pc, #524]	; (8006ac0 <UART_SetConfig+0x25c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d021      	beq.n	80068fa <UART_SetConfig+0x96>
 80068b6:	4a83      	ldr	r2, [pc, #524]	; (8006ac4 <UART_SetConfig+0x260>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d037      	beq.n	800692c <UART_SetConfig+0xc8>
 80068bc:	4a82      	ldr	r2, [pc, #520]	; (8006ac8 <UART_SetConfig+0x264>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d05c      	beq.n	800697c <UART_SetConfig+0x118>
 80068c2:	4a82      	ldr	r2, [pc, #520]	; (8006acc <UART_SetConfig+0x268>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d06b      	beq.n	80069a0 <UART_SetConfig+0x13c>
 80068c8:	4a7b      	ldr	r2, [pc, #492]	; (8006ab8 <UART_SetConfig+0x254>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d07d      	beq.n	80069ca <UART_SetConfig+0x166>
 80068ce:	2210      	movs	r2, #16
 80068d0:	e03a      	b.n	8006948 <UART_SetConfig+0xe4>
 80068d2:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80068d6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80068da:	f002 0203 	and.w	r2, r2, #3
 80068de:	2a03      	cmp	r2, #3
 80068e0:	d809      	bhi.n	80068f6 <UART_SetConfig+0x92>
 80068e2:	e8df f002 	tbb	[pc, r2]
 80068e6:	0402      	.short	0x0402
 80068e8:	0687      	.short	0x0687
 80068ea:	2201      	movs	r2, #1
 80068ec:	e02c      	b.n	8006948 <UART_SetConfig+0xe4>
 80068ee:	2204      	movs	r2, #4
 80068f0:	e02a      	b.n	8006948 <UART_SetConfig+0xe4>
 80068f2:	2208      	movs	r2, #8
 80068f4:	e028      	b.n	8006948 <UART_SetConfig+0xe4>
 80068f6:	2210      	movs	r2, #16
 80068f8:	e026      	b.n	8006948 <UART_SetConfig+0xe4>
 80068fa:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80068fe:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006902:	f002 020c 	and.w	r2, r2, #12
 8006906:	2a0c      	cmp	r2, #12
 8006908:	d80e      	bhi.n	8006928 <UART_SetConfig+0xc4>
 800690a:	e8df f002 	tbb	[pc, r2]
 800690e:	0d07      	.short	0x0d07
 8006910:	0d090d0d 	.word	0x0d090d0d
 8006914:	0d750d0d 	.word	0x0d750d0d
 8006918:	0d0d      	.short	0x0d0d
 800691a:	0b          	.byte	0x0b
 800691b:	00          	.byte	0x00
 800691c:	2200      	movs	r2, #0
 800691e:	e013      	b.n	8006948 <UART_SetConfig+0xe4>
 8006920:	2204      	movs	r2, #4
 8006922:	e011      	b.n	8006948 <UART_SetConfig+0xe4>
 8006924:	2208      	movs	r2, #8
 8006926:	e00f      	b.n	8006948 <UART_SetConfig+0xe4>
 8006928:	2210      	movs	r2, #16
 800692a:	e00d      	b.n	8006948 <UART_SetConfig+0xe4>
 800692c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8006930:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006934:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006938:	2a20      	cmp	r2, #32
 800693a:	d05f      	beq.n	80069fc <UART_SetConfig+0x198>
 800693c:	d81a      	bhi.n	8006974 <UART_SetConfig+0x110>
 800693e:	2a00      	cmp	r2, #0
 8006940:	d05e      	beq.n	8006a00 <UART_SetConfig+0x19c>
 8006942:	2a10      	cmp	r2, #16
 8006944:	d15e      	bne.n	8006a04 <UART_SetConfig+0x1a0>
 8006946:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006948:	495b      	ldr	r1, [pc, #364]	; (8006ab8 <UART_SetConfig+0x254>)
 800694a:	428b      	cmp	r3, r1
 800694c:	d076      	beq.n	8006a3c <UART_SetConfig+0x1d8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800694e:	69e0      	ldr	r0, [r4, #28]
 8006950:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006954:	f000 80a3 	beq.w	8006a9e <UART_SetConfig+0x23a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006958:	2a08      	cmp	r2, #8
 800695a:	f200 810e 	bhi.w	8006b7a <UART_SetConfig+0x316>
 800695e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006962:	00dd      	.short	0x00dd
 8006964:	00db00f3 	.word	0x00db00f3
 8006968:	00f6010c 	.word	0x00f6010c
 800696c:	010c010c 	.word	0x010c010c
 8006970:	00f9010c 	.word	0x00f9010c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006974:	2a30      	cmp	r2, #48	; 0x30
 8006976:	d147      	bne.n	8006a08 <UART_SetConfig+0x1a4>
 8006978:	2208      	movs	r2, #8
 800697a:	e7e5      	b.n	8006948 <UART_SetConfig+0xe4>
 800697c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8006980:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006984:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8006988:	2a80      	cmp	r2, #128	; 0x80
 800698a:	d03f      	beq.n	8006a0c <UART_SetConfig+0x1a8>
 800698c:	d804      	bhi.n	8006998 <UART_SetConfig+0x134>
 800698e:	b3fa      	cbz	r2, 8006a10 <UART_SetConfig+0x1ac>
 8006990:	2a40      	cmp	r2, #64	; 0x40
 8006992:	d13f      	bne.n	8006a14 <UART_SetConfig+0x1b0>
 8006994:	2204      	movs	r2, #4
 8006996:	e7d7      	b.n	8006948 <UART_SetConfig+0xe4>
 8006998:	2ac0      	cmp	r2, #192	; 0xc0
 800699a:	d13d      	bne.n	8006a18 <UART_SetConfig+0x1b4>
 800699c:	2208      	movs	r2, #8
 800699e:	e7d3      	b.n	8006948 <UART_SetConfig+0xe4>
 80069a0:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80069a4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80069a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80069ac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80069b0:	d034      	beq.n	8006a1c <UART_SetConfig+0x1b8>
 80069b2:	d805      	bhi.n	80069c0 <UART_SetConfig+0x15c>
 80069b4:	b3a2      	cbz	r2, 8006a20 <UART_SetConfig+0x1bc>
 80069b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80069ba:	d133      	bne.n	8006a24 <UART_SetConfig+0x1c0>
 80069bc:	2204      	movs	r2, #4
 80069be:	e7c3      	b.n	8006948 <UART_SetConfig+0xe4>
 80069c0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80069c4:	d130      	bne.n	8006a28 <UART_SetConfig+0x1c4>
 80069c6:	2208      	movs	r2, #8
 80069c8:	e7be      	b.n	8006948 <UART_SetConfig+0xe4>
 80069ca:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 80069ce:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80069d2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80069d6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80069da:	d027      	beq.n	8006a2c <UART_SetConfig+0x1c8>
 80069dc:	d805      	bhi.n	80069ea <UART_SetConfig+0x186>
 80069de:	b33a      	cbz	r2, 8006a30 <UART_SetConfig+0x1cc>
 80069e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80069e4:	d126      	bne.n	8006a34 <UART_SetConfig+0x1d0>
 80069e6:	2204      	movs	r2, #4
 80069e8:	e7ae      	b.n	8006948 <UART_SetConfig+0xe4>
 80069ea:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80069ee:	d123      	bne.n	8006a38 <UART_SetConfig+0x1d4>
 80069f0:	2208      	movs	r2, #8
 80069f2:	e7a9      	b.n	8006948 <UART_SetConfig+0xe4>
 80069f4:	2202      	movs	r2, #2
 80069f6:	e7a7      	b.n	8006948 <UART_SetConfig+0xe4>
 80069f8:	2202      	movs	r2, #2
 80069fa:	e7a5      	b.n	8006948 <UART_SetConfig+0xe4>
 80069fc:	2202      	movs	r2, #2
 80069fe:	e7a3      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a00:	2200      	movs	r2, #0
 8006a02:	e7a1      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a04:	2210      	movs	r2, #16
 8006a06:	e79f      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a08:	2210      	movs	r2, #16
 8006a0a:	e79d      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	e79b      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a10:	2200      	movs	r2, #0
 8006a12:	e799      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a14:	2210      	movs	r2, #16
 8006a16:	e797      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a18:	2210      	movs	r2, #16
 8006a1a:	e795      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	e793      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a20:	2200      	movs	r2, #0
 8006a22:	e791      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a24:	2210      	movs	r2, #16
 8006a26:	e78f      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a28:	2210      	movs	r2, #16
 8006a2a:	e78d      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	e78b      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a30:	2200      	movs	r2, #0
 8006a32:	e789      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a34:	2210      	movs	r2, #16
 8006a36:	e787      	b.n	8006948 <UART_SetConfig+0xe4>
 8006a38:	2210      	movs	r2, #16
 8006a3a:	e785      	b.n	8006948 <UART_SetConfig+0xe4>
    switch (clocksource)
 8006a3c:	2a08      	cmp	r2, #8
 8006a3e:	f200 808c 	bhi.w	8006b5a <UART_SetConfig+0x2f6>
 8006a42:	e8df f002 	tbb	[pc, r2]
 8006a46:	8a08      	.short	0x8a08
 8006a48:	8a278a2a 	.word	0x8a278a2a
 8006a4c:	8a8a      	.short	0x8a8a
 8006a4e:	05          	.byte	0x05
 8006a4f:	00          	.byte	0x00
 8006a50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a54:	e003      	b.n	8006a5e <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a56:	f7fe fa2b 	bl	8004eb0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d07f      	beq.n	8006b5e <UART_SetConfig+0x2fa>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a5e:	6862      	ldr	r2, [r4, #4]
 8006a60:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006a64:	4283      	cmp	r3, r0
 8006a66:	d87c      	bhi.n	8006b62 <UART_SetConfig+0x2fe>
 8006a68:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006a6c:	d87b      	bhi.n	8006b66 <UART_SetConfig+0x302>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a6e:	0e01      	lsrs	r1, r0, #24
 8006a70:	0200      	lsls	r0, r0, #8
 8006a72:	0853      	lsrs	r3, r2, #1
 8006a74:	18c0      	adds	r0, r0, r3
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	f141 0100 	adc.w	r1, r1, #0
 8006a7e:	f7f9 fbff 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a82:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006a86:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <UART_SetConfig+0x26c>)
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d86e      	bhi.n	8006b6a <UART_SetConfig+0x306>
          huart->Instance->BRR = usartdiv;
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	60d8      	str	r0, [r3, #12]
 8006a90:	2000      	movs	r0, #0
 8006a92:	e055      	b.n	8006b40 <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a94:	f7fd fde8 	bl	8004668 <HAL_RCC_GetSysClockFreq>
        break;
 8006a98:	e7df      	b.n	8006a5a <UART_SetConfig+0x1f6>
        pclk = (uint32_t) HSI_VALUE;
 8006a9a:	480e      	ldr	r0, [pc, #56]	; (8006ad4 <UART_SetConfig+0x270>)
 8006a9c:	e7df      	b.n	8006a5e <UART_SetConfig+0x1fa>
    switch (clocksource)
 8006a9e:	2a08      	cmp	r2, #8
 8006aa0:	d865      	bhi.n	8006b6e <UART_SetConfig+0x30a>
 8006aa2:	e8df f002 	tbb	[pc, r2]
 8006aa6:	3319      	.short	0x3319
 8006aa8:	64366405 	.word	0x64366405
 8006aac:	6464      	.short	0x6464
 8006aae:	1d          	.byte	0x1d
 8006aaf:	00          	.byte	0x00
 8006ab0:	4808      	ldr	r0, [pc, #32]	; (8006ad4 <UART_SetConfig+0x270>)
 8006ab2:	e015      	b.n	8006ae0 <UART_SetConfig+0x27c>
 8006ab4:	efff69f3 	.word	0xefff69f3
 8006ab8:	40008000 	.word	0x40008000
 8006abc:	40013800 	.word	0x40013800
 8006ac0:	40004400 	.word	0x40004400
 8006ac4:	40004800 	.word	0x40004800
 8006ac8:	40004c00 	.word	0x40004c00
 8006acc:	40005000 	.word	0x40005000
 8006ad0:	000ffcff 	.word	0x000ffcff
 8006ad4:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad8:	f7fe f9ea 	bl	8004eb0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d048      	beq.n	8006b72 <UART_SetConfig+0x30e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ae0:	6862      	ldr	r2, [r4, #4]
 8006ae2:	0853      	lsrs	r3, r2, #1
 8006ae4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006ae8:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aec:	f1a0 0210 	sub.w	r2, r0, #16
 8006af0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d83e      	bhi.n	8006b76 <UART_SetConfig+0x312>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006af8:	b283      	uxth	r3, r0
 8006afa:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006afe:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006b02:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	60d8      	str	r0, [r3, #12]
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e019      	b.n	8006b40 <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b0c:	f7fe f9e2 	bl	8004ed4 <HAL_RCC_GetPCLK2Freq>
        break;
 8006b10:	e7e4      	b.n	8006adc <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetSysClockFreq();
 8006b12:	f7fd fda9 	bl	8004668 <HAL_RCC_GetSysClockFreq>
        break;
 8006b16:	e7e1      	b.n	8006adc <UART_SetConfig+0x278>
    switch (clocksource)
 8006b18:	481b      	ldr	r0, [pc, #108]	; (8006b88 <UART_SetConfig+0x324>)
 8006b1a:	e002      	b.n	8006b22 <UART_SetConfig+0x2be>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7fe f9c8 	bl	8004eb0 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8006b20:	b368      	cbz	r0, 8006b7e <UART_SetConfig+0x31a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006b28:	fbb0 f0f3 	udiv	r0, r0, r3
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b2c:	f1a0 0210 	sub.w	r2, r0, #16
 8006b30:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d824      	bhi.n	8006b82 <UART_SetConfig+0x31e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	b280      	uxth	r0, r0
 8006b3c:	60d8      	str	r0, [r3, #12]
 8006b3e:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b40:	2300      	movs	r3, #0
 8006b42:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8006b44:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8006b46:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b48:	f7fe f9c4 	bl	8004ed4 <HAL_RCC_GetPCLK2Freq>
        break;
 8006b4c:	e7e8      	b.n	8006b20 <UART_SetConfig+0x2bc>
        pclk = HAL_RCC_GetSysClockFreq();
 8006b4e:	f7fd fd8b 	bl	8004668 <HAL_RCC_GetSysClockFreq>
        break;
 8006b52:	e7e5      	b.n	8006b20 <UART_SetConfig+0x2bc>
        pclk = (uint32_t) LSE_VALUE;
 8006b54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006b58:	e7e3      	b.n	8006b22 <UART_SetConfig+0x2be>
    switch (clocksource)
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	e7f0      	b.n	8006b40 <UART_SetConfig+0x2dc>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e7ee      	b.n	8006b40 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8006b62:	2001      	movs	r0, #1
 8006b64:	e7ec      	b.n	8006b40 <UART_SetConfig+0x2dc>
 8006b66:	2001      	movs	r0, #1
 8006b68:	e7ea      	b.n	8006b40 <UART_SetConfig+0x2dc>
          ret = HAL_ERROR;
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	e7e8      	b.n	8006b40 <UART_SetConfig+0x2dc>
    switch (clocksource)
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e7e6      	b.n	8006b40 <UART_SetConfig+0x2dc>
 8006b72:	2000      	movs	r0, #0
 8006b74:	e7e4      	b.n	8006b40 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8006b76:	2001      	movs	r0, #1
 8006b78:	e7e2      	b.n	8006b40 <UART_SetConfig+0x2dc>
    switch (clocksource)
 8006b7a:	2001      	movs	r0, #1
 8006b7c:	e7e0      	b.n	8006b40 <UART_SetConfig+0x2dc>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e7de      	b.n	8006b40 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8006b82:	2001      	movs	r0, #1
 8006b84:	e7dc      	b.n	8006b40 <UART_SetConfig+0x2dc>
 8006b86:	bf00      	nop
 8006b88:	00f42400 	.word	0x00f42400

08006b8c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b8e:	f013 0f01 	tst.w	r3, #1
 8006b92:	d006      	beq.n	8006ba2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b94:	6802      	ldr	r2, [r0, #0]
 8006b96:	6853      	ldr	r3, [r2, #4]
 8006b98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b9c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ba2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ba4:	f013 0f02 	tst.w	r3, #2
 8006ba8:	d006      	beq.n	8006bb8 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006baa:	6802      	ldr	r2, [r0, #0]
 8006bac:	6853      	ldr	r3, [r2, #4]
 8006bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bba:	f013 0f04 	tst.w	r3, #4
 8006bbe:	d006      	beq.n	8006bce <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bc0:	6802      	ldr	r2, [r0, #0]
 8006bc2:	6853      	ldr	r3, [r2, #4]
 8006bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bd0:	f013 0f08 	tst.w	r3, #8
 8006bd4:	d006      	beq.n	8006be4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bd6:	6802      	ldr	r2, [r0, #0]
 8006bd8:	6853      	ldr	r3, [r2, #4]
 8006bda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bde:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006be4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006be6:	f013 0f10 	tst.w	r3, #16
 8006bea:	d006      	beq.n	8006bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bec:	6802      	ldr	r2, [r0, #0]
 8006bee:	6893      	ldr	r3, [r2, #8]
 8006bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bfc:	f013 0f20 	tst.w	r3, #32
 8006c00:	d006      	beq.n	8006c10 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c02:	6802      	ldr	r2, [r0, #0]
 8006c04:	6893      	ldr	r3, [r2, #8]
 8006c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c0a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c12:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c16:	d00a      	beq.n	8006c2e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c18:	6802      	ldr	r2, [r0, #0]
 8006c1a:	6853      	ldr	r3, [r2, #4]
 8006c1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006c22:	430b      	orrs	r3, r1
 8006c24:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c2c:	d00b      	beq.n	8006c46 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006c34:	d006      	beq.n	8006c44 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c36:	6802      	ldr	r2, [r0, #0]
 8006c38:	6853      	ldr	r3, [r2, #4]
 8006c3a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006c3e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006c40:	430b      	orrs	r3, r1
 8006c42:	6053      	str	r3, [r2, #4]
  }
}
 8006c44:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c46:	6802      	ldr	r2, [r0, #0]
 8006c48:	6853      	ldr	r3, [r2, #4]
 8006c4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c4e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6053      	str	r3, [r2, #4]
 8006c54:	e7eb      	b.n	8006c2e <UART_AdvFeatureConfig+0xa2>

08006c56 <UART_WaitOnFlagUntilTimeout>:
    } while ((__STREXW(val,(__IO uint32_t *)&(REG))) != 0U); \
  } while(0)

HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	460f      	mov	r7, r1
 8006c5e:	4616      	mov	r6, r2
 8006c60:	4699      	mov	r9, r3
 8006c62:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c66:	682c      	ldr	r4, [r5, #0]
 8006c68:	69e4      	ldr	r4, [r4, #28]
 8006c6a:	ea37 0304 	bics.w	r3, r7, r4
 8006c6e:	bf0c      	ite	eq
 8006c70:	f04f 0c01 	moveq.w	ip, #1
 8006c74:	f04f 0c00 	movne.w	ip, #0
 8006c78:	45b4      	cmp	ip, r6
 8006c7a:	d153      	bne.n	8006d24 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c7c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006c80:	d0f1      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c82:	f7fc fc7b 	bl	800357c <HAL_GetTick>
 8006c86:	eba0 0009 	sub.w	r0, r0, r9
 8006c8a:	4540      	cmp	r0, r8
 8006c8c:	d82d      	bhi.n	8006cea <UART_WaitOnFlagUntilTimeout+0x94>
 8006c8e:	f1b8 0f00 	cmp.w	r8, #0
 8006c92:	d02a      	beq.n	8006cea <UART_WaitOnFlagUntilTimeout+0x94>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	f012 0f04 	tst.w	r2, #4
 8006c9c:	d0e3      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006ca4:	d0df      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006caa:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cac:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	e852 3f00 	ldrex	r3, [r2]
 8006cb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	e842 3100 	strex	r1, r3, [r2]
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	d1f6      	bne.n	8006cac <UART_WaitOnFlagUntilTimeout+0x56>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cbe:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	f102 0308 	add.w	r3, r2, #8
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	3208      	adds	r2, #8
 8006cce:	e842 3100 	strex	r1, r3, [r2]
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	d1f3      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 8006cd6:	2320      	movs	r3, #32
 8006cd8:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cda:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cdc:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ce6:	2003      	movs	r0, #3
 8006ce8:	e01d      	b.n	8006d26 <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cea:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	e852 3f00 	ldrex	r3, [r2]
 8006cf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	e842 3100 	strex	r1, r3, [r2]
 8006cf8:	2900      	cmp	r1, #0
 8006cfa:	d1f6      	bne.n	8006cea <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	f102 0308 	add.w	r3, r2, #8
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	3208      	adds	r2, #8
 8006d0c:	e842 3100 	strex	r1, r3, [r2]
 8006d10:	2900      	cmp	r1, #0
 8006d12:	d1f3      	bne.n	8006cfc <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8006d14:	2320      	movs	r3, #32
 8006d16:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d18:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8006d20:	2003      	movs	r0, #3
 8006d22:	e000      	b.n	8006d26 <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 8006d24:	2000      	movs	r0, #0
}
 8006d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006d2a <HAL_UART_Transmit>:
{
 8006d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006d32:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d156      	bne.n	8006de6 <HAL_UART_Transmit+0xbc>
 8006d38:	4604      	mov	r4, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006d3e:	2900      	cmp	r1, #0
 8006d40:	d055      	beq.n	8006dee <HAL_UART_Transmit+0xc4>
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	d055      	beq.n	8006df2 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8006d46:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d053      	beq.n	8006df6 <HAL_UART_Transmit+0xcc>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	2300      	movs	r3, #0
 8006d56:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d5a:	2321      	movs	r3, #33	; 0x21
 8006d5c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8006d5e:	f7fc fc0d 	bl	800357c <HAL_GetTick>
 8006d62:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006d64:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d68:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d6c:	68a3      	ldr	r3, [r4, #8]
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d72:	d005      	beq.n	8006d80 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8006d74:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8006d7e:	e014      	b.n	8006daa <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	b113      	cbz	r3, 8006d8a <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8006d84:	f04f 0800 	mov.w	r8, #0
 8006d88:	e7f6      	b.n	8006d78 <HAL_UART_Transmit+0x4e>
      pdata16bits = (const uint16_t *) pData;
 8006d8a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006d8c:	2500      	movs	r5, #0
 8006d8e:	e7f3      	b.n	8006d78 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d90:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006d94:	6822      	ldr	r2, [r4, #0]
 8006d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006d9c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8006da0:	b292      	uxth	r2, r2
 8006da2:	3a01      	subs	r2, #1
 8006da4:	b292      	uxth	r2, r2
 8006da6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006daa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	b173      	cbz	r3, 8006dd0 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006db2:	9600      	str	r6, [sp, #0]
 8006db4:	463b      	mov	r3, r7
 8006db6:	2200      	movs	r2, #0
 8006db8:	2180      	movs	r1, #128	; 0x80
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f7ff ff4b 	bl	8006c56 <UART_WaitOnFlagUntilTimeout>
 8006dc0:	b9d8      	cbnz	r0, 8006dfa <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	d0e4      	beq.n	8006d90 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dce:	e7e5      	b.n	8006d9c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dd0:	9600      	str	r6, [sp, #0]
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2140      	movs	r1, #64	; 0x40
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f7ff ff3c 	bl	8006c56 <UART_WaitOnFlagUntilTimeout>
 8006dde:	b970      	cbnz	r0, 8006dfe <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8006de0:	2320      	movs	r3, #32
 8006de2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8006de4:	e000      	b.n	8006de8 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8006de6:	2002      	movs	r0, #2
}
 8006de8:	b002      	add	sp, #8
 8006dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8006dee:	2001      	movs	r0, #1
 8006df0:	e7fa      	b.n	8006de8 <HAL_UART_Transmit+0xbe>
 8006df2:	2001      	movs	r0, #1
 8006df4:	e7f8      	b.n	8006de8 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8006df6:	2002      	movs	r0, #2
 8006df8:	e7f6      	b.n	8006de8 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8006dfa:	2003      	movs	r0, #3
 8006dfc:	e7f4      	b.n	8006de8 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8006dfe:	2003      	movs	r0, #3
 8006e00:	e7f2      	b.n	8006de8 <HAL_UART_Transmit+0xbe>

08006e02 <UART_CheckIdleState>:
{
 8006e02:	b530      	push	{r4, r5, lr}
 8006e04:	b083      	sub	sp, #12
 8006e06:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8006e0e:	f7fc fbb5 	bl	800357c <HAL_GetTick>
 8006e12:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e14:	6822      	ldr	r2, [r4, #0]
 8006e16:	6812      	ldr	r2, [r2, #0]
 8006e18:	f012 0f08 	tst.w	r2, #8
 8006e1c:	d10d      	bne.n	8006e3a <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f013 0f04 	tst.w	r3, #4
 8006e26:	d116      	bne.n	8006e56 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8006e28:	2320      	movs	r3, #32
 8006e2a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e2c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2e:	2000      	movs	r0, #0
 8006e30:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8006e32:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8006e36:	b003      	add	sp, #12
 8006e38:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	4603      	mov	r3, r0
 8006e42:	2200      	movs	r2, #0
 8006e44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f7ff ff04 	bl	8006c56 <UART_WaitOnFlagUntilTimeout>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d0e5      	beq.n	8006e1e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006e52:	2003      	movs	r0, #3
 8006e54:	e7ef      	b.n	8006e36 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	462b      	mov	r3, r5
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e64:	4620      	mov	r0, r4
 8006e66:	f7ff fef6 	bl	8006c56 <UART_WaitOnFlagUntilTimeout>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d0dc      	beq.n	8006e28 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006e6e:	2003      	movs	r0, #3
 8006e70:	e7e1      	b.n	8006e36 <UART_CheckIdleState+0x34>

08006e72 <HAL_UART_Init>:
  if (huart == NULL)
 8006e72:	b368      	cbz	r0, 8006ed0 <HAL_UART_Init+0x5e>
{
 8006e74:	b510      	push	{r4, lr}
 8006e76:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006e78:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006e7a:	b303      	cbz	r3, 8006ebe <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006e7c:	2324      	movs	r3, #36	; 0x24
 8006e7e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8006e80:	6822      	ldr	r2, [r4, #0]
 8006e82:	6813      	ldr	r3, [r2, #0]
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff fcea 	bl	8006864 <UART_SetConfig>
 8006e90:	2801      	cmp	r0, #1
 8006e92:	d013      	beq.n	8006ebc <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e96:	b9bb      	cbnz	r3, 8006ec8 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e98:	6822      	ldr	r2, [r4, #0]
 8006e9a:	6853      	ldr	r3, [r2, #4]
 8006e9c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006ea0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	6893      	ldr	r3, [r2, #8]
 8006ea6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006eaa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006eac:	6822      	ldr	r2, [r4, #0]
 8006eae:	6813      	ldr	r3, [r2, #0]
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f7ff ffa3 	bl	8006e02 <UART_CheckIdleState>
}
 8006ebc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006ebe:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8006ec2:	f7ff fcce 	bl	8006862 <HAL_UART_MspInit>
 8006ec6:	e7d9      	b.n	8006e7c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f7ff fe5f 	bl	8006b8c <UART_AdvFeatureConfig>
 8006ece:	e7e3      	b.n	8006e98 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8006ed0:	2001      	movs	r0, #1
}
 8006ed2:	4770      	bx	lr

08006ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006ed8:	f7fb fc96 	bl	8002808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006edc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006ede:	e003      	b.n	8006ee8 <LoopCopyDataInit>

08006ee0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006ee2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006ee4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006ee6:	3104      	adds	r1, #4

08006ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006ee8:	480a      	ldr	r0, [pc, #40]	; (8006f14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006eec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006eee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006ef0:	d3f6      	bcc.n	8006ee0 <CopyDataInit>
	ldr	r2, =_sbss
 8006ef2:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006ef4:	e002      	b.n	8006efc <LoopFillZerobss>

08006ef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006ef6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006ef8:	f842 3b04 	str.w	r3, [r2], #4

08006efc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006efc:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <LoopForever+0x16>)
	cmp	r2, r3
 8006efe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006f00:	d3f9      	bcc.n	8006ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006f02:	f000 f817 	bl	8006f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006f06:	f7fa fd0f 	bl	8001928 <main>

08006f0a <LoopForever>:

LoopForever:
    b LoopForever
 8006f0a:	e7fe      	b.n	8006f0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006f0c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006f10:	08007a00 	.word	0x08007a00
	ldr	r0, =_sdata
 8006f14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006f18:	20000540 	.word	0x20000540
	ldr	r2, =_sbss
 8006f1c:	20000540 	.word	0x20000540
	ldr	r3, = _ebss
 8006f20:	20000bac 	.word	0x20000bac

08006f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006f24:	e7fe      	b.n	8006f24 <ADC1_2_IRQHandler>
	...

08006f28 <__errno>:
 8006f28:	4b01      	ldr	r3, [pc, #4]	; (8006f30 <__errno+0x8>)
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	200004d8 	.word	0x200004d8

08006f34 <__libc_init_array>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	4d0d      	ldr	r5, [pc, #52]	; (8006f6c <__libc_init_array+0x38>)
 8006f38:	4c0d      	ldr	r4, [pc, #52]	; (8006f70 <__libc_init_array+0x3c>)
 8006f3a:	1b64      	subs	r4, r4, r5
 8006f3c:	10a4      	asrs	r4, r4, #2
 8006f3e:	2600      	movs	r6, #0
 8006f40:	42a6      	cmp	r6, r4
 8006f42:	d109      	bne.n	8006f58 <__libc_init_array+0x24>
 8006f44:	4d0b      	ldr	r5, [pc, #44]	; (8006f74 <__libc_init_array+0x40>)
 8006f46:	4c0c      	ldr	r4, [pc, #48]	; (8006f78 <__libc_init_array+0x44>)
 8006f48:	f000 fcb4 	bl	80078b4 <_init>
 8006f4c:	1b64      	subs	r4, r4, r5
 8006f4e:	10a4      	asrs	r4, r4, #2
 8006f50:	2600      	movs	r6, #0
 8006f52:	42a6      	cmp	r6, r4
 8006f54:	d105      	bne.n	8006f62 <__libc_init_array+0x2e>
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f5c:	4798      	blx	r3
 8006f5e:	3601      	adds	r6, #1
 8006f60:	e7ee      	b.n	8006f40 <__libc_init_array+0xc>
 8006f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f66:	4798      	blx	r3
 8006f68:	3601      	adds	r6, #1
 8006f6a:	e7f2      	b.n	8006f52 <__libc_init_array+0x1e>
 8006f6c:	080079f0 	.word	0x080079f0
 8006f70:	080079f0 	.word	0x080079f0
 8006f74:	080079f0 	.word	0x080079f0
 8006f78:	080079f4 	.word	0x080079f4

08006f7c <malloc>:
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <malloc+0xc>)
 8006f7e:	4601      	mov	r1, r0
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	f000 b88d 	b.w	80070a0 <_malloc_r>
 8006f86:	bf00      	nop
 8006f88:	200004d8 	.word	0x200004d8

08006f8c <free>:
 8006f8c:	4b02      	ldr	r3, [pc, #8]	; (8006f98 <free+0xc>)
 8006f8e:	4601      	mov	r1, r0
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	f000 b819 	b.w	8006fc8 <_free_r>
 8006f96:	bf00      	nop
 8006f98:	200004d8 	.word	0x200004d8

08006f9c <memcpy>:
 8006f9c:	440a      	add	r2, r1
 8006f9e:	4291      	cmp	r1, r2
 8006fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fa4:	d100      	bne.n	8006fa8 <memcpy+0xc>
 8006fa6:	4770      	bx	lr
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fb2:	4291      	cmp	r1, r2
 8006fb4:	d1f9      	bne.n	8006faa <memcpy+0xe>
 8006fb6:	bd10      	pop	{r4, pc}

08006fb8 <memset>:
 8006fb8:	4402      	add	r2, r0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d100      	bne.n	8006fc2 <memset+0xa>
 8006fc0:	4770      	bx	lr
 8006fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fc6:	e7f9      	b.n	8006fbc <memset+0x4>

08006fc8 <_free_r>:
 8006fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fca:	2900      	cmp	r1, #0
 8006fcc:	d044      	beq.n	8007058 <_free_r+0x90>
 8006fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd2:	9001      	str	r0, [sp, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006fda:	bfb8      	it	lt
 8006fdc:	18e4      	addlt	r4, r4, r3
 8006fde:	f000 f91b 	bl	8007218 <__malloc_lock>
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	; (800705c <_free_r+0x94>)
 8006fe4:	9801      	ldr	r0, [sp, #4]
 8006fe6:	6813      	ldr	r3, [r2, #0]
 8006fe8:	b933      	cbnz	r3, 8006ff8 <_free_r+0x30>
 8006fea:	6063      	str	r3, [r4, #4]
 8006fec:	6014      	str	r4, [r2, #0]
 8006fee:	b003      	add	sp, #12
 8006ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ff4:	f000 b916 	b.w	8007224 <__malloc_unlock>
 8006ff8:	42a3      	cmp	r3, r4
 8006ffa:	d908      	bls.n	800700e <_free_r+0x46>
 8006ffc:	6825      	ldr	r5, [r4, #0]
 8006ffe:	1961      	adds	r1, r4, r5
 8007000:	428b      	cmp	r3, r1
 8007002:	bf01      	itttt	eq
 8007004:	6819      	ldreq	r1, [r3, #0]
 8007006:	685b      	ldreq	r3, [r3, #4]
 8007008:	1949      	addeq	r1, r1, r5
 800700a:	6021      	streq	r1, [r4, #0]
 800700c:	e7ed      	b.n	8006fea <_free_r+0x22>
 800700e:	461a      	mov	r2, r3
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b10b      	cbz	r3, 8007018 <_free_r+0x50>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d9fa      	bls.n	800700e <_free_r+0x46>
 8007018:	6811      	ldr	r1, [r2, #0]
 800701a:	1855      	adds	r5, r2, r1
 800701c:	42a5      	cmp	r5, r4
 800701e:	d10b      	bne.n	8007038 <_free_r+0x70>
 8007020:	6824      	ldr	r4, [r4, #0]
 8007022:	4421      	add	r1, r4
 8007024:	1854      	adds	r4, r2, r1
 8007026:	42a3      	cmp	r3, r4
 8007028:	6011      	str	r1, [r2, #0]
 800702a:	d1e0      	bne.n	8006fee <_free_r+0x26>
 800702c:	681c      	ldr	r4, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	6053      	str	r3, [r2, #4]
 8007032:	4421      	add	r1, r4
 8007034:	6011      	str	r1, [r2, #0]
 8007036:	e7da      	b.n	8006fee <_free_r+0x26>
 8007038:	d902      	bls.n	8007040 <_free_r+0x78>
 800703a:	230c      	movs	r3, #12
 800703c:	6003      	str	r3, [r0, #0]
 800703e:	e7d6      	b.n	8006fee <_free_r+0x26>
 8007040:	6825      	ldr	r5, [r4, #0]
 8007042:	1961      	adds	r1, r4, r5
 8007044:	428b      	cmp	r3, r1
 8007046:	bf04      	itt	eq
 8007048:	6819      	ldreq	r1, [r3, #0]
 800704a:	685b      	ldreq	r3, [r3, #4]
 800704c:	6063      	str	r3, [r4, #4]
 800704e:	bf04      	itt	eq
 8007050:	1949      	addeq	r1, r1, r5
 8007052:	6021      	streq	r1, [r4, #0]
 8007054:	6054      	str	r4, [r2, #4]
 8007056:	e7ca      	b.n	8006fee <_free_r+0x26>
 8007058:	b003      	add	sp, #12
 800705a:	bd30      	pop	{r4, r5, pc}
 800705c:	20000b9c 	.word	0x20000b9c

08007060 <sbrk_aligned>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	4e0e      	ldr	r6, [pc, #56]	; (800709c <sbrk_aligned+0x3c>)
 8007064:	460c      	mov	r4, r1
 8007066:	6831      	ldr	r1, [r6, #0]
 8007068:	4605      	mov	r5, r0
 800706a:	b911      	cbnz	r1, 8007072 <sbrk_aligned+0x12>
 800706c:	f000 f894 	bl	8007198 <_sbrk_r>
 8007070:	6030      	str	r0, [r6, #0]
 8007072:	4621      	mov	r1, r4
 8007074:	4628      	mov	r0, r5
 8007076:	f000 f88f 	bl	8007198 <_sbrk_r>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	d00a      	beq.n	8007094 <sbrk_aligned+0x34>
 800707e:	1cc4      	adds	r4, r0, #3
 8007080:	f024 0403 	bic.w	r4, r4, #3
 8007084:	42a0      	cmp	r0, r4
 8007086:	d007      	beq.n	8007098 <sbrk_aligned+0x38>
 8007088:	1a21      	subs	r1, r4, r0
 800708a:	4628      	mov	r0, r5
 800708c:	f000 f884 	bl	8007198 <_sbrk_r>
 8007090:	3001      	adds	r0, #1
 8007092:	d101      	bne.n	8007098 <sbrk_aligned+0x38>
 8007094:	f04f 34ff 	mov.w	r4, #4294967295
 8007098:	4620      	mov	r0, r4
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	20000ba0 	.word	0x20000ba0

080070a0 <_malloc_r>:
 80070a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a4:	1ccd      	adds	r5, r1, #3
 80070a6:	f025 0503 	bic.w	r5, r5, #3
 80070aa:	3508      	adds	r5, #8
 80070ac:	2d0c      	cmp	r5, #12
 80070ae:	bf38      	it	cc
 80070b0:	250c      	movcc	r5, #12
 80070b2:	2d00      	cmp	r5, #0
 80070b4:	4607      	mov	r7, r0
 80070b6:	db01      	blt.n	80070bc <_malloc_r+0x1c>
 80070b8:	42a9      	cmp	r1, r5
 80070ba:	d905      	bls.n	80070c8 <_malloc_r+0x28>
 80070bc:	230c      	movs	r3, #12
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	2600      	movs	r6, #0
 80070c2:	4630      	mov	r0, r6
 80070c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c8:	4e2e      	ldr	r6, [pc, #184]	; (8007184 <_malloc_r+0xe4>)
 80070ca:	f000 f8a5 	bl	8007218 <__malloc_lock>
 80070ce:	6833      	ldr	r3, [r6, #0]
 80070d0:	461c      	mov	r4, r3
 80070d2:	bb34      	cbnz	r4, 8007122 <_malloc_r+0x82>
 80070d4:	4629      	mov	r1, r5
 80070d6:	4638      	mov	r0, r7
 80070d8:	f7ff ffc2 	bl	8007060 <sbrk_aligned>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	4604      	mov	r4, r0
 80070e0:	d14d      	bne.n	800717e <_malloc_r+0xde>
 80070e2:	6834      	ldr	r4, [r6, #0]
 80070e4:	4626      	mov	r6, r4
 80070e6:	2e00      	cmp	r6, #0
 80070e8:	d140      	bne.n	800716c <_malloc_r+0xcc>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	4631      	mov	r1, r6
 80070ee:	4638      	mov	r0, r7
 80070f0:	eb04 0803 	add.w	r8, r4, r3
 80070f4:	f000 f850 	bl	8007198 <_sbrk_r>
 80070f8:	4580      	cmp	r8, r0
 80070fa:	d13a      	bne.n	8007172 <_malloc_r+0xd2>
 80070fc:	6821      	ldr	r1, [r4, #0]
 80070fe:	3503      	adds	r5, #3
 8007100:	1a6d      	subs	r5, r5, r1
 8007102:	f025 0503 	bic.w	r5, r5, #3
 8007106:	3508      	adds	r5, #8
 8007108:	2d0c      	cmp	r5, #12
 800710a:	bf38      	it	cc
 800710c:	250c      	movcc	r5, #12
 800710e:	4629      	mov	r1, r5
 8007110:	4638      	mov	r0, r7
 8007112:	f7ff ffa5 	bl	8007060 <sbrk_aligned>
 8007116:	3001      	adds	r0, #1
 8007118:	d02b      	beq.n	8007172 <_malloc_r+0xd2>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	442b      	add	r3, r5
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	e00e      	b.n	8007140 <_malloc_r+0xa0>
 8007122:	6822      	ldr	r2, [r4, #0]
 8007124:	1b52      	subs	r2, r2, r5
 8007126:	d41e      	bmi.n	8007166 <_malloc_r+0xc6>
 8007128:	2a0b      	cmp	r2, #11
 800712a:	d916      	bls.n	800715a <_malloc_r+0xba>
 800712c:	1961      	adds	r1, r4, r5
 800712e:	42a3      	cmp	r3, r4
 8007130:	6025      	str	r5, [r4, #0]
 8007132:	bf18      	it	ne
 8007134:	6059      	strne	r1, [r3, #4]
 8007136:	6863      	ldr	r3, [r4, #4]
 8007138:	bf08      	it	eq
 800713a:	6031      	streq	r1, [r6, #0]
 800713c:	5162      	str	r2, [r4, r5]
 800713e:	604b      	str	r3, [r1, #4]
 8007140:	4638      	mov	r0, r7
 8007142:	f104 060b 	add.w	r6, r4, #11
 8007146:	f000 f86d 	bl	8007224 <__malloc_unlock>
 800714a:	f026 0607 	bic.w	r6, r6, #7
 800714e:	1d23      	adds	r3, r4, #4
 8007150:	1af2      	subs	r2, r6, r3
 8007152:	d0b6      	beq.n	80070c2 <_malloc_r+0x22>
 8007154:	1b9b      	subs	r3, r3, r6
 8007156:	50a3      	str	r3, [r4, r2]
 8007158:	e7b3      	b.n	80070c2 <_malloc_r+0x22>
 800715a:	6862      	ldr	r2, [r4, #4]
 800715c:	42a3      	cmp	r3, r4
 800715e:	bf0c      	ite	eq
 8007160:	6032      	streq	r2, [r6, #0]
 8007162:	605a      	strne	r2, [r3, #4]
 8007164:	e7ec      	b.n	8007140 <_malloc_r+0xa0>
 8007166:	4623      	mov	r3, r4
 8007168:	6864      	ldr	r4, [r4, #4]
 800716a:	e7b2      	b.n	80070d2 <_malloc_r+0x32>
 800716c:	4634      	mov	r4, r6
 800716e:	6876      	ldr	r6, [r6, #4]
 8007170:	e7b9      	b.n	80070e6 <_malloc_r+0x46>
 8007172:	230c      	movs	r3, #12
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4638      	mov	r0, r7
 8007178:	f000 f854 	bl	8007224 <__malloc_unlock>
 800717c:	e7a1      	b.n	80070c2 <_malloc_r+0x22>
 800717e:	6025      	str	r5, [r4, #0]
 8007180:	e7de      	b.n	8007140 <_malloc_r+0xa0>
 8007182:	bf00      	nop
 8007184:	20000b9c 	.word	0x20000b9c

08007188 <realloc>:
 8007188:	4b02      	ldr	r3, [pc, #8]	; (8007194 <realloc+0xc>)
 800718a:	460a      	mov	r2, r1
 800718c:	4601      	mov	r1, r0
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	f000 b84e 	b.w	8007230 <_realloc_r>
 8007194:	200004d8 	.word	0x200004d8

08007198 <_sbrk_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4d06      	ldr	r5, [pc, #24]	; (80071b4 <_sbrk_r+0x1c>)
 800719c:	2300      	movs	r3, #0
 800719e:	4604      	mov	r4, r0
 80071a0:	4608      	mov	r0, r1
 80071a2:	602b      	str	r3, [r5, #0]
 80071a4:	f7fb fb12 	bl	80027cc <_sbrk>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_sbrk_r+0x1a>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_sbrk_r+0x1a>
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	20000ba4 	.word	0x20000ba4

080071b8 <siprintf>:
 80071b8:	b40e      	push	{r1, r2, r3}
 80071ba:	b500      	push	{lr}
 80071bc:	b09c      	sub	sp, #112	; 0x70
 80071be:	ab1d      	add	r3, sp, #116	; 0x74
 80071c0:	9002      	str	r0, [sp, #8]
 80071c2:	9006      	str	r0, [sp, #24]
 80071c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071c8:	4809      	ldr	r0, [pc, #36]	; (80071f0 <siprintf+0x38>)
 80071ca:	9107      	str	r1, [sp, #28]
 80071cc:	9104      	str	r1, [sp, #16]
 80071ce:	4909      	ldr	r1, [pc, #36]	; (80071f4 <siprintf+0x3c>)
 80071d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d4:	9105      	str	r1, [sp, #20]
 80071d6:	6800      	ldr	r0, [r0, #0]
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	a902      	add	r1, sp, #8
 80071dc:	f000 f8b2 	bl	8007344 <_svfiprintf_r>
 80071e0:	9b02      	ldr	r3, [sp, #8]
 80071e2:	2200      	movs	r2, #0
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	b01c      	add	sp, #112	; 0x70
 80071e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071ec:	b003      	add	sp, #12
 80071ee:	4770      	bx	lr
 80071f0:	200004d8 	.word	0x200004d8
 80071f4:	ffff0208 	.word	0xffff0208

080071f8 <strcat>:
 80071f8:	b510      	push	{r4, lr}
 80071fa:	4602      	mov	r2, r0
 80071fc:	7814      	ldrb	r4, [r2, #0]
 80071fe:	4613      	mov	r3, r2
 8007200:	3201      	adds	r2, #1
 8007202:	2c00      	cmp	r4, #0
 8007204:	d1fa      	bne.n	80071fc <strcat+0x4>
 8007206:	3b01      	subs	r3, #1
 8007208:	f811 2b01 	ldrb.w	r2, [r1], #1
 800720c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007210:	2a00      	cmp	r2, #0
 8007212:	d1f9      	bne.n	8007208 <strcat+0x10>
 8007214:	bd10      	pop	{r4, pc}
	...

08007218 <__malloc_lock>:
 8007218:	4801      	ldr	r0, [pc, #4]	; (8007220 <__malloc_lock+0x8>)
 800721a:	f000 bb27 	b.w	800786c <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	20000ba8 	.word	0x20000ba8

08007224 <__malloc_unlock>:
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <__malloc_unlock+0x8>)
 8007226:	f000 bb22 	b.w	800786e <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	20000ba8 	.word	0x20000ba8

08007230 <_realloc_r>:
 8007230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007234:	4680      	mov	r8, r0
 8007236:	4614      	mov	r4, r2
 8007238:	460e      	mov	r6, r1
 800723a:	b921      	cbnz	r1, 8007246 <_realloc_r+0x16>
 800723c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007240:	4611      	mov	r1, r2
 8007242:	f7ff bf2d 	b.w	80070a0 <_malloc_r>
 8007246:	b92a      	cbnz	r2, 8007254 <_realloc_r+0x24>
 8007248:	f7ff febe 	bl	8006fc8 <_free_r>
 800724c:	4625      	mov	r5, r4
 800724e:	4628      	mov	r0, r5
 8007250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007254:	f000 fb26 	bl	80078a4 <_malloc_usable_size_r>
 8007258:	4284      	cmp	r4, r0
 800725a:	4607      	mov	r7, r0
 800725c:	d802      	bhi.n	8007264 <_realloc_r+0x34>
 800725e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007262:	d812      	bhi.n	800728a <_realloc_r+0x5a>
 8007264:	4621      	mov	r1, r4
 8007266:	4640      	mov	r0, r8
 8007268:	f7ff ff1a 	bl	80070a0 <_malloc_r>
 800726c:	4605      	mov	r5, r0
 800726e:	2800      	cmp	r0, #0
 8007270:	d0ed      	beq.n	800724e <_realloc_r+0x1e>
 8007272:	42bc      	cmp	r4, r7
 8007274:	4622      	mov	r2, r4
 8007276:	4631      	mov	r1, r6
 8007278:	bf28      	it	cs
 800727a:	463a      	movcs	r2, r7
 800727c:	f7ff fe8e 	bl	8006f9c <memcpy>
 8007280:	4631      	mov	r1, r6
 8007282:	4640      	mov	r0, r8
 8007284:	f7ff fea0 	bl	8006fc8 <_free_r>
 8007288:	e7e1      	b.n	800724e <_realloc_r+0x1e>
 800728a:	4635      	mov	r5, r6
 800728c:	e7df      	b.n	800724e <_realloc_r+0x1e>

0800728e <__ssputs_r>:
 800728e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007292:	688e      	ldr	r6, [r1, #8]
 8007294:	429e      	cmp	r6, r3
 8007296:	4682      	mov	sl, r0
 8007298:	460c      	mov	r4, r1
 800729a:	4690      	mov	r8, r2
 800729c:	461f      	mov	r7, r3
 800729e:	d838      	bhi.n	8007312 <__ssputs_r+0x84>
 80072a0:	898a      	ldrh	r2, [r1, #12]
 80072a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072a6:	d032      	beq.n	800730e <__ssputs_r+0x80>
 80072a8:	6825      	ldr	r5, [r4, #0]
 80072aa:	6909      	ldr	r1, [r1, #16]
 80072ac:	eba5 0901 	sub.w	r9, r5, r1
 80072b0:	6965      	ldr	r5, [r4, #20]
 80072b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072ba:	3301      	adds	r3, #1
 80072bc:	444b      	add	r3, r9
 80072be:	106d      	asrs	r5, r5, #1
 80072c0:	429d      	cmp	r5, r3
 80072c2:	bf38      	it	cc
 80072c4:	461d      	movcc	r5, r3
 80072c6:	0553      	lsls	r3, r2, #21
 80072c8:	d531      	bpl.n	800732e <__ssputs_r+0xa0>
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7ff fee8 	bl	80070a0 <_malloc_r>
 80072d0:	4606      	mov	r6, r0
 80072d2:	b950      	cbnz	r0, 80072ea <__ssputs_r+0x5c>
 80072d4:	230c      	movs	r3, #12
 80072d6:	f8ca 3000 	str.w	r3, [sl]
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e0:	81a3      	strh	r3, [r4, #12]
 80072e2:	f04f 30ff 	mov.w	r0, #4294967295
 80072e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ea:	6921      	ldr	r1, [r4, #16]
 80072ec:	464a      	mov	r2, r9
 80072ee:	f7ff fe55 	bl	8006f9c <memcpy>
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	6126      	str	r6, [r4, #16]
 8007300:	6165      	str	r5, [r4, #20]
 8007302:	444e      	add	r6, r9
 8007304:	eba5 0509 	sub.w	r5, r5, r9
 8007308:	6026      	str	r6, [r4, #0]
 800730a:	60a5      	str	r5, [r4, #8]
 800730c:	463e      	mov	r6, r7
 800730e:	42be      	cmp	r6, r7
 8007310:	d900      	bls.n	8007314 <__ssputs_r+0x86>
 8007312:	463e      	mov	r6, r7
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	4632      	mov	r2, r6
 8007318:	4641      	mov	r1, r8
 800731a:	f000 faa9 	bl	8007870 <memmove>
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	1b9b      	subs	r3, r3, r6
 8007322:	60a3      	str	r3, [r4, #8]
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	4433      	add	r3, r6
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	2000      	movs	r0, #0
 800732c:	e7db      	b.n	80072e6 <__ssputs_r+0x58>
 800732e:	462a      	mov	r2, r5
 8007330:	f7ff ff7e 	bl	8007230 <_realloc_r>
 8007334:	4606      	mov	r6, r0
 8007336:	2800      	cmp	r0, #0
 8007338:	d1e1      	bne.n	80072fe <__ssputs_r+0x70>
 800733a:	6921      	ldr	r1, [r4, #16]
 800733c:	4650      	mov	r0, sl
 800733e:	f7ff fe43 	bl	8006fc8 <_free_r>
 8007342:	e7c7      	b.n	80072d4 <__ssputs_r+0x46>

08007344 <_svfiprintf_r>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	4698      	mov	r8, r3
 800734a:	898b      	ldrh	r3, [r1, #12]
 800734c:	061b      	lsls	r3, r3, #24
 800734e:	b09d      	sub	sp, #116	; 0x74
 8007350:	4607      	mov	r7, r0
 8007352:	460d      	mov	r5, r1
 8007354:	4614      	mov	r4, r2
 8007356:	d50e      	bpl.n	8007376 <_svfiprintf_r+0x32>
 8007358:	690b      	ldr	r3, [r1, #16]
 800735a:	b963      	cbnz	r3, 8007376 <_svfiprintf_r+0x32>
 800735c:	2140      	movs	r1, #64	; 0x40
 800735e:	f7ff fe9f 	bl	80070a0 <_malloc_r>
 8007362:	6028      	str	r0, [r5, #0]
 8007364:	6128      	str	r0, [r5, #16]
 8007366:	b920      	cbnz	r0, 8007372 <_svfiprintf_r+0x2e>
 8007368:	230c      	movs	r3, #12
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	e0d1      	b.n	8007516 <_svfiprintf_r+0x1d2>
 8007372:	2340      	movs	r3, #64	; 0x40
 8007374:	616b      	str	r3, [r5, #20]
 8007376:	2300      	movs	r3, #0
 8007378:	9309      	str	r3, [sp, #36]	; 0x24
 800737a:	2320      	movs	r3, #32
 800737c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007380:	f8cd 800c 	str.w	r8, [sp, #12]
 8007384:	2330      	movs	r3, #48	; 0x30
 8007386:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007530 <_svfiprintf_r+0x1ec>
 800738a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800738e:	f04f 0901 	mov.w	r9, #1
 8007392:	4623      	mov	r3, r4
 8007394:	469a      	mov	sl, r3
 8007396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800739a:	b10a      	cbz	r2, 80073a0 <_svfiprintf_r+0x5c>
 800739c:	2a25      	cmp	r2, #37	; 0x25
 800739e:	d1f9      	bne.n	8007394 <_svfiprintf_r+0x50>
 80073a0:	ebba 0b04 	subs.w	fp, sl, r4
 80073a4:	d00b      	beq.n	80073be <_svfiprintf_r+0x7a>
 80073a6:	465b      	mov	r3, fp
 80073a8:	4622      	mov	r2, r4
 80073aa:	4629      	mov	r1, r5
 80073ac:	4638      	mov	r0, r7
 80073ae:	f7ff ff6e 	bl	800728e <__ssputs_r>
 80073b2:	3001      	adds	r0, #1
 80073b4:	f000 80aa 	beq.w	800750c <_svfiprintf_r+0x1c8>
 80073b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ba:	445a      	add	r2, fp
 80073bc:	9209      	str	r2, [sp, #36]	; 0x24
 80073be:	f89a 3000 	ldrb.w	r3, [sl]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 80a2 	beq.w	800750c <_svfiprintf_r+0x1c8>
 80073c8:	2300      	movs	r3, #0
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295
 80073ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073d2:	f10a 0a01 	add.w	sl, sl, #1
 80073d6:	9304      	str	r3, [sp, #16]
 80073d8:	9307      	str	r3, [sp, #28]
 80073da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073de:	931a      	str	r3, [sp, #104]	; 0x68
 80073e0:	4654      	mov	r4, sl
 80073e2:	2205      	movs	r2, #5
 80073e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e8:	4851      	ldr	r0, [pc, #324]	; (8007530 <_svfiprintf_r+0x1ec>)
 80073ea:	f7f8 fef9 	bl	80001e0 <memchr>
 80073ee:	9a04      	ldr	r2, [sp, #16]
 80073f0:	b9d8      	cbnz	r0, 800742a <_svfiprintf_r+0xe6>
 80073f2:	06d0      	lsls	r0, r2, #27
 80073f4:	bf44      	itt	mi
 80073f6:	2320      	movmi	r3, #32
 80073f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073fc:	0711      	lsls	r1, r2, #28
 80073fe:	bf44      	itt	mi
 8007400:	232b      	movmi	r3, #43	; 0x2b
 8007402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007406:	f89a 3000 	ldrb.w	r3, [sl]
 800740a:	2b2a      	cmp	r3, #42	; 0x2a
 800740c:	d015      	beq.n	800743a <_svfiprintf_r+0xf6>
 800740e:	9a07      	ldr	r2, [sp, #28]
 8007410:	4654      	mov	r4, sl
 8007412:	2000      	movs	r0, #0
 8007414:	f04f 0c0a 	mov.w	ip, #10
 8007418:	4621      	mov	r1, r4
 800741a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800741e:	3b30      	subs	r3, #48	; 0x30
 8007420:	2b09      	cmp	r3, #9
 8007422:	d94e      	bls.n	80074c2 <_svfiprintf_r+0x17e>
 8007424:	b1b0      	cbz	r0, 8007454 <_svfiprintf_r+0x110>
 8007426:	9207      	str	r2, [sp, #28]
 8007428:	e014      	b.n	8007454 <_svfiprintf_r+0x110>
 800742a:	eba0 0308 	sub.w	r3, r0, r8
 800742e:	fa09 f303 	lsl.w	r3, r9, r3
 8007432:	4313      	orrs	r3, r2
 8007434:	9304      	str	r3, [sp, #16]
 8007436:	46a2      	mov	sl, r4
 8007438:	e7d2      	b.n	80073e0 <_svfiprintf_r+0x9c>
 800743a:	9b03      	ldr	r3, [sp, #12]
 800743c:	1d19      	adds	r1, r3, #4
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	9103      	str	r1, [sp, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	bfbb      	ittet	lt
 8007446:	425b      	neglt	r3, r3
 8007448:	f042 0202 	orrlt.w	r2, r2, #2
 800744c:	9307      	strge	r3, [sp, #28]
 800744e:	9307      	strlt	r3, [sp, #28]
 8007450:	bfb8      	it	lt
 8007452:	9204      	strlt	r2, [sp, #16]
 8007454:	7823      	ldrb	r3, [r4, #0]
 8007456:	2b2e      	cmp	r3, #46	; 0x2e
 8007458:	d10c      	bne.n	8007474 <_svfiprintf_r+0x130>
 800745a:	7863      	ldrb	r3, [r4, #1]
 800745c:	2b2a      	cmp	r3, #42	; 0x2a
 800745e:	d135      	bne.n	80074cc <_svfiprintf_r+0x188>
 8007460:	9b03      	ldr	r3, [sp, #12]
 8007462:	1d1a      	adds	r2, r3, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	9203      	str	r2, [sp, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	bfb8      	it	lt
 800746c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007470:	3402      	adds	r4, #2
 8007472:	9305      	str	r3, [sp, #20]
 8007474:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007540 <_svfiprintf_r+0x1fc>
 8007478:	7821      	ldrb	r1, [r4, #0]
 800747a:	2203      	movs	r2, #3
 800747c:	4650      	mov	r0, sl
 800747e:	f7f8 feaf 	bl	80001e0 <memchr>
 8007482:	b140      	cbz	r0, 8007496 <_svfiprintf_r+0x152>
 8007484:	2340      	movs	r3, #64	; 0x40
 8007486:	eba0 000a 	sub.w	r0, r0, sl
 800748a:	fa03 f000 	lsl.w	r0, r3, r0
 800748e:	9b04      	ldr	r3, [sp, #16]
 8007490:	4303      	orrs	r3, r0
 8007492:	3401      	adds	r4, #1
 8007494:	9304      	str	r3, [sp, #16]
 8007496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749a:	4826      	ldr	r0, [pc, #152]	; (8007534 <_svfiprintf_r+0x1f0>)
 800749c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074a0:	2206      	movs	r2, #6
 80074a2:	f7f8 fe9d 	bl	80001e0 <memchr>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d038      	beq.n	800751c <_svfiprintf_r+0x1d8>
 80074aa:	4b23      	ldr	r3, [pc, #140]	; (8007538 <_svfiprintf_r+0x1f4>)
 80074ac:	bb1b      	cbnz	r3, 80074f6 <_svfiprintf_r+0x1b2>
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	3307      	adds	r3, #7
 80074b2:	f023 0307 	bic.w	r3, r3, #7
 80074b6:	3308      	adds	r3, #8
 80074b8:	9303      	str	r3, [sp, #12]
 80074ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074bc:	4433      	add	r3, r6
 80074be:	9309      	str	r3, [sp, #36]	; 0x24
 80074c0:	e767      	b.n	8007392 <_svfiprintf_r+0x4e>
 80074c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074c6:	460c      	mov	r4, r1
 80074c8:	2001      	movs	r0, #1
 80074ca:	e7a5      	b.n	8007418 <_svfiprintf_r+0xd4>
 80074cc:	2300      	movs	r3, #0
 80074ce:	3401      	adds	r4, #1
 80074d0:	9305      	str	r3, [sp, #20]
 80074d2:	4619      	mov	r1, r3
 80074d4:	f04f 0c0a 	mov.w	ip, #10
 80074d8:	4620      	mov	r0, r4
 80074da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074de:	3a30      	subs	r2, #48	; 0x30
 80074e0:	2a09      	cmp	r2, #9
 80074e2:	d903      	bls.n	80074ec <_svfiprintf_r+0x1a8>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0c5      	beq.n	8007474 <_svfiprintf_r+0x130>
 80074e8:	9105      	str	r1, [sp, #20]
 80074ea:	e7c3      	b.n	8007474 <_svfiprintf_r+0x130>
 80074ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80074f0:	4604      	mov	r4, r0
 80074f2:	2301      	movs	r3, #1
 80074f4:	e7f0      	b.n	80074d8 <_svfiprintf_r+0x194>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4b0f      	ldr	r3, [pc, #60]	; (800753c <_svfiprintf_r+0x1f8>)
 80074fe:	a904      	add	r1, sp, #16
 8007500:	4638      	mov	r0, r7
 8007502:	f3af 8000 	nop.w
 8007506:	1c42      	adds	r2, r0, #1
 8007508:	4606      	mov	r6, r0
 800750a:	d1d6      	bne.n	80074ba <_svfiprintf_r+0x176>
 800750c:	89ab      	ldrh	r3, [r5, #12]
 800750e:	065b      	lsls	r3, r3, #25
 8007510:	f53f af2c 	bmi.w	800736c <_svfiprintf_r+0x28>
 8007514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007516:	b01d      	add	sp, #116	; 0x74
 8007518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751c:	ab03      	add	r3, sp, #12
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	462a      	mov	r2, r5
 8007522:	4b06      	ldr	r3, [pc, #24]	; (800753c <_svfiprintf_r+0x1f8>)
 8007524:	a904      	add	r1, sp, #16
 8007526:	4638      	mov	r0, r7
 8007528:	f000 f87a 	bl	8007620 <_printf_i>
 800752c:	e7eb      	b.n	8007506 <_svfiprintf_r+0x1c2>
 800752e:	bf00      	nop
 8007530:	080079b5 	.word	0x080079b5
 8007534:	080079bf 	.word	0x080079bf
 8007538:	00000000 	.word	0x00000000
 800753c:	0800728f 	.word	0x0800728f
 8007540:	080079bb 	.word	0x080079bb

08007544 <_printf_common>:
 8007544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007548:	4616      	mov	r6, r2
 800754a:	4699      	mov	r9, r3
 800754c:	688a      	ldr	r2, [r1, #8]
 800754e:	690b      	ldr	r3, [r1, #16]
 8007550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007554:	4293      	cmp	r3, r2
 8007556:	bfb8      	it	lt
 8007558:	4613      	movlt	r3, r2
 800755a:	6033      	str	r3, [r6, #0]
 800755c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007560:	4607      	mov	r7, r0
 8007562:	460c      	mov	r4, r1
 8007564:	b10a      	cbz	r2, 800756a <_printf_common+0x26>
 8007566:	3301      	adds	r3, #1
 8007568:	6033      	str	r3, [r6, #0]
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	0699      	lsls	r1, r3, #26
 800756e:	bf42      	ittt	mi
 8007570:	6833      	ldrmi	r3, [r6, #0]
 8007572:	3302      	addmi	r3, #2
 8007574:	6033      	strmi	r3, [r6, #0]
 8007576:	6825      	ldr	r5, [r4, #0]
 8007578:	f015 0506 	ands.w	r5, r5, #6
 800757c:	d106      	bne.n	800758c <_printf_common+0x48>
 800757e:	f104 0a19 	add.w	sl, r4, #25
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	6832      	ldr	r2, [r6, #0]
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	42ab      	cmp	r3, r5
 800758a:	dc26      	bgt.n	80075da <_printf_common+0x96>
 800758c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007590:	1e13      	subs	r3, r2, #0
 8007592:	6822      	ldr	r2, [r4, #0]
 8007594:	bf18      	it	ne
 8007596:	2301      	movne	r3, #1
 8007598:	0692      	lsls	r2, r2, #26
 800759a:	d42b      	bmi.n	80075f4 <_printf_common+0xb0>
 800759c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075a0:	4649      	mov	r1, r9
 80075a2:	4638      	mov	r0, r7
 80075a4:	47c0      	blx	r8
 80075a6:	3001      	adds	r0, #1
 80075a8:	d01e      	beq.n	80075e8 <_printf_common+0xa4>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	68e5      	ldr	r5, [r4, #12]
 80075ae:	6832      	ldr	r2, [r6, #0]
 80075b0:	f003 0306 	and.w	r3, r3, #6
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	bf08      	it	eq
 80075b8:	1aad      	subeq	r5, r5, r2
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	6922      	ldr	r2, [r4, #16]
 80075be:	bf0c      	ite	eq
 80075c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075c4:	2500      	movne	r5, #0
 80075c6:	4293      	cmp	r3, r2
 80075c8:	bfc4      	itt	gt
 80075ca:	1a9b      	subgt	r3, r3, r2
 80075cc:	18ed      	addgt	r5, r5, r3
 80075ce:	2600      	movs	r6, #0
 80075d0:	341a      	adds	r4, #26
 80075d2:	42b5      	cmp	r5, r6
 80075d4:	d11a      	bne.n	800760c <_printf_common+0xc8>
 80075d6:	2000      	movs	r0, #0
 80075d8:	e008      	b.n	80075ec <_printf_common+0xa8>
 80075da:	2301      	movs	r3, #1
 80075dc:	4652      	mov	r2, sl
 80075de:	4649      	mov	r1, r9
 80075e0:	4638      	mov	r0, r7
 80075e2:	47c0      	blx	r8
 80075e4:	3001      	adds	r0, #1
 80075e6:	d103      	bne.n	80075f0 <_printf_common+0xac>
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f0:	3501      	adds	r5, #1
 80075f2:	e7c6      	b.n	8007582 <_printf_common+0x3e>
 80075f4:	18e1      	adds	r1, r4, r3
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	2030      	movs	r0, #48	; 0x30
 80075fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075fe:	4422      	add	r2, r4
 8007600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007608:	3302      	adds	r3, #2
 800760a:	e7c7      	b.n	800759c <_printf_common+0x58>
 800760c:	2301      	movs	r3, #1
 800760e:	4622      	mov	r2, r4
 8007610:	4649      	mov	r1, r9
 8007612:	4638      	mov	r0, r7
 8007614:	47c0      	blx	r8
 8007616:	3001      	adds	r0, #1
 8007618:	d0e6      	beq.n	80075e8 <_printf_common+0xa4>
 800761a:	3601      	adds	r6, #1
 800761c:	e7d9      	b.n	80075d2 <_printf_common+0x8e>
	...

08007620 <_printf_i>:
 8007620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007624:	7e0f      	ldrb	r7, [r1, #24]
 8007626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007628:	2f78      	cmp	r7, #120	; 0x78
 800762a:	4691      	mov	r9, r2
 800762c:	4680      	mov	r8, r0
 800762e:	460c      	mov	r4, r1
 8007630:	469a      	mov	sl, r3
 8007632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007636:	d807      	bhi.n	8007648 <_printf_i+0x28>
 8007638:	2f62      	cmp	r7, #98	; 0x62
 800763a:	d80a      	bhi.n	8007652 <_printf_i+0x32>
 800763c:	2f00      	cmp	r7, #0
 800763e:	f000 80d8 	beq.w	80077f2 <_printf_i+0x1d2>
 8007642:	2f58      	cmp	r7, #88	; 0x58
 8007644:	f000 80a3 	beq.w	800778e <_printf_i+0x16e>
 8007648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800764c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007650:	e03a      	b.n	80076c8 <_printf_i+0xa8>
 8007652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007656:	2b15      	cmp	r3, #21
 8007658:	d8f6      	bhi.n	8007648 <_printf_i+0x28>
 800765a:	a101      	add	r1, pc, #4	; (adr r1, 8007660 <_printf_i+0x40>)
 800765c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007660:	080076b9 	.word	0x080076b9
 8007664:	080076cd 	.word	0x080076cd
 8007668:	08007649 	.word	0x08007649
 800766c:	08007649 	.word	0x08007649
 8007670:	08007649 	.word	0x08007649
 8007674:	08007649 	.word	0x08007649
 8007678:	080076cd 	.word	0x080076cd
 800767c:	08007649 	.word	0x08007649
 8007680:	08007649 	.word	0x08007649
 8007684:	08007649 	.word	0x08007649
 8007688:	08007649 	.word	0x08007649
 800768c:	080077d9 	.word	0x080077d9
 8007690:	080076fd 	.word	0x080076fd
 8007694:	080077bb 	.word	0x080077bb
 8007698:	08007649 	.word	0x08007649
 800769c:	08007649 	.word	0x08007649
 80076a0:	080077fb 	.word	0x080077fb
 80076a4:	08007649 	.word	0x08007649
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	08007649 	.word	0x08007649
 80076b0:	08007649 	.word	0x08007649
 80076b4:	080077c3 	.word	0x080077c3
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	602a      	str	r2, [r5, #0]
 80076c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0a3      	b.n	8007814 <_printf_i+0x1f4>
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	6829      	ldr	r1, [r5, #0]
 80076d0:	0606      	lsls	r6, r0, #24
 80076d2:	f101 0304 	add.w	r3, r1, #4
 80076d6:	d50a      	bpl.n	80076ee <_printf_i+0xce>
 80076d8:	680e      	ldr	r6, [r1, #0]
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	2e00      	cmp	r6, #0
 80076de:	da03      	bge.n	80076e8 <_printf_i+0xc8>
 80076e0:	232d      	movs	r3, #45	; 0x2d
 80076e2:	4276      	negs	r6, r6
 80076e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e8:	485e      	ldr	r0, [pc, #376]	; (8007864 <_printf_i+0x244>)
 80076ea:	230a      	movs	r3, #10
 80076ec:	e019      	b.n	8007722 <_printf_i+0x102>
 80076ee:	680e      	ldr	r6, [r1, #0]
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076f6:	bf18      	it	ne
 80076f8:	b236      	sxthne	r6, r6
 80076fa:	e7ef      	b.n	80076dc <_printf_i+0xbc>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	6820      	ldr	r0, [r4, #0]
 8007700:	1d19      	adds	r1, r3, #4
 8007702:	6029      	str	r1, [r5, #0]
 8007704:	0601      	lsls	r1, r0, #24
 8007706:	d501      	bpl.n	800770c <_printf_i+0xec>
 8007708:	681e      	ldr	r6, [r3, #0]
 800770a:	e002      	b.n	8007712 <_printf_i+0xf2>
 800770c:	0646      	lsls	r6, r0, #25
 800770e:	d5fb      	bpl.n	8007708 <_printf_i+0xe8>
 8007710:	881e      	ldrh	r6, [r3, #0]
 8007712:	4854      	ldr	r0, [pc, #336]	; (8007864 <_printf_i+0x244>)
 8007714:	2f6f      	cmp	r7, #111	; 0x6f
 8007716:	bf0c      	ite	eq
 8007718:	2308      	moveq	r3, #8
 800771a:	230a      	movne	r3, #10
 800771c:	2100      	movs	r1, #0
 800771e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007722:	6865      	ldr	r5, [r4, #4]
 8007724:	60a5      	str	r5, [r4, #8]
 8007726:	2d00      	cmp	r5, #0
 8007728:	bfa2      	ittt	ge
 800772a:	6821      	ldrge	r1, [r4, #0]
 800772c:	f021 0104 	bicge.w	r1, r1, #4
 8007730:	6021      	strge	r1, [r4, #0]
 8007732:	b90e      	cbnz	r6, 8007738 <_printf_i+0x118>
 8007734:	2d00      	cmp	r5, #0
 8007736:	d04d      	beq.n	80077d4 <_printf_i+0x1b4>
 8007738:	4615      	mov	r5, r2
 800773a:	fbb6 f1f3 	udiv	r1, r6, r3
 800773e:	fb03 6711 	mls	r7, r3, r1, r6
 8007742:	5dc7      	ldrb	r7, [r0, r7]
 8007744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007748:	4637      	mov	r7, r6
 800774a:	42bb      	cmp	r3, r7
 800774c:	460e      	mov	r6, r1
 800774e:	d9f4      	bls.n	800773a <_printf_i+0x11a>
 8007750:	2b08      	cmp	r3, #8
 8007752:	d10b      	bne.n	800776c <_printf_i+0x14c>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	07de      	lsls	r6, r3, #31
 8007758:	d508      	bpl.n	800776c <_printf_i+0x14c>
 800775a:	6923      	ldr	r3, [r4, #16]
 800775c:	6861      	ldr	r1, [r4, #4]
 800775e:	4299      	cmp	r1, r3
 8007760:	bfde      	ittt	le
 8007762:	2330      	movle	r3, #48	; 0x30
 8007764:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007768:	f105 35ff 	addle.w	r5, r5, #4294967295
 800776c:	1b52      	subs	r2, r2, r5
 800776e:	6122      	str	r2, [r4, #16]
 8007770:	f8cd a000 	str.w	sl, [sp]
 8007774:	464b      	mov	r3, r9
 8007776:	aa03      	add	r2, sp, #12
 8007778:	4621      	mov	r1, r4
 800777a:	4640      	mov	r0, r8
 800777c:	f7ff fee2 	bl	8007544 <_printf_common>
 8007780:	3001      	adds	r0, #1
 8007782:	d14c      	bne.n	800781e <_printf_i+0x1fe>
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	b004      	add	sp, #16
 800778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778e:	4835      	ldr	r0, [pc, #212]	; (8007864 <_printf_i+0x244>)
 8007790:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007794:	6829      	ldr	r1, [r5, #0]
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	f851 6b04 	ldr.w	r6, [r1], #4
 800779c:	6029      	str	r1, [r5, #0]
 800779e:	061d      	lsls	r5, r3, #24
 80077a0:	d514      	bpl.n	80077cc <_printf_i+0x1ac>
 80077a2:	07df      	lsls	r7, r3, #31
 80077a4:	bf44      	itt	mi
 80077a6:	f043 0320 	orrmi.w	r3, r3, #32
 80077aa:	6023      	strmi	r3, [r4, #0]
 80077ac:	b91e      	cbnz	r6, 80077b6 <_printf_i+0x196>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	f023 0320 	bic.w	r3, r3, #32
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	2310      	movs	r3, #16
 80077b8:	e7b0      	b.n	800771c <_printf_i+0xfc>
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	f043 0320 	orr.w	r3, r3, #32
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	2378      	movs	r3, #120	; 0x78
 80077c4:	4828      	ldr	r0, [pc, #160]	; (8007868 <_printf_i+0x248>)
 80077c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ca:	e7e3      	b.n	8007794 <_printf_i+0x174>
 80077cc:	0659      	lsls	r1, r3, #25
 80077ce:	bf48      	it	mi
 80077d0:	b2b6      	uxthmi	r6, r6
 80077d2:	e7e6      	b.n	80077a2 <_printf_i+0x182>
 80077d4:	4615      	mov	r5, r2
 80077d6:	e7bb      	b.n	8007750 <_printf_i+0x130>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	6826      	ldr	r6, [r4, #0]
 80077dc:	6961      	ldr	r1, [r4, #20]
 80077de:	1d18      	adds	r0, r3, #4
 80077e0:	6028      	str	r0, [r5, #0]
 80077e2:	0635      	lsls	r5, r6, #24
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	d501      	bpl.n	80077ec <_printf_i+0x1cc>
 80077e8:	6019      	str	r1, [r3, #0]
 80077ea:	e002      	b.n	80077f2 <_printf_i+0x1d2>
 80077ec:	0670      	lsls	r0, r6, #25
 80077ee:	d5fb      	bpl.n	80077e8 <_printf_i+0x1c8>
 80077f0:	8019      	strh	r1, [r3, #0]
 80077f2:	2300      	movs	r3, #0
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	4615      	mov	r5, r2
 80077f8:	e7ba      	b.n	8007770 <_printf_i+0x150>
 80077fa:	682b      	ldr	r3, [r5, #0]
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	602a      	str	r2, [r5, #0]
 8007800:	681d      	ldr	r5, [r3, #0]
 8007802:	6862      	ldr	r2, [r4, #4]
 8007804:	2100      	movs	r1, #0
 8007806:	4628      	mov	r0, r5
 8007808:	f7f8 fcea 	bl	80001e0 <memchr>
 800780c:	b108      	cbz	r0, 8007812 <_printf_i+0x1f2>
 800780e:	1b40      	subs	r0, r0, r5
 8007810:	6060      	str	r0, [r4, #4]
 8007812:	6863      	ldr	r3, [r4, #4]
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	2300      	movs	r3, #0
 8007818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800781c:	e7a8      	b.n	8007770 <_printf_i+0x150>
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	462a      	mov	r2, r5
 8007822:	4649      	mov	r1, r9
 8007824:	4640      	mov	r0, r8
 8007826:	47d0      	blx	sl
 8007828:	3001      	adds	r0, #1
 800782a:	d0ab      	beq.n	8007784 <_printf_i+0x164>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	079b      	lsls	r3, r3, #30
 8007830:	d413      	bmi.n	800785a <_printf_i+0x23a>
 8007832:	68e0      	ldr	r0, [r4, #12]
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	4298      	cmp	r0, r3
 8007838:	bfb8      	it	lt
 800783a:	4618      	movlt	r0, r3
 800783c:	e7a4      	b.n	8007788 <_printf_i+0x168>
 800783e:	2301      	movs	r3, #1
 8007840:	4632      	mov	r2, r6
 8007842:	4649      	mov	r1, r9
 8007844:	4640      	mov	r0, r8
 8007846:	47d0      	blx	sl
 8007848:	3001      	adds	r0, #1
 800784a:	d09b      	beq.n	8007784 <_printf_i+0x164>
 800784c:	3501      	adds	r5, #1
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	9903      	ldr	r1, [sp, #12]
 8007852:	1a5b      	subs	r3, r3, r1
 8007854:	42ab      	cmp	r3, r5
 8007856:	dcf2      	bgt.n	800783e <_printf_i+0x21e>
 8007858:	e7eb      	b.n	8007832 <_printf_i+0x212>
 800785a:	2500      	movs	r5, #0
 800785c:	f104 0619 	add.w	r6, r4, #25
 8007860:	e7f5      	b.n	800784e <_printf_i+0x22e>
 8007862:	bf00      	nop
 8007864:	080079c6 	.word	0x080079c6
 8007868:	080079d7 	.word	0x080079d7

0800786c <__retarget_lock_acquire_recursive>:
 800786c:	4770      	bx	lr

0800786e <__retarget_lock_release_recursive>:
 800786e:	4770      	bx	lr

08007870 <memmove>:
 8007870:	4288      	cmp	r0, r1
 8007872:	b510      	push	{r4, lr}
 8007874:	eb01 0402 	add.w	r4, r1, r2
 8007878:	d902      	bls.n	8007880 <memmove+0x10>
 800787a:	4284      	cmp	r4, r0
 800787c:	4623      	mov	r3, r4
 800787e:	d807      	bhi.n	8007890 <memmove+0x20>
 8007880:	1e43      	subs	r3, r0, #1
 8007882:	42a1      	cmp	r1, r4
 8007884:	d008      	beq.n	8007898 <memmove+0x28>
 8007886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800788a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800788e:	e7f8      	b.n	8007882 <memmove+0x12>
 8007890:	4402      	add	r2, r0
 8007892:	4601      	mov	r1, r0
 8007894:	428a      	cmp	r2, r1
 8007896:	d100      	bne.n	800789a <memmove+0x2a>
 8007898:	bd10      	pop	{r4, pc}
 800789a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800789e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078a2:	e7f7      	b.n	8007894 <memmove+0x24>

080078a4 <_malloc_usable_size_r>:
 80078a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078a8:	1f18      	subs	r0, r3, #4
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	bfbc      	itt	lt
 80078ae:	580b      	ldrlt	r3, [r1, r0]
 80078b0:	18c0      	addlt	r0, r0, r3
 80078b2:	4770      	bx	lr

080078b4 <_init>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr

080078c0 <_fini>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	bf00      	nop
 80078c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c6:	bc08      	pop	{r3}
 80078c8:	469e      	mov	lr, r3
 80078ca:	4770      	bx	lr
 80078cc:	0000      	movs	r0, r0
	...
