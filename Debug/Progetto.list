
Progetto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f10  08006f10  00020540  2**0
                  CONTENTS
  4 .ARM          00000008  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f18  08006f18  00020540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000540  20000000  08006f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  20000540  08007468  00020540  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  08007468  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023eed  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c30  00000000  00000000  0004445d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016efd  00000000  00000000  0004908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  0005ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001810  00000000  00000000  000618b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b01e  00000000  00000000  000630c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002782a  00000000  00000000  0008e0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcf3e  00000000  00000000  000b5910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b284e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a6c  00000000  00000000  001b28a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000540 	.word	0x20000540
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ddc 	.word	0x08006ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000544 	.word	0x20000544
 80001cc:	08006ddc 	.word	0x08006ddc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b974 	b.w	80008f8 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	468e      	mov	lr, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d14d      	bne.n	80006d2 <__udivmoddi4+0xaa>
 8000636:	428a      	cmp	r2, r1
 8000638:	4694      	mov	ip, r2
 800063a:	d969      	bls.n	8000710 <__udivmoddi4+0xe8>
 800063c:	fab2 f282 	clz	r2, r2
 8000640:	b152      	cbz	r2, 8000658 <__udivmoddi4+0x30>
 8000642:	fa01 f302 	lsl.w	r3, r1, r2
 8000646:	f1c2 0120 	rsb	r1, r2, #32
 800064a:	fa20 f101 	lsr.w	r1, r0, r1
 800064e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000652:	ea41 0e03 	orr.w	lr, r1, r3
 8000656:	4094      	lsls	r4, r2
 8000658:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800065c:	0c21      	lsrs	r1, r4, #16
 800065e:	fbbe f6f8 	udiv	r6, lr, r8
 8000662:	fa1f f78c 	uxth.w	r7, ip
 8000666:	fb08 e316 	mls	r3, r8, r6, lr
 800066a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066e:	fb06 f107 	mul.w	r1, r6, r7
 8000672:	4299      	cmp	r1, r3
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x64>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f106 30ff 	add.w	r0, r6, #4294967295
 800067e:	f080 811f 	bcs.w	80008c0 <__udivmoddi4+0x298>
 8000682:	4299      	cmp	r1, r3
 8000684:	f240 811c 	bls.w	80008c0 <__udivmoddi4+0x298>
 8000688:	3e02      	subs	r6, #2
 800068a:	4463      	add	r3, ip
 800068c:	1a5b      	subs	r3, r3, r1
 800068e:	b2a4      	uxth	r4, r4
 8000690:	fbb3 f0f8 	udiv	r0, r3, r8
 8000694:	fb08 3310 	mls	r3, r8, r0, r3
 8000698:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800069c:	fb00 f707 	mul.w	r7, r0, r7
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	d90a      	bls.n	80006ba <__udivmoddi4+0x92>
 80006a4:	eb1c 0404 	adds.w	r4, ip, r4
 80006a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ac:	f080 810a 	bcs.w	80008c4 <__udivmoddi4+0x29c>
 80006b0:	42a7      	cmp	r7, r4
 80006b2:	f240 8107 	bls.w	80008c4 <__udivmoddi4+0x29c>
 80006b6:	4464      	add	r4, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006be:	1be4      	subs	r4, r4, r7
 80006c0:	2600      	movs	r6, #0
 80006c2:	b11d      	cbz	r5, 80006cc <__udivmoddi4+0xa4>
 80006c4:	40d4      	lsrs	r4, r2
 80006c6:	2300      	movs	r3, #0
 80006c8:	e9c5 4300 	strd	r4, r3, [r5]
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d909      	bls.n	80006ea <__udivmoddi4+0xc2>
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	f000 80ef 	beq.w	80008ba <__udivmoddi4+0x292>
 80006dc:	2600      	movs	r6, #0
 80006de:	e9c5 0100 	strd	r0, r1, [r5]
 80006e2:	4630      	mov	r0, r6
 80006e4:	4631      	mov	r1, r6
 80006e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ea:	fab3 f683 	clz	r6, r3
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d14a      	bne.n	8000788 <__udivmoddi4+0x160>
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0xd4>
 80006f6:	4282      	cmp	r2, r0
 80006f8:	f200 80f9 	bhi.w	80008ee <__udivmoddi4+0x2c6>
 80006fc:	1a84      	subs	r4, r0, r2
 80006fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000702:	2001      	movs	r0, #1
 8000704:	469e      	mov	lr, r3
 8000706:	2d00      	cmp	r5, #0
 8000708:	d0e0      	beq.n	80006cc <__udivmoddi4+0xa4>
 800070a:	e9c5 4e00 	strd	r4, lr, [r5]
 800070e:	e7dd      	b.n	80006cc <__udivmoddi4+0xa4>
 8000710:	b902      	cbnz	r2, 8000714 <__udivmoddi4+0xec>
 8000712:	deff      	udf	#255	; 0xff
 8000714:	fab2 f282 	clz	r2, r2
 8000718:	2a00      	cmp	r2, #0
 800071a:	f040 8092 	bne.w	8000842 <__udivmoddi4+0x21a>
 800071e:	eba1 010c 	sub.w	r1, r1, ip
 8000722:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000726:	fa1f fe8c 	uxth.w	lr, ip
 800072a:	2601      	movs	r6, #1
 800072c:	0c20      	lsrs	r0, r4, #16
 800072e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000732:	fb07 1113 	mls	r1, r7, r3, r1
 8000736:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800073a:	fb0e f003 	mul.w	r0, lr, r3
 800073e:	4288      	cmp	r0, r1
 8000740:	d908      	bls.n	8000754 <__udivmoddi4+0x12c>
 8000742:	eb1c 0101 	adds.w	r1, ip, r1
 8000746:	f103 38ff 	add.w	r8, r3, #4294967295
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0x12a>
 800074c:	4288      	cmp	r0, r1
 800074e:	f200 80cb 	bhi.w	80008e8 <__udivmoddi4+0x2c0>
 8000752:	4643      	mov	r3, r8
 8000754:	1a09      	subs	r1, r1, r0
 8000756:	b2a4      	uxth	r4, r4
 8000758:	fbb1 f0f7 	udiv	r0, r1, r7
 800075c:	fb07 1110 	mls	r1, r7, r0, r1
 8000760:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000764:	fb0e fe00 	mul.w	lr, lr, r0
 8000768:	45a6      	cmp	lr, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x156>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 31ff 	add.w	r1, r0, #4294967295
 8000774:	d202      	bcs.n	800077c <__udivmoddi4+0x154>
 8000776:	45a6      	cmp	lr, r4
 8000778:	f200 80bb 	bhi.w	80008f2 <__udivmoddi4+0x2ca>
 800077c:	4608      	mov	r0, r1
 800077e:	eba4 040e 	sub.w	r4, r4, lr
 8000782:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000786:	e79c      	b.n	80006c2 <__udivmoddi4+0x9a>
 8000788:	f1c6 0720 	rsb	r7, r6, #32
 800078c:	40b3      	lsls	r3, r6
 800078e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000792:	ea4c 0c03 	orr.w	ip, ip, r3
 8000796:	fa20 f407 	lsr.w	r4, r0, r7
 800079a:	fa01 f306 	lsl.w	r3, r1, r6
 800079e:	431c      	orrs	r4, r3
 80007a0:	40f9      	lsrs	r1, r7
 80007a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007a6:	fa00 f306 	lsl.w	r3, r0, r6
 80007aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ae:	0c20      	lsrs	r0, r4, #16
 80007b0:	fa1f fe8c 	uxth.w	lr, ip
 80007b4:	fb09 1118 	mls	r1, r9, r8, r1
 80007b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007bc:	fb08 f00e 	mul.w	r0, r8, lr
 80007c0:	4288      	cmp	r0, r1
 80007c2:	fa02 f206 	lsl.w	r2, r2, r6
 80007c6:	d90b      	bls.n	80007e0 <__udivmoddi4+0x1b8>
 80007c8:	eb1c 0101 	adds.w	r1, ip, r1
 80007cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80007d0:	f080 8088 	bcs.w	80008e4 <__udivmoddi4+0x2bc>
 80007d4:	4288      	cmp	r0, r1
 80007d6:	f240 8085 	bls.w	80008e4 <__udivmoddi4+0x2bc>
 80007da:	f1a8 0802 	sub.w	r8, r8, #2
 80007de:	4461      	add	r1, ip
 80007e0:	1a09      	subs	r1, r1, r0
 80007e2:	b2a4      	uxth	r4, r4
 80007e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e8:	fb09 1110 	mls	r1, r9, r0, r1
 80007ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007f4:	458e      	cmp	lr, r1
 80007f6:	d908      	bls.n	800080a <__udivmoddi4+0x1e2>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000800:	d26c      	bcs.n	80008dc <__udivmoddi4+0x2b4>
 8000802:	458e      	cmp	lr, r1
 8000804:	d96a      	bls.n	80008dc <__udivmoddi4+0x2b4>
 8000806:	3802      	subs	r0, #2
 8000808:	4461      	add	r1, ip
 800080a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800080e:	fba0 9402 	umull	r9, r4, r0, r2
 8000812:	eba1 010e 	sub.w	r1, r1, lr
 8000816:	42a1      	cmp	r1, r4
 8000818:	46c8      	mov	r8, r9
 800081a:	46a6      	mov	lr, r4
 800081c:	d356      	bcc.n	80008cc <__udivmoddi4+0x2a4>
 800081e:	d053      	beq.n	80008c8 <__udivmoddi4+0x2a0>
 8000820:	b15d      	cbz	r5, 800083a <__udivmoddi4+0x212>
 8000822:	ebb3 0208 	subs.w	r2, r3, r8
 8000826:	eb61 010e 	sbc.w	r1, r1, lr
 800082a:	fa01 f707 	lsl.w	r7, r1, r7
 800082e:	fa22 f306 	lsr.w	r3, r2, r6
 8000832:	40f1      	lsrs	r1, r6
 8000834:	431f      	orrs	r7, r3
 8000836:	e9c5 7100 	strd	r7, r1, [r5]
 800083a:	2600      	movs	r6, #0
 800083c:	4631      	mov	r1, r6
 800083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	40d8      	lsrs	r0, r3
 8000848:	fa0c fc02 	lsl.w	ip, ip, r2
 800084c:	fa21 f303 	lsr.w	r3, r1, r3
 8000850:	4091      	lsls	r1, r2
 8000852:	4301      	orrs	r1, r0
 8000854:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000858:	fa1f fe8c 	uxth.w	lr, ip
 800085c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000860:	fb07 3610 	mls	r6, r7, r0, r3
 8000864:	0c0b      	lsrs	r3, r1, #16
 8000866:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800086a:	fb00 f60e 	mul.w	r6, r0, lr
 800086e:	429e      	cmp	r6, r3
 8000870:	fa04 f402 	lsl.w	r4, r4, r2
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x260>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 38ff 	add.w	r8, r0, #4294967295
 800087e:	d22f      	bcs.n	80008e0 <__udivmoddi4+0x2b8>
 8000880:	429e      	cmp	r6, r3
 8000882:	d92d      	bls.n	80008e0 <__udivmoddi4+0x2b8>
 8000884:	3802      	subs	r0, #2
 8000886:	4463      	add	r3, ip
 8000888:	1b9b      	subs	r3, r3, r6
 800088a:	b289      	uxth	r1, r1
 800088c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000890:	fb07 3316 	mls	r3, r7, r6, r3
 8000894:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000898:	fb06 f30e 	mul.w	r3, r6, lr
 800089c:	428b      	cmp	r3, r1
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x28a>
 80008a0:	eb1c 0101 	adds.w	r1, ip, r1
 80008a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008a8:	d216      	bcs.n	80008d8 <__udivmoddi4+0x2b0>
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d914      	bls.n	80008d8 <__udivmoddi4+0x2b0>
 80008ae:	3e02      	subs	r6, #2
 80008b0:	4461      	add	r1, ip
 80008b2:	1ac9      	subs	r1, r1, r3
 80008b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b8:	e738      	b.n	800072c <__udivmoddi4+0x104>
 80008ba:	462e      	mov	r6, r5
 80008bc:	4628      	mov	r0, r5
 80008be:	e705      	b.n	80006cc <__udivmoddi4+0xa4>
 80008c0:	4606      	mov	r6, r0
 80008c2:	e6e3      	b.n	800068c <__udivmoddi4+0x64>
 80008c4:	4618      	mov	r0, r3
 80008c6:	e6f8      	b.n	80006ba <__udivmoddi4+0x92>
 80008c8:	454b      	cmp	r3, r9
 80008ca:	d2a9      	bcs.n	8000820 <__udivmoddi4+0x1f8>
 80008cc:	ebb9 0802 	subs.w	r8, r9, r2
 80008d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008d4:	3801      	subs	r0, #1
 80008d6:	e7a3      	b.n	8000820 <__udivmoddi4+0x1f8>
 80008d8:	4646      	mov	r6, r8
 80008da:	e7ea      	b.n	80008b2 <__udivmoddi4+0x28a>
 80008dc:	4620      	mov	r0, r4
 80008de:	e794      	b.n	800080a <__udivmoddi4+0x1e2>
 80008e0:	4640      	mov	r0, r8
 80008e2:	e7d1      	b.n	8000888 <__udivmoddi4+0x260>
 80008e4:	46d0      	mov	r8, sl
 80008e6:	e77b      	b.n	80007e0 <__udivmoddi4+0x1b8>
 80008e8:	3b02      	subs	r3, #2
 80008ea:	4461      	add	r1, ip
 80008ec:	e732      	b.n	8000754 <__udivmoddi4+0x12c>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e709      	b.n	8000706 <__udivmoddi4+0xde>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	e742      	b.n	800077e <__udivmoddi4+0x156>

080008f8 <__aeabi_idiv0>:
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <fetchBleEvent>:
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
}

int fetchBleEvent(uint8_t *container, int size){
 80008fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000900:	b088      	sub	sp, #32
 8000902:	4606      	mov	r6, r0
 8000904:	460d      	mov	r5, r1

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000906:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <fetchBleEvent+0xdc>)
 8000908:	e893 0003 	ldmia.w	r3, {r0, r1}
 800090c:	9006      	str	r0, [sp, #24]
 800090e:	f88d 101c 	strb.w	r1, [sp, #28]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000912:	2140      	movs	r1, #64	; 0x40
 8000914:	4831      	ldr	r0, [pc, #196]	; (80009dc <fetchBleEvent+0xe0>)
 8000916:	f002 fd59 	bl	80033cc <HAL_GPIO_ReadPin>
 800091a:	2800      	cmp	r0, #0
 800091c:	d059      	beq.n	80009d2 <fetchBleEvent+0xd6>

  HAL_Delay(5);
 800091e:	2005      	movs	r0, #5
 8000920:	f002 fb4e 	bl	8002fc0 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000924:	4f2e      	ldr	r7, [pc, #184]	; (80009e0 <fetchBleEvent+0xe4>)
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092c:	4638      	mov	r0, r7
 800092e:	f002 fd54 	bl	80033da <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000932:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80009e4 <fetchBleEvent+0xe8>
 8000936:	2401      	movs	r4, #1
 8000938:	9400      	str	r4, [sp, #0]
 800093a:	2305      	movs	r3, #5
 800093c:	aa04      	add	r2, sp, #16
 800093e:	a906      	add	r1, sp, #24
 8000940:	4640      	mov	r0, r8
 8000942:	f004 fc30 	bl	80051a6 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000946:	4622      	mov	r2, r4
 8000948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094c:	4638      	mov	r0, r7
 800094e:	f002 fd44 	bl	80033da <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000952:	4620      	mov	r0, r4
 8000954:	f002 fb34 	bl	8002fc0 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095e:	4638      	mov	r0, r7
 8000960:	f002 fd3b 	bl	80033da <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000964:	9400      	str	r4, [sp, #0]
 8000966:	2305      	movs	r3, #5
 8000968:	aa04      	add	r2, sp, #16
 800096a:	a906      	add	r1, sp, #24
 800096c:	4640      	mov	r0, r8
 800096e:	f004 fc1a 	bl	80051a6 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000972:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000976:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800097a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  int i;
  char dummy=0xff;
 800097e:	22ff      	movs	r2, #255	; 0xff
 8000980:	f88d 200f 	strb.w	r2, [sp, #15]

  if(dataSize>size){
 8000984:	42ab      	cmp	r3, r5
 8000986:	dc00      	bgt.n	800098a <fetchBleEvent+0x8e>
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000988:	461d      	mov	r5, r3
	  dataSize=size;
  }

  if(dataSize>0){
 800098a:	2d00      	cmp	r5, #0
 800098c:	dd18      	ble.n	80009c0 <fetchBleEvent+0xc4>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 800098e:	2400      	movs	r4, #0
 8000990:	e008      	b.n	80009a4 <fetchBleEvent+0xa8>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000992:	2301      	movs	r3, #1
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	1932      	adds	r2, r6, r4
 8000998:	f10d 010f 	add.w	r1, sp, #15
 800099c:	4811      	ldr	r0, [pc, #68]	; (80009e4 <fetchBleEvent+0xe8>)
 800099e:	f004 fc02 	bl	80051a6 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 80009a2:	3401      	adds	r4, #1
 80009a4:	42a5      	cmp	r5, r4
 80009a6:	dcf4      	bgt.n	8000992 <fetchBleEvent+0x96>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	480c      	ldr	r0, [pc, #48]	; (80009e0 <fetchBleEvent+0xe4>)
 80009b0:	f002 fd13 	bl	80033da <HAL_GPIO_WritePin>
  	}

  //let's stop the SPI2


  dataAvailable=0;
 80009b4:	2000      	movs	r0, #0
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <fetchBleEvent+0xec>)
 80009b8:	6018      	str	r0, [r3, #0]
  return BLE_OK;
  }else{
  return -2;
  }
}
 80009ba:	b008      	add	sp, #32
 80009bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <fetchBleEvent+0xe4>)
 80009c8:	f002 fd07 	bl	80033da <HAL_GPIO_WritePin>
        return -1;
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	e7f3      	b.n	80009ba <fetchBleEvent+0xbe>
  return -2;
 80009d2:	f06f 0001 	mvn.w	r0, #1
 80009d6:	e7f0      	b.n	80009ba <fetchBleEvent+0xbe>
 80009d8:	08006df8 	.word	0x08006df8
 80009dc:	48001000 	.word	0x48001000
 80009e0:	48000c00 	.word	0x48000c00
 80009e4:	200007dc 	.word	0x200007dc
 80009e8:	200006f0 	.word	0x200006f0

080009ec <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
	int j=0;

	for(j=0;j<size;j++){
 80009ec:	2300      	movs	r3, #0
 80009ee:	4293      	cmp	r3, r2
 80009f0:	da0f      	bge.n	8000a12 <checkEventResp+0x26>
int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80009f2:	b500      	push	{lr}

		if(event[j]!=reference[j]){
 80009f4:	f810 e003 	ldrb.w	lr, [r0, r3]
 80009f8:	f811 c003 	ldrb.w	ip, [r1, r3]
 80009fc:	45e6      	cmp	lr, ip
 80009fe:	d105      	bne.n	8000a0c <checkEventResp+0x20>
	for(j=0;j<size;j++){
 8000a00:	3301      	adds	r3, #1
 8000a02:	4293      	cmp	r3, r2
 8000a04:	dbf6      	blt.n	80009f4 <checkEventResp+0x8>
			return -1;
		}
	}

return BLE_OK;
 8000a06:	2000      	movs	r0, #0
}
 8000a08:	f85d fb04 	ldr.w	pc, [sp], #4
			return -1;
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	e7fa      	b.n	8000a08 <checkEventResp+0x1c>
return BLE_OK;
 8000a12:	2000      	movs	r0, #0
}
 8000a14:	4770      	bx	lr
	...

08000a18 <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	4605      	mov	r5, r0
 8000a1e:	460c      	mov	r4, r1

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <sendCommand+0x70>)
 8000a22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a26:	9004      	str	r0, [sp, #16]
 8000a28:	f88d 1014 	strb.w	r1, [sp, #20]
	  int result;

	do{


	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	4816      	ldr	r0, [pc, #88]	; (8000a8c <sendCommand+0x74>)
 8000a34:	f002 fcd1 	bl	80033da <HAL_GPIO_WritePin>

	//wait until it is possible to write
	//while(!dataAvailable);
	HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000a38:	2301      	movs	r3, #1
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	aa02      	add	r2, sp, #8
 8000a40:	a904      	add	r1, sp, #16
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <sendCommand+0x78>)
 8000a44:	f004 fbaf 	bl	80051a6 <HAL_SPI_TransmitReceive>
	int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000a48:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8000a4c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000a50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if(bufferSize>=size){
 8000a54:	42a3      	cmp	r3, r4
 8000a56:	da0e      	bge.n	8000a76 <sendCommand+0x5e>
		HAL_SPI_Transmit(&hspi3,command,size,1);
		result=0;
	}else{
		result=-1;
 8000a58:	f04f 36ff 	mov.w	r6, #4294967295
	}
	//HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a62:	480a      	ldr	r0, [pc, #40]	; (8000a8c <sendCommand+0x74>)
 8000a64:	f002 fcb9 	bl	80033da <HAL_GPIO_WritePin>
	dataAvailable=0;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <sendCommand+0x7c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d1dc      	bne.n	8000a2c <sendCommand+0x14>

}
 8000a72:	b006      	add	sp, #24
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000a76:	2301      	movs	r3, #1
 8000a78:	b2a2      	uxth	r2, r4
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <sendCommand+0x78>)
 8000a7e:	f004 fa91 	bl	8004fa4 <HAL_SPI_Transmit>
		result=0;
 8000a82:	2600      	movs	r6, #0
 8000a84:	e7ea      	b.n	8000a5c <sendCommand+0x44>
 8000a86:	bf00      	nop
 8000a88:	08006e00 	.word	0x08006e00
 8000a8c:	48000c00 	.word	0x48000c00
 8000a90:	200007dc 	.word	0x200007dc
 8000a94:	200006f0 	.word	0x200006f0

08000a98 <setConnectable>:



}

void setConnectable(){
 8000a98:	b570      	push	{r4, r5, r6, lr}
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000a9a:	2012      	movs	r0, #18
 8000a9c:	f005 fd02 	bl	80064a4 <malloc>
 8000aa0:	4604      	mov	r4, r0
	   memcpy(localname,deviceName,sizeof(deviceName));
 8000aa2:	4e2b      	ldr	r6, [pc, #172]	; (8000b50 <setConnectable+0xb8>)
 8000aa4:	4633      	mov	r3, r6
 8000aa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000aa8:	6020      	str	r0, [r4, #0]
 8000aaa:	6061      	str	r1, [r4, #4]
 8000aac:	60a2      	str	r2, [r4, #8]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	7323      	strb	r3, [r4, #12]
	   localname[sizeof(deviceName)+1]=0x00;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73a3      	strb	r3, [r4, #14]
	   localname[sizeof(deviceName)+2]=0x00;
 8000ab6:	73e3      	strb	r3, [r4, #15]
	   localname[sizeof(deviceName)+3]=0x00;
 8000ab8:	7423      	strb	r3, [r4, #16]
	   localname[sizeof(deviceName)+4]=0x00;
 8000aba:	7463      	strb	r3, [r4, #17]
	   localname[sizeof(deviceName)]=0x00;
 8000abc:	7363      	strb	r3, [r4, #13]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000abe:	230e      	movs	r3, #14
 8000ac0:	76f3      	strb	r3, [r6, #27]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000ac2:	231b      	movs	r3, #27
 8000ac4:	74f3      	strb	r3, [r6, #19]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000ac6:	201f      	movs	r0, #31
 8000ac8:	f005 fcec 	bl	80064a4 <malloc>
 8000acc:	4605      	mov	r5, r0
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000ace:	f106 0310 	add.w	r3, r6, #16
 8000ad2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ad4:	6028      	str	r0, [r5, #0]
 8000ad6:	6069      	str	r1, [r5, #4]
 8000ad8:	60aa      	str	r2, [r5, #8]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	732b      	strb	r3, [r5, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000ade:	6820      	ldr	r0, [r4, #0]
 8000ae0:	6861      	ldr	r1, [r4, #4]
 8000ae2:	68a2      	ldr	r2, [r4, #8]
 8000ae4:	68e3      	ldr	r3, [r4, #12]
 8000ae6:	f8c5 000d 	str.w	r0, [r5, #13]
 8000aea:	f8c5 1011 	str.w	r1, [r5, #17]
 8000aee:	f8c5 2015 	str.w	r2, [r5, #21]
 8000af2:	f8c5 3019 	str.w	r3, [r5, #25]
 8000af6:	8a23      	ldrh	r3, [r4, #16]
 8000af8:	f8a5 301d 	strh.w	r3, [r5, #29]

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000afc:	211f      	movs	r1, #31
 8000afe:	4628      	mov	r0, r5
 8000b00:	f7ff ff8a 	bl	8000a18 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000b04:	2007      	movs	r0, #7
 8000b06:	f005 fccd 	bl	80064a4 <malloc>
 8000b0a:	4606      	mov	r6, r0
	   while(!dataAvailable);
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <setConnectable+0xbc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0fb      	beq.n	8000b0c <setConnectable+0x74>
	   res=fetchBleEvent(rxEvent,7);
 8000b14:	2107      	movs	r1, #7
 8000b16:	4630      	mov	r0, r6
 8000b18:	f7ff fef0 	bl	80008fc <fetchBleEvent>
	   if(res==BLE_OK){
 8000b1c:	b950      	cbnz	r0, 8000b34 <setConnectable+0x9c>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000b1e:	2207      	movs	r2, #7
 8000b20:	490d      	ldr	r1, [pc, #52]	; (8000b58 <setConnectable+0xc0>)
 8000b22:	4630      	mov	r0, r6
 8000b24:	f7ff ff62 	bl	80009ec <checkEventResp>
	   if(res==BLE_OK){
 8000b28:	b920      	cbnz	r0, 8000b34 <setConnectable+0x9c>
		   stackInitCompleteFlag|=0x80;
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <setConnectable+0xc4>)
 8000b2c:	8813      	ldrh	r3, [r2, #0]
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	8013      	strh	r3, [r2, #0]
	   }
	   }

	   free(rxEvent);
 8000b34:	4630      	mov	r0, r6
 8000b36:	f005 fcbd 	bl	80064b4 <free>
	   free(discoverableCommand);
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f005 fcba 	bl	80064b4 <free>
	   free(localname);
 8000b40:	4620      	mov	r0, r4
 8000b42:	f005 fcb7 	bl	80064b4 <free>
	   HAL_Delay(10);
 8000b46:	200a      	movs	r0, #10
 8000b48:	f002 fa3a 	bl	8002fc0 <HAL_Delay>
}
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000
 8000b54:	200006f0 	.word	0x200006f0
 8000b58:	20000020 	.word	0x20000020
 8000b5c:	2000055c 	.word	0x2000055c

08000b60 <catchBLE>:
void catchBLE(){
 8000b60:	b508      	push	{r3, lr}
int result=fetchBleEvent(buffer,127);
 8000b62:	217f      	movs	r1, #127	; 0x7f
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <catchBLE+0x20>)
 8000b66:	f7ff fec9 	bl	80008fc <fetchBleEvent>
	  if(result==BLE_OK){
 8000b6a:	b928      	cbnz	r0, 8000b78 <catchBLE+0x18>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	4905      	ldr	r1, [pc, #20]	; (8000b84 <catchBLE+0x24>)
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <catchBLE+0x20>)
 8000b72:	f7ff ff3b 	bl	80009ec <checkEventResp>
 8000b76:	b100      	cbz	r0, 8000b7a <catchBLE+0x1a>
}
 8000b78:	bd08      	pop	{r3, pc}
			  setConnectable();
 8000b7a:	f7ff ff8d 	bl	8000a98 <setConnectable>
}
 8000b7e:	e7fb      	b.n	8000b78 <catchBLE+0x18>
 8000b80:	20000560 	.word	0x20000560
 8000b84:	20000028 	.word	0x20000028

08000b88 <BLE_command>:
}




int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	4617      	mov	r7, r2
 8000b8c:	461e      	mov	r6, r3
	   int response;

	   sendCommand(command,size);
 8000b8e:	f7ff ff43 	bl	8000a18 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000b92:	9d06      	ldr	r5, [sp, #24]
 8000b94:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8000b98:	4628      	mov	r0, r5
 8000b9a:	f005 fc83 	bl	80064a4 <malloc>
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <BLE_command+0x5c>)
 8000ba0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104

	   long contatore=0;
 8000ba4:	2400      	movs	r4, #0
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000ba6:	2140      	movs	r1, #64	; 0x40
 8000ba8:	480f      	ldr	r0, [pc, #60]	; (8000be8 <BLE_command+0x60>)
 8000baa:	f002 fc0f 	bl	80033cc <HAL_GPIO_ReadPin>
 8000bae:	b920      	cbnz	r0, 8000bba <BLE_command+0x32>
		   contatore++;
 8000bb0:	3401      	adds	r4, #1
		   if(contatore>30000){
 8000bb2:	f247 5030 	movw	r0, #30000	; 0x7530
 8000bb6:	4284      	cmp	r4, r0
 8000bb8:	ddf5      	ble.n	8000ba6 <BLE_command+0x1e>
			   break;
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000bba:	4629      	mov	r1, r5
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <BLE_command+0x5c>)
 8000bbe:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000bc2:	f7ff fe9b 	bl	80008fc <fetchBleEvent>
	   if(response==BLE_OK){
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	b938      	cbnz	r0, 8000bda <BLE_command+0x52>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000bca:	4632      	mov	r2, r6
 8000bcc:	4639      	mov	r1, r7
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <BLE_command+0x5c>)
 8000bd0:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000bd4:	f7ff ff0a 	bl	80009ec <checkEventResp>
 8000bd8:	4604      	mov	r4, r0
	   }
	   HAL_Delay(10);
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f002 f9f0 	bl	8002fc0 <HAL_Delay>


	return response;
}
 8000be0:	4620      	mov	r0, r4
 8000be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be4:	2000055c 	.word	0x2000055c
 8000be8:	48001000 	.word	0x48001000

08000bec <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000bec:	b530      	push	{r4, r5, lr}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	460d      	mov	r5, r1


	//memcpy
	memcpy(ADD_CUSTOM_SERVICE+5,UUID,16);
 8000bf2:	4c16      	ldr	r4, [pc, #88]	; (8000c4c <addService+0x60>)
 8000bf4:	f8d0 e000 	ldr.w	lr, [r0]
 8000bf8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8000bfc:	6881      	ldr	r1, [r0, #8]
 8000bfe:	68c3      	ldr	r3, [r0, #12]
 8000c00:	f8c4 e031 	str.w	lr, [r4, #49]	; 0x31
 8000c04:	f8c4 c035 	str.w	ip, [r4, #53]	; 0x35
 8000c08:	f8c4 1039 	str.w	r1, [r4, #57]	; 0x39
 8000c0c:	f8c4 303d 	str.w	r3, [r4, #61]	; 0x3d
    ADD_CUSTOM_SERVICE[22]=attributes;
 8000c10:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
	   if(BLE_command(ADD_CUSTOM_SERVICE,sizeof(ADD_CUSTOM_SERVICE),ADD_CUSTOM_SERVICE_COMPLETE,sizeof(ADD_CUSTOM_SERVICE_COMPLETE),1)==BLE_OK){
 8000c14:	2301      	movs	r3, #1
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2307      	movs	r3, #7
 8000c1a:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8000c1e:	2117      	movs	r1, #23
 8000c20:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8000c24:	f7ff ffb0 	bl	8000b88 <BLE_command>
 8000c28:	b940      	cbnz	r0, 8000c3c <addService+0x50>
		   handle[0]=rxEvent[7];
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <addService+0x64>)
 8000c2c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000c30:	79d2      	ldrb	r2, [r2, #7]
 8000c32:	702a      	strb	r2, [r5, #0]
		   handle[1]=rxEvent[8];
 8000c34:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c38:	7a1b      	ldrb	r3, [r3, #8]
 8000c3a:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <addService+0x64>)
 8000c3e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000c42:	f005 fc37 	bl	80064b4 <free>



}
 8000c46:	b003      	add	sp, #12
 8000c48:	bd30      	pop	{r4, r5, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	2000055c 	.word	0x2000055c

08000c54 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	460d      	mov	r5, r1



	memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000c5a:	4c1b      	ldr	r4, [pc, #108]	; (8000cc8 <addCharacteristic+0x74>)
 8000c5c:	6806      	ldr	r6, [r0, #0]
 8000c5e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000c62:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000c66:	68c1      	ldr	r1, [r0, #12]
 8000c68:	f8c4 6053 	str.w	r6, [r4, #83]	; 0x53
 8000c6c:	f8c4 e057 	str.w	lr, [r4, #87]	; 0x57
 8000c70:	f8c4 c05b 	str.w	ip, [r4, #91]	; 0x5b
 8000c74:	f8c4 105f 	str.w	r1, [r4, #95]	; 0x5f


	   ADD_CUSTOM_CHAR[4]= handleService[0];
 8000c78:	7811      	ldrb	r1, [r2, #0]
 8000c7a:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	   ADD_CUSTOM_CHAR[5]= handleService[1];
 8000c7e:	7852      	ldrb	r2, [r2, #1]
 8000c80:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
	   ADD_CUSTOM_CHAR[23]= maxsize;
 8000c84:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	   ADD_CUSTOM_CHAR[25]= proprieties;
 8000c88:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000c8c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	   if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000c90:	2301      	movs	r3, #1
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2307      	movs	r3, #7
 8000c96:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8000c9a:	211e      	movs	r1, #30
 8000c9c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8000ca0:	f7ff ff72 	bl	8000b88 <BLE_command>
 8000ca4:	b940      	cbnz	r0, 8000cb8 <addCharacteristic+0x64>
		   handleChar[0]=rxEvent[7];
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <addCharacteristic+0x78>)
 8000ca8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000cac:	79d2      	ldrb	r2, [r2, #7]
 8000cae:	702a      	strb	r2, [r5, #0]
		   handleChar[1]=rxEvent[8];
 8000cb0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000cb4:	7a1b      	ldrb	r3, [r3, #8]
 8000cb6:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <addCharacteristic+0x78>)
 8000cba:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000cbe:	f005 fbf9 	bl	80064b4 <free>





}
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd70      	pop	{r4, r5, r6, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	2000055c 	.word	0x2000055c

08000cd0 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	461e      	mov	r6, r3

	UPDATE_CHAR[3]=size+6;
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	1d9d      	adds	r5, r3, #6
 8000cda:	4c1c      	ldr	r4, [pc, #112]	; (8000d4c <updateCharValue+0x7c>)
 8000cdc:	f884 5077 	strb.w	r5, [r4, #119]	; 0x77
	UPDATE_CHAR[4]=handleService[0];
 8000ce0:	7805      	ldrb	r5, [r0, #0]
 8000ce2:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
	UPDATE_CHAR[5]=handleService[1];
 8000ce6:	7840      	ldrb	r0, [r0, #1]
 8000ce8:	f884 0079 	strb.w	r0, [r4, #121]	; 0x79
	UPDATE_CHAR[6]=handleChar[0];
 8000cec:	7808      	ldrb	r0, [r1, #0]
 8000cee:	f884 007a 	strb.w	r0, [r4, #122]	; 0x7a
	UPDATE_CHAR[7]=handleChar[1];
 8000cf2:	7849      	ldrb	r1, [r1, #1]
 8000cf4:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
	UPDATE_CHAR[8]=offset;
 8000cf8:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
	UPDATE_CHAR[9]=size;
 8000cfc:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000d00:	f106 070a 	add.w	r7, r6, #10
 8000d04:	4638      	mov	r0, r7
 8000d06:	f005 fbcd 	bl	80064a4 <malloc>
 8000d0a:	4605      	mov	r5, r0
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000d0c:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8000d10:	cb03      	ldmia	r3!, {r0, r1}
 8000d12:	6028      	str	r0, [r5, #0]
 8000d14:	6069      	str	r1, [r5, #4]
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	812b      	strh	r3, [r5, #8]
	memcpy(commandComplete+10,data,size);
 8000d1a:	4632      	mov	r2, r6
 8000d1c:	9908      	ldr	r1, [sp, #32]
 8000d1e:	f105 000a 	add.w	r0, r5, #10
 8000d22:	f005 fbcf 	bl	80064c4 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000d26:	2300      	movs	r3, #0
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8000d30:	4639      	mov	r1, r7
 8000d32:	4628      	mov	r0, r5
 8000d34:	f7ff ff28 	bl	8000b88 <BLE_command>

	free(commandComplete);
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f005 fbbb 	bl	80064b4 <free>
	free(rxEvent);
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <updateCharValue+0x80>)
 8000d40:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000d44:	f005 fbb6 	bl	80064b4 <free>

}
 8000d48:	b003      	add	sp, #12
 8000d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	2000055c 	.word	0x2000055c

08000d54 <ble_init>:
void ble_init(){
 8000d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d58:	b083      	sub	sp, #12
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000d5a:	2006      	movs	r0, #6
 8000d5c:	f005 fba2 	bl	80064a4 <malloc>
 8000d60:	4bd3      	ldr	r3, [pc, #844]	; (80010b0 <ble_init+0x35c>)
 8000d62:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	while(!dataAvailable);
 8000d66:	4bd3      	ldr	r3, [pc, #844]	; (80010b4 <ble_init+0x360>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0fb      	beq.n	8000d66 <ble_init+0x12>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 8000d6e:	2106      	movs	r1, #6
 8000d70:	f7ff fdc4 	bl	80008fc <fetchBleEvent>
	if(res==BLE_OK){
 8000d74:	b960      	cbnz	r0, 8000d90 <ble_init+0x3c>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 8000d76:	2206      	movs	r2, #6
 8000d78:	49cf      	ldr	r1, [pc, #828]	; (80010b8 <ble_init+0x364>)
 8000d7a:	4bcd      	ldr	r3, [pc, #820]	; (80010b0 <ble_init+0x35c>)
 8000d7c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000d80:	f7ff fe34 	bl	80009ec <checkEventResp>
	if(res==BLE_OK){
 8000d84:	b920      	cbnz	r0, 8000d90 <ble_init+0x3c>
	   stackInitCompleteFlag|=0x01;
 8000d86:	4aca      	ldr	r2, [pc, #808]	; (80010b0 <ble_init+0x35c>)
 8000d88:	8813      	ldrh	r3, [r2, #0]
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	8013      	strh	r3, [r2, #0]
	HAL_Delay(10);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f002 f915 	bl	8002fc0 <HAL_Delay>
	free(rxEvent);
 8000d96:	4bc6      	ldr	r3, [pc, #792]	; (80010b0 <ble_init+0x35c>)
 8000d98:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000d9c:	f005 fb8a 	bl	80064b4 <free>
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000da0:	48c6      	ldr	r0, [pc, #792]	; (80010bc <ble_init+0x368>)
 8000da2:	2300      	movs	r3, #0
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2307      	movs	r3, #7
 8000da8:	f100 028c 	add.w	r2, r0, #140	; 0x8c
 8000dac:	2104      	movs	r1, #4
 8000dae:	3094      	adds	r0, #148	; 0x94
 8000db0:	f7ff feea 	bl	8000b88 <BLE_command>
 8000db4:	b920      	cbnz	r0, 8000dc0 <ble_init+0x6c>
	   stackInitCompleteFlag|=0x02;
 8000db6:	4abe      	ldr	r2, [pc, #760]	; (80010b0 <ble_init+0x35c>)
 8000db8:	8813      	ldrh	r3, [r2, #0]
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000dc0:	4bbb      	ldr	r3, [pc, #748]	; (80010b0 <ble_init+0x35c>)
 8000dc2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000dc6:	f005 fb75 	bl	80064b4 <free>
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000dca:	48bc      	ldr	r0, [pc, #752]	; (80010bc <ble_init+0x368>)
 8000dcc:	2303      	movs	r3, #3
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	f100 0298 	add.w	r2, r0, #152	; 0x98
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	30a0      	adds	r0, #160	; 0xa0
 8000dda:	f7ff fed5 	bl	8000b88 <BLE_command>
 8000dde:	b990      	cbnz	r0, 8000e06 <ble_init+0xb2>
	   stackInitCompleteFlag|=0x04;
 8000de0:	4bb3      	ldr	r3, [pc, #716]	; (80010b0 <ble_init+0x35c>)
 8000de2:	881a      	ldrh	r2, [r3, #0]
 8000de4:	f042 0204 	orr.w	r2, r2, #4
 8000de8:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000dea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000dee:	f8b2 1007 	ldrh.w	r1, [r2, #7]
 8000df2:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000df6:	f8b2 1009 	ldrh.w	r1, [r2, #9]
 8000dfa:	f8a3 110c 	strh.w	r1, [r3, #268]	; 0x10c
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000dfe:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8000e02:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	free(rxEvent);
 8000e06:	4caa      	ldr	r4, [pc, #680]	; (80010b0 <ble_init+0x35c>)
 8000e08:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 8000e0c:	f005 fb52 	bl	80064b4 <free>
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000e10:	4daa      	ldr	r5, [pc, #680]	; (80010bc <ble_init+0x368>)
 8000e12:	9500      	str	r5, [sp, #0]
 8000e14:	230d      	movs	r3, #13
 8000e16:	2200      	movs	r2, #0
 8000e18:	f504 7186 	add.w	r1, r4, #268	; 0x10c
 8000e1c:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8000e20:	f7ff ff56 	bl	8000cd0 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 8000e24:	8823      	ldrh	r3, [r4, #0]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 8000e2c:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 8000e30:	f005 fb40 	bl	80064b4 <free>
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000e34:	2300      	movs	r3, #0
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2307      	movs	r3, #7
 8000e3a:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 8000e3e:	2110      	movs	r1, #16
 8000e40:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
 8000e44:	f7ff fea0 	bl	8000b88 <BLE_command>
 8000e48:	b918      	cbnz	r0, 8000e52 <ble_init+0xfe>
	   stackInitCompleteFlag|=0x10;
 8000e4a:	8823      	ldrh	r3, [r4, #0]
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 8000e52:	4b97      	ldr	r3, [pc, #604]	; (80010b0 <ble_init+0x35c>)
 8000e54:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000e58:	f005 fb2c 	bl	80064b4 <free>
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 8000e5c:	4897      	ldr	r0, [pc, #604]	; (80010bc <ble_init+0x368>)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2307      	movs	r3, #7
 8000e64:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
 8000e68:	2106      	movs	r1, #6
 8000e6a:	30c8      	adds	r0, #200	; 0xc8
 8000e6c:	f7ff fe8c 	bl	8000b88 <BLE_command>
 8000e70:	b920      	cbnz	r0, 8000e7c <ble_init+0x128>
	   stackInitCompleteFlag|=0x20;
 8000e72:	4a8f      	ldr	r2, [pc, #572]	; (80010b0 <ble_init+0x35c>)
 8000e74:	8813      	ldrh	r3, [r2, #0]
 8000e76:	f043 0320 	orr.w	r3, r3, #32
 8000e7a:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000e7c:	4b8c      	ldr	r3, [pc, #560]	; (80010b0 <ble_init+0x35c>)
 8000e7e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000e82:	f005 fb17 	bl	80064b4 <free>
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000e86:	488d      	ldr	r0, [pc, #564]	; (80010bc <ble_init+0x368>)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	f100 02d0 	add.w	r2, r0, #208	; 0xd0
 8000e92:	2124      	movs	r1, #36	; 0x24
 8000e94:	30d8      	adds	r0, #216	; 0xd8
 8000e96:	f7ff fe77 	bl	8000b88 <BLE_command>
 8000e9a:	b920      	cbnz	r0, 8000ea6 <ble_init+0x152>
	   stackInitCompleteFlag|=0x40;
 8000e9c:	4a84      	ldr	r2, [pc, #528]	; (80010b0 <ble_init+0x35c>)
 8000e9e:	8813      	ldrh	r3, [r2, #0]
 8000ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea4:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000ea6:	4d82      	ldr	r5, [pc, #520]	; (80010b0 <ble_init+0x35c>)
 8000ea8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
 8000eac:	f005 fb02 	bl	80064b4 <free>
	setConnectable();
 8000eb0:	f7ff fdf2 	bl	8000a98 <setConnectable>
	addService(UUID_SERVICE_1,CUSTOM_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000eb4:	f505 778a 	add.w	r7, r5, #276	; 0x114
 8000eb8:	4c80      	ldr	r4, [pc, #512]	; (80010bc <ble_init+0x368>)
 8000eba:	220f      	movs	r2, #15
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 8000ec2:	f7ff fe93 	bl	8000bec <addService>
	addCharacteristic(UUID_CHAR_1,CUSTOM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(22),READABLE);
 8000ec6:	f505 768c 	add.w	r6, r5, #280	; 0x118
 8000eca:	f04f 0802 	mov.w	r8, #2
 8000ece:	f8cd 8000 	str.w	r8, [sp]
 8000ed2:	2316      	movs	r3, #22
 8000ed4:	463a      	mov	r2, r7
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8000edc:	f7ff feba 	bl	8000c54 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,CUSTOM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(22),VALUE1);
 8000ee0:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2316      	movs	r3, #22
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4631      	mov	r1, r6
 8000eec:	4638      	mov	r0, r7
 8000eee:	f7ff feef 	bl	8000cd0 <updateCharValue>
	addCharacteristic(UUID_CHAR_TEMP,TEMP_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000ef2:	f505 798e 	add.w	r9, r5, #284	; 0x11c
 8000ef6:	2612      	movs	r6, #18
 8000ef8:	9600      	str	r6, [sp, #0]
 8000efa:	2311      	movs	r3, #17
 8000efc:	463a      	mov	r2, r7
 8000efe:	4649      	mov	r1, r9
 8000f00:	f504 709a 	add.w	r0, r4, #308	; 0x134
 8000f04:	f7ff fea6 	bl	8000c54 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),VALUE_TEMP);
 8000f08:	f504 73a2 	add.w	r3, r4, #324	; 0x144
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2311      	movs	r3, #17
 8000f10:	2200      	movs	r2, #0
 8000f12:	4649      	mov	r1, r9
 8000f14:	4638      	mov	r0, r7
 8000f16:	f7ff fedb 	bl	8000cd0 <updateCharValue>
	addCharacteristic(UUID_CHAR_HUM,HUM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(16),READABLE|NOTIFIBLE);
 8000f1a:	f505 7990 	add.w	r9, r5, #288	; 0x120
 8000f1e:	9600      	str	r6, [sp, #0]
 8000f20:	2310      	movs	r3, #16
 8000f22:	463a      	mov	r2, r7
 8000f24:	4649      	mov	r1, r9
 8000f26:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8000f2a:	f7ff fe93 	bl	8000c54 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(16),VALUE_HUM);
 8000f2e:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2310      	movs	r3, #16
 8000f36:	2200      	movs	r2, #0
 8000f38:	4649      	mov	r1, r9
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	f7ff fec8 	bl	8000cd0 <updateCharValue>
	addCharacteristic(UUID_CHAR_PRESS,PRESS_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(18),READABLE|NOTIFIBLE);
 8000f40:	f505 7992 	add.w	r9, r5, #292	; 0x124
 8000f44:	9600      	str	r6, [sp, #0]
 8000f46:	4633      	mov	r3, r6
 8000f48:	463a      	mov	r2, r7
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 8000f50:	f7ff fe80 	bl	8000c54 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,0,SET_CONTENT_LENGTH(18),VALUE_PRESS);
 8000f54:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	4633      	mov	r3, r6
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4649      	mov	r1, r9
 8000f60:	4638      	mov	r0, r7
 8000f62:	f7ff feb5 	bl	8000cd0 <updateCharValue>
	addCharacteristic(UUID_CHAR_TOF_VALUE,TOF_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),READABLE|NOTIFIBLE);
 8000f66:	f505 7994 	add.w	r9, r5, #296	; 0x128
 8000f6a:	9600      	str	r6, [sp, #0]
 8000f6c:	2314      	movs	r3, #20
 8000f6e:	463a      	mov	r2, r7
 8000f70:	4649      	mov	r1, r9
 8000f72:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8000f76:	f7ff fe6d 	bl	8000c54 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,0,SET_CONTENT_LENGTH(20),TOF_VALUE);
 8000f7a:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2314      	movs	r3, #20
 8000f82:	2200      	movs	r2, #0
 8000f84:	4649      	mov	r1, r9
 8000f86:	4638      	mov	r0, r7
 8000f88:	f7ff fea2 	bl	8000cd0 <updateCharValue>
	 addService(UUID_INERTIAL_SERVICE,INERTIAL_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3+3+3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 8000f8c:	f505 7796 	add.w	r7, r5, #300	; 0x12c
 8000f90:	220c      	movs	r2, #12
 8000f92:	4639      	mov	r1, r7
 8000f94:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 8000f98:	f7ff fe28 	bl	8000bec <addService>
	 addCharacteristic(UUID_CHAR_INERTIAL_NAME,NAME_INERTIAL_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(24),READABLE);
 8000f9c:	f505 7998 	add.w	r9, r5, #304	; 0x130
 8000fa0:	f8cd 8000 	str.w	r8, [sp]
 8000fa4:	2318      	movs	r3, #24
 8000fa6:	463a      	mov	r2, r7
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000fae:	f7ff fe51 	bl	8000c54 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,NAME_INERTIAL_HANDLE,0,SET_CONTENT_LENGTH(24),NAME_INERTIAL_VALUE);
 8000fb2:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2318      	movs	r3, #24
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f7ff fe86 	bl	8000cd0 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCX,ACCX_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000fc4:	f505 799a 	add.w	r9, r5, #308	; 0x134
 8000fc8:	9600      	str	r6, [sp, #0]
 8000fca:	2311      	movs	r3, #17
 8000fcc:	463a      	mov	r2, r7
 8000fce:	4649      	mov	r1, r9
 8000fd0:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 8000fd4:	f7ff fe3e 	bl	8000c54 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCX_INERTIAL_VALUE);
 8000fd8:	f504 7302 	add.w	r3, r4, #520	; 0x208
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2311      	movs	r3, #17
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	f7ff fe73 	bl	8000cd0 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCY,ACCY_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000fea:	f505 799c 	add.w	r9, r5, #312	; 0x138
 8000fee:	9600      	str	r6, [sp, #0]
 8000ff0:	2311      	movs	r3, #17
 8000ff2:	463a      	mov	r2, r7
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8000ffa:	f7ff fe2b 	bl	8000c54 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCY_INERTIAL_VALUE);
 8000ffe:	f504 730b 	add.w	r3, r4, #556	; 0x22c
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2311      	movs	r3, #17
 8001006:	2200      	movs	r2, #0
 8001008:	4649      	mov	r1, r9
 800100a:	4638      	mov	r0, r7
 800100c:	f7ff fe60 	bl	8000cd0 <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCZ,ACCZ_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8001010:	f505 799e 	add.w	r9, r5, #316	; 0x13c
 8001014:	9600      	str	r6, [sp, #0]
 8001016:	2311      	movs	r3, #17
 8001018:	463a      	mov	r2, r7
 800101a:	4649      	mov	r1, r9
 800101c:	f504 7010 	add.w	r0, r4, #576	; 0x240
 8001020:	f7ff fe18 	bl	8000c54 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCZ_INERTIAL_VALUE);
 8001024:	f504 7314 	add.w	r3, r4, #592	; 0x250
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2311      	movs	r3, #17
 800102c:	2200      	movs	r2, #0
 800102e:	4649      	mov	r1, r9
 8001030:	4638      	mov	r0, r7
 8001032:	f7ff fe4d 	bl	8000cd0 <updateCharValue>
	 addService(UUID_MAGNETIC_SERVICE,MAGNETIC_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 8001036:	f505 77a0 	add.w	r7, r5, #320	; 0x140
 800103a:	220c      	movs	r2, #12
 800103c:	4639      	mov	r1, r7
 800103e:	f504 7019 	add.w	r0, r4, #612	; 0x264
 8001042:	f7ff fdd3 	bl	8000bec <addService>
	 addCharacteristic(UUID_CHAR_MAGNETIC_NAME,NAME_MAGNETIC_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(23),READABLE);
 8001046:	f505 79a2 	add.w	r9, r5, #324	; 0x144
 800104a:	f8cd 8000 	str.w	r8, [sp]
 800104e:	2317      	movs	r3, #23
 8001050:	463a      	mov	r2, r7
 8001052:	4649      	mov	r1, r9
 8001054:	f504 701d 	add.w	r0, r4, #628	; 0x274
 8001058:	f7ff fdfc 	bl	8000c54 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,NAME_MAGNETIC_HANDLE,0,SET_CONTENT_LENGTH(23),NAME_MAGNETIC_VALUE);
 800105c:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2317      	movs	r3, #23
 8001064:	2200      	movs	r2, #0
 8001066:	4649      	mov	r1, r9
 8001068:	4638      	mov	r0, r7
 800106a:	f7ff fe31 	bl	8000cd0 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGX,MAGX_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 800106e:	f505 78a4 	add.w	r8, r5, #328	; 0x148
 8001072:	9600      	str	r6, [sp, #0]
 8001074:	2311      	movs	r3, #17
 8001076:	463a      	mov	r2, r7
 8001078:	4641      	mov	r1, r8
 800107a:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 800107e:	f7ff fde9 	bl	8000c54 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),X_VALUE);
 8001082:	f504 732b 	add.w	r3, r4, #684	; 0x2ac
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2311      	movs	r3, #17
 800108a:	2200      	movs	r2, #0
 800108c:	4641      	mov	r1, r8
 800108e:	4638      	mov	r0, r7
 8001090:	f7ff fe1e 	bl	8000cd0 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGY,MAGY_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8001094:	f505 78a6 	add.w	r8, r5, #332	; 0x14c
 8001098:	9600      	str	r6, [sp, #0]
 800109a:	2311      	movs	r3, #17
 800109c:	463a      	mov	r2, r7
 800109e:	4641      	mov	r1, r8
 80010a0:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
 80010a4:	f7ff fdd6 	bl	8000c54 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Y_VALUE);
 80010a8:	f504 7334 	add.w	r3, r4, #720	; 0x2d0
 80010ac:	e008      	b.n	80010c0 <ble_init+0x36c>
 80010ae:	bf00      	nop
 80010b0:	2000055c 	.word	0x2000055c
 80010b4:	200006f0 	.word	0x200006f0
 80010b8:	20000084 	.word	0x20000084
 80010bc:	20000000 	.word	0x20000000
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2311      	movs	r3, #17
 80010c4:	2200      	movs	r2, #0
 80010c6:	4641      	mov	r1, r8
 80010c8:	4638      	mov	r0, r7
 80010ca:	f7ff fe01 	bl	8000cd0 <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGZ,MAGZ_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 80010ce:	f505 75a8 	add.w	r5, r5, #336	; 0x150
 80010d2:	9600      	str	r6, [sp, #0]
 80010d4:	2311      	movs	r3, #17
 80010d6:	463a      	mov	r2, r7
 80010d8:	4629      	mov	r1, r5
 80010da:	f504 7039 	add.w	r0, r4, #740	; 0x2e4
 80010de:	f7ff fdb9 	bl	8000c54 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Z_VALUE);
 80010e2:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
 80010e6:	9400      	str	r4, [sp, #0]
 80010e8:	2311      	movs	r3, #17
 80010ea:	2200      	movs	r2, #0
 80010ec:	4629      	mov	r1, r5
 80010ee:	4638      	mov	r0, r7
 80010f0:	f7ff fdee 	bl	8000cd0 <updateCharValue>
}
 80010f4:	b003      	add	sp, #12
 80010f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010fa:	bf00      	nop

080010fc <updateSignedMillesimal>:
void updateSignedMillesimal(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, int16_t data){
 80010fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	4607      	mov	r7, r0
 8001104:	4688      	mov	r8, r1
 8001106:	4614      	mov	r4, r2
 8001108:	461e      	mov	r6, r3
 800110a:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
    newstring=(uint8_t*)malloc(offset+7);
 800110e:	f103 0907 	add.w	r9, r3, #7
 8001112:	4648      	mov	r0, r9
 8001114:	f005 f9c6 	bl	80064a4 <malloc>
 8001118:	4605      	mov	r5, r0
    memcpy(newstring,defaultValue,offset);
 800111a:	4632      	mov	r2, r6
 800111c:	4621      	mov	r1, r4
 800111e:	f005 f9d1 	bl	80064c4 <memcpy>
	if(data<0){
 8001122:	f1ba 0f00 	cmp.w	sl, #0
 8001126:	db67      	blt.n	80011f8 <updateSignedMillesimal+0xfc>
	numberInChar[0]=43;
 8001128:	232b      	movs	r3, #43	; 0x2b
 800112a:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=data/1000;
 800112e:	4b55      	ldr	r3, [pc, #340]	; (8001284 <updateSignedMillesimal+0x188>)
 8001130:	fb83 230a 	smull	r2, r3, r3, sl
 8001134:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8001138:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(data-numberInChar[1]*1000)/100;
 8001142:	4951      	ldr	r1, [pc, #324]	; (8001288 <updateSignedMillesimal+0x18c>)
 8001144:	fb02 f101 	mul.w	r1, r2, r1
 8001148:	eb0a 0001 	add.w	r0, sl, r1
 800114c:	4c4f      	ldr	r4, [pc, #316]	; (800128c <updateSignedMillesimal+0x190>)
 800114e:	fb84 3400 	smull	r3, r4, r4, r0
 8001152:	17c3      	asrs	r3, r0, #31
 8001154:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(data-numberInChar[2]*100-numberInChar[1]*1000)/10;
 800115e:	f06f 0463 	mvn.w	r4, #99	; 0x63
 8001162:	fb04 a403 	mla	r4, r4, r3, sl
 8001166:	4421      	add	r1, r4
 8001168:	4849      	ldr	r0, [pc, #292]	; (8001290 <updateSignedMillesimal+0x194>)
 800116a:	fb80 4001 	smull	r4, r0, r0, r1
 800116e:	17cc      	asrs	r4, r1, #31
 8001170:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 8001174:	b2e4      	uxtb	r4, r4
 8001176:	f88d 400b 	strb.w	r4, [sp, #11]
    numberInChar[4]=(data-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 800117a:	ebc4 1c44 	rsb	ip, r4, r4, lsl #5
 800117e:	ebc4 018c 	rsb	r1, r4, ip, lsl #2
 8001182:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8001186:	ebc3 0ccc 	rsb	ip, r3, ip, lsl #3
 800118a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800118e:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
 8001192:	44d4      	add	ip, sl
 8001194:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001198:	00c9      	lsls	r1, r1, #3
 800119a:	fa51 fc8c 	uxtab	ip, r1, ip
 800119e:	fa5f fc8c 	uxtb.w	ip, ip
 80011a2:	f88d c00c 	strb.w	ip, [sp, #12]
    if(numberInChar[1]==0){
 80011a6:	b37a      	cbz	r2, 8001208 <updateSignedMillesimal+0x10c>
        numberInChar[1]+='0';
 80011a8:	3230      	adds	r2, #48	; 0x30
 80011aa:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 80011ae:	3330      	adds	r3, #48	; 0x30
 80011b0:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 80011b4:	3430      	adds	r4, #48	; 0x30
 80011b6:	f88d 400b 	strb.w	r4, [sp, #11]
    	numberInChar[4]+='0';
 80011ba:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80011be:	f88d c00c 	strb.w	ip, [sp, #12]
    	numberInChar[5]='\"';
 80011c2:	2322      	movs	r3, #34	; 0x22
 80011c4:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 80011c8:	237d      	movs	r3, #125	; 0x7d
 80011ca:	f88d 300e 	strb.w	r3, [sp, #14]
	int flagEmpty=0;
 80011ce:	2400      	movs	r4, #0
    memcpy(newstring+offset,numberInChar,7-flagEmpty);
 80011d0:	f1c4 0207 	rsb	r2, r4, #7
 80011d4:	a902      	add	r1, sp, #8
 80011d6:	19a8      	adds	r0, r5, r6
 80011d8:	f005 f974 	bl	80064c4 <memcpy>
	updateCharValue(service, characteristic, 0,offset+7-flagEmpty, newstring);
 80011dc:	9500      	str	r5, [sp, #0]
 80011de:	eba9 0304 	sub.w	r3, r9, r4
 80011e2:	2200      	movs	r2, #0
 80011e4:	4641      	mov	r1, r8
 80011e6:	4638      	mov	r0, r7
 80011e8:	f7ff fd72 	bl	8000cd0 <updateCharValue>
	free(newstring);
 80011ec:	4628      	mov	r0, r5
 80011ee:	f005 f961 	bl	80064b4 <free>
}
 80011f2:	b004      	add	sp, #16
 80011f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numberInChar[0]=45;
 80011f8:	232d      	movs	r3, #45	; 0x2d
 80011fa:	f88d 3008 	strb.w	r3, [sp, #8]
    data=-data;
 80011fe:	f1ca 0c00 	rsb	ip, sl, #0
 8001202:	fa0f fa8c 	sxth.w	sl, ip
 8001206:	e792      	b.n	800112e <updateSignedMillesimal+0x32>
    	if(numberInChar[2]==0){
 8001208:	bb3b      	cbnz	r3, 800125a <updateSignedMillesimal+0x15e>
        	if(numberInChar[3]==0){
 800120a:	b994      	cbnz	r4, 8001232 <updateSignedMillesimal+0x136>
        numberInChar[1]='0'+numberInChar[4];
 800120c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001210:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='\"';
 8001214:	2322      	movs	r3, #34	; 0x22
 8001216:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='}';
 800121a:	237d      	movs	r3, #125	; 0x7d
 800121c:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]=' ';
 8001220:	2320      	movs	r3, #32
 8001222:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 8001226:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 800122a:	f88d 300e 	strb.w	r3, [sp, #14]
        		flagEmpty++;
 800122e:	2403      	movs	r4, #3
    }break;
 8001230:	e7ce      	b.n	80011d0 <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[3];
 8001232:	3430      	adds	r4, #48	; 0x30
 8001234:	f88d 4009 	strb.w	r4, [sp, #9]
    	numberInChar[2]='0'+numberInChar[4];
 8001238:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800123c:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='\"';
 8001240:	2322      	movs	r3, #34	; 0x22
 8001242:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='}';
 8001246:	237d      	movs	r3, #125	; 0x7d
 8001248:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 800124c:	2320      	movs	r3, #32
 800124e:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8001252:	f88d 300e 	strb.w	r3, [sp, #14]
    		flagEmpty++;
 8001256:	2402      	movs	r4, #2
    }break;
 8001258:	e7ba      	b.n	80011d0 <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[2];
 800125a:	3330      	adds	r3, #48	; 0x30
 800125c:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 8001260:	3430      	adds	r4, #48	; 0x30
 8001262:	f88d 400a 	strb.w	r4, [sp, #10]
    	numberInChar[3]='0'+numberInChar[4];
 8001266:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800126a:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='\"';
 800126e:	2322      	movs	r3, #34	; 0x22
 8001270:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 8001274:	237d      	movs	r3, #125	; 0x7d
 8001276:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 800127a:	2320      	movs	r3, #32
 800127c:	f88d 300e 	strb.w	r3, [sp, #14]
    	flagEmpty++;
 8001280:	2401      	movs	r4, #1
    }break;
 8001282:	e7a5      	b.n	80011d0 <updateSignedMillesimal+0xd4>
 8001284:	10624dd3 	.word	0x10624dd3
 8001288:	fffffc18 	.word	0xfffffc18
 800128c:	51eb851f 	.word	0x51eb851f
 8001290:	66666667 	.word	0x66666667

08001294 <updateSignedFloat>:
void updateSignedFloat(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, float data){
 8001294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001298:	ed2d 8b02 	vpush	{d8}
 800129c:	b085      	sub	sp, #20
 800129e:	4606      	mov	r6, r0
 80012a0:	460f      	mov	r7, r1
 80012a2:	4691      	mov	r9, r2
 80012a4:	461d      	mov	r5, r3
 80012a6:	eeb0 8a40 	vmov.f32	s16, s0
	 newstring=(uint8_t*)malloc(offset+8);
 80012aa:	f103 0808 	add.w	r8, r3, #8
 80012ae:	4640      	mov	r0, r8
 80012b0:	f005 f8f8 	bl	80064a4 <malloc>
 80012b4:	4604      	mov	r4, r0
	 memcpy(newstring,defaultValue,offset);
 80012b6:	462a      	mov	r2, r5
 80012b8:	4649      	mov	r1, r9
 80012ba:	f005 f903 	bl	80064c4 <memcpy>
    int16_t newdata=(int16_t)(data*10);
 80012be:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80012c2:	ee28 8a00 	vmul.f32	s16, s16, s0
 80012c6:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 80012ca:	ee18 3a10 	vmov	r3, s16
 80012ce:	b219      	sxth	r1, r3
	if(newdata<0){
 80012d0:	2900      	cmp	r1, #0
 80012d2:	db71      	blt.n	80013b8 <updateSignedFloat+0x124>
	numberInChar[0]=43;
 80012d4:	232b      	movs	r3, #43	; 0x2b
 80012d6:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=newdata/1000;
 80012da:	4b55      	ldr	r3, [pc, #340]	; (8001430 <updateSignedFloat+0x19c>)
 80012dc:	fb83 2301 	smull	r2, r3, r3, r1
 80012e0:	17ca      	asrs	r2, r1, #31
 80012e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(newdata-numberInChar[1]*1000)/100;
 80012ec:	4851      	ldr	r0, [pc, #324]	; (8001434 <updateSignedFloat+0x1a0>)
 80012ee:	fb02 f000 	mul.w	r0, r2, r0
 80012f2:	eb01 0c00 	add.w	ip, r1, r0
 80012f6:	4b50      	ldr	r3, [pc, #320]	; (8001438 <updateSignedFloat+0x1a4>)
 80012f8:	fb83 3e0c 	smull	r3, lr, r3, ip
 80012fc:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8001300:	ebc3 136e 	rsb	r3, r3, lr, asr #5
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(newdata-numberInChar[2]*100-numberInChar[1]*1000)/10;
 800130a:	f06f 0c63 	mvn.w	ip, #99	; 0x63
 800130e:	fb0c 1c03 	mla	ip, ip, r3, r1
 8001312:	4460      	add	r0, ip
 8001314:	f8df e124 	ldr.w	lr, [pc, #292]	; 800143c <updateSignedFloat+0x1a8>
 8001318:	fb8e ce00 	smull	ip, lr, lr, r0
 800131c:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 8001320:	ebcc 0cae 	rsb	ip, ip, lr, asr #2
 8001324:	fa5f fc8c 	uxtb.w	ip, ip
 8001328:	f88d c00b 	strb.w	ip, [sp, #11]
    numberInChar[5]=(newdata-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 800132c:	ebcc 1e4c 	rsb	lr, ip, ip, lsl #5
 8001330:	ebcc 008e 	rsb	r0, ip, lr, lsl #2
 8001334:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8001338:	ebc3 0ece 	rsb	lr, r3, lr, lsl #3
 800133c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001340:	eb0e 0e40 	add.w	lr, lr, r0, lsl #1
 8001344:	448e      	add	lr, r1
 8001346:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800134a:	00c9      	lsls	r1, r1, #3
 800134c:	fa51 fe8e 	uxtab	lr, r1, lr
 8001350:	fa5f fe8e 	uxtb.w	lr, lr
 8001354:	f88d e00d 	strb.w	lr, [sp, #13]
    if(numberInChar[1]==0){
 8001358:	b3b2      	cbz	r2, 80013c8 <updateSignedFloat+0x134>
        numberInChar[1]+='0';
 800135a:	3230      	adds	r2, #48	; 0x30
 800135c:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 8001360:	3330      	adds	r3, #48	; 0x30
 8001362:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 8001366:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800136a:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='.';
 800136e:	232e      	movs	r3, #46	; 0x2e
 8001370:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]+='0';
 8001374:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001378:	f88d e00d 	strb.w	lr, [sp, #13]
    	numberInChar[6]='\"';
 800137c:	2322      	movs	r3, #34	; 0x22
 800137e:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]='}';
 8001382:	237d      	movs	r3, #125	; 0x7d
 8001384:	f88d 300f 	strb.w	r3, [sp, #15]
	int flagEmpty=0;
 8001388:	f04f 0900 	mov.w	r9, #0
    memcpy(newstring+offset,numberInChar,8-flagEmpty);
 800138c:	f1c9 0208 	rsb	r2, r9, #8
 8001390:	a902      	add	r1, sp, #8
 8001392:	1960      	adds	r0, r4, r5
 8001394:	f005 f896 	bl	80064c4 <memcpy>
	updateCharValue(service, characteristic, 0, offset+8-flagEmpty, newstring);
 8001398:	9400      	str	r4, [sp, #0]
 800139a:	eba8 0309 	sub.w	r3, r8, r9
 800139e:	2200      	movs	r2, #0
 80013a0:	4639      	mov	r1, r7
 80013a2:	4630      	mov	r0, r6
 80013a4:	f7ff fc94 	bl	8000cd0 <updateCharValue>
	free(newstring);
 80013a8:	4620      	mov	r0, r4
 80013aa:	f005 f883 	bl	80064b4 <free>
}
 80013ae:	b005      	add	sp, #20
 80013b0:	ecbd 8b02 	vpop	{d8}
 80013b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    numberInChar[0]=45;
 80013b8:	232d      	movs	r3, #45	; 0x2d
 80013ba:	f88d 3008 	strb.w	r3, [sp, #8]
    newdata=-newdata;
 80013be:	f1c1 0e00 	rsb	lr, r1, #0
 80013c2:	fa0f f18e 	sxth.w	r1, lr
 80013c6:	e788      	b.n	80012da <updateSignedFloat+0x46>
    	if(numberInChar[2]==0){
 80013c8:	b9c3      	cbnz	r3, 80013fc <updateSignedFloat+0x168>
        numberInChar[1]='0'+numberInChar[3];
 80013ca:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80013ce:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='.';
 80013d2:	232e      	movs	r3, #46	; 0x2e
 80013d4:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='0'+numberInChar[5];
 80013d8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80013dc:	f88d e00b 	strb.w	lr, [sp, #11]
    	numberInChar[4]='\"';
 80013e0:	2322      	movs	r3, #34	; 0x22
 80013e2:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 80013e6:	237d      	movs	r3, #125	; 0x7d
 80013e8:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 80013ec:	2320      	movs	r3, #32
 80013ee:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 80013f2:	f88d 300f 	strb.w	r3, [sp, #15]
    		flagEmpty++;
 80013f6:	f04f 0902 	mov.w	r9, #2
    }break;
 80013fa:	e7c7      	b.n	800138c <updateSignedFloat+0xf8>
        numberInChar[1]='0'+numberInChar[2];
 80013fc:	3330      	adds	r3, #48	; 0x30
 80013fe:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 8001402:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001406:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='.';
 800140a:	232e      	movs	r3, #46	; 0x2e
 800140c:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='0'+numberInChar[5];
 8001410:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001414:	f88d e00c 	strb.w	lr, [sp, #12]
    	numberInChar[5]='\"';
 8001418:	2322      	movs	r3, #34	; 0x22
 800141a:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 800141e:	237d      	movs	r3, #125	; 0x7d
 8001420:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 8001424:	2320      	movs	r3, #32
 8001426:	f88d 300f 	strb.w	r3, [sp, #15]
    	flagEmpty++;
 800142a:	f04f 0901 	mov.w	r9, #1
    }break;
 800142e:	e7ad      	b.n	800138c <updateSignedFloat+0xf8>
 8001430:	10624dd3 	.word	0x10624dd3
 8001434:	fffffc18 	.word	0xfffffc18
 8001438:	51eb851f 	.word	0x51eb851f
 800143c:	66666667 	.word	0x66666667

08001440 <blink>:


uint8_t blinkStatus = 0;

void blink()
{
 8001440:	b508      	push	{r3, lr}
	blinkStatus = !blinkStatus;
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <blink+0x18>)
 8001444:	7819      	ldrb	r1, [r3, #0]
 8001446:	fab1 f181 	clz	r1, r1
 800144a:	0949      	lsrs	r1, r1, #5
 800144c:	7019      	strb	r1, [r3, #0]
	setDigital(MF_led1,blinkStatus);
 800144e:	2002      	movs	r0, #2
 8001450:	f000 f9be 	bl	80017d0 <setDigital>
}
 8001454:	bd08      	pop	{r3, pc}
 8001456:	bf00      	nop
 8001458:	200006d0 	.word	0x200006d0

0800145c <testBSPfunctions>:

void testBSPfunctions()
{
 800145c:	b510      	push	{r4, lr}
 800145e:	b090      	sub	sp, #64	; 0x40
    char Test[50];
    sprintf(Test, "Temperature = %d\n\r", (int)temperature);
 8001460:	4c3c      	ldr	r4, [pc, #240]	; (8001554 <testBSPfunctions+0xf8>)
 8001462:	edd4 7a01 	vldr	s15, [r4, #4]
 8001466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146a:	ee17 2a90 	vmov	r2, s15
 800146e:	493a      	ldr	r1, [pc, #232]	; (8001558 <testBSPfunctions+0xfc>)
 8001470:	a803      	add	r0, sp, #12
 8001472:	f005 f935 	bl	80066e0 <siprintf>
    appendMessage(Test);
 8001476:	a803      	add	r0, sp, #12
 8001478:	f000 ffee 	bl	8002458 <appendMessage>
    sprintf(Test, "Humidity = %d\n\r", (int)humidity);
 800147c:	edd4 7a02 	vldr	s15, [r4, #8]
 8001480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001484:	ee17 2a90 	vmov	r2, s15
 8001488:	4934      	ldr	r1, [pc, #208]	; (800155c <testBSPfunctions+0x100>)
 800148a:	a803      	add	r0, sp, #12
 800148c:	f005 f928 	bl	80066e0 <siprintf>
    appendMessage(Test);
 8001490:	a803      	add	r0, sp, #12
 8001492:	f000 ffe1 	bl	8002458 <appendMessage>
    sprintf(Test, "Pressure = %d\n\r", (int)pressure);
 8001496:	edd4 7a03 	vldr	s15, [r4, #12]
 800149a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149e:	ee17 2a90 	vmov	r2, s15
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <testBSPfunctions+0x104>)
 80014a4:	a803      	add	r0, sp, #12
 80014a6:	f005 f91b 	bl	80066e0 <siprintf>
    appendMessage(Test);
 80014aa:	a803      	add	r0, sp, #12
 80014ac:	f000 ffd4 	bl	8002458 <appendMessage>
    sprintf(Test, "Accellerometer = %d,%d,%d\n\r",
    	(int)accelerometer[0], (int)accelerometer[1], (int)accelerometer[2]);
 80014b0:	6923      	ldr	r3, [r4, #16]
 80014b2:	ed93 7a00 	vldr	s14, [r3]
 80014b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80014ba:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(Test, "Accellerometer = %d,%d,%d\n\r",
 80014be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c2:	edcd 7a00 	vstr	s15, [sp]
 80014c6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80014ca:	ee17 3a90 	vmov	r3, s15
 80014ce:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80014d2:	ee17 2a90 	vmov	r2, s15
 80014d6:	4923      	ldr	r1, [pc, #140]	; (8001564 <testBSPfunctions+0x108>)
 80014d8:	a803      	add	r0, sp, #12
 80014da:	f005 f901 	bl	80066e0 <siprintf>
    appendMessage(Test);
 80014de:	a803      	add	r0, sp, #12
 80014e0:	f000 ffba 	bl	8002458 <appendMessage>

    sprintf(Test, "Magneto = %d,%d,%d\n\r",
    	(int)magnetometer[0], (int)magnetometer[1], (int)magnetometer[2]);
 80014e4:	6963      	ldr	r3, [r4, #20]
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80014ee:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(Test, "Magneto = %d,%d,%d\n\r",
 80014f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f6:	edcd 7a00 	vstr	s15, [sp]
 80014fa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80014fe:	ee17 3a90 	vmov	r3, s15
 8001502:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001506:	ee17 2a90 	vmov	r2, s15
 800150a:	4917      	ldr	r1, [pc, #92]	; (8001568 <testBSPfunctions+0x10c>)
 800150c:	a803      	add	r0, sp, #12
 800150e:	f005 f8e7 	bl	80066e0 <siprintf>
    appendMessage(Test);
 8001512:	a803      	add	r0, sp, #12
 8001514:	f000 ffa0 	bl	8002458 <appendMessage>

    sprintf(Test, "Gyro = %d,%d,%d\n\r",
    	(int)gyroscope[0], (int)gyroscope[1], (int)gyroscope[2]);
 8001518:	69a3      	ldr	r3, [r4, #24]
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001522:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(Test, "Gyro = %d,%d,%d\n\r",
 8001526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152a:	edcd 7a00 	vstr	s15, [sp]
 800152e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001532:	ee17 3a90 	vmov	r3, s15
 8001536:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800153a:	ee17 2a90 	vmov	r2, s15
 800153e:	490b      	ldr	r1, [pc, #44]	; (800156c <testBSPfunctions+0x110>)
 8001540:	a803      	add	r0, sp, #12
 8001542:	f005 f8cd 	bl	80066e0 <siprintf>
    appendMessage(Test);
 8001546:	a803      	add	r0, sp, #12
 8001548:	f000 ff86 	bl	8002458 <appendMessage>

    sendMessage();
 800154c:	f000 ff72 	bl	8002434 <sendMessage>

}
 8001550:	b010      	add	sp, #64	; 0x40
 8001552:	bd10      	pop	{r4, pc}
 8001554:	200006d0 	.word	0x200006d0
 8001558:	08006e50 	.word	0x08006e50
 800155c:	08006e64 	.word	0x08006e64
 8001560:	08006e74 	.word	0x08006e74
 8001564:	08006e84 	.word	0x08006e84
 8001568:	08006ea0 	.word	0x08006ea0
 800156c:	08006eb8 	.word	0x08006eb8

08001570 <idle_enter>:



void idle_enter()
{
 8001570:	b508      	push	{r3, lr}
    setTimer(TF_Main, testBSPfunctions, 3000);
 8001572:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001576:	2300      	movs	r3, #0
 8001578:	4909      	ldr	r1, [pc, #36]	; (80015a0 <idle_enter+0x30>)
 800157a:	2000      	movs	r0, #0
 800157c:	f000 feb0 	bl	80022e0 <setTimer>

    setDigital(MF_led2, GPIO_PIN_RESET);
 8001580:	2100      	movs	r1, #0
 8001582:	2003      	movs	r0, #3
 8001584:	f000 f924 	bl	80017d0 <setDigital>

    setDigital(MF_led1,GPIO_PIN_SET);
 8001588:	2101      	movs	r1, #1
 800158a:	2002      	movs	r0, #2
 800158c:	f000 f920 	bl	80017d0 <setDigital>

    setTimer(TF_Main, blink, 500);
 8001590:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001594:	2300      	movs	r3, #0
 8001596:	4903      	ldr	r1, [pc, #12]	; (80015a4 <idle_enter+0x34>)
 8001598:	2000      	movs	r0, #0
 800159a:	f000 fea1 	bl	80022e0 <setTimer>

}
 800159e:	bd08      	pop	{r3, pc}
 80015a0:	0800145d 	.word	0x0800145d
 80015a4:	08001441 	.word	0x08001441

080015a8 <idle_beforeLoop>:


void idle_beforeLoop(uint8_t deltaMs)
{
 80015a8:	b510      	push	{r4, lr}
	temperature = bspGetValue(BSP_temperature);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f000 f932 	bl	8001814 <bspGetValue>
 80015b0:	4c0c      	ldr	r4, [pc, #48]	; (80015e4 <idle_beforeLoop+0x3c>)
 80015b2:	ed84 0a01 	vstr	s0, [r4, #4]
	humidity = bspGetValue(BSP_humidity);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f92c 	bl	8001814 <bspGetValue>
 80015bc:	ed84 0a02 	vstr	s0, [r4, #8]
	pressure = bspGetValue(BSP_pressure);
 80015c0:	2002      	movs	r0, #2
 80015c2:	f000 f927 	bl	8001814 <bspGetValue>
 80015c6:	ed84 0a03 	vstr	s0, [r4, #12]
	magnetometer = bspGetTripleValue(BSPT_magneto);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 f932 	bl	8001834 <bspGetTripleValue>
 80015d0:	6160      	str	r0, [r4, #20]
	accelerometer = bspGetTripleValue(BSPT_accellero);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f000 f92e 	bl	8001834 <bspGetTripleValue>
 80015d8:	6120      	str	r0, [r4, #16]
	gyroscope = bspGetTripleValue(BSPT_gyro);
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 f92a 	bl	8001834 <bspGetTripleValue>
 80015e0:	61a0      	str	r0, [r4, #24]
}
 80015e2:	bd10      	pop	{r4, pc}
 80015e4:	200006d0 	.word	0x200006d0

080015e8 <idle_loop>:


void idle_loop(uint8_t deltaMs)
{
 80015e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015ec:	b083      	sub	sp, #12

	  if(readDigital(MF_BleInt)){//if an event occurs let's catch it
 80015ee:	2004      	movs	r0, #4
 80015f0:	f000 f8fe 	bl	80017f0 <readDigital>
 80015f4:	b928      	cbnz	r0, 8001602 <idle_loop+0x1a>
		  catchBLE();
		  return;

	  }

	  if(update){
 80015f6:	4b48      	ldr	r3, [pc, #288]	; (8001718 <idle_loop+0x130>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	b92b      	cbnz	r3, 8001608 <idle_loop+0x20>
		  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,X_VALUE,10,magnetometer[0]);
		  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,Y_VALUE,10,magnetometer[1]);
		  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,Z_VALUE,10,magnetometer[2]);

	  }
}
 80015fc:	b003      	add	sp, #12
 80015fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		  catchBLE();
 8001602:	f7ff faad 	bl	8000b60 <catchBLE>
		  return;
 8001606:	e7f9      	b.n	80015fc <idle_loop+0x14>
		  update=0;
 8001608:	4c43      	ldr	r4, [pc, #268]	; (8001718 <idle_loop+0x130>)
 800160a:	2300      	movs	r3, #0
 800160c:	61e3      	str	r3, [r4, #28]
		  updateSignedMillesimal(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,TOF_VALUE,13,0);
 800160e:	4d43      	ldr	r5, [pc, #268]	; (800171c <idle_loop+0x134>)
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	230d      	movs	r3, #13
 8001614:	4a42      	ldr	r2, [pc, #264]	; (8001720 <idle_loop+0x138>)
 8001616:	4943      	ldr	r1, [pc, #268]	; (8001724 <idle_loop+0x13c>)
 8001618:	4628      	mov	r0, r5
 800161a:	f7ff fd6f 	bl	80010fc <updateSignedMillesimal>
		  sleep(10);
 800161e:	200a      	movs	r0, #10
 8001620:	f000 fe92 	bl	8002348 <sleep>
		  updateSignedFloat(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,VALUE_TEMP,9,temperature);
 8001624:	6860      	ldr	r0, [r4, #4]
 8001626:	f7fe ff8f 	bl	8000548 <__aeabi_f2d>
 800162a:	ec41 0b10 	vmov	d0, r0, r1
 800162e:	2309      	movs	r3, #9
 8001630:	4a3d      	ldr	r2, [pc, #244]	; (8001728 <idle_loop+0x140>)
 8001632:	493e      	ldr	r1, [pc, #248]	; (800172c <idle_loop+0x144>)
 8001634:	4628      	mov	r0, r5
 8001636:	f7ff fe2d 	bl	8001294 <updateSignedFloat>
		  sleep(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f000 fe84 	bl	8002348 <sleep>
		  updateSignedFloat(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,VALUE_HUM,8,humidity);
 8001640:	68a0      	ldr	r0, [r4, #8]
 8001642:	f7fe ff81 	bl	8000548 <__aeabi_f2d>
 8001646:	ec41 0b10 	vmov	d0, r0, r1
 800164a:	2308      	movs	r3, #8
 800164c:	4a38      	ldr	r2, [pc, #224]	; (8001730 <idle_loop+0x148>)
 800164e:	4939      	ldr	r1, [pc, #228]	; (8001734 <idle_loop+0x14c>)
 8001650:	4628      	mov	r0, r5
 8001652:	f7ff fe1f 	bl	8001294 <updateSignedFloat>
		  sleep(10);
 8001656:	200a      	movs	r0, #10
 8001658:	f000 fe76 	bl	8002348 <sleep>
		  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,X_VALUE,10,accelerometer[0]);
 800165c:	6923      	ldr	r3, [r4, #16]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f7fe ff72 	bl	8000548 <__aeabi_f2d>
 8001664:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8001764 <idle_loop+0x17c>
 8001668:	4e33      	ldr	r6, [pc, #204]	; (8001738 <idle_loop+0x150>)
 800166a:	ec41 0b10 	vmov	d0, r0, r1
 800166e:	230a      	movs	r3, #10
 8001670:	464a      	mov	r2, r9
 8001672:	4932      	ldr	r1, [pc, #200]	; (800173c <idle_loop+0x154>)
 8001674:	4630      	mov	r0, r6
 8001676:	f7ff fd41 	bl	80010fc <updateSignedMillesimal>
		  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,Y_VALUE,10,accelerometer[1]);
 800167a:	6923      	ldr	r3, [r4, #16]
 800167c:	6858      	ldr	r0, [r3, #4]
 800167e:	f7fe ff63 	bl	8000548 <__aeabi_f2d>
 8001682:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001768 <idle_loop+0x180>
 8001686:	ec41 0b10 	vmov	d0, r0, r1
 800168a:	230a      	movs	r3, #10
 800168c:	4642      	mov	r2, r8
 800168e:	492c      	ldr	r1, [pc, #176]	; (8001740 <idle_loop+0x158>)
 8001690:	4630      	mov	r0, r6
 8001692:	f7ff fd33 	bl	80010fc <updateSignedMillesimal>
		  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,Z_VALUE,10,accelerometer[2]);
 8001696:	6923      	ldr	r3, [r4, #16]
 8001698:	6898      	ldr	r0, [r3, #8]
 800169a:	f7fe ff55 	bl	8000548 <__aeabi_f2d>
 800169e:	4f29      	ldr	r7, [pc, #164]	; (8001744 <idle_loop+0x15c>)
 80016a0:	ec41 0b10 	vmov	d0, r0, r1
 80016a4:	230a      	movs	r3, #10
 80016a6:	463a      	mov	r2, r7
 80016a8:	4927      	ldr	r1, [pc, #156]	; (8001748 <idle_loop+0x160>)
 80016aa:	4630      	mov	r0, r6
 80016ac:	f7ff fd26 	bl	80010fc <updateSignedMillesimal>
		  updateSignedFloat(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,VALUE_PRESS,10,pressure);
 80016b0:	68e0      	ldr	r0, [r4, #12]
 80016b2:	f7fe ff49 	bl	8000548 <__aeabi_f2d>
 80016b6:	ec41 0b10 	vmov	d0, r0, r1
 80016ba:	230a      	movs	r3, #10
 80016bc:	4a23      	ldr	r2, [pc, #140]	; (800174c <idle_loop+0x164>)
 80016be:	4924      	ldr	r1, [pc, #144]	; (8001750 <idle_loop+0x168>)
 80016c0:	4628      	mov	r0, r5
 80016c2:	f7ff fde7 	bl	8001294 <updateSignedFloat>
		  sleep(10);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f000 fe3e 	bl	8002348 <sleep>
		  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,X_VALUE,10,magnetometer[0]);
 80016cc:	6963      	ldr	r3, [r4, #20]
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	f7fe ff3a 	bl	8000548 <__aeabi_f2d>
 80016d4:	4d1f      	ldr	r5, [pc, #124]	; (8001754 <idle_loop+0x16c>)
 80016d6:	ec41 0b10 	vmov	d0, r0, r1
 80016da:	230a      	movs	r3, #10
 80016dc:	464a      	mov	r2, r9
 80016de:	491e      	ldr	r1, [pc, #120]	; (8001758 <idle_loop+0x170>)
 80016e0:	4628      	mov	r0, r5
 80016e2:	f7ff fd0b 	bl	80010fc <updateSignedMillesimal>
		  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,Y_VALUE,10,magnetometer[1]);
 80016e6:	6963      	ldr	r3, [r4, #20]
 80016e8:	6858      	ldr	r0, [r3, #4]
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	ec41 0b10 	vmov	d0, r0, r1
 80016f2:	230a      	movs	r3, #10
 80016f4:	4642      	mov	r2, r8
 80016f6:	4919      	ldr	r1, [pc, #100]	; (800175c <idle_loop+0x174>)
 80016f8:	4628      	mov	r0, r5
 80016fa:	f7ff fcff 	bl	80010fc <updateSignedMillesimal>
		  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,Z_VALUE,10,magnetometer[2]);
 80016fe:	6963      	ldr	r3, [r4, #20]
 8001700:	6898      	ldr	r0, [r3, #8]
 8001702:	f7fe ff21 	bl	8000548 <__aeabi_f2d>
 8001706:	ec41 0b10 	vmov	d0, r0, r1
 800170a:	230a      	movs	r3, #10
 800170c:	463a      	mov	r2, r7
 800170e:	4914      	ldr	r1, [pc, #80]	; (8001760 <idle_loop+0x178>)
 8001710:	4628      	mov	r0, r5
 8001712:	f7ff fcf3 	bl	80010fc <updateSignedMillesimal>
 8001716:	e771      	b.n	80015fc <idle_loop+0x14>
 8001718:	200006d0 	.word	0x200006d0
 800171c:	20000670 	.word	0x20000670
 8001720:	200001ac 	.word	0x200001ac
 8001724:	20000684 	.word	0x20000684
 8001728:	20000144 	.word	0x20000144
 800172c:	20000678 	.word	0x20000678
 8001730:	20000168 	.word	0x20000168
 8001734:	2000067c 	.word	0x2000067c
 8001738:	20000688 	.word	0x20000688
 800173c:	20000690 	.word	0x20000690
 8001740:	20000694 	.word	0x20000694
 8001744:	200002f4 	.word	0x200002f4
 8001748:	20000698 	.word	0x20000698
 800174c:	20000188 	.word	0x20000188
 8001750:	20000680 	.word	0x20000680
 8001754:	2000069c 	.word	0x2000069c
 8001758:	200006a4 	.word	0x200006a4
 800175c:	200006a8 	.word	0x200006a8
 8001760:	200006ac 	.word	0x200006ac
 8001764:	200002ac 	.word	0x200002ac
 8001768:	200002d0 	.word	0x200002d0

0800176c <idle_afterLoop>:

void idle_afterLoop(uint8_t deltaMs)
{
}
 800176c:	4770      	bx	lr
	...

08001770 <bspFunctionInit>:

static int16_t placeHolderInt16[3];
static float placeHolderFloat[3];

void bspFunctionInit()
{
 8001770:	b510      	push	{r4, lr}
    BSP_HSENSOR_Init();
 8001772:	f001 fb51 	bl	8002e18 <BSP_HSENSOR_Init>
    bspFunctionArray[BSP_humidity] = &BSP_HSENSOR_ReadHumidity;
 8001776:	4c09      	ldr	r4, [pc, #36]	; (800179c <bspFunctionInit+0x2c>)
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <bspFunctionInit+0x30>)
 800177a:	6023      	str	r3, [r4, #0]
    BSP_TSENSOR_Init();
 800177c:	f001 fbbc 	bl	8002ef8 <BSP_TSENSOR_Init>
    bspFunctionArray[BSP_temperature] = &BSP_TSENSOR_ReadTemp;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <bspFunctionInit+0x34>)
 8001782:	6063      	str	r3, [r4, #4]
    BSP_PSENSOR_Init();
 8001784:	f001 fb98 	bl	8002eb8 <BSP_PSENSOR_Init>
    bspFunctionArray[BSP_pressure] = &BSP_PSENSOR_ReadPressure;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <bspFunctionInit+0x38>)
 800178a:	60a3      	str	r3, [r4, #8]
    BSP_ACCELERO_Init();
 800178c:	f001 fae0 	bl	8002d50 <BSP_ACCELERO_Init>
    BSP_GYRO_Init();
 8001790:	f001 fb0e 	bl	8002db0 <BSP_GYRO_Init>
    BSP_MAGNETO_Init();
 8001794:	f001 fb60 	bl	8002e58 <BSP_MAGNETO_Init>
}
 8001798:	bd10      	pop	{r4, pc}
 800179a:	bf00      	nop
 800179c:	200006f8 	.word	0x200006f8
 80017a0:	08002e45 	.word	0x08002e45
 80017a4:	08002f1d 	.word	0x08002f1d
 80017a8:	08002ee5 	.word	0x08002ee5

080017ac <setMappedFunction>:

void setMappedFunction(MF mf, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, double offset, double factor)
{
 80017ac:	b410      	push	{r4}
    ios_manager[mf].m_type = GPIOx;
 80017ae:	4c07      	ldr	r4, [pc, #28]	; (80017cc <setMappedFunction+0x20>)
 80017b0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80017b4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80017b8:	6119      	str	r1, [r3, #16]
    ios_manager[mf].m_pin = GPIO_Pin;
 80017ba:	829a      	strh	r2, [r3, #20]
    ios_manager[mf].m_offset = offset;
 80017bc:	ed83 0b08 	vstr	d0, [r3, #32]
    ios_manager[mf].m_factor = factor;
 80017c0:	ed83 1b06 	vstr	d1, [r3, #24]
}
 80017c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200006f8 	.word	0x200006f8

080017d0 <setDigital>:

void setDigital(MF mf, GPIO_PinState state)
{
 80017d0:	b508      	push	{r3, lr}
 80017d2:	460a      	mov	r2, r1
    HAL_GPIO_WritePin(ios_manager[mf].m_type, ios_manager[mf].m_pin, state);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <setDigital+0x1c>)
 80017d6:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80017da:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 80017de:	f8bc 1014 	ldrh.w	r1, [ip, #20]
 80017e2:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80017e6:	f001 fdf8 	bl	80033da <HAL_GPIO_WritePin>
}
 80017ea:	bd08      	pop	{r3, pc}
 80017ec:	200006f8 	.word	0x200006f8

080017f0 <readDigital>:

GPIO_PinState readDigital(MF mf)
{

    if (mf >= MF_COUNT)
 80017f0:	2807      	cmp	r0, #7
 80017f2:	d901      	bls.n	80017f8 <readDigital+0x8>
        return GPIO_PIN_RESET;
 80017f4:	2000      	movs	r0, #0
    return HAL_GPIO_ReadPin(ios_manager[mf].m_type, ios_manager[mf].m_pin);
}
 80017f6:	4770      	bx	lr
{
 80017f8:	b508      	push	{r3, lr}
    return HAL_GPIO_ReadPin(ios_manager[mf].m_type, ios_manager[mf].m_pin);
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <readDigital+0x20>)
 80017fc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001800:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001804:	8a91      	ldrh	r1, [r2, #20]
 8001806:	6910      	ldr	r0, [r2, #16]
 8001808:	f001 fde0 	bl	80033cc <HAL_GPIO_ReadPin>
}
 800180c:	bd08      	pop	{r3, pc}
 800180e:	bf00      	nop
 8001810:	200006f8 	.word	0x200006f8

08001814 <bspGetValue>:

float bspGetValue(bspF function)
{
    if (function >= BSP_COUNT)
 8001814:	2802      	cmp	r0, #2
 8001816:	d805      	bhi.n	8001824 <bspGetValue+0x10>
{
 8001818:	b508      	push	{r3, lr}
        return 404;
    return (bspFunctionArray[function])();
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <bspGetValue+0x18>)
 800181c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001820:	4798      	blx	r3
}
 8001822:	bd08      	pop	{r3, pc}
        return 404;
 8001824:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001830 <bspGetValue+0x1c>
}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	200006f8 	.word	0x200006f8
 8001830:	43ca0000 	.word	0x43ca0000

08001834 <bspGetTripleValue>:

float *bspGetTripleValue(bspTF function)
{
    if (function >= BSPT_COUNT)
 8001834:	2802      	cmp	r0, #2
 8001836:	d827      	bhi.n	8001888 <bspGetTripleValue+0x54>
{
 8001838:	b510      	push	{r4, lr}
        return NULL;
    switch (function)
 800183a:	2801      	cmp	r0, #1
 800183c:	d004      	beq.n	8001848 <bspGetTripleValue+0x14>
 800183e:	2802      	cmp	r0, #2
 8001840:	d00c      	beq.n	800185c <bspGetTripleValue+0x28>
 8001842:	b138      	cbz	r0, 8001854 <bspGetTripleValue+0x20>
{
 8001844:	2300      	movs	r3, #0
 8001846:	e01b      	b.n	8001880 <bspGetTripleValue+0x4c>
    {
    case BSPT_gyro:
        BSP_GYRO_GetXYZ(placeHolderFloat);
 8001848:	4c10      	ldr	r4, [pc, #64]	; (800188c <bspGetTripleValue+0x58>)
 800184a:	4620      	mov	r0, r4
 800184c:	f001 fada 	bl	8002e04 <BSP_GYRO_GetXYZ>
        return placeHolderFloat;
 8001850:	4620      	mov	r0, r4
 8001852:	e018      	b.n	8001886 <bspGetTripleValue+0x52>

    case BSPT_magneto:
        BSP_MAGNETO_GetXYZ(placeHolderInt16);
 8001854:	480e      	ldr	r0, [pc, #56]	; (8001890 <bspGetTripleValue+0x5c>)
 8001856:	f001 fb25 	bl	8002ea4 <BSP_MAGNETO_GetXYZ>
        break;
 800185a:	e7f3      	b.n	8001844 <bspGetTripleValue+0x10>

    case BSPT_accellero:
        BSP_ACCELERO_AccGetXYZ(placeHolderInt16);
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <bspGetTripleValue+0x5c>)
 800185e:	f001 fa9d 	bl	8002d9c <BSP_ACCELERO_AccGetXYZ>
        break;
 8001862:	e7ef      	b.n	8001844 <bspGetTripleValue+0x10>
    default:
        break;
    }

    for (int i = 0; i < 3; i++)
        placeHolderFloat[i] = placeHolderInt16[i];
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <bspGetTripleValue+0x60>)
 8001866:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800186a:	f9b1 10dc 	ldrsh.w	r1, [r1, #220]	; 0xdc
 800186e:	ee07 1a90 	vmov	s15, r1
 8001872:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	edc2 7a34 	vstr	s15, [r2, #208]	; 0xd0
    for (int i = 0; i < 3; i++)
 800187e:	3301      	adds	r3, #1
 8001880:	2b02      	cmp	r3, #2
 8001882:	ddef      	ble.n	8001864 <bspGetTripleValue+0x30>
    return placeHolderFloat;
 8001884:	4801      	ldr	r0, [pc, #4]	; (800188c <bspGetTripleValue+0x58>)
}
 8001886:	bd10      	pop	{r4, pc}
        return NULL;
 8001888:	2000      	movs	r0, #0
}
 800188a:	4770      	bx	lr
 800188c:	200007c8 	.word	0x200007c8
 8001890:	200007d4 	.word	0x200007d4
 8001894:	200006f8 	.word	0x200006f8

08001898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800189c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	2400      	movs	r4, #0
 80018a0:	9405      	str	r4, [sp, #20]
 80018a2:	9406      	str	r4, [sp, #24]
 80018a4:	9407      	str	r4, [sp, #28]
 80018a6:	9408      	str	r4, [sp, #32]
 80018a8:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018aa:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <MX_GPIO_Init+0x128>)
 80018ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ae:	f042 0210 	orr.w	r2, r2, #16
 80018b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80018b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b6:	f002 0210 	and.w	r2, r2, #16
 80018ba:	9200      	str	r2, [sp, #0]
 80018bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c0:	f042 0202 	orr.w	r2, r2, #2
 80018c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80018c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c8:	f002 0202 	and.w	r2, r2, #2
 80018cc:	9201      	str	r2, [sp, #4]
 80018ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018d2:	f042 0208 	orr.w	r2, r2, #8
 80018d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80018d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018da:	f002 0208 	and.w	r2, r2, #8
 80018de:	9202      	str	r2, [sp, #8]
 80018e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018e4:	f042 0204 	orr.w	r2, r2, #4
 80018e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80018ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ec:	f002 0204 	and.w	r2, r2, #4
 80018f0:	9203      	str	r2, [sp, #12]
 80018f2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	9304      	str	r3, [sp, #16]
 8001904:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001906:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80019d0 <MX_GPIO_Init+0x138>
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001910:	4648      	mov	r0, r9
 8001912:	f001 fd62 	bl	80033da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port, TOF_RESET_Pin, GPIO_PIN_RESET);
 8001916:	4e2b      	ldr	r6, [pc, #172]	; (80019c4 <MX_GPIO_Init+0x12c>)
 8001918:	4622      	mov	r2, r4
 800191a:	2140      	movs	r1, #64	; 0x40
 800191c:	4630      	mov	r0, r6
 800191e:	f001 fd5c 	bl	80033da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001922:	2201      	movs	r2, #1
 8001924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 fd55 	bl	80033da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001930:	f04f 0840 	mov.w	r8, #64	; 0x40
 8001934:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <MX_GPIO_Init+0x130>)
 800193a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800193e:	a905      	add	r1, sp, #20
 8001940:	4822      	ldr	r0, [pc, #136]	; (80019cc <MX_GPIO_Init+0x134>)
 8001942:	f001 fbbd 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001946:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800194a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2501      	movs	r5, #1
 800194e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001956:	a905      	add	r1, sp, #20
 8001958:	4648      	mov	r0, r9
 800195a:	f001 fbb1 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_RESET_Pin */
  GPIO_InitStruct.Pin = TOF_RESET_Pin;
 800195e:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(TOF_RESET_GPIO_Port, &GPIO_InitStruct);
 8001968:	a905      	add	r1, sp, #20
 800196a:	4630      	mov	r0, r6
 800196c:	f001 fba8 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RESET_Pin */
  GPIO_InitStruct.Pin = BLE_RESET_Pin;
 8001970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001974:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BLE_RESET_GPIO_Port, &GPIO_InitStruct);
 800197c:	a905      	add	r1, sp, #20
 800197e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001982:	f001 fb9d 	bl	80030c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001986:	2320      	movs	r3, #32
 8001988:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	a905      	add	r1, sp, #20
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f001 fb93 	bl	80030c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800199a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	a905      	add	r1, sp, #20
 80019a2:	4630      	mov	r0, r6
 80019a4:	f001 fb8c 	bl	80030c0 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019a8:	4622      	mov	r2, r4
 80019aa:	4621      	mov	r1, r4
 80019ac:	2017      	movs	r0, #23
 80019ae:	f001 fb2d 	bl	800300c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019b2:	2017      	movs	r0, #23
 80019b4:	f001 fb62 	bl	800307c <HAL_NVIC_EnableIRQ>

}
 80019b8:	b00b      	add	sp, #44	; 0x2c
 80019ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000800 	.word	0x48000800
 80019c8:	10110000 	.word	0x10110000
 80019cc:	48001000 	.word	0x48001000
 80019d0:	48000c00 	.word	0x48000c00

080019d4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <Error_Handler+0x2>

080019d8 <MX_SPI3_Init>:
{
 80019d8:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 80019da:	480f      	ldr	r0, [pc, #60]	; (8001a18 <MX_SPI3_Init+0x40>)
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_SPI3_Init+0x44>)
 80019de:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019e0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019e4:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019e6:	2300      	movs	r3, #0
 80019e8:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019ee:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f0:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f2:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f8:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019fa:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019fc:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fe:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a00:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a02:	2207      	movs	r2, #7
 8001a04:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a06:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a0c:	f003 fa5b 	bl	8004ec6 <HAL_SPI_Init>
 8001a10:	b900      	cbnz	r0, 8001a14 <MX_SPI3_Init+0x3c>
}
 8001a12:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a14:	f7ff ffde 	bl	80019d4 <Error_Handler>
 8001a18:	200007dc 	.word	0x200007dc
 8001a1c:	40003c00 	.word	0x40003c00

08001a20 <MX_I2C2_Init>:
{
 8001a20:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8001a22:	4812      	ldr	r0, [pc, #72]	; (8001a6c <MX_I2C2_Init+0x4c>)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_I2C2_Init+0x50>)
 8001a26:	6643      	str	r3, [r0, #100]	; 0x64
  hi2c2.Init.Timing = 0x2000090E;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_I2C2_Init+0x54>)
 8001a2a:	6683      	str	r3, [r0, #104]	; 0x68
  hi2c2.Init.OwnAddress1 = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	66c3      	str	r3, [r0, #108]	; 0x6c
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a30:	2201      	movs	r2, #1
 8001a32:	6702      	str	r2, [r0, #112]	; 0x70
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a34:	6743      	str	r3, [r0, #116]	; 0x74
  hi2c2.Init.OwnAddress2 = 0;
 8001a36:	6783      	str	r3, [r0, #120]	; 0x78
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a38:	67c3      	str	r3, [r0, #124]	; 0x7c
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a3e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a42:	3064      	adds	r0, #100	; 0x64
 8001a44:	f001 fe4e 	bl	80036e4 <HAL_I2C_Init>
 8001a48:	b950      	cbnz	r0, 8001a60 <MX_I2C2_Init+0x40>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	480a      	ldr	r0, [pc, #40]	; (8001a78 <MX_I2C2_Init+0x58>)
 8001a4e:	f002 f86d 	bl	8003b2c <HAL_I2CEx_ConfigAnalogFilter>
 8001a52:	b938      	cbnz	r0, 8001a64 <MX_I2C2_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a54:	2100      	movs	r1, #0
 8001a56:	4808      	ldr	r0, [pc, #32]	; (8001a78 <MX_I2C2_Init+0x58>)
 8001a58:	f002 f896 	bl	8003b88 <HAL_I2CEx_ConfigDigitalFilter>
 8001a5c:	b920      	cbnz	r0, 8001a68 <MX_I2C2_Init+0x48>
}
 8001a5e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a60:	f7ff ffb8 	bl	80019d4 <Error_Handler>
    Error_Handler();
 8001a64:	f7ff ffb6 	bl	80019d4 <Error_Handler>
    Error_Handler();
 8001a68:	f7ff ffb4 	bl	80019d4 <Error_Handler>
 8001a6c:	200007dc 	.word	0x200007dc
 8001a70:	40005800 	.word	0x40005800
 8001a74:	2000090e 	.word	0x2000090e
 8001a78:	20000840 	.word	0x20000840

08001a7c <MX_TIM6_Init>:
{
 8001a7c:	b500      	push	{lr}
 8001a7e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	2300      	movs	r3, #0
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	9303      	str	r3, [sp, #12]
  htim6.Instance = TIM6;
 8001a88:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <MX_TIM6_Init+0x54>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <MX_TIM6_Init+0x58>)
 8001a8c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  htim6.Init.Prescaler = 3999;
 8001a90:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001a94:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  htim6.Init.Period = 1000;
 8001a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aa0:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001aa8:	30b0      	adds	r0, #176	; 0xb0
 8001aaa:	f003 ff9d 	bl	80059e8 <HAL_TIM_Base_Init>
 8001aae:	b950      	cbnz	r0, 8001ac6 <MX_TIM6_Init+0x4a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ab6:	a901      	add	r1, sp, #4
 8001ab8:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <MX_TIM6_Init+0x5c>)
 8001aba:	f004 f8cf 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	b920      	cbnz	r0, 8001aca <MX_TIM6_Init+0x4e>
}
 8001ac0:	b005      	add	sp, #20
 8001ac2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001ac6:	f7ff ff85 	bl	80019d4 <Error_Handler>
    Error_Handler();
 8001aca:	f7ff ff83 	bl	80019d4 <Error_Handler>
 8001ace:	bf00      	nop
 8001ad0:	200007dc 	.word	0x200007dc
 8001ad4:	40001000 	.word	0x40001000
 8001ad8:	2000088c 	.word	0x2000088c

08001adc <MX_TIM15_Init>:
{
 8001adc:	b510      	push	{r4, lr}
 8001ade:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	2400      	movs	r4, #0
 8001ae2:	9413      	str	r4, [sp, #76]	; 0x4c
 8001ae4:	9414      	str	r4, [sp, #80]	; 0x50
 8001ae6:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae8:	940c      	str	r4, [sp, #48]	; 0x30
 8001aea:	940d      	str	r4, [sp, #52]	; 0x34
 8001aec:	940e      	str	r4, [sp, #56]	; 0x38
 8001aee:	940f      	str	r4, [sp, #60]	; 0x3c
 8001af0:	9410      	str	r4, [sp, #64]	; 0x40
 8001af2:	9411      	str	r4, [sp, #68]	; 0x44
 8001af4:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001af6:	222c      	movs	r2, #44	; 0x2c
 8001af8:	4621      	mov	r1, r4
 8001afa:	a801      	add	r0, sp, #4
 8001afc:	f004 fcf0 	bl	80064e0 <memset>
  htim15.Instance = TIM15;
 8001b00:	4824      	ldr	r0, [pc, #144]	; (8001b94 <MX_TIM15_Init+0xb8>)
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <MX_TIM15_Init+0xbc>)
 8001b04:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
  htim15.Init.Prescaler = 100;
 8001b08:	2364      	movs	r3, #100	; 0x64
 8001b0a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
  htim15.Init.Period = 500;
 8001b12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b16:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	f8c0 410c 	str.w	r4, [r0, #268]	; 0x10c
  htim15.Init.RepetitionCounter = 0;
 8001b1e:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b22:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001b26:	30fc      	adds	r0, #252	; 0xfc
 8001b28:	f003 ff8e 	bl	8005a48 <HAL_TIM_PWM_Init>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d129      	bne.n	8001b84 <MX_TIM15_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b36:	a913      	add	r1, sp, #76	; 0x4c
 8001b38:	4818      	ldr	r0, [pc, #96]	; (8001b9c <MX_TIM15_Init+0xc0>)
 8001b3a:	f004 f88f 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	bb18      	cbnz	r0, 8001b88 <MX_TIM15_Init+0xac>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b44:	2200      	movs	r2, #0
 8001b46:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b4a:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4c:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b4e:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b50:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b52:	a90c      	add	r1, sp, #48	; 0x30
 8001b54:	4811      	ldr	r0, [pc, #68]	; (8001b9c <MX_TIM15_Init+0xc0>)
 8001b56:	f003 ffed 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 8001b5a:	b9b8      	cbnz	r0, 8001b8c <MX_TIM15_Init+0xb0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b60:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b62:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b64:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b66:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b6c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b6e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001b70:	a901      	add	r1, sp, #4
 8001b72:	480a      	ldr	r0, [pc, #40]	; (8001b9c <MX_TIM15_Init+0xc0>)
 8001b74:	f004 f8be 	bl	8005cf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b78:	b950      	cbnz	r0, 8001b90 <MX_TIM15_Init+0xb4>
  HAL_TIM_MspPostInit(&htim15);
 8001b7a:	4808      	ldr	r0, [pc, #32]	; (8001b9c <MX_TIM15_Init+0xc0>)
 8001b7c:	f000 faf6 	bl	800216c <HAL_TIM_MspPostInit>
}
 8001b80:	b016      	add	sp, #88	; 0x58
 8001b82:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001b84:	f7ff ff26 	bl	80019d4 <Error_Handler>
    Error_Handler();
 8001b88:	f7ff ff24 	bl	80019d4 <Error_Handler>
    Error_Handler();
 8001b8c:	f7ff ff22 	bl	80019d4 <Error_Handler>
    Error_Handler();
 8001b90:	f7ff ff20 	bl	80019d4 <Error_Handler>
 8001b94:	200007dc 	.word	0x200007dc
 8001b98:	40014000 	.word	0x40014000
 8001b9c:	200008d8 	.word	0x200008d8

08001ba0 <SystemClock_Config>:
{
 8001ba0:	b500      	push	{lr}
 8001ba2:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba4:	2244      	movs	r2, #68	; 0x44
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	a827      	add	r0, sp, #156	; 0x9c
 8001baa:	f004 fc99 	bl	80064e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bae:	2100      	movs	r1, #0
 8001bb0:	9122      	str	r1, [sp, #136]	; 0x88
 8001bb2:	9123      	str	r1, [sp, #140]	; 0x8c
 8001bb4:	9124      	str	r1, [sp, #144]	; 0x90
 8001bb6:	9125      	str	r1, [sp, #148]	; 0x94
 8001bb8:	9126      	str	r1, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bba:	2288      	movs	r2, #136	; 0x88
 8001bbc:	4668      	mov	r0, sp
 8001bbe:	f004 fc8f 	bl	80064e0 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001bca:	2370      	movs	r3, #112	; 0x70
 8001bcc:	932f      	str	r3, [sp, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bce:	a827      	add	r0, sp, #156	; 0x9c
 8001bd0:	f002 f8f8 	bl	8003dc4 <HAL_RCC_OscConfig>
 8001bd4:	b9d0      	cbnz	r0, 8001c0c <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001bda:	2100      	movs	r1, #0
 8001bdc:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bde:	9124      	str	r1, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be0:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be2:	9126      	str	r1, [sp, #152]	; 0x98
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001be4:	a822      	add	r0, sp, #136	; 0x88
 8001be6:	f002 fc03 	bl	80043f0 <HAL_RCC_ClockConfig>
 8001bea:	b988      	cbnz	r0, 8001c10 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf4:	4668      	mov	r0, sp
 8001bf6:	f002 fe31 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	b958      	cbnz	r0, 8001c14 <SystemClock_Config+0x74>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c00:	f001 fff6 	bl	8003bf0 <HAL_PWREx_ControlVoltageScaling>
 8001c04:	b940      	cbnz	r0, 8001c18 <SystemClock_Config+0x78>
}
 8001c06:	b039      	add	sp, #228	; 0xe4
 8001c08:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001c0c:	f7ff fee2 	bl	80019d4 <Error_Handler>
    Error_Handler();
 8001c10:	f7ff fee0 	bl	80019d4 <Error_Handler>
    Error_Handler();
 8001c14:	f7ff fede 	bl	80019d4 <Error_Handler>
    Error_Handler();
 8001c18:	f7ff fedc 	bl	80019d4 <Error_Handler>

08001c1c <main>:
{
 8001c1c:	b508      	push	{r3, lr}
  HAL_Init();
 8001c1e:	f001 f9ad 	bl	8002f7c <HAL_Init>
  SystemClock_Config();
 8001c22:	f7ff ffbd 	bl	8001ba0 <SystemClock_Config>
  MX_GPIO_Init();
 8001c26:	f7ff fe37 	bl	8001898 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001c2a:	f7ff fed5 	bl	80019d8 <MX_SPI3_Init>
  MX_I2C2_Init();
 8001c2e:	f7ff fef7 	bl	8001a20 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001c32:	f7ff ff23 	bl	8001a7c <MX_TIM6_Init>
  MX_TIM15_Init();
 8001c36:	f7ff ff51 	bl	8001adc <MX_TIM15_Init>
  setup();
 8001c3a:	f000 f8f7 	bl	8001e2c <setup>
	  loop(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f000 f938 	bl	8001eb4 <loop>
  while (1)
 8001c44:	e7fb      	b.n	8001c3e <main+0x22>
	...

08001c48 <startup_enter>:




void startup_enter()
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	ed2d 8b04 	vpush	{d8-d9}
    setMappedFunction(MF_Button, GPIOC, GPIO_PIN_13, 0, 1);
 8001c4e:	ed9f 9b44 	vldr	d9, [pc, #272]	; 8001d60 <startup_enter+0x118>
 8001c52:	ed9f 8b45 	vldr	d8, [pc, #276]	; 8001d68 <startup_enter+0x120>
 8001c56:	4c46      	ldr	r4, [pc, #280]	; (8001d70 <startup_enter+0x128>)
 8001c58:	eeb0 1a49 	vmov.f32	s2, s18
 8001c5c:	eef0 1a69 	vmov.f32	s3, s19
 8001c60:	eeb0 0a48 	vmov.f32	s0, s16
 8001c64:	eef0 0a68 	vmov.f32	s1, s17
 8001c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7ff fd9c 	bl	80017ac <setMappedFunction>
    setMappedFunction(MF_led1, GPIOA, GPIO_PIN_5, 0, 1);
 8001c74:	eeb0 1a49 	vmov.f32	s2, s18
 8001c78:	eef0 1a69 	vmov.f32	s3, s19
 8001c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8001c80:	eef0 0a68 	vmov.f32	s1, s17
 8001c84:	2220      	movs	r2, #32
 8001c86:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	f7ff fd8e 	bl	80017ac <setMappedFunction>
    setMappedFunction(MF_led2, GPIOB, GPIO_PIN_14, 0, 1);
 8001c90:	eeb0 1a49 	vmov.f32	s2, s18
 8001c94:	eef0 1a69 	vmov.f32	s3, s19
 8001c98:	eeb0 0a48 	vmov.f32	s0, s16
 8001c9c:	eef0 0a68 	vmov.f32	s1, s17
 8001ca0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca4:	4933      	ldr	r1, [pc, #204]	; (8001d74 <startup_enter+0x12c>)
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f7ff fd80 	bl	80017ac <setMappedFunction>
    setMappedFunction(MF_BleInt, GPIOE, GPIO_PIN_6, 0, 1);
 8001cac:	eeb0 1a49 	vmov.f32	s2, s18
 8001cb0:	eef0 1a69 	vmov.f32	s3, s19
 8001cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8001cb8:	eef0 0a68 	vmov.f32	s1, s17
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	492e      	ldr	r1, [pc, #184]	; (8001d78 <startup_enter+0x130>)
 8001cc0:	2004      	movs	r0, #4
 8001cc2:	f7ff fd73 	bl	80017ac <setMappedFunction>
    setMappedFunction(MF_BleCS, GPIOD, GPIO_PIN_13, 0, 1);
 8001cc6:	eeb0 1a49 	vmov.f32	s2, s18
 8001cca:	eef0 1a69 	vmov.f32	s3, s19
 8001cce:	eeb0 0a48 	vmov.f32	s0, s16
 8001cd2:	eef0 0a68 	vmov.f32	s1, s17
 8001cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cda:	4928      	ldr	r1, [pc, #160]	; (8001d7c <startup_enter+0x134>)
 8001cdc:	2005      	movs	r0, #5
 8001cde:	f7ff fd65 	bl	80017ac <setMappedFunction>
    setMappedFunction(MF_BleReset, GPIOA, GPIO_PIN_8, 0, 1);
 8001ce2:	eeb0 1a49 	vmov.f32	s2, s18
 8001ce6:	eef0 1a69 	vmov.f32	s3, s19
 8001cea:	eeb0 0a48 	vmov.f32	s0, s16
 8001cee:	eef0 0a68 	vmov.f32	s1, s17
 8001cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001cfa:	2006      	movs	r0, #6
 8001cfc:	f7ff fd56 	bl	80017ac <setMappedFunction>


    initTimers();
 8001d00:	f000 face 	bl	80022a0 <initTimers>

    uart_init();
 8001d04:	f000 fbb2 	bl	800246c <uart_init>

    bspFunctionInit();
 8001d08:	f7ff fd32 	bl	8001770 <bspFunctionInit>

    setDigital(MF_led2, GPIO_PIN_RESET);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2003      	movs	r0, #3
 8001d10:	f7ff fd5e 	bl	80017d0 <setDigital>

    setStateTimeout(ST_IDLE,200);
 8001d14:	22c8      	movs	r2, #200	; 0xc8
 8001d16:	2300      	movs	r3, #0
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f000 f86f 	bl	8001dfc <setStateTimeout>

    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f001 fb57 	bl	80033da <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001d2c:	200a      	movs	r0, #10
 8001d2e:	f001 f947 	bl	8002fc0 <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f001 fb4d 	bl	80033da <HAL_GPIO_WritePin>

	ble_init();
 8001d40:	f7ff f808 	bl	8000d54 <ble_init>

	HAL_GPIO_WritePin(TOF_RESET_GPIO_Port,TOF_RESET_Pin,GPIO_PIN_SET);
 8001d44:	2201      	movs	r2, #1
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f001 fb46 	bl	80033da <HAL_GPIO_WritePin>

	sleep(10);
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f000 fafa 	bl	8002348 <sleep>

	HAL_TIM_Base_Start_IT(&htim6);
 8001d54:	480a      	ldr	r0, [pc, #40]	; (8001d80 <startup_enter+0x138>)
 8001d56:	f003 fccb 	bl	80056f0 <HAL_TIM_Base_Start_IT>



}
 8001d5a:	ecbd 8b04 	vpop	{d8-d9}
 8001d5e:	bd10      	pop	{r4, pc}
 8001d60:	00000000 	.word	0x00000000
 8001d64:	3ff00000 	.word	0x3ff00000
	...
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48000400 	.word	0x48000400
 8001d78:	48001000 	.word	0x48001000
 8001d7c:	48000c00 	.word	0x48000c00
 8001d80:	2000088c 	.word	0x2000088c

08001d84 <startup_beforeLoop>:


void startup_beforeLoop(uint8_t deltaMs)
{
}
 8001d84:	4770      	bx	lr

08001d86 <startup_loop>:

void startup_loop(uint8_t deltaMs)
{
}
 8001d86:	4770      	bx	lr

08001d88 <startup_afterLoop>:

void startup_afterLoop(uint8_t deltaMs)
{

}
 8001d88:	4770      	bx	lr
	...

08001d8c <externalSetup>:
#include "state_all.h"

void externalSetup(StateStruct states[])
{

    states[ST_STARTUP].enter = startup_enter;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <externalSetup+0x24>)
 8001d8e:	6283      	str	r3, [r0, #40]	; 0x28
    states[ST_STARTUP].beforeLoop = startup_beforeLoop;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <externalSetup+0x28>)
 8001d92:	62c3      	str	r3, [r0, #44]	; 0x2c
    states[ST_STARTUP].loop = startup_loop;
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <externalSetup+0x2c>)
 8001d96:	6303      	str	r3, [r0, #48]	; 0x30
    states[ST_STARTUP].afterLoop = startup_afterLoop;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <externalSetup+0x30>)
 8001d9a:	6343      	str	r3, [r0, #52]	; 0x34

    states[ST_IDLE].enter = idle_enter;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <externalSetup+0x34>)
 8001d9e:	6503      	str	r3, [r0, #80]	; 0x50
    states[ST_IDLE].beforeLoop = idle_beforeLoop;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <externalSetup+0x38>)
 8001da2:	6543      	str	r3, [r0, #84]	; 0x54
    states[ST_IDLE].loop = idle_loop;
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <externalSetup+0x3c>)
 8001da6:	6583      	str	r3, [r0, #88]	; 0x58
    states[ST_IDLE].afterLoop = idle_afterLoop;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <externalSetup+0x40>)
 8001daa:	65c3      	str	r3, [r0, #92]	; 0x5c

} // Set all the callbacks
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	08001c49 	.word	0x08001c49
 8001db4:	08001d85 	.word	0x08001d85
 8001db8:	08001d87 	.word	0x08001d87
 8001dbc:	08001d89 	.word	0x08001d89
 8001dc0:	08001571 	.word	0x08001571
 8001dc4:	080015a9 	.word	0x080015a9
 8001dc8:	080015e9 	.word	0x080015e9
 8001dcc:	0800176d 	.word	0x0800176d

08001dd0 <isValidState>:

// This struct must be only in this file

uint8_t isValidState(States state)
{
    return state > ST_UNDEFINED && state < ST_COUNT; 
 8001dd0:	3801      	subs	r0, #1
 8001dd2:	b2c0      	uxtb	r0, r0
}
 8001dd4:	2801      	cmp	r0, #1
 8001dd6:	bf8c      	ite	hi
 8001dd8:	2000      	movhi	r0, #0
 8001dda:	2001      	movls	r0, #1
 8001ddc:	4770      	bx	lr
	...

08001de0 <setState>:
	states[actualState].exitCondition = exitCondition;
	states[actualState].nextState = nextState;
}

uint8_t setState(States newState)
{
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4604      	mov	r4, r0
    if(!isValidState(newState))
 8001de4:	f7ff fff4 	bl	8001dd0 <isValidState>
 8001de8:	b128      	cbz	r0, 8001df6 <setState+0x16>
    	return 0;
	previousState = actualState;
 8001dea:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <setState+0x18>)
 8001dec:	7a1a      	ldrb	r2, [r3, #8]
 8001dee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	actualState = newState;
 8001df2:	721c      	strb	r4, [r3, #8]
	return 1;
 8001df4:	2001      	movs	r0, #1

}
 8001df6:	bd10      	pop	{r4, pc}
 8001df8:	200009a8 	.word	0x200009a8

08001dfc <setStateTimeout>:
{
    return actualState;
}

void setStateTimeout(States state, uint64_t timeout)
{
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	4606      	mov	r6, r0
 8001e00:	4615      	mov	r5, r2
 8001e02:	461c      	mov	r4, r3
    if(!isValidState(state) || !timeout)
 8001e04:	f7ff ffe4 	bl	8001dd0 <isValidState>
 8001e08:	b160      	cbz	r0, 8001e24 <setStateTimeout+0x28>
 8001e0a:	ea55 0304 	orrs.w	r3, r5, r4
 8001e0e:	d009      	beq.n	8001e24 <setStateTimeout+0x28>
        return;

    states[actualState].nextState = state;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <setStateTimeout+0x2c>)
 8001e12:	7a19      	ldrb	r1, [r3, #8]
 8001e14:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001e18:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001e1c:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
    states[actualState].timeout = timeout;
 8001e20:	6295      	str	r5, [r2, #40]	; 0x28
 8001e22:	62d4      	str	r4, [r2, #44]	; 0x2c
    
}
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
 8001e26:	bf00      	nop
 8001e28:	200009a8 	.word	0x200009a8

08001e2c <setup>:
// This function must be called in enter

void setup()
{
 8001e2c:	b510      	push	{r4, lr}
    externalSetup(states);
 8001e2e:	4c20      	ldr	r4, [pc, #128]	; (8001eb0 <setup+0x84>)
 8001e30:	f104 0010 	add.w	r0, r4, #16
 8001e34:	f7ff ffaa 	bl	8001d8c <externalSetup>

    setStateMachineTimer(&timeInCurrentStateTimer);
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f000 fa7b 	bl	8002334 <setStateMachineTimer>

    initDone = 1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
    for(int i = ST_UNDEFINED + 1; i < ST_COUNT; i++)
 8001e44:	e007      	b.n	8001e56 <setup+0x2a>
    {
        states[i].timeout = 0;
        states[i].nextState = ST_UNDEFINED;
        states[i].exitCondition = NULL;
        initDone &= states[i].enter && states[i].beforeLoop && states[i].loop && states[i].afterLoop;
 8001e46:	2000      	movs	r0, #0
 8001e48:	4919      	ldr	r1, [pc, #100]	; (8001eb0 <setup+0x84>)
 8001e4a:	f891 2089 	ldrb.w	r2, [r1, #137]	; 0x89
 8001e4e:	4002      	ands	r2, r0
 8001e50:	f881 2089 	strb.w	r2, [r1, #137]	; 0x89
    for(int i = ST_UNDEFINED + 1; i < ST_COUNT; i++)
 8001e54:	3301      	adds	r3, #1
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	dc25      	bgt.n	8001ea6 <setup+0x7a>
        states[i].timeout = 0;
 8001e5a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001e5e:	00d1      	lsls	r1, r2, #3
 8001e60:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <setup+0x84>)
 8001e62:	440a      	add	r2, r1
 8001e64:	2000      	movs	r0, #0
 8001e66:	2100      	movs	r1, #0
 8001e68:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
        states[i].nextState = ST_UNDEFINED;
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
        states[i].exitCondition = NULL;
 8001e72:	6211      	str	r1, [r2, #32]
        initDone &= states[i].enter && states[i].beforeLoop && states[i].loop && states[i].afterLoop;
 8001e74:	6912      	ldr	r2, [r2, #16]
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	d0e5      	beq.n	8001e46 <setup+0x1a>
 8001e7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001e7e:	00d1      	lsls	r1, r2, #3
 8001e80:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <setup+0x84>)
 8001e82:	440a      	add	r2, r1
 8001e84:	6952      	ldr	r2, [r2, #20]
 8001e86:	b152      	cbz	r2, 8001e9e <setup+0x72>
 8001e88:	4a09      	ldr	r2, [pc, #36]	; (8001eb0 <setup+0x84>)
 8001e8a:	440a      	add	r2, r1
 8001e8c:	6992      	ldr	r2, [r2, #24]
 8001e8e:	b142      	cbz	r2, 8001ea2 <setup+0x76>
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <setup+0x84>)
 8001e92:	440a      	add	r2, r1
 8001e94:	69d2      	ldr	r2, [r2, #28]
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d0d6      	beq.n	8001e48 <setup+0x1c>
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	e7d4      	b.n	8001e48 <setup+0x1c>
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	e7d2      	b.n	8001e48 <setup+0x1c>
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	e7d0      	b.n	8001e48 <setup+0x1c>
    }
    
    setState(ST_STARTUP);
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7ff ff9a 	bl	8001de0 <setState>
    
    
}
 8001eac:	bd10      	pop	{r4, pc}
 8001eae:	bf00      	nop
 8001eb0:	200009a8 	.word	0x200009a8

08001eb4 <loop>:

void loop(uint8_t dt)
{
    if(!initDone || !isValidState(actualState))
 8001eb4:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <loop+0xfc>)
 8001eb6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d077      	beq.n	8001fae <loop+0xfa>
{
 8001ebe:	b570      	push	{r4, r5, r6, lr}
 8001ec0:	b088      	sub	sp, #32
 8001ec2:	4604      	mov	r4, r0
    if(!initDone || !isValidState(actualState))
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <loop+0xfc>)
 8001ec6:	7a18      	ldrb	r0, [r3, #8]
 8001ec8:	f7ff ff82 	bl	8001dd0 <isValidState>
 8001ecc:	b908      	cbnz	r0, 8001ed2 <loop+0x1e>

    }



}
 8001ece:	b008      	add	sp, #32
 8001ed0:	bd70      	pop	{r4, r5, r6, pc}
    resetDeltaTime();
 8001ed2:	f000 f9d9 	bl	8002288 <resetDeltaTime>
    sleep(dt);
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f000 fa36 	bl	8002348 <sleep>
    if(debugEnabled)
 8001edc:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <loop+0xfc>)
 8001ede:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001ee2:	b143      	cbz	r3, 8001ef6 <loop+0x42>
        if((timeInCurrentStateTimer % 10) == 0){
 8001ee4:	220a      	movs	r2, #10
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	4931      	ldr	r1, [pc, #196]	; (8001fb0 <loop+0xfc>)
 8001eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eee:	f7fe fb83 	bl	80005f8 <__aeabi_uldivmod>
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	d04d      	beq.n	8001f92 <loop+0xde>
    StateStruct * stActualState = &states[actualState];
 8001ef6:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <loop+0xfc>)
 8001ef8:	7a1e      	ldrb	r6, [r3, #8]
    if(actualState != previousState){
 8001efa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001efe:	429e      	cmp	r6, r3
 8001f00:	d00d      	beq.n	8001f1e <loop+0x6a>
        timeInCurrentStateTimer = 0;
 8001f02:	4d2b      	ldr	r5, [pc, #172]	; (8001fb0 <loop+0xfc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	2300      	movs	r3, #0
 8001f08:	e9c5 2300 	strd	r2, r3, [r5]
        stActualState->enter();
 8001f0c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8001f10:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	4798      	blx	r3
        previousState = actualState;
 8001f18:	7a2b      	ldrb	r3, [r5, #8]
 8001f1a:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
    stActualState->beforeLoop(dt);
 8001f1e:	eb06 0586 	add.w	r5, r6, r6, lsl #2
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <loop+0xfc>)
 8001f24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001f28:	696b      	ldr	r3, [r5, #20]
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	4798      	blx	r3
    stActualState->loop(dt);
 8001f2e:	69ab      	ldr	r3, [r5, #24]
 8001f30:	4620      	mov	r0, r4
 8001f32:	4798      	blx	r3
    stActualState->afterLoop(dt);
 8001f34:	69eb      	ldr	r3, [r5, #28]
 8001f36:	4620      	mov	r0, r4
 8001f38:	4798      	blx	r3
    if(isValidState(stActualState->nextState)
 8001f3a:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff ff46 	bl	8001dd0 <isValidState>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d0c2      	beq.n	8001ece <loop+0x1a>
    	&& stActualState->nextState != actualState)
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <loop+0xfc>)
 8001f4a:	7a1b      	ldrb	r3, [r3, #8]
 8001f4c:	429c      	cmp	r4, r3
 8001f4e:	d0be      	beq.n	8001ece <loop+0x1a>
    	if(stActualState->timeout
 8001f50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001f52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f54:	ea52 0103 	orrs.w	r1, r2, r3
 8001f58:	d006      	beq.n	8001f68 <loop+0xb4>
    		&& timeInCurrentStateTimer >= stActualState->timeout){
 8001f5a:	4915      	ldr	r1, [pc, #84]	; (8001fb0 <loop+0xfc>)
 8001f5c:	6808      	ldr	r0, [r1, #0]
 8001f5e:	6849      	ldr	r1, [r1, #4]
 8001f60:	4290      	cmp	r0, r2
 8001f62:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f66:	d21e      	bcs.n	8001fa6 <loop+0xf2>
    	if(!stActualState->exitCondition)
 8001f68:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8001f6c:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <loop+0xfc>)
 8001f6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0aa      	beq.n	8001ece <loop+0x1a>
		if(stActualState->exitCondition())
 8001f78:	4798      	blx	r3
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d0a7      	beq.n	8001ece <loop+0x1a>
			setState(stActualState->nextState);
 8001f7e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <loop+0xfc>)
 8001f84:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8001f88:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8001f8c:	f7ff ff28 	bl	8001de0 <setState>
 8001f90:	e79d      	b.n	8001ece <loop+0x1a>
            sprintf(text,"Actual state: %d",actualState);
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <loop+0xfc>)
 8001f94:	7a1a      	ldrb	r2, [r3, #8]
 8001f96:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <loop+0x100>)
 8001f98:	4668      	mov	r0, sp
 8001f9a:	f004 fba1 	bl	80066e0 <siprintf>
            sendMessage(text);
 8001f9e:	4668      	mov	r0, sp
 8001fa0:	f000 fa48 	bl	8002434 <sendMessage>
 8001fa4:	e7a7      	b.n	8001ef6 <loop+0x42>
    		setState(stActualState->nextState);
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7ff ff1a 	bl	8001de0 <setState>
 8001fac:	e7dc      	b.n	8001f68 <loop+0xb4>
 8001fae:	4770      	bx	lr
 8001fb0:	200009a8 	.word	0x200009a8
 8001fb4:	08006ecc 	.word	0x08006ecc

08001fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_MspInit+0x2c>)
 8001fbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	661a      	str	r2, [r3, #96]	; 0x60
 8001fc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fc6:	f002 0201 	and.w	r2, r2, #1
 8001fca:	9200      	str	r2, [sp, #0]
 8001fcc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe0:	b002      	add	sp, #8
 8001fe2:	4770      	bx	lr
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	2300      	movs	r3, #0
 8001fee:	9303      	str	r3, [sp, #12]
 8001ff0:	9304      	str	r3, [sp, #16]
 8001ff2:	9305      	str	r3, [sp, #20]
 8001ff4:	9306      	str	r3, [sp, #24]
 8001ff6:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8001ff8:	6802      	ldr	r2, [r0, #0]
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_I2C_MspInit+0x64>)
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002000:	b008      	add	sp, #32
 8002002:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4c12      	ldr	r4, [pc, #72]	; (8002050 <HAL_I2C_MspInit+0x68>)
 8002006:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800200e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002018:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800201c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201e:	2312      	movs	r3, #18
 8002020:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002022:	2301      	movs	r3, #1
 8002024:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800202a:	2304      	movs	r3, #4
 800202c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	a903      	add	r1, sp, #12
 8002030:	4808      	ldr	r0, [pc, #32]	; (8002054 <HAL_I2C_MspInit+0x6c>)
 8002032:	f001 f845 	bl	80030c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002036:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800203c:	65a3      	str	r3, [r4, #88]	; 0x58
 800203e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	9b02      	ldr	r3, [sp, #8]
}
 8002048:	e7da      	b.n	8002000 <HAL_I2C_MspInit+0x18>
 800204a:	bf00      	nop
 800204c:	40005800 	.word	0x40005800
 8002050:	40021000 	.word	0x40021000
 8002054:	48000400 	.word	0x48000400

08002058 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C2)
 8002058:	6802      	ldr	r2, [r0, #0]
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_I2C_MspDeInit+0x30>)
 800205c:	429a      	cmp	r2, r3
 800205e:	d000      	beq.n	8002062 <HAL_I2C_MspDeInit+0xa>
 8002060:	4770      	bx	lr
{
 8002062:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_I2C_MspDeInit+0x34>)
 8002066:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002068:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800206c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800206e:	4c08      	ldr	r4, [pc, #32]	; (8002090 <HAL_I2C_MspDeInit+0x38>)
 8002070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002074:	4620      	mov	r0, r4
 8002076:	f001 f911 	bl	800329c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800207a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800207e:	4620      	mov	r0, r4
 8002080:	f001 f90c 	bl	800329c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002084:	bd10      	pop	{r4, pc}
 8002086:	bf00      	nop
 8002088:	40005800 	.word	0x40005800
 800208c:	40021000 	.word	0x40021000
 8002090:	48000400 	.word	0x48000400

08002094 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002094:	b500      	push	{lr}
 8002096:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	2300      	movs	r3, #0
 800209a:	9303      	str	r3, [sp, #12]
 800209c:	9304      	str	r3, [sp, #16]
 800209e:	9305      	str	r3, [sp, #20]
 80020a0:	9306      	str	r3, [sp, #24]
 80020a2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 80020a4:	6802      	ldr	r2, [r0, #0]
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_SPI_MspInit+0x64>)
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d002      	beq.n	80020b2 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020ac:	b009      	add	sp, #36	; 0x24
 80020ae:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020b2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80020b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020bc:	659a      	str	r2, [r3, #88]	; 0x58
 80020be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020c0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80020c4:	9201      	str	r2, [sp, #4]
 80020c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ca:	f042 0204 	orr.w	r2, r2, #4
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	9302      	str	r3, [sp, #8]
 80020d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80020da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80020de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020e8:	2306      	movs	r3, #6
 80020ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	a903      	add	r1, sp, #12
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <HAL_SPI_MspInit+0x68>)
 80020f0:	f000 ffe6 	bl	80030c0 <HAL_GPIO_Init>
}
 80020f4:	e7da      	b.n	80020ac <HAL_SPI_MspInit+0x18>
 80020f6:	bf00      	nop
 80020f8:	40003c00 	.word	0x40003c00
 80020fc:	48000800 	.word	0x48000800

08002100 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8002100:	6802      	ldr	r2, [r0, #0]
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_TIM_Base_MspInit+0x3c>)
 8002104:	429a      	cmp	r2, r3
 8002106:	d000      	beq.n	800210a <HAL_TIM_Base_MspInit+0xa>
 8002108:	4770      	bx	lr
{
 800210a:	b500      	push	{lr}
 800210c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800210e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002112:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002114:	f042 0210 	orr.w	r2, r2, #16
 8002118:	659a      	str	r2, [r3, #88]	; 0x58
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	4611      	mov	r1, r2
 8002128:	2036      	movs	r0, #54	; 0x36
 800212a:	f000 ff6f 	bl	800300c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800212e:	2036      	movs	r0, #54	; 0x36
 8002130:	f000 ffa4 	bl	800307c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002134:	b003      	add	sp, #12
 8002136:	f85d fb04 	ldr.w	pc, [sp], #4
 800213a:	bf00      	nop
 800213c:	40001000 	.word	0x40001000

08002140 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM15)
 8002140:	6802      	ldr	r2, [r0, #0]
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_TIM_PWM_MspInit+0x28>)
 8002144:	429a      	cmp	r2, r3
 8002146:	d000      	beq.n	800214a <HAL_TIM_PWM_MspInit+0xa>
 8002148:	4770      	bx	lr
{
 800214a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800214c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8002150:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002152:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002156:	661a      	str	r2, [r3, #96]	; 0x60
 8002158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002162:	b002      	add	sp, #8
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40014000 	.word	0x40014000

0800216c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800216c:	b500      	push	{lr}
 800216e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	9302      	str	r3, [sp, #8]
 8002176:	9303      	str	r3, [sp, #12]
 8002178:	9304      	str	r3, [sp, #16]
 800217a:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM15)
 800217c:	6802      	ldr	r2, [r0, #0]
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_TIM_MspPostInit+0x4c>)
 8002180:	429a      	cmp	r2, r3
 8002182:	d002      	beq.n	800218a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002184:	b007      	add	sp, #28
 8002186:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800218e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002190:	f042 0202 	orr.w	r2, r2, #2
 8002194:	64da      	str	r2, [r3, #76]	; 0x4c
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80021aa:	230e      	movs	r3, #14
 80021ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	a901      	add	r1, sp, #4
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <HAL_TIM_MspPostInit+0x50>)
 80021b2:	f000 ff85 	bl	80030c0 <HAL_GPIO_Init>
}
 80021b6:	e7e5      	b.n	8002184 <HAL_TIM_MspPostInit+0x18>
 80021b8:	40014000 	.word	0x40014000
 80021bc:	48000400 	.word	0x48000400

080021c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <NMI_Handler>

080021c2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler>

080021c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <MemManage_Handler>

080021c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler>

080021c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler>

080021ca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ca:	4770      	bx	lr

080021cc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021cc:	4770      	bx	lr

080021ce <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ce:	4770      	bx	lr

080021d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d2:	f000 fee3 	bl	8002f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d6:	bd08      	pop	{r3, pc}

080021d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	dataAvailable=1;
 80021da:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <EXTI9_5_IRQHandler+0x10>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80021e0:	2040      	movs	r0, #64	; 0x40
 80021e2:	f001 f901 	bl	80033e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021e6:	bd08      	pop	{r3, pc}
 80021e8:	200006f0 	.word	0x200006f0

080021ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
update=1;
 80021ee:	4b03      	ldr	r3, [pc, #12]	; (80021fc <TIM6_DAC_IRQHandler+0x10>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM6_DAC_IRQHandler+0x14>)
 80021f6:	f003 fac6 	bl	8005786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021fa:	bd08      	pop	{r3, pc}
 80021fc:	200006ec 	.word	0x200006ec
 8002200:	2000088c 	.word	0x2000088c

08002204 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002204:	b508      	push	{r3, lr}
 8002206:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002208:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <_sbrk+0x34>)
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	b142      	cbz	r2, 8002220 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <_sbrk+0x34>)
 8002210:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002212:	4403      	add	r3, r0
 8002214:	466a      	mov	r2, sp
 8002216:	4293      	cmp	r3, r2
 8002218:	d806      	bhi.n	8002228 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800221a:	4a07      	ldr	r2, [pc, #28]	; (8002238 <_sbrk+0x34>)
 800221c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800221e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <_sbrk+0x34>)
 8002222:	4906      	ldr	r1, [pc, #24]	; (800223c <_sbrk+0x38>)
 8002224:	6011      	str	r1, [r2, #0]
 8002226:	e7f2      	b.n	800220e <_sbrk+0xa>
		errno = ENOMEM;
 8002228:	f004 f912 	bl	8006450 <__errno>
 800222c:	230c      	movs	r3, #12
 800222e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	e7f3      	b.n	800221e <_sbrk+0x1a>
 8002236:	bf00      	nop
 8002238:	20000a34 	.word	0x20000a34
 800223c:	20000b68 	.word	0x20000b68

08002240 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002240:	490f      	ldr	r1, [pc, #60]	; (8002280 <SystemInit+0x40>)
 8002242:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002246:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <SystemInit+0x44>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002258:	2000      	movs	r0, #0
 800225a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002262:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002266:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800226c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002274:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002276:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002278:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800227c:	608b      	str	r3, [r1, #8]
#endif
}
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00
 8002284:	40021000 	.word	0x40021000

08002288 <resetDeltaTime>:

}timers[TF_COUNT];

void resetDeltaTime()
{
    deltaTimeCounter = 0;
 8002288:	4b02      	ldr	r3, [pc, #8]	; (8002294 <resetDeltaTime+0xc>)
 800228a:	2000      	movs	r0, #0
 800228c:	2100      	movs	r1, #0
 800228e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8002292:	4770      	bx	lr
 8002294:	20000a40 	.word	0x20000a40

08002298 <isValidTimer>:
}

uint8_t isValidTimer(Timer_Function function)
{
	return function < TF_COUNT && function >= 0;
}
 8002298:	fab0 f080 	clz	r0, r0
 800229c:	0940      	lsrs	r0, r0, #5
 800229e:	4770      	bx	lr

080022a0 <initTimers>:

void initTimers()
{
	for(uint8_t i = 0; i < TF_COUNT; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	b103      	cbz	r3, 80022a6 <initTimers+0x6>
	{
		timers[i].value = 0;
		timers[i].timeout  = 0;
		timers[i].callback = NULL;
	}
}
 80022a4:	4770      	bx	lr
		timers[i].value = 0;
 80022a6:	490c      	ldr	r1, [pc, #48]	; (80022d8 <initTimers+0x38>)
 80022a8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80022ac:	00c2      	lsls	r2, r0, #3
 80022ae:	440a      	add	r2, r1
 80022b0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80022d0 <initTimers+0x30>
 80022b4:	ed82 7b02 	vstr	d7, [r2, #8]
		timers[i].timeout  = 0;
 80022b8:	ed82 7b06 	vstr	d7, [r2, #24]
		timers[i].callback = NULL;
 80022bc:	00c2      	lsls	r2, r0, #3
 80022be:	4411      	add	r1, r2
 80022c0:	2200      	movs	r2, #0
 80022c2:	610a      	str	r2, [r1, #16]
	for(uint8_t i = 0; i < TF_COUNT; i++)
 80022c4:	3301      	adds	r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	e7eb      	b.n	80022a2 <initTimers+0x2>
 80022ca:	bf00      	nop
 80022cc:	f3af 8000 	nop.w
	...
 80022d8:	20000a40 	.word	0x20000a40
 80022dc:	00000000 	.word	0x00000000

080022e0 <setTimer>:

void setTimer(Timer_Function function,void (*callback)(void),uint64_t timeout)
{
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e2:	4604      	mov	r4, r0
 80022e4:	460d      	mov	r5, r1
 80022e6:	4617      	mov	r7, r2
 80022e8:	461e      	mov	r6, r3
	if(!isValidTimer(function) || !callback)
 80022ea:	f7ff ffd5 	bl	8002298 <isValidTimer>
 80022ee:	b168      	cbz	r0, 800230c <setTimer+0x2c>
 80022f0:	b165      	cbz	r5, 800230c <setTimer+0x2c>
		timers[function].callback = NULL;
		timers[function].timeout = 0;
		return;
	}

	timers[function].value = 0;
 80022f2:	480f      	ldr	r0, [pc, #60]	; (8002330 <setTimer+0x50>)
 80022f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80022f8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80022fc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002328 <setTimer+0x48>
 8002300:	ed83 7b02 	vstr	d7, [r3, #8]
	timers[function].callback = callback;
 8002304:	611d      	str	r5, [r3, #16]
	timers[function].timeout = timeout;
 8002306:	619f      	str	r7, [r3, #24]
 8002308:	61de      	str	r6, [r3, #28]

}
 800230a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		timers[function].value = 0;
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <setTimer+0x50>)
 800230e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002312:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8002316:	2600      	movs	r6, #0
 8002318:	2700      	movs	r7, #0
 800231a:	e9c2 6702 	strd	r6, r7, [r2, #8]
		timers[function].callback = NULL;
 800231e:	2100      	movs	r1, #0
 8002320:	6111      	str	r1, [r2, #16]
		timers[function].timeout = 0;
 8002322:	e9c2 6706 	strd	r6, r7, [r2, #24]
		return;
 8002326:	e7f0      	b.n	800230a <setTimer+0x2a>
	...
 8002330:	20000a40 	.word	0x20000a40

08002334 <setStateMachineTimer>:



void setStateMachineTimer(uint64_t * stateTimer)
{
    stateMachineTimer = stateTimer;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <setStateMachineTimer+0x10>)
 8002336:	6218      	str	r0, [r3, #32]
    *stateMachineTimer = 0;
 8002338:	2200      	movs	r2, #0
 800233a:	2300      	movs	r3, #0
 800233c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000a40 	.word	0x20000a40

08002348 <sleep>:

void sleep(uint32_t time)
{
	if(!time)
 8002348:	2800      	cmp	r0, #0
 800234a:	d04c      	beq.n	80023e6 <sleep+0x9e>
{
 800234c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002350:	4680      	mov	r8, r0
		return;
	for(uint8_t tick = 0; tick <= time; tick ++){
 8002352:	2400      	movs	r4, #0
 8002354:	e001      	b.n	800235a <sleep+0x12>
 8002356:	3401      	adds	r4, #1
 8002358:	b2e4      	uxtb	r4, r4
 800235a:	4544      	cmp	r4, r8
 800235c:	d841      	bhi.n	80023e2 <sleep+0x9a>
		HAL_Delay(tick);
 800235e:	4620      	mov	r0, r4
 8002360:	f000 fe2e 	bl	8002fc0 <HAL_Delay>
        *stateMachineTimer += tick;
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <sleep+0xa8>)
 8002366:	6a18      	ldr	r0, [r3, #32]
 8002368:	2700      	movs	r7, #0
 800236a:	4626      	mov	r6, r4
 800236c:	6802      	ldr	r2, [r0, #0]
 800236e:	6841      	ldr	r1, [r0, #4]
 8002370:	1912      	adds	r2, r2, r4
 8002372:	f141 0100 	adc.w	r1, r1, #0
 8002376:	6002      	str	r2, [r0, #0]
 8002378:	6041      	str	r1, [r0, #4]
        deltaTimeCounter += tick;
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	1912      	adds	r2, r2, r4
 8002380:	f141 0100 	adc.w	r1, r1, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	6059      	str	r1, [r3, #4]

		for(uint8_t i = 0; i < TF_COUNT; i++){
 8002388:	463d      	mov	r5, r7
 800238a:	2d00      	cmp	r5, #0
 800238c:	d1e3      	bne.n	8002356 <sleep+0xe>
			timers[i].value += tick;
 800238e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <sleep+0xa8>)
 8002394:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	68d9      	ldr	r1, [r3, #12]
 800239c:	18b2      	adds	r2, r6, r2
 800239e:	eb47 0101 	adc.w	r1, r7, r1
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60d9      	str	r1, [r3, #12]
			if(timers[i].value >= timers[i].timeout
 80023a6:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	4562      	cmp	r2, ip
 80023ae:	eb71 0203 	sbcs.w	r2, r1, r3
 80023b2:	d313      	bcc.n	80023dc <sleep+0x94>
					&& timers[i].timeout
 80023b4:	ea5c 0303 	orrs.w	r3, ip, r3
 80023b8:	d010      	beq.n	80023dc <sleep+0x94>
					&& timers[i].callback)
 80023ba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80023be:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <sleep+0xa8>)
 80023c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	b14a      	cbz	r2, 80023dc <sleep+0x94>
			{
				timers[i].value = 0;
 80023c8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <sleep+0xa8>)
 80023ce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80023d2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80023e8 <sleep+0xa0>
 80023d6:	ed80 7b02 	vstr	d7, [r0, #8]
				timers[i].callback();
 80023da:	4790      	blx	r2
		for(uint8_t i = 0; i < TF_COUNT; i++){
 80023dc:	3501      	adds	r5, #1
 80023de:	b2ed      	uxtb	r5, r5
 80023e0:	e7d3      	b.n	800238a <sleep+0x42>

		}
	}


}
 80023e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023e6:	4770      	bx	lr
	...
 80023f0:	20000a40 	.word	0x20000a40

080023f4 <concat>:
}



static void concat(char * a, char * b)
{
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	4605      	mov	r5, r0
 80023f8:	460e      	mov	r6, r1
	realloc(a,(char) (strlen(a) +strlen(b)));
 80023fa:	f7fd fee9 	bl	80001d0 <strlen>
 80023fe:	4604      	mov	r4, r0
 8002400:	4630      	mov	r0, r6
 8002402:	f7fd fee5 	bl	80001d0 <strlen>
 8002406:	4404      	add	r4, r0
 8002408:	b2e1      	uxtb	r1, r4
 800240a:	4628      	mov	r0, r5
 800240c:	f004 f950 	bl	80066b0 <realloc>
	strcat(a,b);
 8002410:	4631      	mov	r1, r6
 8002412:	4628      	mov	r0, r5
 8002414:	f004 f984 	bl	8006720 <strcat>
}
 8002418:	bd70      	pop	{r4, r5, r6, pc}
	...

0800241c <reset>:
{
 800241c:	b510      	push	{r4, lr}
	free(txt);
 800241e:	4c04      	ldr	r4, [pc, #16]	; (8002430 <reset+0x14>)
 8002420:	6820      	ldr	r0, [r4, #0]
 8002422:	f004 f847 	bl	80064b4 <free>
	txt = malloc(sizeof(char) * 1);
 8002426:	2001      	movs	r0, #1
 8002428:	f004 f83c 	bl	80064a4 <malloc>
 800242c:	6020      	str	r0, [r4, #0]
}
 800242e:	bd10      	pop	{r4, pc}
 8002430:	20000a64 	.word	0x20000a64

08002434 <sendMessage>:


HAL_StatusTypeDef sendMessage()
{
 8002434:	b510      	push	{r4, lr}
	return HAL_UART_Transmit(&huart1,(char*)txt,strlen(txt),1000);
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <sendMessage+0x1c>)
 8002438:	681c      	ldr	r4, [r3, #0]
 800243a:	4620      	mov	r0, r4
 800243c:	f7fd fec8 	bl	80001d0 <strlen>
 8002440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002444:	b282      	uxth	r2, r0
 8002446:	4621      	mov	r1, r4
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <sendMessage+0x20>)
 800244a:	f003 ff02 	bl	8006252 <HAL_UART_Transmit>
	reset();
}
 800244e:	bd10      	pop	{r4, pc}
 8002450:	20000a64 	.word	0x20000a64
 8002454:	20000924 	.word	0x20000924

08002458 <appendMessage>:

void appendMessage(char * text)
{
 8002458:	b508      	push	{r3, lr}
 800245a:	4601      	mov	r1, r0
	concat(txt,text);
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <appendMessage+0x10>)
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	f7ff ffc8 	bl	80023f4 <concat>
}
 8002464:	bd08      	pop	{r3, pc}
 8002466:	bf00      	nop
 8002468:	20000a64 	.word	0x20000a64

0800246c <uart_init>:



void uart_init(void)
{
 800246c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800246e:	480c      	ldr	r0, [pc, #48]	; (80024a0 <uart_init+0x34>)
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <uart_init+0x38>)
 8002472:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002474:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002478:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	2300      	movs	r3, #0
 800247c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800247e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002480:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002482:	220c      	movs	r2, #12
 8002484:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800248a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800248c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800248e:	f003 ff84 	bl	800639a <HAL_UART_Init>
 8002492:	b910      	cbnz	r0, 800249a <uart_init+0x2e>
  {
    Error_Handler();
  }
  reset();
 8002494:	f7ff ffc2 	bl	800241c <reset>



}
 8002498:	bd08      	pop	{r3, pc}
    Error_Handler();
 800249a:	f7ff fa9b 	bl	80019d4 <Error_Handler>
 800249e:	e7f9      	b.n	8002494 <uart_init+0x28>
 80024a0:	20000924 	.word	0x20000924
 80024a4:	40013800 	.word	0x40013800

080024a8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80024a8:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80024aa:	b2c4      	uxtb	r4, r0
 80024ac:	2120      	movs	r1, #32
 80024ae:	4620      	mov	r0, r4
 80024b0:	f000 fc28 	bl	8002d04 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80024b4:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80024b8:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 80024bc:	2120      	movs	r1, #32
 80024be:	4620      	mov	r0, r4
 80024c0:	f000 fc0c 	bl	8002cdc <SENSOR_IO_Write>
}
 80024c4:	bd10      	pop	{r4, pc}

080024c6 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80024c6:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80024c8:	b2c4      	uxtb	r4, r0
 80024ca:	2120      	movs	r1, #32
 80024cc:	4620      	mov	r0, r4
 80024ce:	f000 fc19 	bl	8002d04 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80024d2:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80024d6:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 80024da:	2120      	movs	r1, #32
 80024dc:	4620      	mov	r0, r4
 80024de:	f000 fbfd 	bl	8002cdc <SENSOR_IO_Write>
}
 80024e2:	bd10      	pop	{r4, pc}

080024e4 <HTS221_H_ReadID>:
{  
 80024e4:	b510      	push	{r4, lr}
 80024e6:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 80024e8:	f000 fbf0 	bl	8002ccc <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80024ec:	210f      	movs	r1, #15
 80024ee:	b2e0      	uxtb	r0, r4
 80024f0:	f000 fc08 	bl	8002d04 <SENSOR_IO_Read>
}
 80024f4:	bd10      	pop	{r4, pc}
	...

080024f8 <HTS221_H_ReadHumidity>:
{
 80024f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024fc:	b083      	sub	sp, #12
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80024fe:	fa5f f980 	uxtb.w	r9, r0
 8002502:	2302      	movs	r3, #2
 8002504:	aa01      	add	r2, sp, #4
 8002506:	21b0      	movs	r1, #176	; 0xb0
 8002508:	4648      	mov	r0, r9
 800250a:	f000 fc11 	bl	8002d30 <SENSOR_IO_ReadMultiple>
  H0_rh = buffer[0] >> 1;
 800250e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002512:	085f      	lsrs	r7, r3, #1
  H1_rh = buffer[1] >> 1;
 8002514:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8002518:	0876      	lsrs	r6, r6, #1
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800251a:	2302      	movs	r3, #2
 800251c:	aa01      	add	r2, sp, #4
 800251e:	21b6      	movs	r1, #182	; 0xb6
 8002520:	4648      	mov	r0, r9
 8002522:	f000 fc05 	bl	8002d30 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002526:	f89d 5005 	ldrb.w	r5, [sp, #5]
 800252a:	022d      	lsls	r5, r5, #8
 800252c:	b22d      	sxth	r5, r5
 800252e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002532:	431d      	orrs	r5, r3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002534:	2302      	movs	r3, #2
 8002536:	aa01      	add	r2, sp, #4
 8002538:	21ba      	movs	r1, #186	; 0xba
 800253a:	4648      	mov	r0, r9
 800253c:	f000 fbf8 	bl	8002d30 <SENSOR_IO_ReadMultiple>
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002540:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8002544:	0224      	lsls	r4, r4, #8
 8002546:	b224      	sxth	r4, r4
 8002548:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800254c:	431c      	orrs	r4, r3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800254e:	2302      	movs	r3, #2
 8002550:	aa01      	add	r2, sp, #4
 8002552:	21a8      	movs	r1, #168	; 0xa8
 8002554:	4648      	mov	r0, r9
 8002556:	f000 fbeb 	bl	8002d30 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800255a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	b21b      	sxth	r3, r3
 8002562:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002566:	4313      	orrs	r3, r2
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002568:	1b5b      	subs	r3, r3, r5
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002572:	1bf3      	subs	r3, r6, r7
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002580:	1b64      	subs	r4, r4, r5
 8002582:	ee07 4a10 	vmov	s14, r4
 8002586:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800258a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800258e:	ee07 7a90 	vmov	s15, r7
 8002592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002596:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 800259a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800259e:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 80025a2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025d4 <HTS221_H_ReadHumidity+0xdc>
 80025a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	dc07      	bgt.n	80025c0 <HTS221_H_ReadHumidity+0xc8>
        : tmp_f;
 80025b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	d504      	bpl.n	80025c4 <HTS221_H_ReadHumidity+0xcc>
 80025ba:	eddf 7a07 	vldr	s15, [pc, #28]	; 80025d8 <HTS221_H_ReadHumidity+0xe0>
 80025be:	e001      	b.n	80025c4 <HTS221_H_ReadHumidity+0xcc>
        : ( tmp_f <    0.0f ) ?    0.0f
 80025c0:	eddf 7a04 	vldr	s15, [pc, #16]	; 80025d4 <HTS221_H_ReadHumidity+0xdc>
}
 80025c4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80025c8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80025cc:	b003      	add	sp, #12
 80025ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025d2:	bf00      	nop
 80025d4:	447a0000 	.word	0x447a0000
 80025d8:	00000000 	.word	0x00000000

080025dc <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80025dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e0:	b082      	sub	sp, #8
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80025e2:	fa5f f880 	uxtb.w	r8, r0
 80025e6:	2302      	movs	r3, #2
 80025e8:	aa01      	add	r2, sp, #4
 80025ea:	21b2      	movs	r1, #178	; 0xb2
 80025ec:	4640      	mov	r0, r8
 80025ee:	f000 fb9f 	bl	8002d30 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80025f2:	2135      	movs	r1, #53	; 0x35
 80025f4:	4640      	mov	r0, r8
 80025f6:	f000 fb85 	bl	8002d04 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80025fa:	0207      	lsls	r7, r0, #8
 80025fc:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8002600:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002604:	431f      	orrs	r7, r3
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002606:	0184      	lsls	r4, r0, #6
 8002608:	f404 7440 	and.w	r4, r4, #768	; 0x300
 800260c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8002610:	4304      	orrs	r4, r0
  T0_degC = T0_degC_x8_u16 >> 3;
 8002612:	08ff      	lsrs	r7, r7, #3
  T1_degC = T1_degC_x8_u16 >> 3;
 8002614:	08e4      	lsrs	r4, r4, #3

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002616:	2304      	movs	r3, #4
 8002618:	eb0d 0203 	add.w	r2, sp, r3
 800261c:	21bc      	movs	r1, #188	; 0xbc
 800261e:	4640      	mov	r0, r8
 8002620:	f000 fb86 	bl	8002d30 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002624:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8002628:	0236      	lsls	r6, r6, #8
 800262a:	b236      	sxth	r6, r6
 800262c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002630:	431e      	orrs	r6, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002632:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002636:	022d      	lsls	r5, r5, #8
 8002638:	b22d      	sxth	r5, r5
 800263a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800263e:	431d      	orrs	r5, r3

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002640:	2302      	movs	r3, #2
 8002642:	aa01      	add	r2, sp, #4
 8002644:	21aa      	movs	r1, #170	; 0xaa
 8002646:	4640      	mov	r0, r8
 8002648:	f000 fb72 	bl	8002d30 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800264c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	b21b      	sxth	r3, r3
 8002654:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002658:	4313      	orrs	r3, r2

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800265a:	1b9b      	subs	r3, r3, r6
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002664:	1be3      	subs	r3, r4, r7
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002672:	1bad      	subs	r5, r5, r6
 8002674:	ee07 5a10 	vmov	s14, r5
 8002678:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800267c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002680:	ee07 7a90 	vmov	s15, r7
 8002684:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8002688:	ee36 0a80 	vadd.f32	s0, s13, s0
 800268c:	b002      	add	sp, #8
 800268e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002692 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002692:	b500      	push	{lr}
 8002694:	b083      	sub	sp, #12
 8002696:	ab02      	add	r3, sp, #8
 8002698:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800269c:	f89d 2000 	ldrb.w	r2, [sp]
 80026a0:	2120      	movs	r1, #32
 80026a2:	203c      	movs	r0, #60	; 0x3c
 80026a4:	f000 fb1a 	bl	8002cdc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80026a8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80026ac:	2121      	movs	r1, #33	; 0x21
 80026ae:	203c      	movs	r0, #60	; 0x3c
 80026b0:	f000 fb14 	bl	8002cdc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80026b4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80026b8:	2122      	movs	r1, #34	; 0x22
 80026ba:	203c      	movs	r0, #60	; 0x3c
 80026bc:	f000 fb0e 	bl	8002cdc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80026c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80026c4:	2123      	movs	r1, #35	; 0x23
 80026c6:	203c      	movs	r0, #60	; 0x3c
 80026c8:	f000 fb08 	bl	8002cdc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80026cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80026d0:	2124      	movs	r1, #36	; 0x24
 80026d2:	203c      	movs	r0, #60	; 0x3c
 80026d4:	f000 fb02 	bl	8002cdc <SENSOR_IO_Write>
}
 80026d8:	b003      	add	sp, #12
 80026da:	f85d fb04 	ldr.w	pc, [sp], #4

080026de <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80026de:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80026e0:	2122      	movs	r1, #34	; 0x22
 80026e2:	203c      	movs	r0, #60	; 0x3c
 80026e4:	f000 fb0e 	bl	8002d04 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80026e8:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80026ec:	f042 0203 	orr.w	r2, r2, #3
 80026f0:	2122      	movs	r1, #34	; 0x22
 80026f2:	203c      	movs	r0, #60	; 0x3c
 80026f4:	f000 faf2 	bl	8002cdc <SENSOR_IO_Write>
}
 80026f8:	bd08      	pop	{r3, pc}

080026fa <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80026fa:	b510      	push	{r4, lr}
 80026fc:	4604      	mov	r4, r0
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80026fe:	2122      	movs	r1, #34	; 0x22
 8002700:	203c      	movs	r0, #60	; 0x3c
 8002702:	f000 faff 	bl	8002d04 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002706:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 800270a:	b10c      	cbz	r4, 8002710 <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800270c:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002710:	2122      	movs	r1, #34	; 0x22
 8002712:	203c      	movs	r0, #60	; 0x3c
 8002714:	f000 fae2 	bl	8002cdc <SENSOR_IO_Write>
}
 8002718:	bd10      	pop	{r4, pc}

0800271a <LIS3MDL_MagReadID>:
{
 800271a:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 800271c:	f000 fad6 	bl	8002ccc <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002720:	210f      	movs	r1, #15
 8002722:	203c      	movs	r0, #60	; 0x3c
 8002724:	f000 faee 	bl	8002d04 <SENSOR_IO_Read>
}
 8002728:	bd08      	pop	{r3, pc}
	...

0800272c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800272c:	b530      	push	{r4, r5, lr}
 800272e:	b085      	sub	sp, #20
 8002730:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002732:	2121      	movs	r1, #33	; 0x21
 8002734:	203c      	movs	r0, #60	; 0x3c
 8002736:	f000 fae5 	bl	8002d04 <SENSOR_IO_Read>
 800273a:	4605      	mov	r5, r0
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800273c:	2306      	movs	r3, #6
 800273e:	466a      	mov	r2, sp
 8002740:	21a8      	movs	r1, #168	; 0xa8
 8002742:	203c      	movs	r0, #60	; 0x3c
 8002744:	f000 faf4 	bl	8002d30 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002748:	2300      	movs	r3, #0
 800274a:	e00f      	b.n	800276c <LIS3MDL_MagReadXYZ+0x40>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800274c:	005a      	lsls	r2, r3, #1
 800274e:	f102 0111 	add.w	r1, r2, #17
 8002752:	4469      	add	r1, sp
 8002754:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8002758:	3210      	adds	r2, #16
 800275a:	446a      	add	r2, sp
 800275c:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8002760:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8002764:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 8002768:	3301      	adds	r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d9ed      	bls.n	800274c <LIS3MDL_MagReadXYZ+0x20>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002770:	f005 0560 	and.w	r5, r5, #96	; 0x60
 8002774:	2d40      	cmp	r5, #64	; 0x40
 8002776:	d00c      	beq.n	8002792 <LIS3MDL_MagReadXYZ+0x66>
 8002778:	d806      	bhi.n	8002788 <LIS3MDL_MagReadXYZ+0x5c>
 800277a:	b16d      	cbz	r5, 8002798 <LIS3MDL_MagReadXYZ+0x6c>
 800277c:	2d20      	cmp	r5, #32
 800277e:	d10e      	bne.n	800279e <LIS3MDL_MagReadXYZ+0x72>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
    break;
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002780:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80027d8 <LIS3MDL_MagReadXYZ+0xac>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
    break;    
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002784:	2300      	movs	r3, #0
 8002786:	e023      	b.n	80027d0 <LIS3MDL_MagReadXYZ+0xa4>
  switch(ctrlm & 0x60)
 8002788:	2d60      	cmp	r5, #96	; 0x60
 800278a:	d10b      	bne.n	80027a4 <LIS3MDL_MagReadXYZ+0x78>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800278c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80027dc <LIS3MDL_MagReadXYZ+0xb0>
 8002790:	e7f8      	b.n	8002784 <LIS3MDL_MagReadXYZ+0x58>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002792:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80027e0 <LIS3MDL_MagReadXYZ+0xb4>
 8002796:	e7f5      	b.n	8002784 <LIS3MDL_MagReadXYZ+0x58>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002798:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80027e4 <LIS3MDL_MagReadXYZ+0xb8>
 800279c:	e7f2      	b.n	8002784 <LIS3MDL_MagReadXYZ+0x58>
  switch(ctrlm & 0x60)
 800279e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80027e8 <LIS3MDL_MagReadXYZ+0xbc>
 80027a2:	e7ef      	b.n	8002784 <LIS3MDL_MagReadXYZ+0x58>
 80027a4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80027e8 <LIS3MDL_MagReadXYZ+0xbc>
 80027a8:	e7ec      	b.n	8002784 <LIS3MDL_MagReadXYZ+0x58>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80027aa:	aa04      	add	r2, sp, #16
 80027ac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80027b0:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 80027b4:	ee07 2a90 	vmov	s15, r2
 80027b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c4:	ee17 2a90 	vmov	r2, s15
 80027c8:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for(i=0; i<3; i++)
 80027cc:	3301      	adds	r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d9ea      	bls.n	80027aa <LIS3MDL_MagReadXYZ+0x7e>
  }
}
 80027d4:	b005      	add	sp, #20
 80027d6:	bd30      	pop	{r4, r5, pc}
 80027d8:	3e947ae1 	.word	0x3e947ae1
 80027dc:	3f147ae1 	.word	0x3f147ae1
 80027e0:	3edc28f6 	.word	0x3edc28f6
 80027e4:	3e0f5c29 	.word	0x3e0f5c29
 80027e8:	00000000 	.word	0x00000000

080027ec <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80027ec:	b530      	push	{r4, r5, lr}
 80027ee:	b083      	sub	sp, #12
 80027f0:	4605      	mov	r5, r0
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
 80027f2:	2400      	movs	r4, #0
 80027f4:	e00c      	b.n	8002810 <LPS22HB_P_ReadPressure+0x24>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80027f6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80027fa:	b2c9      	uxtb	r1, r1
 80027fc:	b2e8      	uxtb	r0, r5
 80027fe:	f000 fa81 	bl	8002d04 <SENSOR_IO_Read>
 8002802:	f104 0308 	add.w	r3, r4, #8
 8002806:	446b      	add	r3, sp
 8002808:	f803 0c04 	strb.w	r0, [r3, #-4]
  for(i = 0; i < 3; i++)
 800280c:	3401      	adds	r4, #1
 800280e:	b2e4      	uxtb	r4, r4
 8002810:	2c02      	cmp	r4, #2
 8002812:	d9f0      	bls.n	80027f6 <LPS22HB_P_ReadPressure+0xa>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002814:	2300      	movs	r3, #0
  uint32_t tmp = 0;
 8002816:	461a      	mov	r2, r3
 8002818:	e009      	b.n	800282e <LPS22HB_P_ReadPressure+0x42>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800281a:	f103 0108 	add.w	r1, r3, #8
 800281e:	4469      	add	r1, sp
 8002820:	f811 1c04 	ldrb.w	r1, [r1, #-4]
 8002824:	00d8      	lsls	r0, r3, #3
 8002826:	4081      	lsls	r1, r0
 8002828:	430a      	orrs	r2, r1
  for(i = 0; i < 3; i++)
 800282a:	3301      	adds	r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d9f3      	bls.n	800281a <LPS22HB_P_ReadPressure+0x2e>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002832:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8002836:	d001      	beq.n	800283c <LPS22HB_P_ReadPressure+0x50>
    tmp |= 0xFF000000;
 8002838:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 800283c:	2364      	movs	r3, #100	; 0x64
 800283e:	fb03 f202 	mul.w	r2, r3, r2
 8002842:	2a00      	cmp	r2, #0
 8002844:	db0a      	blt.n	800285c <LPS22HB_P_ReadPressure+0x70>
 8002846:	1312      	asrs	r2, r2, #12

  return (float)((float)raw_press / 100.0f);
 8002848:	ee07 2a90 	vmov	s15, r2
 800284c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002850:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002864 <LPS22HB_P_ReadPressure+0x78>
 8002854:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002858:	b003      	add	sp, #12
 800285a:	bd30      	pop	{r4, r5, pc}
  raw_press = (raw_press * 100) / 4096;
 800285c:	f602 72ff 	addw	r2, r2, #4095	; 0xfff
 8002860:	e7f1      	b.n	8002846 <LPS22HB_P_ReadPressure+0x5a>
 8002862:	bf00      	nop
 8002864:	42c80000 	.word	0x42c80000

08002868 <LPS22HB_T_ReadTemp>:
  * @brief  Read temperature value of LPS22HB
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float LPS22HB_T_ReadTemp(uint16_t DeviceAddr)
{
 8002868:	b530      	push	{r4, r5, lr}
 800286a:	b083      	sub	sp, #12
 800286c:	4605      	mov	r5, r0
  int16_t raw_data;
  uint8_t buffer[2];
  uint16_t tmp;
  uint8_t i;

  for(i = 0; i < 2; i++)
 800286e:	2400      	movs	r4, #0
 8002870:	e00c      	b.n	800288c <LPS22HB_T_ReadTemp+0x24>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_TEMP_OUT_L_REG + i));
 8002872:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8002876:	b2c9      	uxtb	r1, r1
 8002878:	b2e8      	uxtb	r0, r5
 800287a:	f000 fa43 	bl	8002d04 <SENSOR_IO_Read>
 800287e:	f104 0308 	add.w	r3, r4, #8
 8002882:	446b      	add	r3, sp
 8002884:	f803 0c04 	strb.w	r0, [r3, #-4]
  for(i = 0; i < 2; i++)
 8002888:	3401      	adds	r4, #1
 800288a:	b2e4      	uxtb	r4, r4
 800288c:	2c01      	cmp	r4, #1
 800288e:	d9f0      	bls.n	8002872 <LPS22HB_T_ReadTemp+0xa>
  }

  /* Build the raw tmp */
  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 8002890:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002894:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002898:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800289c:	b29b      	uxth	r3, r3

  raw_data = (tmp * 10) / 100;
 800289e:	4a07      	ldr	r2, [pc, #28]	; (80028bc <LPS22HB_T_ReadTemp+0x54>)
 80028a0:	fb82 2303 	smull	r2, r3, r2, r3
 80028a4:	089b      	lsrs	r3, r3, #2
  
  return ((float)(raw_data / 10.0f));
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80028ae:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80028b2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80028b6:	b003      	add	sp, #12
 80028b8:	bd30      	pop	{r4, r5, pc}
 80028ba:	bf00      	nop
 80028bc:	66666667 	.word	0x66666667

080028c0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80028c0:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80028c2:	b2c4      	uxtb	r4, r0
 80028c4:	211a      	movs	r1, #26
 80028c6:	4620      	mov	r0, r4
 80028c8:	f000 fa1c 	bl	8002d04 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 80028cc:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	211a      	movs	r1, #26
 80028d6:	4620      	mov	r0, r4
 80028d8:	f000 fa00 	bl	8002cdc <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80028dc:	2110      	movs	r1, #16
 80028de:	4620      	mov	r0, r4
 80028e0:	f000 fa10 	bl	8002d04 <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80028e4:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80028e8:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80028ec:	2110      	movs	r1, #16
 80028ee:	4620      	mov	r0, r4
 80028f0:	f000 f9f4 	bl	8002cdc <SENSOR_IO_Write>
}  
 80028f4:	bd10      	pop	{r4, pc}

080028f6 <LPS22HB_P_Init>:
{
 80028f6:	b508      	push	{r3, lr}
  LPS22HB_Init(DeviceAddr);
 80028f8:	f7ff ffe2 	bl	80028c0 <LPS22HB_Init>
}
 80028fc:	bd08      	pop	{r3, pc}

080028fe <LPS22HB_T_Init>:
{  
 80028fe:	b508      	push	{r3, lr}
  LPS22HB_Init(DeviceAddr);
 8002900:	f7ff ffde 	bl	80028c0 <LPS22HB_Init>
}
 8002904:	bd08      	pop	{r3, pc}

08002906 <LPS22HB_P_ReadID>:
{  
 8002906:	b510      	push	{r4, lr}
 8002908:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 800290a:	f000 f9df 	bl	8002ccc <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800290e:	210f      	movs	r1, #15
 8002910:	b2e0      	uxtb	r0, r4
 8002912:	f000 f9f7 	bl	8002d04 <SENSOR_IO_Read>
}
 8002916:	bd10      	pop	{r4, pc}

08002918 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002918:	b510      	push	{r4, lr}
 800291a:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800291c:	2110      	movs	r1, #16
 800291e:	20d4      	movs	r0, #212	; 0xd4
 8002920:	f000 f9f0 	bl	8002d04 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002924:	b2e2      	uxtb	r2, r4
  tmp &= ~(0xFC);
 8002926:	f000 0003 	and.w	r0, r0, #3
  tmp |= ctrl;
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800292a:	4302      	orrs	r2, r0
 800292c:	2110      	movs	r1, #16
 800292e:	20d4      	movs	r0, #212	; 0xd4
 8002930:	f000 f9d4 	bl	8002cdc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002934:	2112      	movs	r1, #18
 8002936:	20d4      	movs	r0, #212	; 0xd4
 8002938:	f000 f9e4 	bl	8002d04 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 800293c:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002940:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8002944:	2112      	movs	r1, #18
 8002946:	20d4      	movs	r0, #212	; 0xd4
 8002948:	f000 f9c8 	bl	8002cdc <SENSOR_IO_Write>
}
 800294c:	bd10      	pop	{r4, pc}

0800294e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800294e:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002950:	2110      	movs	r1, #16
 8002952:	20d4      	movs	r0, #212	; 0xd4
 8002954:	f000 f9d6 	bl	8002d04 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002958:	f000 020f 	and.w	r2, r0, #15
 800295c:	2110      	movs	r1, #16
 800295e:	20d4      	movs	r0, #212	; 0xd4
 8002960:	f000 f9bc 	bl	8002cdc <SENSOR_IO_Write>
}
 8002964:	bd08      	pop	{r3, pc}

08002966 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002966:	b510      	push	{r4, lr}
 8002968:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800296a:	2115      	movs	r1, #21
 800296c:	20d4      	movs	r0, #212	; 0xd4
 800296e:	f000 f9c9 	bl	8002d04 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002972:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8002976:	b10c      	cbz	r4, 800297c <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002978:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800297c:	2115      	movs	r1, #21
 800297e:	20d4      	movs	r0, #212	; 0xd4
 8002980:	f000 f9ac 	bl	8002cdc <SENSOR_IO_Write>
}
 8002984:	bd10      	pop	{r4, pc}

08002986 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002986:	b510      	push	{r4, lr}
 8002988:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800298a:	2111      	movs	r1, #17
 800298c:	20d4      	movs	r0, #212	; 0xd4
 800298e:	f000 f9b9 	bl	8002d04 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002992:	b2e2      	uxtb	r2, r4
  tmp &= ~(0xFC);
 8002994:	f000 0003 	and.w	r0, r0, #3
  tmp |= ctrl;
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002998:	4302      	orrs	r2, r0
 800299a:	2111      	movs	r1, #17
 800299c:	20d4      	movs	r0, #212	; 0xd4
 800299e:	f000 f99d 	bl	8002cdc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80029a2:	2112      	movs	r1, #18
 80029a4:	20d4      	movs	r0, #212	; 0xd4
 80029a6:	f000 f9ad 	bl	8002d04 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 80029aa:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80029ae:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 80029b2:	2112      	movs	r1, #18
 80029b4:	20d4      	movs	r0, #212	; 0xd4
 80029b6:	f000 f991 	bl	8002cdc <SENSOR_IO_Write>
}
 80029ba:	bd10      	pop	{r4, pc}

080029bc <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80029bc:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80029be:	2111      	movs	r1, #17
 80029c0:	20d4      	movs	r0, #212	; 0xd4
 80029c2:	f000 f99f 	bl	8002d04 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80029c6:	f000 020f 	and.w	r2, r0, #15
 80029ca:	2111      	movs	r1, #17
 80029cc:	20d4      	movs	r0, #212	; 0xd4
 80029ce:	f000 f985 	bl	8002cdc <SENSOR_IO_Write>
}
 80029d2:	bd08      	pop	{r3, pc}

080029d4 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80029d4:	b510      	push	{r4, lr}
 80029d6:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80029d8:	2116      	movs	r1, #22
 80029da:	20d4      	movs	r0, #212	; 0xd4
 80029dc:	f000 f992 	bl	8002d04 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80029e0:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 80029e4:	b10c      	cbz	r4, 80029ea <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80029e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80029ea:	2116      	movs	r1, #22
 80029ec:	20d4      	movs	r0, #212	; 0xd4
 80029ee:	f000 f975 	bl	8002cdc <SENSOR_IO_Write>
}
 80029f2:	bd10      	pop	{r4, pc}

080029f4 <LSM6DSL_AccReadID>:
{  
 80029f4:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 80029f6:	f000 f969 	bl	8002ccc <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80029fa:	210f      	movs	r1, #15
 80029fc:	20d4      	movs	r0, #212	; 0xd4
 80029fe:	f000 f981 	bl	8002d04 <SENSOR_IO_Read>
}
 8002a02:	bd08      	pop	{r3, pc}

08002a04 <LSM6DSL_GyroReadID>:
{
 8002a04:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8002a06:	f000 f961 	bl	8002ccc <SENSOR_IO_Init>
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	20d4      	movs	r0, #212	; 0xd4
 8002a0e:	f000 f979 	bl	8002d04 <SENSOR_IO_Read>
}
 8002a12:	bd08      	pop	{r3, pc}

08002a14 <LSM6DSL_AccReadXYZ>:
{
 8002a14:	b530      	push	{r4, r5, lr}
 8002a16:	b085      	sub	sp, #20
 8002a18:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002a1a:	2110      	movs	r1, #16
 8002a1c:	20d4      	movs	r0, #212	; 0xd4
 8002a1e:	f000 f971 	bl	8002d04 <SENSOR_IO_Read>
 8002a22:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002a24:	2306      	movs	r3, #6
 8002a26:	466a      	mov	r2, sp
 8002a28:	2128      	movs	r1, #40	; 0x28
 8002a2a:	20d4      	movs	r0, #212	; 0xd4
 8002a2c:	f000 f980 	bl	8002d30 <SENSOR_IO_ReadMultiple>
  for(i=0; i<3; i++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	e00f      	b.n	8002a54 <LSM6DSL_AccReadXYZ+0x40>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002a34:	005a      	lsls	r2, r3, #1
 8002a36:	f102 0111 	add.w	r1, r2, #17
 8002a3a:	4469      	add	r1, sp
 8002a3c:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8002a40:	3210      	adds	r2, #16
 8002a42:	446a      	add	r2, sp
 8002a44:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8002a48:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8002a4c:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 8002a50:	3301      	adds	r3, #1
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d9ed      	bls.n	8002a34 <LSM6DSL_AccReadXYZ+0x20>
  switch(ctrlx & 0x0C)
 8002a58:	f005 050c 	and.w	r5, r5, #12
 8002a5c:	2d0c      	cmp	r5, #12
 8002a5e:	d808      	bhi.n	8002a72 <LSM6DSL_AccReadXYZ+0x5e>
 8002a60:	e8df f005 	tbb	[pc, r5]
 8002a64:	07070714 	.word	0x07070714
 8002a68:	07070711 	.word	0x07070711
 8002a6c:	0707070b 	.word	0x0707070b
 8002a70:	0e          	.byte	0x0e
 8002a71:	00          	.byte	0x00
 8002a72:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002ac0 <LSM6DSL_AccReadXYZ+0xac>
  for(i=0; i<3; i++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	e01e      	b.n	8002ab8 <LSM6DSL_AccReadXYZ+0xa4>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002a7a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002ac4 <LSM6DSL_AccReadXYZ+0xb0>
    break;
 8002a7e:	e7fa      	b.n	8002a76 <LSM6DSL_AccReadXYZ+0x62>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002a80:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002ac8 <LSM6DSL_AccReadXYZ+0xb4>
    break;
 8002a84:	e7f7      	b.n	8002a76 <LSM6DSL_AccReadXYZ+0x62>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002a86:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002acc <LSM6DSL_AccReadXYZ+0xb8>
    break;    
 8002a8a:	e7f4      	b.n	8002a76 <LSM6DSL_AccReadXYZ+0x62>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002a8c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002ad0 <LSM6DSL_AccReadXYZ+0xbc>
 8002a90:	e7f1      	b.n	8002a76 <LSM6DSL_AccReadXYZ+0x62>
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002a92:	aa04      	add	r2, sp, #16
 8002a94:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002a98:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 8002a9c:	ee07 2a90 	vmov	s15, r2
 8002aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aac:	ee17 2a90 	vmov	r2, s15
 8002ab0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for(i=0; i<3; i++)
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d9ea      	bls.n	8002a92 <LSM6DSL_AccReadXYZ+0x7e>
}
 8002abc:	b005      	add	sp, #20
 8002abe:	bd30      	pop	{r4, r5, pc}
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	3df9db23 	.word	0x3df9db23
 8002ac8:	3e79db23 	.word	0x3e79db23
 8002acc:	3ef9db23 	.word	0x3ef9db23
 8002ad0:	3d79db23 	.word	0x3d79db23

08002ad4 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002ad4:	b530      	push	{r4, r5, lr}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002ada:	2111      	movs	r1, #17
 8002adc:	20d4      	movs	r0, #212	; 0xd4
 8002ade:	f000 f911 	bl	8002d04 <SENSOR_IO_Read>
 8002ae2:	4605      	mov	r5, r0
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002ae4:	2306      	movs	r3, #6
 8002ae6:	466a      	mov	r2, sp
 8002ae8:	2122      	movs	r1, #34	; 0x22
 8002aea:	20d4      	movs	r0, #212	; 0xd4
 8002aec:	f000 f920 	bl	8002d30 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	e00f      	b.n	8002b14 <LSM6DSL_GyroReadXYZAngRate+0x40>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002af4:	005a      	lsls	r2, r3, #1
 8002af6:	f102 0111 	add.w	r1, r2, #17
 8002afa:	4469      	add	r1, sp
 8002afc:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8002b00:	3210      	adds	r2, #16
 8002b02:	446a      	add	r2, sp
 8002b04:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8002b08:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8002b0c:	f822 1c08 	strh.w	r1, [r2, #-8]
  for(i=0; i<3; i++)
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d9ed      	bls.n	8002af4 <LSM6DSL_GyroReadXYZAngRate+0x20>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002b18:	f005 050c 	and.w	r5, r5, #12
 8002b1c:	2d0c      	cmp	r5, #12
 8002b1e:	d808      	bhi.n	8002b32 <LSM6DSL_GyroReadXYZAngRate+0x5e>
 8002b20:	e8df f005 	tbb	[pc, r5]
 8002b24:	07070714 	.word	0x07070714
 8002b28:	0707070b 	.word	0x0707070b
 8002b2c:	0707070e 	.word	0x0707070e
 8002b30:	11          	.byte	0x11
 8002b31:	00          	.byte	0x00
 8002b32:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002b7c <LSM6DSL_GyroReadXYZAngRate+0xa8>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
    break;    
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	e01c      	b.n	8002b74 <LSM6DSL_GyroReadXYZAngRate+0xa0>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002b3a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b80 <LSM6DSL_GyroReadXYZAngRate+0xac>
    break;
 8002b3e:	e7fa      	b.n	8002b36 <LSM6DSL_GyroReadXYZAngRate+0x62>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002b40:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002b84 <LSM6DSL_GyroReadXYZAngRate+0xb0>
    break;
 8002b44:	e7f7      	b.n	8002b36 <LSM6DSL_GyroReadXYZAngRate+0x62>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002b46:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002b88 <LSM6DSL_GyroReadXYZAngRate+0xb4>
    break;    
 8002b4a:	e7f4      	b.n	8002b36 <LSM6DSL_GyroReadXYZAngRate+0x62>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002b4c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002b8c <LSM6DSL_GyroReadXYZAngRate+0xb8>
 8002b50:	e7f1      	b.n	8002b36 <LSM6DSL_GyroReadXYZAngRate+0x62>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002b52:	aa04      	add	r2, sp, #16
 8002b54:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002b58:	f932 2c08 	ldrsh.w	r2, [r2, #-8]
 8002b5c:	ee07 2a90 	vmov	s15, r2
 8002b60:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8002b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6c:	edc2 7a00 	vstr	s15, [r2]
  for(i=0; i<3; i++)
 8002b70:	3301      	adds	r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d9ec      	bls.n	8002b52 <LSM6DSL_GyroReadXYZAngRate+0x7e>
  }
}
 8002b78:	b005      	add	sp, #20
 8002b7a:	bd30      	pop	{r4, r5, pc}
 8002b7c:	00000000 	.word	0x00000000
 8002b80:	418c0000 	.word	0x418c0000
 8002b84:	420c0000 	.word	0x420c0000
 8002b88:	428c0000 	.word	0x428c0000
 8002b8c:	410c0000 	.word	0x410c0000

08002b90 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002b90:	b530      	push	{r4, r5, lr}
 8002b92:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002b94:	4c20      	ldr	r4, [pc, #128]	; (8002c18 <I2Cx_MspInit+0x88>)
 8002b96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002b9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002ba8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bac:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002bae:	2312      	movs	r3, #18
 8002bb0:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002bbe:	4d17      	ldr	r5, [pc, #92]	; (8002c1c <I2Cx_MspInit+0x8c>)
 8002bc0:	a903      	add	r1, sp, #12
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f000 fa7c 	bl	80030c0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002bc8:	a903      	add	r1, sp, #12
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f000 fa78 	bl	80030c0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002bd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8002bd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	9302      	str	r3, [sp, #8]
 8002be0:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002be8:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002bf0:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	210f      	movs	r1, #15
 8002bf6:	2021      	movs	r0, #33	; 0x21
 8002bf8:	f000 fa08 	bl	800300c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002bfc:	2021      	movs	r0, #33	; 0x21
 8002bfe:	f000 fa3d 	bl	800307c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	210f      	movs	r1, #15
 8002c06:	2022      	movs	r0, #34	; 0x22
 8002c08:	f000 fa00 	bl	800300c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002c0c:	2022      	movs	r0, #34	; 0x22
 8002c0e:	f000 fa35 	bl	800307c <HAL_NVIC_EnableIRQ>
}
 8002c12:	b009      	add	sp, #36	; 0x24
 8002c14:	bd30      	pop	{r4, r5, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	48000400 	.word	0x48000400

08002c20 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4604      	mov	r4, r0
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <I2Cx_Init+0x30>)
 8002c26:	6003      	str	r3, [r0, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <I2Cx_Init+0x34>)
 8002c2a:	6043      	str	r3, [r0, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002c2c:	2500      	movs	r5, #0
 8002c2e:	6085      	str	r5, [r0, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002c30:	2301      	movs	r3, #1
 8002c32:	60c3      	str	r3, [r0, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002c34:	6105      	str	r5, [r0, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002c36:	6145      	str	r5, [r0, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002c38:	61c5      	str	r5, [r0, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002c3a:	6205      	str	r5, [r0, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002c3c:	f7ff ffa8 	bl	8002b90 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002c40:	4620      	mov	r0, r4
 8002c42:	f000 fd4f 	bl	80036e4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002c46:	4629      	mov	r1, r5
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f000 ff6f 	bl	8003b2c <HAL_I2CEx_ConfigAnalogFilter>
}
 8002c4e:	bd38      	pop	{r3, r4, r5, pc}
 8002c50:	40005800 	.word	0x40005800
 8002c54:	00702681 	.word	0x00702681

08002c58 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002c5c:	f000 fda0 	bl	80037a0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002c60:	4620      	mov	r0, r4
 8002c62:	f7ff ffdd 	bl	8002c20 <I2Cx_Init>
}
 8002c66:	bd10      	pop	{r4, pc}

08002c68 <I2Cx_WriteMultiple>:
{
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002c70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c74:	9102      	str	r1, [sp, #8]
 8002c76:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8002c7a:	9101      	str	r1, [sp, #4]
 8002c7c:	9908      	ldr	r1, [sp, #32]
 8002c7e:	9100      	str	r1, [sp, #0]
 8002c80:	4621      	mov	r1, r4
 8002c82:	f000 fda6 	bl	80037d2 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8002c86:	4606      	mov	r6, r0
 8002c88:	b910      	cbnz	r0, 8002c90 <I2Cx_WriteMultiple+0x28>
}
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8002c90:	4621      	mov	r1, r4
 8002c92:	4628      	mov	r0, r5
 8002c94:	f7ff ffe0 	bl	8002c58 <I2Cx_Error>
 8002c98:	e7f7      	b.n	8002c8a <I2Cx_WriteMultiple+0x22>

08002c9a <I2Cx_ReadMultiple>:
{
 8002c9a:	b570      	push	{r4, r5, r6, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	4605      	mov	r5, r0
 8002ca0:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002ca2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ca6:	9102      	str	r1, [sp, #8]
 8002ca8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8002cac:	9101      	str	r1, [sp, #4]
 8002cae:	9908      	ldr	r1, [sp, #32]
 8002cb0:	9100      	str	r1, [sp, #0]
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	f000 fe62 	bl	800397c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8002cb8:	4606      	mov	r6, r0
 8002cba:	b910      	cbnz	r0, 8002cc2 <I2Cx_ReadMultiple+0x28>
}
 8002cbc:	4630      	mov	r0, r6
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f7ff ffc7 	bl	8002c58 <I2Cx_Error>
 8002cca:	e7f7      	b.n	8002cbc <I2Cx_ReadMultiple+0x22>

08002ccc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002ccc:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cHandler);
 8002cce:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <SENSOR_IO_Init+0xc>)
 8002cd0:	f7ff ffa6 	bl	8002c20 <I2Cx_Init>
}
 8002cd4:	bd08      	pop	{r3, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000a68 	.word	0x20000a68

08002cdc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002cdc:	b500      	push	{lr}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	f10d 020f 	add.w	r2, sp, #15
 8002cec:	9200      	str	r2, [sp, #0]
 8002cee:	460a      	mov	r2, r1
 8002cf0:	4601      	mov	r1, r0
 8002cf2:	4803      	ldr	r0, [pc, #12]	; (8002d00 <SENSOR_IO_Write+0x24>)
 8002cf4:	f7ff ffb8 	bl	8002c68 <I2Cx_WriteMultiple>
}
 8002cf8:	b005      	add	sp, #20
 8002cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cfe:	bf00      	nop
 8002d00:	20000a68 	.word	0x20000a68

08002d04 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002d04:	b500      	push	{lr}
 8002d06:	b085      	sub	sp, #20
 8002d08:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f88d 300f 	strb.w	r3, [sp, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002d10:	2301      	movs	r3, #1
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	f10d 010f 	add.w	r1, sp, #15
 8002d18:	9100      	str	r1, [sp, #0]
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <SENSOR_IO_Read+0x28>)
 8002d1e:	f7ff ffbc 	bl	8002c9a <I2Cx_ReadMultiple>

  return read_value;
}
 8002d22:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002d26:	b005      	add	sp, #20
 8002d28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d2c:	20000a68 	.word	0x20000a68

08002d30 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002d30:	b500      	push	{lr}
 8002d32:	b083      	sub	sp, #12
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	9200      	str	r2, [sp, #0]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	460a      	mov	r2, r1
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	4803      	ldr	r0, [pc, #12]	; (8002d4c <SENSOR_IO_ReadMultiple+0x1c>)
 8002d40:	f7ff ffab 	bl	8002c9a <I2Cx_ReadMultiple>
}
 8002d44:	b280      	uxth	r0, r0
 8002d46:	b003      	add	sp, #12
 8002d48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d4c:	20000a68 	.word	0x20000a68

08002d50 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002d50:	b510      	push	{r4, lr}
 8002d52:	b082      	sub	sp, #8
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <BSP_ACCELERO_Init+0x44>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4798      	blx	r3
 8002d5a:	286a      	cmp	r0, #106	; 0x6a
 8002d5c:	d002      	beq.n	8002d64 <BSP_ACCELERO_Init+0x14>
  {
    ret = ACCELERO_ERROR;
 8002d5e:	2001      	movs	r0, #1
    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
  }  

  return ret;
}
 8002d60:	b002      	add	sp, #8
 8002d62:	bd10      	pop	{r4, pc}
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <BSP_ACCELERO_Init+0x44>)
 8002d66:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <BSP_ACCELERO_Init+0x48>)
 8002d68:	6013      	str	r3, [r2, #0]
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002d6a:	2230      	movs	r2, #48	; 0x30
 8002d6c:	f88d 2001 	strb.w	r2, [sp, #1]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002d70:	2400      	movs	r4, #0
 8002d72:	f88d 4002 	strb.w	r4, [sp, #2]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002d76:	f88d 4006 	strb.w	r4, [sp, #6]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	f88d 2004 	strb.w	r2, [sp, #4]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002d80:	f88d 4003 	strb.w	r4, [sp, #3]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002d84:	f88d 4007 	strb.w	r4, [sp, #7]
    AccelerometerDrv->Init(ctrl);
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f244 4030 	movw	r0, #17456	; 0x4430
 8002d8e:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002d90:	4620      	mov	r0, r4
 8002d92:	e7e5      	b.n	8002d60 <BSP_ACCELERO_Init+0x10>
 8002d94:	2000049c 	.word	0x2000049c
 8002d98:	20000b38 	.word	0x20000b38

08002d9c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002d9c:	b508      	push	{r3, lr}
  if(AccelerometerDrv != NULL)
 8002d9e:	4b03      	ldr	r3, [pc, #12]	; (8002dac <BSP_ACCELERO_AccGetXYZ+0x10>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b113      	cbz	r3, 8002daa <BSP_ACCELERO_AccGetXYZ+0xe>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	b103      	cbz	r3, 8002daa <BSP_ACCELERO_AccGetXYZ+0xe>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002da8:	4798      	blx	r3
    }
  }
}
 8002daa:	bd08      	pop	{r3, pc}
 8002dac:	20000b38 	.word	0x20000b38

08002db0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002db0:	b510      	push	{r4, lr}
 8002db2:	b082      	sub	sp, #8
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <BSP_GYRO_Init+0x4c>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4798      	blx	r3
 8002dba:	286a      	cmp	r0, #106	; 0x6a
 8002dbc:	d002      	beq.n	8002dc4 <BSP_GYRO_Init+0x14>
  {
    ret = GYRO_ERROR;
 8002dbe:	2001      	movs	r0, #1
    
    ret = GYRO_OK;
  }
  
  return ret;
}
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd10      	pop	{r4, pc}
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <BSP_GYRO_Init+0x4c>)
 8002dc6:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <BSP_GYRO_Init+0x50>)
 8002dc8:	6013      	str	r3, [r2, #0]
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002dca:	2400      	movs	r4, #0
 8002dcc:	f88d 4000 	strb.w	r4, [sp]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002dd0:	2230      	movs	r2, #48	; 0x30
 8002dd2:	f88d 2001 	strb.w	r2, [sp, #1]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002dd6:	f88d 4002 	strb.w	r4, [sp, #2]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002dda:	f88d 4003 	strb.w	r4, [sp, #3]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002dde:	2240      	movs	r2, #64	; 0x40
 8002de0:	f88d 2004 	strb.w	r2, [sp, #4]
    LSM6DSL_InitStructure.Endianness = 0;
 8002de4:	f88d 4005 	strb.w	r4, [sp, #5]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002de8:	220c      	movs	r2, #12
 8002dea:	f88d 2006 	strb.w	r2, [sp, #6]
    GyroscopeDrv->Init(ctrl);
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f244 403c 	movw	r0, #17468	; 0x443c
 8002df4:	4798      	blx	r3
    ret = GYRO_OK;
 8002df6:	4620      	mov	r0, r4
 8002df8:	e7e2      	b.n	8002dc0 <BSP_GYRO_Init+0x10>
 8002dfa:	bf00      	nop
 8002dfc:	20000468 	.word	0x20000468
 8002e00:	20000b3c 	.word	0x20000b3c

08002e04 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002e04:	b508      	push	{r3, lr}
  if(GyroscopeDrv != NULL)
 8002e06:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <BSP_GYRO_GetXYZ+0x10>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b113      	cbz	r3, 8002e12 <BSP_GYRO_GetXYZ+0xe>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	b103      	cbz	r3, 8002e12 <BSP_GYRO_GetXYZ+0xe>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8002e10:	4798      	blx	r3
    }
  }
}
 8002e12:	bd08      	pop	{r3, pc}
 8002e14:	20000b3c 	.word	0x20000b3c

08002e18 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002e18:	b508      	push	{r3, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <BSP_HSENSOR_Init+0x24>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	20be      	movs	r0, #190	; 0xbe
 8002e20:	4798      	blx	r3
 8002e22:	28bc      	cmp	r0, #188	; 0xbc
 8002e24:	d001      	beq.n	8002e2a <BSP_HSENSOR_Init+0x12>
  {
    ret = HSENSOR_ERROR;
 8002e26:	2001      	movs	r0, #1
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
    ret = HSENSOR_OK;
  }
  
  return ret;
}
 8002e28:	bd08      	pop	{r3, pc}
    Hsensor_drv = &HTS221_H_Drv;
 8002e2a:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <BSP_HSENSOR_Init+0x24>)
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <BSP_HSENSOR_Init+0x28>)
 8002e2e:	6013      	str	r3, [r2, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	20be      	movs	r0, #190	; 0xbe
 8002e34:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002e36:	2000      	movs	r0, #0
 8002e38:	e7f6      	b.n	8002e28 <BSP_HSENSOR_Init+0x10>
 8002e3a:	bf00      	nop
 8002e3c:	2000040c 	.word	0x2000040c
 8002e40:	20000b40 	.word	0x20000b40

08002e44 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002e44:	b508      	push	{r3, lr}
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002e46:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <BSP_HSENSOR_ReadHumidity+0x10>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	20be      	movs	r0, #190	; 0xbe
 8002e4e:	4798      	blx	r3
}
 8002e50:	bd08      	pop	{r3, pc}
 8002e52:	bf00      	nop
 8002e54:	20000b40 	.word	0x20000b40

08002e58 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	b082      	sub	sp, #8
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <BSP_MAGNETO_Init+0x44>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4798      	blx	r3
 8002e62:	283d      	cmp	r0, #61	; 0x3d
 8002e64:	d002      	beq.n	8002e6c <BSP_MAGNETO_Init+0x14>
  {
    ret = MAGNETO_ERROR;
 8002e66:	2001      	movs	r0, #1
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
  } 

  return ret;  
}
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd10      	pop	{r4, pc}
    MagnetoDrv = &Lis3mdlMagDrv;
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <BSP_MAGNETO_Init+0x44>)
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <BSP_MAGNETO_Init+0x48>)
 8002e70:	6013      	str	r3, [r2, #0]
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002e72:	2258      	movs	r2, #88	; 0x58
 8002e74:	f88d 2000 	strb.w	r2, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002e78:	2400      	movs	r4, #0
 8002e7a:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002e7e:	f88d 4002 	strb.w	r4, [sp, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002e82:	2208      	movs	r2, #8
 8002e84:	f88d 2003 	strb.w	r2, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002e88:	2240      	movs	r2, #64	; 0x40
 8002e8a:	f88d 2004 	strb.w	r2, [sp, #4]
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	aa02      	add	r2, sp, #8
 8002e92:	e912 0003 	ldmdb	r2, {r0, r1}
 8002e96:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002e98:	4620      	mov	r0, r4
 8002e9a:	e7e5      	b.n	8002e68 <BSP_MAGNETO_Init+0x10>
 8002e9c:	20000418 	.word	0x20000418
 8002ea0:	20000b44 	.word	0x20000b44

08002ea4 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002ea4:	b508      	push	{r3, lr}
  if(MagnetoDrv != NULL)
 8002ea6:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <BSP_MAGNETO_GetXYZ+0x10>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b113      	cbz	r3, 8002eb2 <BSP_MAGNETO_GetXYZ+0xe>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	b103      	cbz	r3, 8002eb2 <BSP_MAGNETO_GetXYZ+0xe>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002eb0:	4798      	blx	r3
    }
  }
}
 8002eb2:	bd08      	pop	{r3, pc}
 8002eb4:	20000b44 	.word	0x20000b44

08002eb8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002eb8:	b508      	push	{r3, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <BSP_PSENSOR_Init+0x24>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	20ba      	movs	r0, #186	; 0xba
 8002ec0:	4798      	blx	r3
 8002ec2:	28b1      	cmp	r0, #177	; 0xb1
 8002ec4:	d001      	beq.n	8002eca <BSP_PSENSOR_Init+0x12>
  {
    ret = PSENSOR_ERROR;
 8002ec6:	2001      	movs	r0, #1
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
    ret = PSENSOR_OK;
  }
  
  return ret;
}
 8002ec8:	bd08      	pop	{r3, pc}
     Psensor_drv = &LPS22HB_P_Drv;
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <BSP_PSENSOR_Init+0x24>)
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <BSP_PSENSOR_Init+0x28>)
 8002ece:	6013      	str	r3, [r2, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	20ba      	movs	r0, #186	; 0xba
 8002ed4:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	e7f6      	b.n	8002ec8 <BSP_PSENSOR_Init+0x10>
 8002eda:	bf00      	nop
 8002edc:	2000045c 	.word	0x2000045c
 8002ee0:	20000b48 	.word	0x20000b48

08002ee4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002ee4:	b508      	push	{r3, lr}
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002ee6:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <BSP_PSENSOR_ReadPressure+0x10>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	20ba      	movs	r0, #186	; 0xba
 8002eee:	4798      	blx	r3
}
 8002ef0:	bd08      	pop	{r3, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000b48 	.word	0x20000b48

08002ef8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002ef8:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002efa:	4c06      	ldr	r4, [pc, #24]	; (8002f14 <BSP_TSENSOR_Init+0x1c>)
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <BSP_TSENSOR_Init+0x20>)
 8002efe:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002f00:	f7ff fee4 	bl	8002ccc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2100      	movs	r1, #0
 8002f0a:	20be      	movs	r0, #190	; 0xbe
 8002f0c:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8002f0e:	2000      	movs	r0, #0
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	bf00      	nop
 8002f14:	20000b4c 	.word	0x20000b4c
 8002f18:	200003fc 	.word	0x200003fc

08002f1c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002f1c:	b508      	push	{r3, lr}
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002f1e:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <BSP_TSENSOR_ReadTemp+0x10>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	20be      	movs	r0, #190	; 0xbe
 8002f26:	4798      	blx	r3
}
 8002f28:	bd08      	pop	{r3, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000b4c 	.word	0x20000b4c

08002f30 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_InitTick+0x44>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	b90b      	cbnz	r3, 8002f3a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f36:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002f38:	4770      	bx	lr
{
 8002f3a:	b510      	push	{r4, lr}
 8002f3c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <HAL_InitTick+0x48>)
 8002f48:	6810      	ldr	r0, [r2, #0]
 8002f4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f4e:	f000 f8a3 	bl	8003098 <HAL_SYSTICK_Config>
 8002f52:	b968      	cbnz	r0, 8002f70 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f54:	2c0f      	cmp	r4, #15
 8002f56:	d901      	bls.n	8002f5c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e00a      	b.n	8002f72 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4621      	mov	r1, r4
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f000 f852 	bl	800300c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_InitTick+0x44>)
 8002f6a:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e000      	b.n	8002f72 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002f70:	2001      	movs	r0, #1
}
 8002f72:	bd10      	pop	{r4, pc}
 8002f74:	200004d0 	.word	0x200004d0
 8002f78:	200003f8 	.word	0x200003f8

08002f7c <HAL_Init>:
{
 8002f7c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7e:	2003      	movs	r0, #3
 8002f80:	f000 f832 	bl	8002fe8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f84:	2000      	movs	r0, #0
 8002f86:	f7ff ffd3 	bl	8002f30 <HAL_InitTick>
 8002f8a:	b110      	cbz	r0, 8002f92 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002f8c:	2401      	movs	r4, #1
}
 8002f8e:	4620      	mov	r0, r4
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	4604      	mov	r4, r0
    HAL_MspInit();
 8002f94:	f7ff f810 	bl	8001fb8 <HAL_MspInit>
 8002f98:	e7f9      	b.n	8002f8e <HAL_Init+0x12>
	...

08002f9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_IncTick+0x10>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_IncTick+0x14>)
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	440b      	add	r3, r1
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	200004d0 	.word	0x200004d0
 8002fb0:	20000b50 	.word	0x20000b50

08002fb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002fb4:	4b01      	ldr	r3, [pc, #4]	; (8002fbc <HAL_GetTick+0x8>)
 8002fb6:	6818      	ldr	r0, [r3, #0]
}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000b50 	.word	0x20000b50

08002fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc0:	b538      	push	{r3, r4, r5, lr}
 8002fc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff fff6 	bl	8002fb4 <HAL_GetTick>
 8002fc8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fca:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002fce:	d002      	beq.n	8002fd6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_Delay+0x24>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd6:	f7ff ffed 	bl	8002fb4 <HAL_GetTick>
 8002fda:	1b40      	subs	r0, r0, r5
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d3fa      	bcc.n	8002fd6 <HAL_Delay+0x16>
  {
  }
}
 8002fe0:	bd38      	pop	{r3, r4, r5, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200004d0 	.word	0x200004d0

08002fe8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4a07      	ldr	r2, [pc, #28]	; (8003008 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002fea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff4:	0200      	lsls	r0, r0, #8
 8002ff6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003004:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_NVIC_SetPriority+0x68>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003016:	f1c3 0c07 	rsb	ip, r3, #7
 800301a:	f1bc 0f04 	cmp.w	ip, #4
 800301e:	bf28      	it	cs
 8003020:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003024:	f103 0e04 	add.w	lr, r3, #4
 8003028:	f1be 0f06 	cmp.w	lr, #6
 800302c:	d918      	bls.n	8003060 <HAL_NVIC_SetPriority+0x54>
 800302e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	f04f 3eff 	mov.w	lr, #4294967295
 8003034:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003038:	ea21 010c 	bic.w	r1, r1, ip
 800303c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800303e:	fa0e f303 	lsl.w	r3, lr, r3
 8003042:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003046:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003048:	2800      	cmp	r0, #0
 800304a:	db0b      	blt.n	8003064 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	0109      	lsls	r1, r1, #4
 800304e:	b2c9      	uxtb	r1, r1
 8003050:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003054:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003058:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800305c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003060:	2300      	movs	r3, #0
 8003062:	e7e5      	b.n	8003030 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003064:	f000 000f 	and.w	r0, r0, #15
 8003068:	0109      	lsls	r1, r1, #4
 800306a:	b2c9      	uxtb	r1, r1
 800306c:	4b02      	ldr	r3, [pc, #8]	; (8003078 <HAL_NVIC_SetPriority+0x6c>)
 800306e:	5419      	strb	r1, [r3, r0]
 8003070:	e7f4      	b.n	800305c <HAL_NVIC_SetPriority+0x50>
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00
 8003078:	e000ed14 	.word	0xe000ed14

0800307c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800307c:	2800      	cmp	r0, #0
 800307e:	db07      	blt.n	8003090 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003080:	f000 021f 	and.w	r2, r0, #31
 8003084:	0940      	lsrs	r0, r0, #5
 8003086:	2301      	movs	r3, #1
 8003088:	4093      	lsls	r3, r2
 800308a:	4a02      	ldr	r2, [pc, #8]	; (8003094 <HAL_NVIC_EnableIRQ+0x18>)
 800308c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000e100 	.word	0xe000e100

08003098 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003098:	3801      	subs	r0, #1
 800309a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800309e:	d20b      	bcs.n	80030b8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80030a4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a6:	4a05      	ldr	r2, [pc, #20]	; (80030bc <HAL_SYSTICK_Config+0x24>)
 80030a8:	21f0      	movs	r1, #240	; 0xf0
 80030aa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ae:	2000      	movs	r0, #0
 80030b0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b2:	2207      	movs	r2, #7
 80030b4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80030b8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80030c4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c6:	e040      	b.n	800314a <HAL_GPIO_Init+0x8a>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030c8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030ca:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80030ce:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 80030d2:	409c      	lsls	r4, r3
 80030d4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->ASCR = temp;
 80030d8:	62c4      	str	r4, [r0, #44]	; 0x2c
 80030da:	e062      	b.n	80031a2 <HAL_GPIO_Init+0xe2>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030dc:	2406      	movs	r4, #6
 80030de:	e000      	b.n	80030e2 <HAL_GPIO_Init+0x22>
 80030e0:	2400      	movs	r4, #0
 80030e2:	40b4      	lsls	r4, r6
 80030e4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030e6:	3502      	adds	r5, #2
 80030e8:	4e68      	ldr	r6, [pc, #416]	; (800328c <HAL_GPIO_Init+0x1cc>)
 80030ea:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030ee:	4c68      	ldr	r4, [pc, #416]	; (8003290 <HAL_GPIO_Init+0x1d0>)
 80030f0:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80030f2:	43d4      	mvns	r4, r2
 80030f4:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f8:	684f      	ldr	r7, [r1, #4]
 80030fa:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80030fe:	d001      	beq.n	8003104 <HAL_GPIO_Init+0x44>
        {
          temp |= iocurrent;
 8003100:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8003104:	4d62      	ldr	r5, [pc, #392]	; (8003290 <HAL_GPIO_Init+0x1d0>)
 8003106:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8003108:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800310a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800310e:	684f      	ldr	r7, [r1, #4]
 8003110:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003114:	d001      	beq.n	800311a <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8003116:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800311a:	4d5d      	ldr	r5, [pc, #372]	; (8003290 <HAL_GPIO_Init+0x1d0>)
 800311c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800311e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8003120:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003124:	684f      	ldr	r7, [r1, #4]
 8003126:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800312a:	d001      	beq.n	8003130 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 800312c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003130:	4d57      	ldr	r5, [pc, #348]	; (8003290 <HAL_GPIO_Init+0x1d0>)
 8003132:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003134:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003136:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003138:	684e      	ldr	r6, [r1, #4]
 800313a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800313e:	d001      	beq.n	8003144 <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 8003140:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003144:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_GPIO_Init+0x1d0>)
 8003146:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8003148:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314a:	680a      	ldr	r2, [r1, #0]
 800314c:	fa32 f403 	lsrs.w	r4, r2, r3
 8003150:	f000 8099 	beq.w	8003286 <HAL_GPIO_Init+0x1c6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003154:	f04f 0c01 	mov.w	ip, #1
 8003158:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800315c:	ea1c 0202 	ands.w	r2, ip, r2
 8003160:	d0f2      	beq.n	8003148 <HAL_GPIO_Init+0x88>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003162:	684c      	ldr	r4, [r1, #4]
 8003164:	1e65      	subs	r5, r4, #1
 8003166:	2d01      	cmp	r5, #1
 8003168:	d903      	bls.n	8003172 <HAL_GPIO_Init+0xb2>
 800316a:	2c11      	cmp	r4, #17
 800316c:	d001      	beq.n	8003172 <HAL_GPIO_Init+0xb2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800316e:	2c12      	cmp	r4, #18
 8003170:	d112      	bne.n	8003198 <HAL_GPIO_Init+0xd8>
        temp = GPIOx->OSPEEDR;
 8003172:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003174:	005e      	lsls	r6, r3, #1
 8003176:	2403      	movs	r4, #3
 8003178:	40b4      	lsls	r4, r6
 800317a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800317e:	68cc      	ldr	r4, [r1, #12]
 8003180:	40b4      	lsls	r4, r6
 8003182:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003184:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003186:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003188:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800318c:	684c      	ldr	r4, [r1, #4]
 800318e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003192:	409c      	lsls	r4, r3
 8003194:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003196:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003198:	684c      	ldr	r4, [r1, #4]
 800319a:	f004 0503 	and.w	r5, r4, #3
 800319e:	2d03      	cmp	r5, #3
 80031a0:	d092      	beq.n	80030c8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 80031a2:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80031a8:	2503      	movs	r5, #3
 80031aa:	fa05 f50c 	lsl.w	r5, r5, ip
 80031ae:	43ec      	mvns	r4, r5
 80031b0:	ea26 0e05 	bic.w	lr, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031b4:	688d      	ldr	r5, [r1, #8]
 80031b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80031ba:	ea45 050e 	orr.w	r5, r5, lr
      GPIOx->PUPDR = temp;
 80031be:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c0:	684d      	ldr	r5, [r1, #4]
 80031c2:	2d02      	cmp	r5, #2
 80031c4:	d001      	beq.n	80031ca <HAL_GPIO_Init+0x10a>
 80031c6:	2d12      	cmp	r5, #18
 80031c8:	d112      	bne.n	80031f0 <HAL_GPIO_Init+0x130>
        temp = GPIOx->AFR[position >> 3u];
 80031ca:	08de      	lsrs	r6, r3, #3
 80031cc:	3608      	adds	r6, #8
 80031ce:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031d2:	f003 0507 	and.w	r5, r3, #7
 80031d6:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 80031da:	250f      	movs	r5, #15
 80031dc:	fa05 f50e 	lsl.w	r5, r5, lr
 80031e0:	ea27 0705 	bic.w	r7, r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031e4:	690d      	ldr	r5, [r1, #16]
 80031e6:	fa05 f50e 	lsl.w	r5, r5, lr
 80031ea:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 80031ec:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80031f0:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031f2:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031f4:	684c      	ldr	r4, [r1, #4]
 80031f6:	f004 0403 	and.w	r4, r4, #3
 80031fa:	fa04 f40c 	lsl.w	r4, r4, ip
 80031fe:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8003200:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003202:	684c      	ldr	r4, [r1, #4]
 8003204:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003208:	d09e      	beq.n	8003148 <HAL_GPIO_Init+0x88>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320a:	4c22      	ldr	r4, [pc, #136]	; (8003294 <HAL_GPIO_Init+0x1d4>)
 800320c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800320e:	f045 0501 	orr.w	r5, r5, #1
 8003212:	6625      	str	r5, [r4, #96]	; 0x60
 8003214:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8003216:	f004 0401 	and.w	r4, r4, #1
 800321a:	9401      	str	r4, [sp, #4]
 800321c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800321e:	089d      	lsrs	r5, r3, #2
 8003220:	1cae      	adds	r6, r5, #2
 8003222:	4c1a      	ldr	r4, [pc, #104]	; (800328c <HAL_GPIO_Init+0x1cc>)
 8003224:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003228:	f003 0403 	and.w	r4, r3, #3
 800322c:	00a6      	lsls	r6, r4, #2
 800322e:	240f      	movs	r4, #15
 8003230:	40b4      	lsls	r4, r6
 8003232:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003236:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800323a:	f43f af51 	beq.w	80030e0 <HAL_GPIO_Init+0x20>
 800323e:	4c16      	ldr	r4, [pc, #88]	; (8003298 <HAL_GPIO_Init+0x1d8>)
 8003240:	42a0      	cmp	r0, r4
 8003242:	d016      	beq.n	8003272 <HAL_GPIO_Init+0x1b2>
 8003244:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003248:	42a0      	cmp	r0, r4
 800324a:	d014      	beq.n	8003276 <HAL_GPIO_Init+0x1b6>
 800324c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003250:	42a0      	cmp	r0, r4
 8003252:	d012      	beq.n	800327a <HAL_GPIO_Init+0x1ba>
 8003254:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003258:	42a0      	cmp	r0, r4
 800325a:	d010      	beq.n	800327e <HAL_GPIO_Init+0x1be>
 800325c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003260:	42a0      	cmp	r0, r4
 8003262:	d00e      	beq.n	8003282 <HAL_GPIO_Init+0x1c2>
 8003264:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003268:	42a0      	cmp	r0, r4
 800326a:	f43f af37 	beq.w	80030dc <HAL_GPIO_Init+0x1c>
 800326e:	2407      	movs	r4, #7
 8003270:	e737      	b.n	80030e2 <HAL_GPIO_Init+0x22>
 8003272:	2401      	movs	r4, #1
 8003274:	e735      	b.n	80030e2 <HAL_GPIO_Init+0x22>
 8003276:	2402      	movs	r4, #2
 8003278:	e733      	b.n	80030e2 <HAL_GPIO_Init+0x22>
 800327a:	2403      	movs	r4, #3
 800327c:	e731      	b.n	80030e2 <HAL_GPIO_Init+0x22>
 800327e:	2404      	movs	r4, #4
 8003280:	e72f      	b.n	80030e2 <HAL_GPIO_Init+0x22>
 8003282:	2405      	movs	r4, #5
 8003284:	e72d      	b.n	80030e2 <HAL_GPIO_Init+0x22>
  }
}
 8003286:	b003      	add	sp, #12
 8003288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000
 8003290:	40010400 	.word	0x40010400
 8003294:	40021000 	.word	0x40021000
 8003298:	48000400 	.word	0x48000400

0800329c <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 800329c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800329e:	fa31 f203 	lsrs.w	r2, r1, r3
 80032a2:	f000 808b 	beq.w	80033bc <HAL_GPIO_DeInit+0x120>
{
 80032a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a8:	e032      	b.n	8003310 <HAL_GPIO_DeInit+0x74>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032aa:	2506      	movs	r5, #6
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_DeInit+0x14>
 80032ae:	2500      	movs	r5, #0
 80032b0:	fa05 fc0c 	lsl.w	ip, r5, ip
 80032b4:	45a4      	cmp	ip, r4
 80032b6:	d065      	beq.n	8003384 <HAL_GPIO_DeInit+0xe8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80032b8:	6804      	ldr	r4, [r0, #0]
 80032ba:	005d      	lsls	r5, r3, #1
 80032bc:	f04f 0c03 	mov.w	ip, #3
 80032c0:	fa0c fc05 	lsl.w	ip, ip, r5
 80032c4:	ea44 040c 	orr.w	r4, r4, ip
 80032c8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80032ca:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80032ce:	f10e 0e08 	add.w	lr, lr, #8
 80032d2:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80032d6:	f003 0507 	and.w	r5, r3, #7
 80032da:	00ae      	lsls	r6, r5, #2
 80032dc:	250f      	movs	r5, #15
 80032de:	40b5      	lsls	r5, r6
 80032e0:	ea24 0405 	bic.w	r4, r4, r5
 80032e4:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032e8:	6884      	ldr	r4, [r0, #8]
 80032ea:	ea24 040c 	bic.w	r4, r4, ip
 80032ee:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80032f0:	6844      	ldr	r4, [r0, #4]
 80032f2:	ea24 0402 	bic.w	r4, r4, r2
 80032f6:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032f8:	68c4      	ldr	r4, [r0, #12]
 80032fa:	ea24 040c 	bic.w	r4, r4, ip
 80032fe:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003300:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003302:	ea24 0202 	bic.w	r2, r4, r2
 8003306:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003308:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800330a:	fa31 f203 	lsrs.w	r2, r1, r3
 800330e:	d054      	beq.n	80033ba <HAL_GPIO_DeInit+0x11e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003310:	2201      	movs	r2, #1
 8003312:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003314:	ea12 0701 	ands.w	r7, r2, r1
 8003318:	d0f6      	beq.n	8003308 <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800331a:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800331e:	f10e 0502 	add.w	r5, lr, #2
 8003322:	4c27      	ldr	r4, [pc, #156]	; (80033c0 <HAL_GPIO_DeInit+0x124>)
 8003324:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003328:	f003 0c03 	and.w	ip, r3, #3
 800332c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003330:	250f      	movs	r5, #15
 8003332:	fa05 f60c 	lsl.w	r6, r5, ip
 8003336:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003338:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800333c:	d0b7      	beq.n	80032ae <HAL_GPIO_DeInit+0x12>
 800333e:	4d21      	ldr	r5, [pc, #132]	; (80033c4 <HAL_GPIO_DeInit+0x128>)
 8003340:	42a8      	cmp	r0, r5
 8003342:	d015      	beq.n	8003370 <HAL_GPIO_DeInit+0xd4>
 8003344:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003348:	42a8      	cmp	r0, r5
 800334a:	d013      	beq.n	8003374 <HAL_GPIO_DeInit+0xd8>
 800334c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003350:	42a8      	cmp	r0, r5
 8003352:	d011      	beq.n	8003378 <HAL_GPIO_DeInit+0xdc>
 8003354:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003358:	42a8      	cmp	r0, r5
 800335a:	d00f      	beq.n	800337c <HAL_GPIO_DeInit+0xe0>
 800335c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003360:	42a8      	cmp	r0, r5
 8003362:	d00d      	beq.n	8003380 <HAL_GPIO_DeInit+0xe4>
 8003364:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003368:	42a8      	cmp	r0, r5
 800336a:	d09e      	beq.n	80032aa <HAL_GPIO_DeInit+0xe>
 800336c:	2507      	movs	r5, #7
 800336e:	e79f      	b.n	80032b0 <HAL_GPIO_DeInit+0x14>
 8003370:	2501      	movs	r5, #1
 8003372:	e79d      	b.n	80032b0 <HAL_GPIO_DeInit+0x14>
 8003374:	2502      	movs	r5, #2
 8003376:	e79b      	b.n	80032b0 <HAL_GPIO_DeInit+0x14>
 8003378:	2503      	movs	r5, #3
 800337a:	e799      	b.n	80032b0 <HAL_GPIO_DeInit+0x14>
 800337c:	2504      	movs	r5, #4
 800337e:	e797      	b.n	80032b0 <HAL_GPIO_DeInit+0x14>
 8003380:	2505      	movs	r5, #5
 8003382:	e795      	b.n	80032b0 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 8003384:	4c10      	ldr	r4, [pc, #64]	; (80033c8 <HAL_GPIO_DeInit+0x12c>)
 8003386:	6825      	ldr	r5, [r4, #0]
 8003388:	ea25 0507 	bic.w	r5, r5, r7
 800338c:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800338e:	6865      	ldr	r5, [r4, #4]
 8003390:	ea25 0507 	bic.w	r5, r5, r7
 8003394:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003396:	68a5      	ldr	r5, [r4, #8]
 8003398:	ea25 0507 	bic.w	r5, r5, r7
 800339c:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800339e:	68e5      	ldr	r5, [r4, #12]
 80033a0:	ea25 0707 	bic.w	r7, r5, r7
 80033a4:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80033a6:	4f06      	ldr	r7, [pc, #24]	; (80033c0 <HAL_GPIO_DeInit+0x124>)
 80033a8:	f10e 0402 	add.w	r4, lr, #2
 80033ac:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80033b0:	ea25 0506 	bic.w	r5, r5, r6
 80033b4:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80033b8:	e77e      	b.n	80032b8 <HAL_GPIO_DeInit+0x1c>
  }
}
 80033ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	48000400 	.word	0x48000400
 80033c8:	40010400 	.word	0x40010400

080033cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80033cc:	6903      	ldr	r3, [r0, #16]
 80033ce:	4219      	tst	r1, r3
 80033d0:	d001      	beq.n	80033d6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80033d2:	2001      	movs	r0, #1
 80033d4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033d6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80033d8:	4770      	bx	lr

080033da <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033da:	b10a      	cbz	r2, 80033e0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033dc:	6181      	str	r1, [r0, #24]
 80033de:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033e0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80033e2:	4770      	bx	lr

080033e4 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80033e8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	4203      	tst	r3, r0
 80033f0:	d100      	bne.n	80033f4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80033f2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f4:	4b02      	ldr	r3, [pc, #8]	; (8003400 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80033f6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033f8:	f7ff fff4 	bl	80033e4 <HAL_GPIO_EXTI_Callback>
}
 80033fc:	e7f9      	b.n	80033f2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80033fe:	bf00      	nop
 8003400:	40010400 	.word	0x40010400

08003404 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003404:	6803      	ldr	r3, [r0, #0]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	f012 0f02 	tst.w	r2, #2
 800340c:	d001      	beq.n	8003412 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800340e:	2200      	movs	r2, #0
 8003410:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003412:	6803      	ldr	r3, [r0, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	f012 0f01 	tst.w	r2, #1
 800341a:	d103      	bne.n	8003424 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	619a      	str	r2, [r3, #24]
  }
}
 8003424:	4770      	bx	lr

08003426 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003426:	b430      	push	{r4, r5}
 8003428:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800342a:	6804      	ldr	r4, [r0, #0]
 800342c:	6860      	ldr	r0, [r4, #4]
 800342e:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 8003432:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 8003436:	f04c 7c7f 	orr.w	ip, ip, #66846720	; 0x3fc0000
 800343a:	f44c 3c58 	orr.w	ip, ip, #221184	; 0x36000
 800343e:	f44c 7c7f 	orr.w	ip, ip, #1020	; 0x3fc
 8003442:	f04c 0c03 	orr.w	ip, ip, #3
 8003446:	ea20 000c 	bic.w	r0, r0, ip
 800344a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800344e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003452:	4319      	orrs	r1, r3
 8003454:	4329      	orrs	r1, r5
 8003456:	4301      	orrs	r1, r0
 8003458:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800345a:	bc30      	pop	{r4, r5}
 800345c:	4770      	bx	lr

0800345e <I2C_IsAcknowledgeFailed>:
{
 800345e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003460:	4605      	mov	r5, r0
 8003462:	460e      	mov	r6, r1
 8003464:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003466:	6803      	ldr	r3, [r0, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f013 0f10 	tst.w	r3, #16
 800346e:	d101      	bne.n	8003474 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8003470:	2000      	movs	r0, #0
}
 8003472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	699c      	ldr	r4, [r3, #24]
 8003478:	f014 0f20 	tst.w	r4, #32
 800347c:	d117      	bne.n	80034ae <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 800347e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003482:	d0f7      	beq.n	8003474 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003484:	f7ff fd96 	bl	8002fb4 <HAL_GetTick>
 8003488:	1bc0      	subs	r0, r0, r7
 800348a:	42b0      	cmp	r0, r6
 800348c:	d801      	bhi.n	8003492 <I2C_IsAcknowledgeFailed+0x34>
 800348e:	2e00      	cmp	r6, #0
 8003490:	d1f0      	bne.n	8003474 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003492:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003494:	f043 0320 	orr.w	r3, r3, #32
 8003498:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800349a:	2320      	movs	r3, #32
 800349c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80034a6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 80034aa:	2001      	movs	r0, #1
 80034ac:	e7e1      	b.n	8003472 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ae:	2210      	movs	r2, #16
 80034b0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	2420      	movs	r4, #32
 80034b6:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80034b8:	4628      	mov	r0, r5
 80034ba:	f7ff ffa3 	bl	8003404 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80034be:	682a      	ldr	r2, [r5, #0]
 80034c0:	6853      	ldr	r3, [r2, #4]
 80034c2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80034c6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80034ca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80034d6:	f043 0304 	orr.w	r3, r3, #4
 80034da:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80034e6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 80034ea:	2001      	movs	r0, #1
 80034ec:	e7c1      	b.n	8003472 <I2C_IsAcknowledgeFailed+0x14>

080034ee <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80034ee:	b570      	push	{r4, r5, r6, lr}
 80034f0:	4604      	mov	r4, r0
 80034f2:	460d      	mov	r5, r1
 80034f4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f013 0f02 	tst.w	r3, #2
 80034fe:	d11d      	bne.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003500:	4632      	mov	r2, r6
 8003502:	4629      	mov	r1, r5
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff ffaa 	bl	800345e <I2C_IsAcknowledgeFailed>
 800350a:	b9c8      	cbnz	r0, 8003540 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800350c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003510:	d0f1      	beq.n	80034f6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7ff fd4f 	bl	8002fb4 <HAL_GetTick>
 8003516:	1b80      	subs	r0, r0, r6
 8003518:	42a8      	cmp	r0, r5
 800351a:	d801      	bhi.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800351c:	2d00      	cmp	r5, #0
 800351e:	d1ea      	bne.n	80034f6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003520:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003522:	f043 0320 	orr.w	r3, r3, #32
 8003526:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003528:	2320      	movs	r3, #32
 800352a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800352e:	2300      	movs	r3, #0
 8003530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003534:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003538:	2001      	movs	r0, #1
 800353a:	e000      	b.n	800353e <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800353c:	2000      	movs	r0, #0
}
 800353e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003540:	2001      	movs	r0, #1
 8003542:	e7fc      	b.n	800353e <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003544 <I2C_WaitOnFlagUntilTimeout>:
{
 8003544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003548:	4606      	mov	r6, r0
 800354a:	4688      	mov	r8, r1
 800354c:	4617      	mov	r7, r2
 800354e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003550:	6834      	ldr	r4, [r6, #0]
 8003552:	69a4      	ldr	r4, [r4, #24]
 8003554:	ea38 0304 	bics.w	r3, r8, r4
 8003558:	bf0c      	ite	eq
 800355a:	f04f 0c01 	moveq.w	ip, #1
 800355e:	f04f 0c00 	movne.w	ip, #0
 8003562:	45bc      	cmp	ip, r7
 8003564:	d118      	bne.n	8003598 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8003566:	f1b5 3fff 	cmp.w	r5, #4294967295
 800356a:	d0f1      	beq.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356c:	f7ff fd22 	bl	8002fb4 <HAL_GetTick>
 8003570:	9b06      	ldr	r3, [sp, #24]
 8003572:	1ac0      	subs	r0, r0, r3
 8003574:	42a8      	cmp	r0, r5
 8003576:	d801      	bhi.n	800357c <I2C_WaitOnFlagUntilTimeout+0x38>
 8003578:	2d00      	cmp	r5, #0
 800357a:	d1e9      	bne.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800357c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800357e:	f043 0320 	orr.w	r3, r3, #32
 8003582:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003584:	2320      	movs	r3, #32
 8003586:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003590:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003594:	2001      	movs	r0, #1
 8003596:	e000      	b.n	800359a <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8003598:	2000      	movs	r0, #0
}
 800359a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080035a0 <I2C_RequestMemoryWrite>:
{
 80035a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	4604      	mov	r4, r0
 80035a8:	4690      	mov	r8, r2
 80035aa:	461d      	mov	r5, r3
 80035ac:	9e08      	ldr	r6, [sp, #32]
 80035ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <I2C_RequestMemoryWrite+0x78>)
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035b8:	b2ea      	uxtb	r2, r5
 80035ba:	f7ff ff34 	bl	8003426 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035be:	463a      	mov	r2, r7
 80035c0:	4631      	mov	r1, r6
 80035c2:	4620      	mov	r0, r4
 80035c4:	f7ff ff93 	bl	80034ee <I2C_WaitOnTXISFlagUntilTimeout>
 80035c8:	b9f8      	cbnz	r0, 800360a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ca:	2d01      	cmp	r5, #1
 80035cc:	d10e      	bne.n	80035ec <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	fa5f f288 	uxtb.w	r2, r8
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035d6:	9700      	str	r7, [sp, #0]
 80035d8:	4633      	mov	r3, r6
 80035da:	2200      	movs	r2, #0
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	4620      	mov	r0, r4
 80035e0:	f7ff ffb0 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80035e4:	b9a8      	cbnz	r0, 8003612 <I2C_RequestMemoryWrite+0x72>
}
 80035e6:	b002      	add	sp, #8
 80035e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f4:	463a      	mov	r2, r7
 80035f6:	4631      	mov	r1, r6
 80035f8:	4620      	mov	r0, r4
 80035fa:	f7ff ff78 	bl	80034ee <I2C_WaitOnTXISFlagUntilTimeout>
 80035fe:	b930      	cbnz	r0, 800360e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	fa5f f288 	uxtb.w	r2, r8
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
 8003608:	e7e5      	b.n	80035d6 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800360a:	2001      	movs	r0, #1
 800360c:	e7eb      	b.n	80035e6 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800360e:	2001      	movs	r0, #1
 8003610:	e7e9      	b.n	80035e6 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8003612:	2001      	movs	r0, #1
 8003614:	e7e7      	b.n	80035e6 <I2C_RequestMemoryWrite+0x46>
 8003616:	bf00      	nop
 8003618:	80002000 	.word	0x80002000

0800361c <I2C_RequestMemoryRead>:
{
 800361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	4604      	mov	r4, r0
 8003624:	4690      	mov	r8, r2
 8003626:	461d      	mov	r5, r3
 8003628:	9e08      	ldr	r6, [sp, #32]
 800362a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <I2C_RequestMemoryRead+0x74>)
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	2300      	movs	r3, #0
 8003632:	b2ea      	uxtb	r2, r5
 8003634:	f7ff fef7 	bl	8003426 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003638:	463a      	mov	r2, r7
 800363a:	4631      	mov	r1, r6
 800363c:	4620      	mov	r0, r4
 800363e:	f7ff ff56 	bl	80034ee <I2C_WaitOnTXISFlagUntilTimeout>
 8003642:	b9f8      	cbnz	r0, 8003684 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003644:	2d01      	cmp	r5, #1
 8003646:	d10e      	bne.n	8003666 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	fa5f f288 	uxtb.w	r2, r8
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003650:	9700      	str	r7, [sp, #0]
 8003652:	4633      	mov	r3, r6
 8003654:	2200      	movs	r2, #0
 8003656:	2140      	movs	r1, #64	; 0x40
 8003658:	4620      	mov	r0, r4
 800365a:	f7ff ff73 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 800365e:	b9a8      	cbnz	r0, 800368c <I2C_RequestMemoryRead+0x70>
}
 8003660:	b002      	add	sp, #8
 8003662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366e:	463a      	mov	r2, r7
 8003670:	4631      	mov	r1, r6
 8003672:	4620      	mov	r0, r4
 8003674:	f7ff ff3b 	bl	80034ee <I2C_WaitOnTXISFlagUntilTimeout>
 8003678:	b930      	cbnz	r0, 8003688 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	fa5f f288 	uxtb.w	r2, r8
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
 8003682:	e7e5      	b.n	8003650 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8003684:	2001      	movs	r0, #1
 8003686:	e7eb      	b.n	8003660 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8003688:	2001      	movs	r0, #1
 800368a:	e7e9      	b.n	8003660 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800368c:	2001      	movs	r0, #1
 800368e:	e7e7      	b.n	8003660 <I2C_RequestMemoryRead+0x44>
 8003690:	80002000 	.word	0x80002000

08003694 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003694:	b570      	push	{r4, r5, r6, lr}
 8003696:	4605      	mov	r5, r0
 8003698:	460c      	mov	r4, r1
 800369a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f013 0f20 	tst.w	r3, #32
 80036a4:	d11a      	bne.n	80036dc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a6:	4632      	mov	r2, r6
 80036a8:	4621      	mov	r1, r4
 80036aa:	4628      	mov	r0, r5
 80036ac:	f7ff fed7 	bl	800345e <I2C_IsAcknowledgeFailed>
 80036b0:	b9b0      	cbnz	r0, 80036e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7ff fc7f 	bl	8002fb4 <HAL_GetTick>
 80036b6:	1b80      	subs	r0, r0, r6
 80036b8:	42a0      	cmp	r0, r4
 80036ba:	d801      	bhi.n	80036c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80036bc:	2c00      	cmp	r4, #0
 80036be:	d1ed      	bne.n	800369c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80036c2:	f043 0320 	orr.w	r3, r3, #32
 80036c6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	2320      	movs	r3, #32
 80036ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80036d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80036d8:	2001      	movs	r0, #1
}
 80036da:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80036dc:	2000      	movs	r0, #0
 80036de:	e7fc      	b.n	80036da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80036e0:	2001      	movs	r0, #1
 80036e2:	e7fa      	b.n	80036da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080036e4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d059      	beq.n	800379c <HAL_I2C_Init+0xb8>
{
 80036e8:	b510      	push	{r4, lr}
 80036ea:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d043      	beq.n	800377c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f4:	2324      	movs	r3, #36	; 0x24
 80036f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80036fa:	6822      	ldr	r2, [r4, #0]
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800370c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	6893      	ldr	r3, [r2, #8]
 8003712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003716:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003718:	68e3      	ldr	r3, [r4, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d033      	beq.n	8003786 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800371e:	68a3      	ldr	r3, [r4, #8]
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003726:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003728:	68e3      	ldr	r3, [r4, #12]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d031      	beq.n	8003792 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800372e:	6822      	ldr	r2, [r4, #0]
 8003730:	6853      	ldr	r3, [r2, #4]
 8003732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800373c:	6822      	ldr	r2, [r4, #0]
 800373e:	68d3      	ldr	r3, [r2, #12]
 8003740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003744:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	6962      	ldr	r2, [r4, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	69a1      	ldr	r1, [r4, #24]
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003754:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003756:	69e3      	ldr	r3, [r4, #28]
 8003758:	6a21      	ldr	r1, [r4, #32]
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003760:	6822      	ldr	r2, [r4, #0]
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376a:	2000      	movs	r0, #0
 800376c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800376e:	2320      	movs	r3, #32
 8003770:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003774:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003776:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800377a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800377c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003780:	f7fe fc32 	bl	8001fe8 <HAL_I2C_MspInit>
 8003784:	e7b6      	b.n	80036f4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003786:	68a3      	ldr	r3, [r4, #8]
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378e:	6093      	str	r3, [r2, #8]
 8003790:	e7ca      	b.n	8003728 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	e7c8      	b.n	800372e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800379c:	2001      	movs	r0, #1
}
 800379e:	4770      	bx	lr

080037a0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80037a0:	b1a8      	cbz	r0, 80037ce <HAL_I2C_DeInit+0x2e>
{
 80037a2:	b510      	push	{r4, lr}
 80037a4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a6:	2324      	movs	r3, #36	; 0x24
 80037a8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80037ac:	6802      	ldr	r2, [r0, #0]
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80037b6:	f7fe fc4f 	bl	8002058 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ba:	2000      	movs	r0, #0
 80037bc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80037be:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80037c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80037cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037ce:	2001      	movs	r0, #1
}
 80037d0:	4770      	bx	lr

080037d2 <HAL_I2C_Mem_Write>:
{
 80037d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d6:	b083      	sub	sp, #12
 80037d8:	460e      	mov	r6, r1
 80037da:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80037de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e0:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80037e4:	b2c9      	uxtb	r1, r1
 80037e6:	2920      	cmp	r1, #32
 80037e8:	f040 80bb 	bne.w	8003962 <HAL_I2C_Mem_Write+0x190>
 80037ec:	4604      	mov	r4, r0
 80037ee:	4690      	mov	r8, r2
 80037f0:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80037f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037f4:	b1cb      	cbz	r3, 800382a <HAL_I2C_Mem_Write+0x58>
 80037f6:	f1ba 0f00 	cmp.w	sl, #0
 80037fa:	d016      	beq.n	800382a <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 80037fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003800:	2b01      	cmp	r3, #1
 8003802:	f000 80b2 	beq.w	800396a <HAL_I2C_Mem_Write+0x198>
 8003806:	f04f 0b01 	mov.w	fp, #1
 800380a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800380e:	f7ff fbd1 	bl	8002fb4 <HAL_GetTick>
 8003812:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003814:	9000      	str	r0, [sp, #0]
 8003816:	2319      	movs	r3, #25
 8003818:	465a      	mov	r2, fp
 800381a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800381e:	4620      	mov	r0, r4
 8003820:	f7ff fe90 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003824:	b130      	cbz	r0, 8003834 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8003826:	2001      	movs	r0, #1
 8003828:	e09c      	b.n	8003964 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800382a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800382e:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8003830:	2001      	movs	r0, #1
 8003832:	e097      	b.n	8003964 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003834:	2321      	movs	r3, #33	; 0x21
 8003836:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003840:	2300      	movs	r3, #0
 8003842:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003846:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003848:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800384c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800384e:	9701      	str	r7, [sp, #4]
 8003850:	9500      	str	r5, [sp, #0]
 8003852:	464b      	mov	r3, r9
 8003854:	4642      	mov	r2, r8
 8003856:	4631      	mov	r1, r6
 8003858:	4620      	mov	r0, r4
 800385a:	f7ff fea1 	bl	80035a0 <I2C_RequestMemoryWrite>
 800385e:	b970      	cbnz	r0, 800387e <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003860:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	2bff      	cmp	r3, #255	; 0xff
 8003866:	d90f      	bls.n	8003888 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800386c:	2300      	movs	r3, #0
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003874:	4631      	mov	r1, r6
 8003876:	4620      	mov	r0, r4
 8003878:	f7ff fdd5 	bl	8003426 <I2C_TransferConfig>
 800387c:	e021      	b.n	80038c2 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 800387e:	2300      	movs	r3, #0
 8003880:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003884:	4658      	mov	r0, fp
 8003886:	e06d      	b.n	8003964 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8003888:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800388a:	b292      	uxth	r2, r2
 800388c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800388e:	2300      	movs	r3, #0
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	4631      	mov	r1, r6
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff fdc3 	bl	8003426 <I2C_TransferConfig>
 80038a0:	e00f      	b.n	80038c2 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80038a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038a4:	b292      	uxth	r2, r2
 80038a6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038a8:	2300      	movs	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	4631      	mov	r1, r6
 80038b4:	4620      	mov	r0, r4
 80038b6:	f7ff fdb6 	bl	8003426 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80038ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d033      	beq.n	800392a <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c2:	463a      	mov	r2, r7
 80038c4:	4629      	mov	r1, r5
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7ff fe11 	bl	80034ee <I2C_WaitOnTXISFlagUntilTimeout>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d14e      	bne.n	800396e <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80038d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038da:	3301      	adds	r3, #1
 80038dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80038de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80038e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038f2:	b292      	uxth	r2, r2
 80038f4:	2a00      	cmp	r2, #0
 80038f6:	d0e0      	beq.n	80038ba <HAL_I2C_Mem_Write+0xe8>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1de      	bne.n	80038ba <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038fc:	9700      	str	r7, [sp, #0]
 80038fe:	462b      	mov	r3, r5
 8003900:	2200      	movs	r2, #0
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	4620      	mov	r0, r4
 8003906:	f7ff fe1d 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 800390a:	bb90      	cbnz	r0, 8003972 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800390c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	2bff      	cmp	r3, #255	; 0xff
 8003912:	d9c6      	bls.n	80038a2 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003914:	22ff      	movs	r2, #255	; 0xff
 8003916:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003918:	2300      	movs	r3, #0
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003920:	4631      	mov	r1, r6
 8003922:	4620      	mov	r0, r4
 8003924:	f7ff fd7f 	bl	8003426 <I2C_TransferConfig>
 8003928:	e7c7      	b.n	80038ba <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392a:	463a      	mov	r2, r7
 800392c:	4629      	mov	r1, r5
 800392e:	4620      	mov	r0, r4
 8003930:	f7ff feb0 	bl	8003694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003934:	b9f8      	cbnz	r0, 8003976 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	2220      	movs	r2, #32
 800393a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800393c:	6821      	ldr	r1, [r4, #0]
 800393e:	684b      	ldr	r3, [r1, #4]
 8003940:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003944:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003948:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003952:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003956:	2300      	movs	r3, #0
 8003958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800395c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003960:	e000      	b.n	8003964 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8003962:	2002      	movs	r0, #2
}
 8003964:	b003      	add	sp, #12
 8003966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800396a:	2002      	movs	r0, #2
 800396c:	e7fa      	b.n	8003964 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 800396e:	2001      	movs	r0, #1
 8003970:	e7f8      	b.n	8003964 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8003972:	2001      	movs	r0, #1
 8003974:	e7f6      	b.n	8003964 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8003976:	2001      	movs	r0, #1
 8003978:	e7f4      	b.n	8003964 <HAL_I2C_Mem_Write+0x192>
	...

0800397c <HAL_I2C_Mem_Read>:
{
 800397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003980:	b083      	sub	sp, #12
 8003982:	460e      	mov	r6, r1
 8003984:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003988:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800398a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800398e:	b2c9      	uxtb	r1, r1
 8003990:	2920      	cmp	r1, #32
 8003992:	f040 80bc 	bne.w	8003b0e <HAL_I2C_Mem_Read+0x192>
 8003996:	4604      	mov	r4, r0
 8003998:	4690      	mov	r8, r2
 800399a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800399c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800399e:	b1cb      	cbz	r3, 80039d4 <HAL_I2C_Mem_Read+0x58>
 80039a0:	f1ba 0f00 	cmp.w	sl, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80039a6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	f000 80b3 	beq.w	8003b16 <HAL_I2C_Mem_Read+0x19a>
 80039b0:	f04f 0b01 	mov.w	fp, #1
 80039b4:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80039b8:	f7ff fafc 	bl	8002fb4 <HAL_GetTick>
 80039bc:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039be:	9000      	str	r0, [sp, #0]
 80039c0:	2319      	movs	r3, #25
 80039c2:	465a      	mov	r2, fp
 80039c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7ff fdbb 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80039ce:	b130      	cbz	r0, 80039de <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80039d0:	2001      	movs	r0, #1
 80039d2:	e09d      	b.n	8003b10 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039d8:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80039da:	2001      	movs	r0, #1
 80039dc:	e098      	b.n	8003b10 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039de:	2322      	movs	r3, #34	; 0x22
 80039e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039e4:	2340      	movs	r3, #64	; 0x40
 80039e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80039ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80039f0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80039f2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039f6:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039f8:	9701      	str	r7, [sp, #4]
 80039fa:	9500      	str	r5, [sp, #0]
 80039fc:	464b      	mov	r3, r9
 80039fe:	4642      	mov	r2, r8
 8003a00:	4631      	mov	r1, r6
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff fe0a 	bl	800361c <I2C_RequestMemoryRead>
 8003a08:	b970      	cbnz	r0, 8003a28 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2bff      	cmp	r3, #255	; 0xff
 8003a10:	d90f      	bls.n	8003a32 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a12:	22ff      	movs	r2, #255	; 0xff
 8003a14:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a16:	4b44      	ldr	r3, [pc, #272]	; (8003b28 <HAL_I2C_Mem_Read+0x1ac>)
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a1e:	4631      	mov	r1, r6
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7ff fd00 	bl	8003426 <I2C_TransferConfig>
 8003a26:	e021      	b.n	8003a6c <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003a2e:	4658      	mov	r0, fp
 8003a30:	e06e      	b.n	8003b10 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8003a32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a34:	b292      	uxth	r2, r2
 8003a36:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_I2C_Mem_Read+0x1ac>)
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	4631      	mov	r1, r6
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7ff fcee 	bl	8003426 <I2C_TransferConfig>
 8003a4a:	e00f      	b.n	8003a6c <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8003a4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a4e:	b292      	uxth	r2, r2
 8003a50:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a52:	2300      	movs	r3, #0
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	4631      	mov	r1, r6
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f7ff fce1 	bl	8003426 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003a64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d034      	beq.n	8003ad6 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a6c:	9700      	str	r7, [sp, #0]
 8003a6e:	462b      	mov	r3, r5
 8003a70:	2200      	movs	r2, #0
 8003a72:	2104      	movs	r1, #4
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7ff fd65 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d14d      	bne.n	8003b1a <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a84:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a88:	3301      	adds	r3, #1
 8003a8a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003a8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	b292      	uxth	r2, r2
 8003a92:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003a94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0de      	beq.n	8003a64 <HAL_I2C_Mem_Read+0xe8>
 8003aa6:	2a00      	cmp	r2, #0
 8003aa8:	d1dc      	bne.n	8003a64 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003aaa:	9700      	str	r7, [sp, #0]
 8003aac:	462b      	mov	r3, r5
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f7ff fd47 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	bb90      	cbnz	r0, 8003b1e <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2bff      	cmp	r3, #255	; 0xff
 8003abe:	d9c5      	bls.n	8003a4c <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003acc:	4631      	mov	r1, r6
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7ff fca9 	bl	8003426 <I2C_TransferConfig>
 8003ad4:	e7c6      	b.n	8003a64 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad6:	463a      	mov	r2, r7
 8003ad8:	4629      	mov	r1, r5
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7ff fdda 	bl	8003694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ae0:	b9f8      	cbnz	r0, 8003b22 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003ae8:	6821      	ldr	r1, [r4, #0]
 8003aea:	684b      	ldr	r3, [r1, #4]
 8003aec:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003af0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003af4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003b08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003b0c:	e000      	b.n	8003b10 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8003b0e:	2002      	movs	r0, #2
}
 8003b10:	b003      	add	sp, #12
 8003b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003b16:	2002      	movs	r0, #2
 8003b18:	e7fa      	b.n	8003b10 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	e7f8      	b.n	8003b10 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8003b1e:	2001      	movs	r0, #1
 8003b20:	e7f6      	b.n	8003b10 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8003b22:	2001      	movs	r0, #1
 8003b24:	e7f4      	b.n	8003b10 <HAL_I2C_Mem_Read+0x194>
 8003b26:	bf00      	nop
 8003b28:	80002400 	.word	0x80002400

08003b2c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d124      	bne.n	8003b80 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b36:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d022      	beq.n	8003b84 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b44:	2324      	movs	r3, #36	; 0x24
 8003b46:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b4a:	6802      	ldr	r2, [r0, #0]
 8003b4c:	6813      	ldr	r3, [r2, #0]
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b54:	6802      	ldr	r2, [r0, #0]
 8003b56:	6813      	ldr	r3, [r2, #0]
 8003b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b5c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b5e:	6802      	ldr	r2, [r0, #0]
 8003b60:	6813      	ldr	r3, [r2, #0]
 8003b62:	4319      	orrs	r1, r3
 8003b64:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b66:	6802      	ldr	r2, [r0, #0]
 8003b68:	6813      	ldr	r3, [r2, #0]
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b70:	2320      	movs	r3, #32
 8003b72:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b76:	2300      	movs	r3, #0
 8003b78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2002      	movs	r0, #2
 8003b82:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003b84:	2002      	movs	r0, #2
  }
}
 8003b86:	4770      	bx	lr

08003b88 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d122      	bne.n	8003bd8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b92:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d020      	beq.n	8003bdc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba0:	2324      	movs	r3, #36	; 0x24
 8003ba2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba6:	6802      	ldr	r2, [r0, #0]
 8003ba8:	6813      	ldr	r3, [r2, #0]
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bb0:	6802      	ldr	r2, [r0, #0]
 8003bb2:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bb8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bbc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bbe:	6802      	ldr	r2, [r0, #0]
 8003bc0:	6813      	ldr	r3, [r2, #0]
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2002      	movs	r0, #2
 8003bda:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003bdc:	2002      	movs	r0, #2
  }
}
 8003bde:	4770      	bx	lr

08003be0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003be0:	4b02      	ldr	r3, [pc, #8]	; (8003bec <HAL_PWREx_GetVoltageRange+0xc>)
 8003be2:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003be4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40007000 	.word	0x40007000

08003bf0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003bf4:	d00f      	beq.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c02:	d034      	beq.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c04:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c10:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c12:	2000      	movs	r0, #0
 8003c14:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c16:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c22:	d020      	beq.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c24:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c30:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2232      	movs	r2, #50	; 0x32
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	4a0f      	ldr	r2, [pc, #60]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	0c9b      	lsrs	r3, r3, #18
 8003c44:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c46:	e000      	b.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8003c48:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003c4c:	6952      	ldr	r2, [r2, #20]
 8003c4e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003c52:	d001      	beq.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x68>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f7      	bne.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003c60:	d103      	bne.n	8003c6a <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8003c62:	2000      	movs	r0, #0
 8003c64:	4770      	bx	lr
 8003c66:	2000      	movs	r0, #0
 8003c68:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003c6a:	2003      	movs	r0, #3
 8003c6c:	4770      	bx	lr
  return HAL_OK;
 8003c6e:	2000      	movs	r0, #0
}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40007000 	.word	0x40007000
 8003c78:	200003f8 	.word	0x200003f8
 8003c7c:	431bde83 	.word	0x431bde83

08003c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c80:	b530      	push	{r4, r5, lr}
 8003c82:	b083      	sub	sp, #12
 8003c84:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003c8e:	d00b      	beq.n	8003ca8 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c90:	f7ff ffa6 	bl	8003be0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c94:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003c98:	d017      	beq.n	8003cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c9a:	2c80      	cmp	r4, #128	; 0x80
 8003c9c:	d81f      	bhi.n	8003cde <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c9e:	d02d      	beq.n	8003cfc <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ca0:	2c70      	cmp	r4, #112	; 0x70
 8003ca2:	d02d      	beq.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	e01b      	b.n	8003ce0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ca8:	4d17      	ldr	r5, [pc, #92]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003caa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	65ab      	str	r3, [r5, #88]	; 0x58
 8003cb2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003cbc:	f7ff ff90 	bl	8003be0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cc0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	65ab      	str	r3, [r5, #88]	; 0x58
 8003cc8:	e7e4      	b.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8003cca:	2c80      	cmp	r4, #128	; 0x80
 8003ccc:	d903      	bls.n	8003cd6 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8003cce:	2ca0      	cmp	r4, #160	; 0xa0
 8003cd0:	d903      	bls.n	8003cda <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	e004      	b.n	8003ce0 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	e002      	b.n	8003ce0 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cda:	2101      	movs	r1, #1
 8003cdc:	e000      	b.n	8003ce0 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cde:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ce0:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8003ce2:	6813      	ldr	r3, [r2, #0]
 8003ce4:	f023 0307 	bic.w	r3, r3, #7
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	428b      	cmp	r3, r1
 8003cf4:	d106      	bne.n	8003d04 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003cf6:	2000      	movs	r0, #0
}
 8003cf8:	b003      	add	sp, #12
 8003cfa:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	e7ef      	b.n	8003ce0 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d00:	2101      	movs	r1, #1
 8003d02:	e7ed      	b.n	8003ce0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
 8003d06:	e7f7      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40022000 	.word	0x40022000

08003d10 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d10:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d12:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d14:	68d2      	ldr	r2, [r2, #12]
 8003d16:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d1a:	f013 030c 	ands.w	r3, r3, #12
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x26>
 8003d20:	2b0c      	cmp	r3, #12
 8003d22:	d006      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d01f      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d020      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	4602      	mov	r2, r0
 8003d30:	e010      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d32:	2a01      	cmp	r2, #1
 8003d34:	d1f6      	bne.n	8003d24 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d36:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	f012 0f08 	tst.w	r2, #8
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d42:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003d46:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8003d4a:	491b      	ldr	r1, [pc, #108]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003d4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d50:	b143      	cbz	r3, 8003d64 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d52:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d54:	2b0c      	cmp	r3, #12
 8003d56:	d00d      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x64>
}
 8003d58:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d5a:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003d62:	e7f2      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8003d64:	4610      	mov	r0, r2
 8003d66:	e7f5      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8003d68:	4814      	ldr	r0, [pc, #80]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	e7f2      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8003d6e:	4814      	ldr	r0, [pc, #80]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d70:	2200      	movs	r2, #0
 8003d72:	e7ef      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d016      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x9e>
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d100      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8003d84:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d86:	490b      	ldr	r1, [pc, #44]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d88:	68c8      	ldr	r0, [r1, #12]
 8003d8a:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8003d8e:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d90:	68c8      	ldr	r0, [r1, #12]
 8003d92:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003d96:	fb02 f000 	mul.w	r0, r2, r0
 8003d9a:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d9e:	68cb      	ldr	r3, [r1, #12]
 8003da0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003da4:	3301      	adds	r3, #1
 8003da6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8003da8:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003dac:	e7d4      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8003dae:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xac>)
 8003db0:	e7e9      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x76>
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	08006e08 	.word	0x08006e08
 8003dbc:	00f42400 	.word	0x00f42400
 8003dc0:	007a1200 	.word	0x007a1200

08003dc4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	f000 82fc 	beq.w	80043c2 <HAL_RCC_OscConfig+0x5fe>
{
 8003dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd0:	4b96      	ldr	r3, [pc, #600]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003dd2:	689d      	ldr	r5, [r3, #8]
 8003dd4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd8:	68de      	ldr	r6, [r3, #12]
 8003dda:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dde:	6803      	ldr	r3, [r0, #0]
 8003de0:	f013 0f10 	tst.w	r3, #16
 8003de4:	d05a      	beq.n	8003e9c <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003de6:	b1e5      	cbz	r5, 8003e22 <HAL_RCC_OscConfig+0x5e>
 8003de8:	2d0c      	cmp	r5, #12
 8003dea:	d018      	beq.n	8003e1e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dec:	69a3      	ldr	r3, [r4, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80bb 	beq.w	8003f6a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8003df4:	4a8d      	ldr	r2, [pc, #564]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003dfe:	f7ff f8d9 	bl	8002fb4 <HAL_GetTick>
 8003e02:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e04:	4b89      	ldr	r3, [pc, #548]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f013 0f02 	tst.w	r3, #2
 8003e0c:	f040 809a 	bne.w	8003f44 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e10:	f7ff f8d0 	bl	8002fb4 <HAL_GetTick>
 8003e14:	1bc0      	subs	r0, r0, r7
 8003e16:	2802      	cmp	r0, #2
 8003e18:	d9f4      	bls.n	8003e04 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	e2dc      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e1e:	2e01      	cmp	r6, #1
 8003e20:	d1e4      	bne.n	8003dec <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e22:	4b82      	ldr	r3, [pc, #520]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f013 0f02 	tst.w	r3, #2
 8003e2a:	d003      	beq.n	8003e34 <HAL_RCC_OscConfig+0x70>
 8003e2c:	69a3      	ldr	r3, [r4, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 82c9 	beq.w	80043c6 <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e34:	6a20      	ldr	r0, [r4, #32]
 8003e36:	4b7d      	ldr	r3, [pc, #500]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f013 0f08 	tst.w	r3, #8
 8003e3e:	d05b      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x134>
 8003e40:	4b7a      	ldr	r3, [pc, #488]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e48:	4298      	cmp	r0, r3
 8003e4a:	d85c      	bhi.n	8003f06 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e4c:	4b77      	ldr	r3, [pc, #476]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	f042 0208 	orr.w	r2, r2, #8
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003e5c:	6a21      	ldr	r1, [r4, #32]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003e68:	69e1      	ldr	r1, [r4, #28]
 8003e6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e6e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	d060      	beq.n	8003f36 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e74:	f7ff ff4c 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003e78:	4b6c      	ldr	r3, [pc, #432]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e80:	4a6b      	ldr	r2, [pc, #428]	; (8004030 <HAL_RCC_OscConfig+0x26c>)
 8003e82:	5cd3      	ldrb	r3, [r2, r3]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	40d8      	lsrs	r0, r3
 8003e8a:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003e8e:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <HAL_RCC_OscConfig+0x274>)
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	f7ff f84d 	bl	8002f30 <HAL_InitTick>
        if(status != HAL_OK)
 8003e96:	2800      	cmp	r0, #0
 8003e98:	f040 829e 	bne.w	80043d8 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	f013 0f01 	tst.w	r3, #1
 8003ea2:	f000 8081 	beq.w	8003fa8 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ea6:	2d08      	cmp	r5, #8
 8003ea8:	d075      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1d2>
 8003eaa:	2d0c      	cmp	r5, #12
 8003eac:	d071      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eae:	6863      	ldr	r3, [r4, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	f000 8097 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x222>
 8003eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ebc:	f000 8099 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x22e>
 8003ec0:	4b5a      	ldr	r3, [pc, #360]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ed0:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed2:	6863      	ldr	r3, [r4, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8099 	beq.w	800400c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8003eda:	f7ff f86b 	bl	8002fb4 <HAL_GetTick>
 8003ede:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee0:	4b52      	ldr	r3, [pc, #328]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ee8:	d15e      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eea:	f7ff f863 	bl	8002fb4 <HAL_GetTick>
 8003eee:	1bc0      	subs	r0, r0, r7
 8003ef0:	2864      	cmp	r0, #100	; 0x64
 8003ef2:	d9f5      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8003ef4:	2003      	movs	r0, #3
 8003ef6:	e26f      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ef8:	4b4c      	ldr	r3, [pc, #304]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f04:	e7a0      	b.n	8003e48 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f06:	f7ff febb 	bl	8003c80 <RCC_SetFlashLatencyFromMSIRange>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	f040 825d 	bne.w	80043ca <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f10:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	f042 0208 	orr.w	r2, r2, #8
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f20:	6a21      	ldr	r1, [r4, #32]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003f2c:	69e1      	ldr	r1, [r4, #28]
 8003f2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	e79e      	b.n	8003e74 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f36:	6a20      	ldr	r0, [r4, #32]
 8003f38:	f7ff fea2 	bl	8003c80 <RCC_SetFlashLatencyFromMSIRange>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d099      	beq.n	8003e74 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8003f40:	2001      	movs	r0, #1
 8003f42:	e249      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	f042 0208 	orr.w	r2, r2, #8
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f54:	6a21      	ldr	r1, [r4, #32]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003f60:	69e1      	ldr	r1, [r4, #28]
 8003f62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	e798      	b.n	8003e9c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8003f6a:	4a30      	ldr	r2, [pc, #192]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f74:	f7ff f81e 	bl	8002fb4 <HAL_GetTick>
 8003f78:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f013 0f02 	tst.w	r3, #2
 8003f82:	d08b      	beq.n	8003e9c <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f84:	f7ff f816 	bl	8002fb4 <HAL_GetTick>
 8003f88:	1bc0      	subs	r0, r0, r7
 8003f8a:	2802      	cmp	r0, #2
 8003f8c:	d9f5      	bls.n	8003f7a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8003f8e:	2003      	movs	r0, #3
 8003f90:	e222      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f92:	2e03      	cmp	r6, #3
 8003f94:	d18b      	bne.n	8003eae <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f96:	4b25      	ldr	r3, [pc, #148]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x1e4>
 8003fa0:	6863      	ldr	r3, [r4, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8213 	beq.w	80043ce <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	f013 0f02 	tst.w	r3, #2
 8003fae:	d058      	beq.n	8004062 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fb0:	2d04      	cmp	r5, #4
 8003fb2:	d045      	beq.n	8004040 <HAL_RCC_OscConfig+0x27c>
 8003fb4:	2d0c      	cmp	r5, #12
 8003fb6:	d041      	beq.n	800403c <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fb8:	68e3      	ldr	r3, [r4, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d077      	beq.n	80040ae <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8003fbe:	4a1b      	ldr	r2, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003fc0:	6813      	ldr	r3, [r2, #0]
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003fc8:	f7fe fff4 	bl	8002fb4 <HAL_GetTick>
 8003fcc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fce:	4b17      	ldr	r3, [pc, #92]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003fd6:	d161      	bne.n	800409c <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7fe ffec 	bl	8002fb4 <HAL_GetTick>
 8003fdc:	1b80      	subs	r0, r0, r6
 8003fde:	2802      	cmp	r0, #2
 8003fe0:	d9f5      	bls.n	8003fce <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8003fe2:	2003      	movs	r0, #3
 8003fe4:	e1f8      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe6:	4a11      	ldr	r2, [pc, #68]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8003fe8:	6813      	ldr	r3, [r2, #0]
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e76f      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10e>
 8003ff2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ff6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e762      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800400c:	f7fe ffd2 	bl	8002fb4 <HAL_GetTick>
 8004010:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_RCC_OscConfig+0x268>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800401a:	d0c5      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fe ffca 	bl	8002fb4 <HAL_GetTick>
 8004020:	1bc0      	subs	r0, r0, r7
 8004022:	2864      	cmp	r0, #100	; 0x64
 8004024:	d9f5      	bls.n	8004012 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8004026:	2003      	movs	r0, #3
 8004028:	e1d6      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	08006e38 	.word	0x08006e38
 8004034:	200003f8 	.word	0x200003f8
 8004038:	200004d4 	.word	0x200004d4
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800403c:	2e02      	cmp	r6, #2
 800403e:	d1bb      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004040:	4b95      	ldr	r3, [pc, #596]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004048:	d003      	beq.n	8004052 <HAL_RCC_OscConfig+0x28e>
 800404a:	68e3      	ldr	r3, [r4, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 81c0 	beq.w	80043d2 <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004052:	4a91      	ldr	r2, [pc, #580]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004054:	6853      	ldr	r3, [r2, #4]
 8004056:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800405a:	6921      	ldr	r1, [r4, #16]
 800405c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004060:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	f013 0f08 	tst.w	r3, #8
 8004068:	d04c      	beq.n	8004104 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406a:	6963      	ldr	r3, [r4, #20]
 800406c:	b39b      	cbz	r3, 80040d6 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800406e:	4a8a      	ldr	r2, [pc, #552]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004070:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800407c:	f7fe ff9a 	bl	8002fb4 <HAL_GetTick>
 8004080:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004082:	4b85      	ldr	r3, [pc, #532]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004088:	f013 0f02 	tst.w	r3, #2
 800408c:	d13a      	bne.n	8004104 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408e:	f7fe ff91 	bl	8002fb4 <HAL_GetTick>
 8004092:	1b80      	subs	r0, r0, r6
 8004094:	2802      	cmp	r0, #2
 8004096:	d9f4      	bls.n	8004082 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8004098:	2003      	movs	r0, #3
 800409a:	e19d      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409c:	4a7e      	ldr	r2, [pc, #504]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 800409e:	6853      	ldr	r3, [r2, #4]
 80040a0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80040a4:	6921      	ldr	r1, [r4, #16]
 80040a6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80040aa:	6053      	str	r3, [r2, #4]
 80040ac:	e7d9      	b.n	8004062 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4a7a      	ldr	r2, [pc, #488]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 80040b0:	6813      	ldr	r3, [r2, #0]
 80040b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040b8:	f7fe ff7c 	bl	8002fb4 <HAL_GetTick>
 80040bc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040be:	4b76      	ldr	r3, [pc, #472]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80040c6:	d0cc      	beq.n	8004062 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fe ff74 	bl	8002fb4 <HAL_GetTick>
 80040cc:	1b80      	subs	r0, r0, r6
 80040ce:	2802      	cmp	r0, #2
 80040d0:	d9f5      	bls.n	80040be <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80040d2:	2003      	movs	r0, #3
 80040d4:	e180      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 80040d6:	4a70      	ldr	r2, [pc, #448]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 80040d8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80040e4:	f7fe ff66 	bl	8002fb4 <HAL_GetTick>
 80040e8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ea:	4b6b      	ldr	r3, [pc, #428]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 80040ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f0:	f013 0f02 	tst.w	r3, #2
 80040f4:	d006      	beq.n	8004104 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f6:	f7fe ff5d 	bl	8002fb4 <HAL_GetTick>
 80040fa:	1b80      	subs	r0, r0, r6
 80040fc:	2802      	cmp	r0, #2
 80040fe:	d9f4      	bls.n	80040ea <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8004100:	2003      	movs	r0, #3
 8004102:	e169      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	f013 0f04 	tst.w	r3, #4
 800410a:	d07a      	beq.n	8004202 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800410c:	4b62      	ldr	r3, [pc, #392]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004114:	d136      	bne.n	8004184 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	4b60      	ldr	r3, [pc, #384]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800411a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800411e:	659a      	str	r2, [r3, #88]	; 0x58
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800412a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412c:	4b5b      	ldr	r3, [pc, #364]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004134:	d028      	beq.n	8004188 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d039      	beq.n	80041b0 <HAL_RCC_OscConfig+0x3ec>
 800413c:	2b05      	cmp	r3, #5
 800413e:	d03f      	beq.n	80041c0 <HAL_RCC_OscConfig+0x3fc>
 8004140:	4b55      	ldr	r3, [pc, #340]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004142:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800414e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004152:	f022 0204 	bic.w	r2, r2, #4
 8004156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800415a:	68a3      	ldr	r3, [r4, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03d      	beq.n	80041dc <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8004160:	f7fe ff28 	bl	8002fb4 <HAL_GetTick>
 8004164:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004166:	4b4c      	ldr	r3, [pc, #304]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	f013 0f02 	tst.w	r3, #2
 8004170:	d146      	bne.n	8004200 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fe ff1f 	bl	8002fb4 <HAL_GetTick>
 8004176:	1bc0      	subs	r0, r0, r7
 8004178:	f241 3388 	movw	r3, #5000	; 0x1388
 800417c:	4298      	cmp	r0, r3
 800417e:	d9f2      	bls.n	8004166 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8004180:	2003      	movs	r0, #3
 8004182:	e129      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 8004184:	2600      	movs	r6, #0
 8004186:	e7d1      	b.n	800412c <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004188:	4a44      	ldr	r2, [pc, #272]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004190:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004192:	f7fe ff0f 	bl	8002fb4 <HAL_GetTick>
 8004196:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004198:	4b40      	ldr	r3, [pc, #256]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041a0:	d1c9      	bne.n	8004136 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a2:	f7fe ff07 	bl	8002fb4 <HAL_GetTick>
 80041a6:	1bc0      	subs	r0, r0, r7
 80041a8:	2802      	cmp	r0, #2
 80041aa:	d9f5      	bls.n	8004198 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80041ac:	2003      	movs	r0, #3
 80041ae:	e113      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b0:	4a39      	ldr	r2, [pc, #228]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 80041b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041be:	e7cc      	b.n	800415a <HAL_RCC_OscConfig+0x396>
 80041c0:	4b35      	ldr	r3, [pc, #212]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 80041c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80041c6:	f042 0204 	orr.w	r2, r2, #4
 80041ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80041ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80041da:	e7be      	b.n	800415a <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 80041dc:	f7fe feea 	bl	8002fb4 <HAL_GetTick>
 80041e0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e2:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f013 0f02 	tst.w	r3, #2
 80041ec:	d008      	beq.n	8004200 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fe fee1 	bl	8002fb4 <HAL_GetTick>
 80041f2:	1bc0      	subs	r0, r0, r7
 80041f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80041f8:	4298      	cmp	r0, r3
 80041fa:	d9f2      	bls.n	80041e2 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 80041fc:	2003      	movs	r0, #3
 80041fe:	e0eb      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 8004200:	bb6e      	cbnz	r6, 800425e <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80e6 	beq.w	80043d6 <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800420a:	2b02      	cmp	r3, #2
 800420c:	d02d      	beq.n	800426a <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800420e:	2d0c      	cmp	r5, #12
 8004210:	f000 80e8 	beq.w	80043e4 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8004214:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800421c:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8004224:	d104      	bne.n	8004230 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004226:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004228:	68d3      	ldr	r3, [r2, #12]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004232:	68d3      	ldr	r3, [r2, #12]
 8004234:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800423e:	f7fe feb9 	bl	8002fb4 <HAL_GetTick>
 8004242:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004244:	4b14      	ldr	r3, [pc, #80]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800424c:	f000 80b7 	beq.w	80043be <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004250:	f7fe feb0 	bl	8002fb4 <HAL_GetTick>
 8004254:	1b00      	subs	r0, r0, r4
 8004256:	2802      	cmp	r0, #2
 8004258:	d9f4      	bls.n	8004244 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 800425a:	2003      	movs	r0, #3
 800425c:	e0bc      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 800425e:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004260:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004266:	6593      	str	r3, [r2, #88]	; 0x58
 8004268:	e7cb      	b.n	8004202 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 800426c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	f003 0103 	and.w	r1, r3, #3
 8004272:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004274:	4291      	cmp	r1, r2
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004278:	2d0c      	cmp	r5, #12
 800427a:	f000 80af 	beq.w	80043dc <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8004286:	f040 80ab 	bne.w	80043e0 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800428a:	4b03      	ldr	r3, [pc, #12]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004292:	d031      	beq.n	80042f8 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 8004294:	2001      	movs	r0, #1
 8004296:	e09f      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
 8004298:	40021000 	.word	0x40021000
 800429c:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042a6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80042ac:	d1e4      	bne.n	8004278 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80042b8:	d1de      	bne.n	8004278 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042ba:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80042be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042c0:	3a07      	subs	r2, #7
 80042c2:	bf18      	it	ne
 80042c4:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c6:	4291      	cmp	r1, r2
 80042c8:	d1d6      	bne.n	8004278 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ca:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80042ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80042d0:	0852      	lsrs	r2, r2, #1
 80042d2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042d4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80042d8:	d1ce      	bne.n	8004278 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042da:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80042de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80042e0:	0852      	lsrs	r2, r2, #1
 80042e2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80042e8:	d1c6      	bne.n	8004278 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ea:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <HAL_RCC_OscConfig+0x624>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042f2:	d04a      	beq.n	800438a <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 80042f4:	2000      	movs	r0, #0
 80042f6:	e06f      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 80042f8:	4a3b      	ldr	r2, [pc, #236]	; (80043e8 <HAL_RCC_OscConfig+0x624>)
 80042fa:	6813      	ldr	r3, [r2, #0]
 80042fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004300:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8004302:	f7fe fe57 	bl	8002fb4 <HAL_GetTick>
 8004306:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <HAL_RCC_OscConfig+0x624>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004310:	d006      	beq.n	8004320 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004312:	f7fe fe4f 	bl	8002fb4 <HAL_GetTick>
 8004316:	1b40      	subs	r0, r0, r5
 8004318:	2802      	cmp	r0, #2
 800431a:	d9f5      	bls.n	8004308 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 800431c:	2003      	movs	r0, #3
 800431e:	e05b      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004320:	4a31      	ldr	r2, [pc, #196]	; (80043e8 <HAL_RCC_OscConfig+0x624>)
 8004322:	68d3      	ldr	r3, [r2, #12]
 8004324:	4931      	ldr	r1, [pc, #196]	; (80043ec <HAL_RCC_OscConfig+0x628>)
 8004326:	4019      	ands	r1, r3
 8004328:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800432a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800432c:	3801      	subs	r0, #1
 800432e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004332:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004334:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004338:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800433a:	0840      	lsrs	r0, r0, #1
 800433c:	3801      	subs	r0, #1
 800433e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8004342:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004344:	0840      	lsrs	r0, r0, #1
 8004346:	3801      	subs	r0, #1
 8004348:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800434c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800434e:	0900      	lsrs	r0, r0, #4
 8004350:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8004354:	430b      	orrs	r3, r1
 8004356:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800435e:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004360:	68d3      	ldr	r3, [r2, #12]
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004366:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8004368:	f7fe fe24 	bl	8002fb4 <HAL_GetTick>
 800436c:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_RCC_OscConfig+0x624>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fe fe1c 	bl	8002fb4 <HAL_GetTick>
 800437c:	1b00      	subs	r0, r0, r4
 800437e:	2802      	cmp	r0, #2
 8004380:	d9f5      	bls.n	800436e <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 8004382:	2003      	movs	r0, #3
 8004384:	e028      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8004386:	2000      	movs	r0, #0
 8004388:	e026      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <HAL_RCC_OscConfig+0x624>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004392:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800439a:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800439c:	f7fe fe0a 	bl	8002fb4 <HAL_GetTick>
 80043a0:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <HAL_RCC_OscConfig+0x624>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fe fe02 	bl	8002fb4 <HAL_GetTick>
 80043b0:	1b03      	subs	r3, r0, r4
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d9f5      	bls.n	80043a2 <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 80043b6:	2003      	movs	r0, #3
 80043b8:	e00e      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 80043ba:	2000      	movs	r0, #0
 80043bc:	e00c      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
 80043be:	2000      	movs	r0, #0
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 80043c2:	2001      	movs	r0, #1
}
 80043c4:	4770      	bx	lr
        return HAL_ERROR;
 80043c6:	2001      	movs	r0, #1
 80043c8:	e006      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 80043ca:	2001      	movs	r0, #1
 80043cc:	e004      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 80043ce:	2001      	movs	r0, #1
 80043d0:	e002      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 80043d2:	2001      	movs	r0, #1
 80043d4:	e000      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 80043d6:	2000      	movs	r0, #0
}
 80043d8:	b003      	add	sp, #12
 80043da:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 80043dc:	2001      	movs	r0, #1
 80043de:	e7fb      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 80043e0:	2001      	movs	r0, #1
 80043e2:	e7f9      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 80043e4:	2001      	movs	r0, #1
 80043e6:	e7f7      	b.n	80043d8 <HAL_RCC_OscConfig+0x614>
 80043e8:	40021000 	.word	0x40021000
 80043ec:	f99d808c 	.word	0xf99d808c

080043f0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80043f0:	2800      	cmp	r0, #0
 80043f2:	f000 8098 	beq.w	8004526 <HAL_RCC_ClockConfig+0x136>
{
 80043f6:	b570      	push	{r4, r5, r6, lr}
 80043f8:	460c      	mov	r4, r1
 80043fa:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043fc:	4b4e      	ldr	r3, [pc, #312]	; (8004538 <HAL_RCC_ClockConfig+0x148>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	428b      	cmp	r3, r1
 8004406:	d20b      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004408:	4a4b      	ldr	r2, [pc, #300]	; (8004538 <HAL_RCC_ClockConfig+0x148>)
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	f023 0307 	bic.w	r3, r3, #7
 8004410:	430b      	orrs	r3, r1
 8004412:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	428b      	cmp	r3, r1
 800441c:	f040 8085 	bne.w	800452a <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	f013 0f01 	tst.w	r3, #1
 8004426:	d039      	beq.n	800449c <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004428:	686b      	ldr	r3, [r5, #4]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d009      	beq.n	8004442 <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442e:	2b02      	cmp	r3, #2
 8004430:	d026      	beq.n	8004480 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004432:	bb63      	cbnz	r3, 800448e <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004434:	4a41      	ldr	r2, [pc, #260]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	f012 0f02 	tst.w	r2, #2
 800443c:	d106      	bne.n	800444c <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 800443e:	2001      	movs	r0, #1
 8004440:	e070      	b.n	8004524 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004442:	4a3e      	ldr	r2, [pc, #248]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800444a:	d070      	beq.n	800452e <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800444c:	493b      	ldr	r1, [pc, #236]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 800444e:	688a      	ldr	r2, [r1, #8]
 8004450:	f022 0203 	bic.w	r2, r2, #3
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004458:	f7fe fdac 	bl	8002fb4 <HAL_GetTick>
 800445c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	4b37      	ldr	r3, [pc, #220]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	686a      	ldr	r2, [r5, #4]
 8004468:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800446c:	d016      	beq.n	800449c <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446e:	f7fe fda1 	bl	8002fb4 <HAL_GetTick>
 8004472:	1b80      	subs	r0, r0, r6
 8004474:	f241 3388 	movw	r3, #5000	; 0x1388
 8004478:	4298      	cmp	r0, r3
 800447a:	d9f0      	bls.n	800445e <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800447c:	2003      	movs	r0, #3
 800447e:	e051      	b.n	8004524 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004480:	4a2e      	ldr	r2, [pc, #184]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004488:	d1e0      	bne.n	800444c <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 800448a:	2001      	movs	r0, #1
 800448c:	e04a      	b.n	8004524 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800448e:	4a2b      	ldr	r2, [pc, #172]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004496:	d1d9      	bne.n	800444c <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8004498:	2001      	movs	r0, #1
 800449a:	e043      	b.n	8004524 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	f013 0f02 	tst.w	r3, #2
 80044a2:	d006      	beq.n	80044b2 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4a25      	ldr	r2, [pc, #148]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 80044a6:	6893      	ldr	r3, [r2, #8]
 80044a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ac:	68a9      	ldr	r1, [r5, #8]
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044b2:	4b21      	ldr	r3, [pc, #132]	; (8004538 <HAL_RCC_ClockConfig+0x148>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	42a3      	cmp	r3, r4
 80044bc:	d90a      	bls.n	80044d4 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4a1e      	ldr	r2, [pc, #120]	; (8004538 <HAL_RCC_ClockConfig+0x148>)
 80044c0:	6813      	ldr	r3, [r2, #0]
 80044c2:	f023 0307 	bic.w	r3, r3, #7
 80044c6:	4323      	orrs	r3, r4
 80044c8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	42a3      	cmp	r3, r4
 80044d2:	d12e      	bne.n	8004532 <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	f013 0f04 	tst.w	r3, #4
 80044da:	d006      	beq.n	80044ea <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 80044de:	6893      	ldr	r3, [r2, #8]
 80044e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044e4:	68e9      	ldr	r1, [r5, #12]
 80044e6:	430b      	orrs	r3, r1
 80044e8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	f013 0f08 	tst.w	r3, #8
 80044f0:	d007      	beq.n	8004502 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f2:	4a12      	ldr	r2, [pc, #72]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 80044f4:	6893      	ldr	r3, [r2, #8]
 80044f6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80044fa:	6929      	ldr	r1, [r5, #16]
 80044fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004500:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004502:	f7ff fc05 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <HAL_RCC_ClockConfig+0x14c>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800450e:	4a0c      	ldr	r2, [pc, #48]	; (8004540 <HAL_RCC_ClockConfig+0x150>)
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	40d8      	lsrs	r0, r3
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_RCC_ClockConfig+0x154>)
 800451a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <HAL_RCC_ClockConfig+0x158>)
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	f7fe fd06 	bl	8002f30 <HAL_InitTick>
}
 8004524:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004526:	2001      	movs	r0, #1
}
 8004528:	4770      	bx	lr
      return HAL_ERROR;
 800452a:	2001      	movs	r0, #1
 800452c:	e7fa      	b.n	8004524 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 800452e:	2001      	movs	r0, #1
 8004530:	e7f8      	b.n	8004524 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 8004532:	2001      	movs	r0, #1
 8004534:	e7f6      	b.n	8004524 <HAL_RCC_ClockConfig+0x134>
 8004536:	bf00      	nop
 8004538:	40022000 	.word	0x40022000
 800453c:	40021000 	.word	0x40021000
 8004540:	08006e38 	.word	0x08006e38
 8004544:	200003f8 	.word	0x200003f8
 8004548:	200004d4 	.word	0x200004d4

0800454c <HAL_RCC_GetHCLKFreq>:
}
 800454c:	4b01      	ldr	r3, [pc, #4]	; (8004554 <HAL_RCC_GetHCLKFreq+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	200003f8 	.word	0x200003f8

08004558 <HAL_RCC_GetPCLK1Freq>:
{
 8004558:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800455a:	f7ff fff7 	bl	800454c <HAL_RCC_GetHCLKFreq>
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004566:	4a04      	ldr	r2, [pc, #16]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004568:	5cd3      	ldrb	r3, [r2, r3]
 800456a:	f003 031f 	and.w	r3, r3, #31
}
 800456e:	40d8      	lsrs	r0, r3
 8004570:	bd08      	pop	{r3, pc}
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	08006e48 	.word	0x08006e48

0800457c <HAL_RCC_GetPCLK2Freq>:
{
 800457c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800457e:	f7ff ffe5 	bl	800454c <HAL_RCC_GetHCLKFreq>
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800458a:	4a04      	ldr	r2, [pc, #16]	; (800459c <HAL_RCC_GetPCLK2Freq+0x20>)
 800458c:	5cd3      	ldrb	r3, [r2, r3]
 800458e:	f003 031f 	and.w	r3, r3, #31
}
 8004592:	40d8      	lsrs	r0, r3
 8004594:	bd08      	pop	{r3, pc}
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000
 800459c:	08006e48 	.word	0x08006e48

080045a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	4604      	mov	r4, r0
 80045a4:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045a6:	4b59      	ldr	r3, [pc, #356]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f013 0f03 	tst.w	r3, #3
 80045ae:	d018      	beq.n	80045e2 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045b0:	4b56      	ldr	r3, [pc, #344]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	6802      	ldr	r2, [r0, #0]
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d002      	beq.n	80045c4 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80045be:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80045c0:	4628      	mov	r0, r5
 80045c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80045c4:	2a00      	cmp	r2, #0
 80045c6:	f000 809e 	beq.w	8004706 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045ca:	4b50      	ldr	r3, [pc, #320]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80045d2:	3301      	adds	r3, #1
 80045d4:	6842      	ldr	r2, [r0, #4]
       ||
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d001      	beq.n	80045de <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 80045da:	2501      	movs	r5, #1
 80045dc:	e7f0      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2500      	movs	r5, #0
 80045e0:	e009      	b.n	80045f6 <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 80045e2:	6803      	ldr	r3, [r0, #0]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d057      	beq.n	8004698 <RCCEx_PLLSAI1_Config+0xf8>
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d05c      	beq.n	80046a6 <RCCEx_PLLSAI1_Config+0x106>
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d042      	beq.n	8004676 <RCCEx_PLLSAI1_Config+0xd6>
 80045f0:	2501      	movs	r5, #1
  if(status == HAL_OK)
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	d1e4      	bne.n	80045c0 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 80045f6:	4a45      	ldr	r2, [pc, #276]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 80045f8:	6813      	ldr	r3, [r2, #0]
 80045fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004600:	f7fe fcd8 	bl	8002fb4 <HAL_GetTick>
 8004604:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004606:	4b41      	ldr	r3, [pc, #260]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800460e:	d005      	beq.n	800461c <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004610:	f7fe fcd0 	bl	8002fb4 <HAL_GetTick>
 8004614:	1b83      	subs	r3, r0, r6
 8004616:	2b02      	cmp	r3, #2
 8004618:	d9f5      	bls.n	8004606 <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 800461a:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800461c:	2d00      	cmp	r5, #0
 800461e:	d1cf      	bne.n	80045c0 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8004620:	2f00      	cmp	r7, #0
 8004622:	d14e      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004624:	4939      	ldr	r1, [pc, #228]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 8004626:	690b      	ldr	r3, [r1, #16]
 8004628:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800462c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004630:	68a0      	ldr	r0, [r4, #8]
 8004632:	68e2      	ldr	r2, [r4, #12]
 8004634:	0912      	lsrs	r2, r2, #4
 8004636:	0452      	lsls	r2, r2, #17
 8004638:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800463c:	4313      	orrs	r3, r2
 800463e:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004640:	4a32      	ldr	r2, [pc, #200]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 8004642:	6813      	ldr	r3, [r2, #0]
 8004644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004648:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800464a:	f7fe fcb3 	bl	8002fb4 <HAL_GetTick>
 800464e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004650:	4b2e      	ldr	r3, [pc, #184]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004658:	d105      	bne.n	8004666 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800465a:	f7fe fcab 	bl	8002fb4 <HAL_GetTick>
 800465e:	1b83      	subs	r3, r0, r6
 8004660:	2b02      	cmp	r3, #2
 8004662:	d9f5      	bls.n	8004650 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8004664:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8004666:	2d00      	cmp	r5, #0
 8004668:	d1aa      	bne.n	80045c0 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800466a:	4a28      	ldr	r2, [pc, #160]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 800466c:	6913      	ldr	r3, [r2, #16]
 800466e:	69a1      	ldr	r1, [r4, #24]
 8004670:	430b      	orrs	r3, r1
 8004672:	6113      	str	r3, [r2, #16]
 8004674:	e7a4      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004676:	4a25      	ldr	r2, [pc, #148]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	f012 0f02 	tst.w	r2, #2
 800467e:	d01e      	beq.n	80046be <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004680:	4822      	ldr	r0, [pc, #136]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 8004682:	68c2      	ldr	r2, [r0, #12]
 8004684:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004688:	6861      	ldr	r1, [r4, #4]
 800468a:	3901      	subs	r1, #1
 800468c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004690:	4313      	orrs	r3, r2
 8004692:	60c3      	str	r3, [r0, #12]
 8004694:	2500      	movs	r5, #0
 8004696:	e7ac      	b.n	80045f2 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004698:	4a1c      	ldr	r2, [pc, #112]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80046a0:	d1ee      	bne.n	8004680 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 80046a2:	2501      	movs	r5, #1
 80046a4:	e7a5      	b.n	80045f2 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046a6:	4a19      	ldr	r2, [pc, #100]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80046ae:	d1e7      	bne.n	8004680 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046b0:	4a16      	ldr	r2, [pc, #88]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80046b8:	d1e2      	bne.n	8004680 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 80046ba:	2501      	movs	r5, #1
 80046bc:	e799      	b.n	80045f2 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 80046be:	2501      	movs	r5, #1
 80046c0:	e797      	b.n	80045f2 <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 80046c2:	2f01      	cmp	r7, #1
 80046c4:	d00f      	beq.n	80046e6 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c6:	4811      	ldr	r0, [pc, #68]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 80046c8:	6902      	ldr	r2, [r0, #16]
 80046ca:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80046ce:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80046d2:	68a1      	ldr	r1, [r4, #8]
 80046d4:	6963      	ldr	r3, [r4, #20]
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	3b01      	subs	r3, #1
 80046da:	065b      	lsls	r3, r3, #25
 80046dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80046e0:	4313      	orrs	r3, r2
 80046e2:	6103      	str	r3, [r0, #16]
 80046e4:	e7ac      	b.n	8004640 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e6:	4809      	ldr	r0, [pc, #36]	; (800470c <RCCEx_PLLSAI1_Config+0x16c>)
 80046e8:	6902      	ldr	r2, [r0, #16]
 80046ea:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80046ee:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80046f2:	68a1      	ldr	r1, [r4, #8]
 80046f4:	6923      	ldr	r3, [r4, #16]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	3b01      	subs	r3, #1
 80046fa:	055b      	lsls	r3, r3, #21
 80046fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004700:	4313      	orrs	r3, r2
 8004702:	6103      	str	r3, [r0, #16]
 8004704:	e79c      	b.n	8004640 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 8004706:	2501      	movs	r5, #1
 8004708:	e75a      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x20>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000

08004710 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	4604      	mov	r4, r0
 8004714:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004716:	4b50      	ldr	r3, [pc, #320]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f013 0f03 	tst.w	r3, #3
 800471e:	d018      	beq.n	8004752 <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004720:	4b4d      	ldr	r3, [pc, #308]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	6802      	ldr	r2, [r0, #0]
 800472a:	4293      	cmp	r3, r2
 800472c:	d002      	beq.n	8004734 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800472e:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8004730:	4628      	mov	r0, r5
 8004732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004734:	2a00      	cmp	r2, #0
 8004736:	f000 808c 	beq.w	8004852 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004742:	3301      	adds	r3, #1
 8004744:	6842      	ldr	r2, [r0, #4]
       ||
 8004746:	4293      	cmp	r3, r2
 8004748:	d001      	beq.n	800474e <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 800474a:	2501      	movs	r5, #1
 800474c:	e7f0      	b.n	8004730 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	2500      	movs	r5, #0
 8004750:	e009      	b.n	8004766 <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 8004752:	6803      	ldr	r3, [r0, #0]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d057      	beq.n	8004808 <RCCEx_PLLSAI2_Config+0xf8>
 8004758:	2b03      	cmp	r3, #3
 800475a:	d05c      	beq.n	8004816 <RCCEx_PLLSAI2_Config+0x106>
 800475c:	2b01      	cmp	r3, #1
 800475e:	d042      	beq.n	80047e6 <RCCEx_PLLSAI2_Config+0xd6>
 8004760:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8004762:	2d00      	cmp	r5, #0
 8004764:	d1e4      	bne.n	8004730 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004766:	4a3c      	ldr	r2, [pc, #240]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 8004768:	6813      	ldr	r3, [r2, #0]
 800476a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004770:	f7fe fc20 	bl	8002fb4 <HAL_GetTick>
 8004774:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004776:	4b38      	ldr	r3, [pc, #224]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800477e:	d005      	beq.n	800478c <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004780:	f7fe fc18 	bl	8002fb4 <HAL_GetTick>
 8004784:	1b83      	subs	r3, r0, r6
 8004786:	2b02      	cmp	r3, #2
 8004788:	d9f5      	bls.n	8004776 <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 800478a:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800478c:	2d00      	cmp	r5, #0
 800478e:	d1cf      	bne.n	8004730 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8004790:	2f00      	cmp	r7, #0
 8004792:	d14e      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004794:	4930      	ldr	r1, [pc, #192]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 8004796:	694b      	ldr	r3, [r1, #20]
 8004798:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800479c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a0:	68a0      	ldr	r0, [r4, #8]
 80047a2:	68e2      	ldr	r2, [r4, #12]
 80047a4:	0912      	lsrs	r2, r2, #4
 80047a6:	0452      	lsls	r2, r2, #17
 80047a8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80047ac:	4313      	orrs	r3, r2
 80047ae:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80047b0:	4a29      	ldr	r2, [pc, #164]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 80047b2:	6813      	ldr	r3, [r2, #0]
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80047ba:	f7fe fbfb 	bl	8002fb4 <HAL_GetTick>
 80047be:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047c0:	4b25      	ldr	r3, [pc, #148]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80047c8:	d105      	bne.n	80047d6 <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047ca:	f7fe fbf3 	bl	8002fb4 <HAL_GetTick>
 80047ce:	1b83      	subs	r3, r0, r6
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d9f5      	bls.n	80047c0 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 80047d4:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80047d6:	2d00      	cmp	r5, #0
 80047d8:	d1aa      	bne.n	8004730 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047da:	4a1f      	ldr	r2, [pc, #124]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 80047dc:	6953      	ldr	r3, [r2, #20]
 80047de:	6961      	ldr	r1, [r4, #20]
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6153      	str	r3, [r2, #20]
 80047e4:	e7a4      	b.n	8004730 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047e6:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	f012 0f02 	tst.w	r2, #2
 80047ee:	d01e      	beq.n	800482e <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047f0:	4819      	ldr	r0, [pc, #100]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 80047f2:	68c2      	ldr	r2, [r0, #12]
 80047f4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80047f8:	6861      	ldr	r1, [r4, #4]
 80047fa:	3901      	subs	r1, #1
 80047fc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004800:	4313      	orrs	r3, r2
 8004802:	60c3      	str	r3, [r0, #12]
 8004804:	2500      	movs	r5, #0
 8004806:	e7ac      	b.n	8004762 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004808:	4a13      	ldr	r2, [pc, #76]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004810:	d1ee      	bne.n	80047f0 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 8004812:	2501      	movs	r5, #1
 8004814:	e7a5      	b.n	8004762 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004816:	4a10      	ldr	r2, [pc, #64]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800481e:	d1e7      	bne.n	80047f0 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004820:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004828:	d1e2      	bne.n	80047f0 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 800482a:	2501      	movs	r5, #1
 800482c:	e799      	b.n	8004762 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 800482e:	2501      	movs	r5, #1
 8004830:	e797      	b.n	8004762 <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004832:	4809      	ldr	r0, [pc, #36]	; (8004858 <RCCEx_PLLSAI2_Config+0x148>)
 8004834:	6942      	ldr	r2, [r0, #20]
 8004836:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800483a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800483e:	68a1      	ldr	r1, [r4, #8]
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	3b01      	subs	r3, #1
 8004846:	065b      	lsls	r3, r3, #25
 8004848:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800484c:	4313      	orrs	r3, r2
 800484e:	6143      	str	r3, [r0, #20]
 8004850:	e7ae      	b.n	80047b0 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8004852:	2501      	movs	r5, #1
 8004854:	e76c      	b.n	8004730 <RCCEx_PLLSAI2_Config+0x20>
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000

0800485c <HAL_RCCEx_PeriphCLKConfig>:
{
 800485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004864:	6803      	ldr	r3, [r0, #0]
 8004866:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800486a:	d033      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 800486c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800486e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004872:	d01f      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004874:	d80c      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004876:	b323      	cbz	r3, 80048c2 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8004878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800487c:	d105      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800487e:	2100      	movs	r1, #0
 8004880:	3020      	adds	r0, #32
 8004882:	f7ff ff45 	bl	8004710 <RCCEx_PLLSAI2_Config>
 8004886:	4606      	mov	r6, r0
      break;
 8004888:	e020      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800488a:	2701      	movs	r7, #1
 800488c:	463e      	mov	r6, r7
 800488e:	e023      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004890:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004894:	d10b      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004896:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004898:	4a60      	ldr	r2, [pc, #384]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800489a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800489e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80048a2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80048a4:	430b      	orrs	r3, r1
 80048a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048aa:	2700      	movs	r7, #0
 80048ac:	e014      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80048ae:	2701      	movs	r7, #1
 80048b0:	463e      	mov	r6, r7
 80048b2:	e011      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048b4:	4a59      	ldr	r2, [pc, #356]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048b6:	68d3      	ldr	r3, [r2, #12]
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048be:	2600      	movs	r6, #0
 80048c0:	e7ea      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048c2:	2100      	movs	r1, #0
 80048c4:	3004      	adds	r0, #4
 80048c6:	f7ff fe6b 	bl	80045a0 <RCCEx_PLLSAI1_Config>
 80048ca:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80048cc:	2e00      	cmp	r6, #0
 80048ce:	d0e3      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80048d0:	4637      	mov	r7, r6
 80048d2:	e001      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048d4:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048d6:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80048de:	d030      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 80048e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80048e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e6:	d01f      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80048e8:	d80d      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80048ea:	b31b      	cbz	r3, 8004934 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80048ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048f0:	d106      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048f2:	2100      	movs	r1, #0
 80048f4:	f104 0020 	add.w	r0, r4, #32
 80048f8:	f7ff ff0a 	bl	8004710 <RCCEx_PLLSAI2_Config>
 80048fc:	4606      	mov	r6, r0
      break;
 80048fe:	e005      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004900:	2701      	movs	r7, #1
 8004902:	463e      	mov	r6, r7
 8004904:	e01d      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8004906:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800490a:	d10a      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 800490c:	b9c6      	cbnz	r6, 8004940 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800490e:	4a43      	ldr	r2, [pc, #268]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004910:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004914:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004918:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800491a:	430b      	orrs	r3, r1
 800491c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004920:	e00f      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004922:	2701      	movs	r7, #1
 8004924:	463e      	mov	r6, r7
 8004926:	e00c      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004928:	4a3c      	ldr	r2, [pc, #240]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800492a:	68d3      	ldr	r3, [r2, #12]
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	60d3      	str	r3, [r2, #12]
      break;
 8004932:	e7eb      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004934:	2100      	movs	r1, #0
 8004936:	1d20      	adds	r0, r4, #4
 8004938:	f7ff fe32 	bl	80045a0 <RCCEx_PLLSAI1_Config>
 800493c:	4606      	mov	r6, r0
      break;
 800493e:	e7e5      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8004940:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004948:	d071      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800494a:	4b34      	ldr	r3, [pc, #208]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004952:	d14e      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004954:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004956:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004958:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800495c:	659a      	str	r2, [r3, #88]	; 0x58
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004968:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496c:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800496e:	6813      	ldr	r3, [r2, #0]
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004976:	f7fe fb1d 	bl	8002fb4 <HAL_GetTick>
 800497a:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800497c:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004984:	d105      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7fe fb15 	bl	8002fb4 <HAL_GetTick>
 800498a:	1b40      	subs	r0, r0, r5
 800498c:	2802      	cmp	r0, #2
 800498e:	d9f5      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8004990:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8004992:	2e00      	cmp	r6, #0
 8004994:	d146      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004996:	4b21      	ldr	r3, [pc, #132]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800499c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80049a0:	d016      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80049a2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d012      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049aa:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80049b8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80049bc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80049c4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80049c8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80049cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049d0:	f013 0f01 	tst.w	r3, #1
 80049d4:	d110      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	f040 8127 	bne.w	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049dc:	4a0f      	ldr	r2, [pc, #60]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80049ea:	430b      	orrs	r3, r1
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f0:	e019      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 80049f2:	f04f 0800 	mov.w	r8, #0
 80049f6:	e7b9      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 80049f8:	f7fe fadc 	bl	8002fb4 <HAL_GetTick>
 80049fc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	f013 0f02 	tst.w	r3, #2
 8004a08:	d1e5      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fe fad3 	bl	8002fb4 <HAL_GetTick>
 8004a0e:	1b40      	subs	r0, r0, r5
 8004a10:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a14:	4298      	cmp	r0, r3
 8004a16:	d9f2      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8004a18:	2603      	movs	r6, #3
 8004a1a:	e7dc      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40007000 	.word	0x40007000
      status = ret;
 8004a24:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8004a26:	f1b8 0f00 	cmp.w	r8, #0
 8004a2a:	f040 8100 	bne.w	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	f013 0f01 	tst.w	r3, #1
 8004a34:	d008      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a36:	4a9d      	ldr	r2, [pc, #628]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a38:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a3c:	f023 0303 	bic.w	r3, r3, #3
 8004a40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a42:	430b      	orrs	r3, r1
 8004a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	f013 0f02 	tst.w	r3, #2
 8004a4e:	d008      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a50:	4a96      	ldr	r2, [pc, #600]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a56:	f023 030c 	bic.w	r3, r3, #12
 8004a5a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	f013 0f04 	tst.w	r3, #4
 8004a68:	d008      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a6a:	4a90      	ldr	r2, [pc, #576]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a6c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a70:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a76:	430b      	orrs	r3, r1
 8004a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	f013 0f08 	tst.w	r3, #8
 8004a82:	d008      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a84:	4a89      	ldr	r2, [pc, #548]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004a90:	430b      	orrs	r3, r1
 8004a92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	f013 0f10 	tst.w	r3, #16
 8004a9c:	d008      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a9e:	4a83      	ldr	r2, [pc, #524]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aa0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	f013 0f20 	tst.w	r3, #32
 8004ab6:	d008      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ab8:	4a7c      	ldr	r2, [pc, #496]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004abe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ac2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004ad0:	d008      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ad2:	4a76      	ldr	r2, [pc, #472]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ad8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004adc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004aea:	d008      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aec:	4a6f      	ldr	r2, [pc, #444]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004af2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004af6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004af8:	430b      	orrs	r3, r1
 8004afa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b04:	d008      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b06:	4a69      	ldr	r2, [pc, #420]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b10:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004b12:	430b      	orrs	r3, r1
 8004b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b1e:	d008      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b20:	4a62      	ldr	r2, [pc, #392]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b26:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004b2a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b38:	d008      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b3a:	4a5c      	ldr	r2, [pc, #368]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b40:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b44:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004b46:	430b      	orrs	r3, r1
 8004b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004b52:	d00f      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b54:	4a55      	ldr	r2, [pc, #340]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b5a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004b5e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004b60:	430b      	orrs	r3, r1
 8004b62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b66:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b6c:	d065      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b72:	d067      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004b7a:	d00f      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b7c:	4a4b      	ldr	r2, [pc, #300]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b82:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004b86:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b94:	d05e      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b9a:	d060      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004ba2:	d00f      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ba4:	4a41      	ldr	r2, [pc, #260]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ba6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004baa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004bae:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bb6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bbc:	d057      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc2:	d059      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004bca:	d00f      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bcc:	4a37      	ldr	r2, [pc, #220]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bd2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004bd6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bde:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be4:	d050      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bea:	d055      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bf4:	4a2d      	ldr	r2, [pc, #180]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bfe:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004c00:	430b      	orrs	r3, r1
 8004c02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c0c:	d009      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c0e:	4a27      	ldr	r2, [pc, #156]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c18:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8004c22:	4638      	mov	r0, r7
 8004c24:	b002      	add	sp, #8
 8004c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8004c2a:	4637      	mov	r7, r6
 8004c2c:	e6fb      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c2e:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c30:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c36:	6593      	str	r3, [r2, #88]	; 0x58
 8004c38:	e6f9      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3a:	68d3      	ldr	r3, [r2, #12]
 8004c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c40:	60d3      	str	r3, [r2, #12]
 8004c42:	e797      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c44:	2101      	movs	r1, #1
 8004c46:	1d20      	adds	r0, r4, #4
 8004c48:	f7ff fcaa 	bl	80045a0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d091      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8004c50:	4607      	mov	r7, r0
 8004c52:	e78f      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c54:	68d3      	ldr	r3, [r2, #12]
 8004c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c5a:	60d3      	str	r3, [r2, #12]
 8004c5c:	e79e      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c5e:	2101      	movs	r1, #1
 8004c60:	1d20      	adds	r0, r4, #4
 8004c62:	f7ff fc9d 	bl	80045a0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d098      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8004c6a:	4607      	mov	r7, r0
 8004c6c:	e796      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c6e:	68d3      	ldr	r3, [r2, #12]
 8004c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c74:	60d3      	str	r3, [r2, #12]
 8004c76:	e7a5      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c78:	2101      	movs	r1, #1
 8004c7a:	1d20      	adds	r0, r4, #4
 8004c7c:	f7ff fc90 	bl	80045a0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d09f      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8004c84:	4607      	mov	r7, r0
 8004c86:	e79d      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c88:	2102      	movs	r1, #2
 8004c8a:	1d20      	adds	r0, r4, #4
 8004c8c:	f7ff fc88 	bl	80045a0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d0ab      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8004c94:	4607      	mov	r7, r0
 8004c96:	e7a9      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c98:	2102      	movs	r1, #2
 8004c9a:	f104 0020 	add.w	r0, r4, #32
 8004c9e:	f7ff fd37 	bl	8004710 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d0a2      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8004ca6:	4607      	mov	r7, r0
 8004ca8:	e7a0      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x390>
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000

08004cb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	4688      	mov	r8, r1
 8004cba:	4617      	mov	r7, r2
 8004cbc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cbe:	f7fe f979 	bl	8002fb4 <HAL_GetTick>
 8004cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc4:	1a1b      	subs	r3, r3, r0
 8004cc6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8004cca:	f7fe f973 	bl	8002fb4 <HAL_GetTick>
 8004cce:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cd0:	4b2b      	ldr	r3, [pc, #172]	; (8004d80 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004cd8:	fb09 f303 	mul.w	r3, r9, r3
 8004cdc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cde:	682b      	ldr	r3, [r5, #0]
 8004ce0:	689c      	ldr	r4, [r3, #8]
 8004ce2:	ea38 0304 	bics.w	r3, r8, r4
 8004ce6:	bf0c      	ite	eq
 8004ce8:	f04f 0c01 	moveq.w	ip, #1
 8004cec:	f04f 0c00 	movne.w	ip, #0
 8004cf0:	45bc      	cmp	ip, r7
 8004cf2:	d040      	beq.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004cf8:	d0f1      	beq.n	8004cde <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cfa:	f7fe f95b 	bl	8002fb4 <HAL_GetTick>
 8004cfe:	eba0 000a 	sub.w	r0, r0, sl
 8004d02:	4548      	cmp	r0, r9
 8004d04:	d20a      	bcs.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004d06:	f1b9 0f00 	cmp.w	r9, #0
 8004d0a:	d007      	beq.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d0c:	9a01      	ldr	r2, [sp, #4]
 8004d0e:	b102      	cbz	r2, 8004d12 <SPI_WaitFlagStateUntilTimeout+0x62>
 8004d10:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8004d12:	9b01      	ldr	r3, [sp, #4]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	4691      	mov	r9, r2
 8004d1a:	e7e0      	b.n	8004cde <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d1c:	682a      	ldr	r2, [r5, #0]
 8004d1e:	6853      	ldr	r3, [r2, #4]
 8004d20:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004d24:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d26:	686b      	ldr	r3, [r5, #4]
 8004d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d2c:	d00b      	beq.n	8004d46 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d34:	d014      	beq.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004d42:	2003      	movs	r0, #3
 8004d44:	e018      	b.n	8004d78 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d46:	68ab      	ldr	r3, [r5, #8]
 8004d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4c:	d002      	beq.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d52:	d1ec      	bne.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8004d54:	682a      	ldr	r2, [r5, #0]
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e7e6      	b.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8004d60:	682a      	ldr	r2, [r5, #0]
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	682a      	ldr	r2, [r5, #0]
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e7df      	b.n	8004d36 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8004d76:	2000      	movs	r0, #0
}
 8004d78:	b002      	add	sp, #8
 8004d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7e:	bf00      	nop
 8004d80:	200003f8 	.word	0x200003f8

08004d84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	4607      	mov	r7, r0
 8004d8c:	460d      	mov	r5, r1
 8004d8e:	4616      	mov	r6, r2
 8004d90:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d92:	f7fe f90f 	bl	8002fb4 <HAL_GetTick>
 8004d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d98:	1a1b      	subs	r3, r3, r0
 8004d9a:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 8004d9e:	f7fe f909 	bl	8002fb4 <HAL_GetTick>
 8004da2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004da4:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <SPI_WaitFifoStateUntilTimeout+0xdc>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004dac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004db0:	0d1b      	lsrs	r3, r3, #20
 8004db2:	fb09 f303 	mul.w	r3, r9, r3
 8004db6:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004db8:	e002      	b.n	8004dc0 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dba:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004dbe:	d10c      	bne.n	8004dda <SPI_WaitFifoStateUntilTimeout+0x56>
  while ((hspi->Instance->SR & Fifo) != State)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689c      	ldr	r4, [r3, #8]
 8004dc4:	ea04 0c05 	and.w	ip, r4, r5
 8004dc8:	45b4      	cmp	ip, r6
 8004dca:	d044      	beq.n	8004e56 <SPI_WaitFifoStateUntilTimeout+0xd2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dcc:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8004dd0:	d1f3      	bne.n	8004dba <SPI_WaitFifoStateUntilTimeout+0x36>
 8004dd2:	2e00      	cmp	r6, #0
 8004dd4:	d1f1      	bne.n	8004dba <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004dd6:	7b1b      	ldrb	r3, [r3, #12]
 8004dd8:	e7ef      	b.n	8004dba <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dda:	f7fe f8eb 	bl	8002fb4 <HAL_GetTick>
 8004dde:	eba0 000a 	sub.w	r0, r0, sl
 8004de2:	4548      	cmp	r0, r9
 8004de4:	d20a      	bcs.n	8004dfc <SPI_WaitFifoStateUntilTimeout+0x78>
 8004de6:	f1b9 0f00 	cmp.w	r9, #0
 8004dea:	d007      	beq.n	8004dfc <SPI_WaitFifoStateUntilTimeout+0x78>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004dec:	9a01      	ldr	r2, [sp, #4]
 8004dee:	b102      	cbz	r2, 8004df2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004df0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 8004df2:	9b01      	ldr	r3, [sp, #4]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	4691      	mov	r9, r2
 8004dfa:	e7e1      	b.n	8004dc0 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	6853      	ldr	r3, [r2, #4]
 8004e00:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004e04:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0c:	d00b      	beq.n	8004e26 <SPI_WaitFifoStateUntilTimeout+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e14:	d014      	beq.n	8004e40 <SPI_WaitFifoStateUntilTimeout+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004e22:	2003      	movs	r0, #3
 8004e24:	e018      	b.n	8004e58 <SPI_WaitFifoStateUntilTimeout+0xd4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2c:	d002      	beq.n	8004e34 <SPI_WaitFifoStateUntilTimeout+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e32:	d1ec      	bne.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0x8a>
          __HAL_SPI_DISABLE(hspi);
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	6813      	ldr	r3, [r2, #0]
 8004e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e7e6      	b.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0x8a>
          SPI_RESET_CRC(hspi);
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	6813      	ldr	r3, [r2, #0]
 8004e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	6813      	ldr	r3, [r2, #0]
 8004e4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	e7df      	b.n	8004e16 <SPI_WaitFifoStateUntilTimeout+0x92>
    }
  }

  return HAL_OK;
 8004e56:	2000      	movs	r0, #0
}
 8004e58:	b002      	add	sp, #8
 8004e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5e:	bf00      	nop
 8004e60:	200003f8 	.word	0x200003f8

08004e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e6e:	9200      	str	r2, [sp, #0]
 8004e70:	460b      	mov	r3, r1
 8004e72:	2200      	movs	r2, #0
 8004e74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e78:	f7ff ff84 	bl	8004d84 <SPI_WaitFifoStateUntilTimeout>
 8004e7c:	b9b0      	cbnz	r0, 8004eac <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e7e:	9600      	str	r6, [sp, #0]
 8004e80:	462b      	mov	r3, r5
 8004e82:	2200      	movs	r2, #0
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7ff ff12 	bl	8004cb0 <SPI_WaitFlagStateUntilTimeout>
 8004e8c:	b9a8      	cbnz	r0, 8004eba <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e8e:	9600      	str	r6, [sp, #0]
 8004e90:	462b      	mov	r3, r5
 8004e92:	2200      	movs	r2, #0
 8004e94:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7ff ff73 	bl	8004d84 <SPI_WaitFifoStateUntilTimeout>
 8004e9e:	b150      	cbz	r0, 8004eb6 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ea2:	f043 0320 	orr.w	r3, r3, #32
 8004ea6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ea8:	2003      	movs	r0, #3
 8004eaa:	e004      	b.n	8004eb6 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004eae:	f043 0320 	orr.w	r3, r3, #32
 8004eb2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004eb4:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8004eb6:	b002      	add	sp, #8
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ebc:	f043 0320 	orr.w	r3, r3, #32
 8004ec0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ec2:	2003      	movs	r0, #3
 8004ec4:	e7f7      	b.n	8004eb6 <SPI_EndRxTxTransaction+0x52>

08004ec6 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d06a      	beq.n	8004fa0 <HAL_SPI_Init+0xda>
{
 8004eca:	b510      	push	{r4, lr}
 8004ecc:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ece:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ed0:	b933      	cbnz	r3, 8004ee0 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed2:	6843      	ldr	r3, [r0, #4]
 8004ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed8:	d005      	beq.n	8004ee6 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61c3      	str	r3, [r0, #28]
 8004ede:	e002      	b.n	8004ee6 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ee4:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eea:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d04d      	beq.n	8004f8e <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004ef8:	6822      	ldr	r2, [r4, #0]
 8004efa:	6813      	ldr	r3, [r2, #0]
 8004efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f00:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f02:	68e3      	ldr	r3, [r4, #12]
 8004f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f08:	d947      	bls.n	8004f9a <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f0a:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f0c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f10:	d004      	beq.n	8004f1c <HAL_SPI_Init+0x56>
 8004f12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f16:	d001      	beq.n	8004f1c <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004f22:	68a1      	ldr	r1, [r4, #8]
 8004f24:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6921      	ldr	r1, [r4, #16]
 8004f2c:	f001 0102 	and.w	r1, r1, #2
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6961      	ldr	r1, [r4, #20]
 8004f34:	f001 0101 	and.w	r1, r1, #1
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	69a1      	ldr	r1, [r4, #24]
 8004f3c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004f40:	430b      	orrs	r3, r1
 8004f42:	69e1      	ldr	r1, [r4, #28]
 8004f44:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	6a21      	ldr	r1, [r4, #32]
 8004f4c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004f54:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004f58:	6820      	ldr	r0, [r4, #0]
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f5e:	8b63      	ldrh	r3, [r4, #26]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f66:	f001 0110 	and.w	r1, r1, #16
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f6e:	f001 0108 	and.w	r1, r1, #8
 8004f72:	430b      	orrs	r3, r1
 8004f74:	68e1      	ldr	r1, [r4, #12]
 8004f76:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	6821      	ldr	r1, [r4, #0]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f82:	2000      	movs	r0, #0
 8004f84:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004f8c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004f8e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004f92:	4620      	mov	r0, r4
 8004f94:	f7fd f87e 	bl	8002094 <HAL_SPI_MspInit>
 8004f98:	e7ab      	b.n	8004ef2 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f9e:	e7b5      	b.n	8004f0c <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8004fa0:	2001      	movs	r0, #1
}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_SPI_Transmit>:
{
 8004fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004fac:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f000 80f6 	beq.w	80051a2 <HAL_SPI_Transmit+0x1fe>
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4688      	mov	r8, r1
 8004fba:	4691      	mov	r9, r2
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004fc2:	f7fd fff7 	bl	8002fb4 <HAL_GetTick>
 8004fc6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004fc8:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8004fcc:	b2f6      	uxtb	r6, r6
 8004fce:	2e01      	cmp	r6, #1
 8004fd0:	f040 80d4 	bne.w	800517c <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8004fd4:	f1b8 0f00 	cmp.w	r8, #0
 8004fd8:	f000 80d1 	beq.w	800517e <HAL_SPI_Transmit+0x1da>
 8004fdc:	f1b9 0f00 	cmp.w	r9, #0
 8004fe0:	f000 80cd 	beq.w	800517e <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fee:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ff2:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ff6:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ffa:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ffc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005000:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005004:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005006:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005008:	68a3      	ldr	r3, [r4, #8]
 800500a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500e:	d01e      	beq.n	800504e <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005018:	d103      	bne.n	8005022 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005020:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005022:	68e3      	ldr	r3, [r4, #12]
 8005024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005028:	d942      	bls.n	80050b0 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800502a:	6863      	ldr	r3, [r4, #4]
 800502c:	b113      	cbz	r3, 8005034 <HAL_SPI_Transmit+0x90>
 800502e:	f1b9 0f01 	cmp.w	r9, #1
 8005032:	d123      	bne.n	800507c <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005034:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	8812      	ldrh	r2, [r2, #0]
 800503a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800503c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800503e:	3302      	adds	r3, #2
 8005040:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005042:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29b      	uxth	r3, r3
 800504a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800504c:	e016      	b.n	800507c <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	6813      	ldr	r3, [r2, #0]
 8005052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005056:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	6813      	ldr	r3, [r2, #0]
 800505c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e7d5      	b.n	8005010 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005064:	f7fd ffa6 	bl	8002fb4 <HAL_GetTick>
 8005068:	1bc0      	subs	r0, r0, r7
 800506a:	42a8      	cmp	r0, r5
 800506c:	d303      	bcc.n	8005076 <HAL_SPI_Transmit+0xd2>
 800506e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005072:	f040 808e 	bne.w	8005192 <HAL_SPI_Transmit+0x1ee>
 8005076:	2d00      	cmp	r5, #0
 8005078:	f000 808d 	beq.w	8005196 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 800507c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d066      	beq.n	8005152 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	f012 0f02 	tst.w	r2, #2
 800508c:	d0ea      	beq.n	8005064 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005090:	8812      	ldrh	r2, [r2, #0]
 8005092:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005094:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005096:	3302      	adds	r3, #2
 8005098:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800509a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800509e:	fa1f fc8c 	uxth.w	ip, ip
 80050a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80050a6:	fa1f fc8c 	uxth.w	ip, ip
 80050aa:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 80050ae:	e7e5      	b.n	800507c <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b0:	6863      	ldr	r3, [r4, #4]
 80050b2:	b113      	cbz	r3, 80050ba <HAL_SPI_Transmit+0x116>
 80050b4:	f1b9 0f01 	cmp.w	r9, #1
 80050b8:	d133      	bne.n	8005122 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 80050ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d90c      	bls.n	80050dc <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	8812      	ldrh	r2, [r2, #0]
 80050c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050cc:	3302      	adds	r3, #2
 80050ce:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b02      	subs	r3, #2
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050da:	e022      	b.n	8005122 <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	7812      	ldrb	r2, [r2, #0]
 80050e2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80050e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050e6:	3301      	adds	r3, #1
 80050e8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80050ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80050f4:	e015      	b.n	8005122 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80050fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050fe:	3301      	adds	r3, #1
 8005100:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005102:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29b      	uxth	r3, r3
 800510a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800510c:	e009      	b.n	8005122 <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510e:	f7fd ff51 	bl	8002fb4 <HAL_GetTick>
 8005112:	1bc0      	subs	r0, r0, r7
 8005114:	42a8      	cmp	r0, r5
 8005116:	d302      	bcc.n	800511e <HAL_SPI_Transmit+0x17a>
 8005118:	f1b5 3fff 	cmp.w	r5, #4294967295
 800511c:	d13d      	bne.n	800519a <HAL_SPI_Transmit+0x1f6>
 800511e:	2d00      	cmp	r5, #0
 8005120:	d03d      	beq.n	800519e <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8005122:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	b1a3      	cbz	r3, 8005152 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005128:	6822      	ldr	r2, [r4, #0]
 800512a:	6893      	ldr	r3, [r2, #8]
 800512c:	f013 0f02 	tst.w	r3, #2
 8005130:	d0ed      	beq.n	800510e <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8005132:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d9dd      	bls.n	80050f6 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005142:	3302      	adds	r3, #2
 8005144:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005146:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b02      	subs	r3, #2
 800514c:	b29b      	uxth	r3, r3
 800514e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005150:	e7e7      	b.n	8005122 <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005152:	463a      	mov	r2, r7
 8005154:	4629      	mov	r1, r5
 8005156:	4620      	mov	r0, r4
 8005158:	f7ff fe84 	bl	8004e64 <SPI_EndRxTxTransaction>
 800515c:	b108      	cbz	r0, 8005162 <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800515e:	2320      	movs	r3, #32
 8005160:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005162:	68a3      	ldr	r3, [r4, #8]
 8005164:	b933      	cbnz	r3, 8005174 <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	9201      	str	r2, [sp, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005174:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005176:	b913      	cbnz	r3, 800517e <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005178:	2600      	movs	r6, #0
 800517a:	e000      	b.n	800517e <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 800517c:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800517e:	2301      	movs	r3, #1
 8005180:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005184:	2300      	movs	r3, #0
 8005186:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800518a:	4630      	mov	r0, r6
 800518c:	b003      	add	sp, #12
 800518e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8005192:	2603      	movs	r6, #3
 8005194:	e7f3      	b.n	800517e <HAL_SPI_Transmit+0x1da>
 8005196:	2603      	movs	r6, #3
 8005198:	e7f1      	b.n	800517e <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 800519a:	2603      	movs	r6, #3
 800519c:	e7ef      	b.n	800517e <HAL_SPI_Transmit+0x1da>
 800519e:	2603      	movs	r6, #3
 80051a0:	e7ed      	b.n	800517e <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 80051a2:	2602      	movs	r6, #2
 80051a4:	e7f1      	b.n	800518a <HAL_SPI_Transmit+0x1e6>

080051a6 <HAL_SPI_TransmitReceive>:
{
 80051a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051aa:	461f      	mov	r7, r3
 80051ac:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80051ae:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	f000 8164 	beq.w	8005480 <HAL_SPI_TransmitReceive+0x2da>
 80051b8:	4604      	mov	r4, r0
 80051ba:	4688      	mov	r8, r1
 80051bc:	4691      	mov	r9, r2
 80051be:	2301      	movs	r3, #1
 80051c0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80051c4:	f7fd fef6 	bl	8002fb4 <HAL_GetTick>
 80051c8:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80051ca:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80051ce:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80051d0:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d00a      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x46>
 80051d6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80051da:	f040 8138 	bne.w	800544e <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051de:	68a2      	ldr	r2, [r4, #8]
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	f040 813d 	bne.w	8005460 <HAL_SPI_TransmitReceive+0x2ba>
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	f040 813c 	bne.w	8005464 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051ec:	f1b8 0f00 	cmp.w	r8, #0
 80051f0:	f000 813a 	beq.w	8005468 <HAL_SPI_TransmitReceive+0x2c2>
 80051f4:	f1b9 0f00 	cmp.w	r9, #0
 80051f8:	f000 8138 	beq.w	800546c <HAL_SPI_TransmitReceive+0x2c6>
 80051fc:	2f00      	cmp	r7, #0
 80051fe:	f000 8137 	beq.w	8005470 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005202:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b04      	cmp	r3, #4
 800520a:	d002      	beq.n	8005212 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800520c:	2305      	movs	r3, #5
 800520e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005212:	2300      	movs	r3, #0
 8005214:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005216:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800521a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800521e:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005222:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005226:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005228:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800522a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800522c:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800522e:	68e3      	ldr	r3, [r4, #12]
 8005230:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005234:	d801      	bhi.n	800523a <HAL_SPI_TransmitReceive+0x94>
 8005236:	2f01      	cmp	r7, #1
 8005238:	d923      	bls.n	8005282 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	6853      	ldr	r3, [r2, #4]
 800523e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005242:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	f012 0f40 	tst.w	r2, #64	; 0x40
 800524c:	d103      	bne.n	8005256 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005254:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005256:	68e3      	ldr	r3, [r4, #12]
 8005258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800525c:	d958      	bls.n	8005310 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	b10b      	cbz	r3, 8005266 <HAL_SPI_TransmitReceive+0xc0>
 8005262:	2f01      	cmp	r7, #1
 8005264:	d10b      	bne.n	800527e <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005266:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	8812      	ldrh	r2, [r2, #0]
 800526c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800526e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005270:	3302      	adds	r3, #2
 8005272:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005274:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29b      	uxth	r3, r3
 800527c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800527e:	2701      	movs	r7, #1
 8005280:	e031      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005282:	6822      	ldr	r2, [r4, #0]
 8005284:	6853      	ldr	r3, [r2, #4]
 8005286:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800528a:	6053      	str	r3, [r2, #4]
 800528c:	e7da      	b.n	8005244 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800528e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005290:	8812      	ldrh	r2, [r2, #0]
 8005292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005296:	3302      	adds	r3, #2
 8005298:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800529a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80052a4:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	f012 0f01 	tst.w	r2, #1
 80052ae:	d011      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x12e>
 80052b0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80052b4:	b292      	uxth	r2, r2
 80052b6:	b16a      	cbz	r2, 80052d4 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052c0:	3302      	adds	r3, #2
 80052c2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80052c4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80052d2:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052d4:	f7fd fe6e 	bl	8002fb4 <HAL_GetTick>
 80052d8:	1b83      	subs	r3, r0, r6
 80052da:	42ab      	cmp	r3, r5
 80052dc:	d303      	bcc.n	80052e6 <HAL_SPI_TransmitReceive+0x140>
 80052de:	f1b5 3fff 	cmp.w	r5, #4294967295
 80052e2:	f040 80c7 	bne.w	8005474 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	b92b      	cbnz	r3, 80052f8 <HAL_SPI_TransmitReceive+0x152>
 80052ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80a1 	beq.w	800543a <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	f012 0f02 	tst.w	r2, #2
 8005300:	d0d1      	beq.n	80052a6 <HAL_SPI_TransmitReceive+0x100>
 8005302:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005304:	b292      	uxth	r2, r2
 8005306:	2a00      	cmp	r2, #0
 8005308:	d0cd      	beq.n	80052a6 <HAL_SPI_TransmitReceive+0x100>
 800530a:	2f00      	cmp	r7, #0
 800530c:	d0cb      	beq.n	80052a6 <HAL_SPI_TransmitReceive+0x100>
 800530e:	e7be      	b.n	800528e <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005310:	6863      	ldr	r3, [r4, #4]
 8005312:	b10b      	cbz	r3, 8005318 <HAL_SPI_TransmitReceive+0x172>
 8005314:	2f01      	cmp	r7, #1
 8005316:	d10f      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8005318:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d90d      	bls.n	800533c <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005320:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	8812      	ldrh	r2, [r2, #0]
 8005326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005328:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800532a:	3302      	adds	r3, #2
 800532c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800532e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b02      	subs	r3, #2
 8005334:	b29b      	uxth	r3, r3
 8005336:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005338:	2701      	movs	r7, #1
 800533a:	e049      	b.n	80053d0 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800533c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005346:	3301      	adds	r3, #1
 8005348:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800534a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29b      	uxth	r3, r3
 8005352:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005354:	e7f0      	b.n	8005338 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8005356:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005358:	b292      	uxth	r2, r2
 800535a:	2a01      	cmp	r2, #1
 800535c:	d90c      	bls.n	8005378 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005360:	8812      	ldrh	r2, [r2, #0]
 8005362:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005366:	3302      	adds	r3, #2
 8005368:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800536a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b02      	subs	r3, #2
 8005370:	b29b      	uxth	r3, r3
 8005372:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005374:	2700      	movs	r7, #0
 8005376:	e03d      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005378:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800537a:	7812      	ldrb	r2, [r2, #0]
 800537c:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800537e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005380:	3301      	adds	r3, #1
 8005382:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005384:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800538e:	2700      	movs	r7, #0
 8005390:	e030      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	6853      	ldr	r3, [r2, #4]
 8005396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800539a:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800539c:	2701      	movs	r7, #1
 800539e:	e00d      	b.n	80053bc <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053a2:	7b1b      	ldrb	r3, [r3, #12]
 80053a4:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80053a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053a8:	3301      	adds	r3, #1
 80053aa:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80053ac:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80053ba:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053bc:	f7fd fdfa 	bl	8002fb4 <HAL_GetTick>
 80053c0:	1b80      	subs	r0, r0, r6
 80053c2:	42a8      	cmp	r0, r5
 80053c4:	d302      	bcc.n	80053cc <HAL_SPI_TransmitReceive+0x226>
 80053c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80053ca:	d155      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x2d2>
 80053cc:	2d00      	cmp	r5, #0
 80053ce:	d055      	beq.n	800547c <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	b923      	cbnz	r3, 80053e0 <HAL_SPI_TransmitReceive+0x23a>
 80053d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02c      	beq.n	800543a <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	f012 0f02 	tst.w	r2, #2
 80053e8:	d004      	beq.n	80053f4 <HAL_SPI_TransmitReceive+0x24e>
 80053ea:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80053ec:	b292      	uxth	r2, r2
 80053ee:	b10a      	cbz	r2, 80053f4 <HAL_SPI_TransmitReceive+0x24e>
 80053f0:	2f00      	cmp	r7, #0
 80053f2:	d1b0      	bne.n	8005356 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	f012 0f01 	tst.w	r2, #1
 80053fc:	d0de      	beq.n	80053bc <HAL_SPI_TransmitReceive+0x216>
 80053fe:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005402:	b292      	uxth	r2, r2
 8005404:	2a00      	cmp	r2, #0
 8005406:	d0d9      	beq.n	80053bc <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8005408:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800540c:	b292      	uxth	r2, r2
 800540e:	2a01      	cmp	r2, #1
 8005410:	d9c6      	bls.n	80053a0 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005416:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800541a:	3302      	adds	r3, #2
 800541c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800541e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b02      	subs	r3, #2
 8005426:	b29b      	uxth	r3, r3
 8005428:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800542c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d9ad      	bls.n	8005392 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8005436:	2701      	movs	r7, #1
 8005438:	e7c0      	b.n	80053bc <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800543a:	4632      	mov	r2, r6
 800543c:	4629      	mov	r1, r5
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff fd10 	bl	8004e64 <SPI_EndRxTxTransaction>
 8005444:	b120      	cbz	r0, 8005450 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005446:	2320      	movs	r3, #32
 8005448:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800544a:	2001      	movs	r0, #1
 800544c:	e000      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 800544e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005450:	2301      	movs	r3, #1
 8005452:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005456:	2300      	movs	r3, #0
 8005458:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800545c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8005460:	2002      	movs	r0, #2
 8005462:	e7f5      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2aa>
 8005464:	2002      	movs	r0, #2
 8005466:	e7f3      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8005468:	2001      	movs	r0, #1
 800546a:	e7f1      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2aa>
 800546c:	2001      	movs	r0, #1
 800546e:	e7ef      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2aa>
 8005470:	2001      	movs	r0, #1
 8005472:	e7ed      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8005474:	2003      	movs	r0, #3
 8005476:	e7eb      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8005478:	2003      	movs	r0, #3
 800547a:	e7e9      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2aa>
 800547c:	2003      	movs	r0, #3
 800547e:	e7e7      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8005480:	2002      	movs	r0, #2
 8005482:	e7eb      	b.n	800545c <HAL_SPI_TransmitReceive+0x2b6>

08005484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005486:	6a03      	ldr	r3, [r0, #32]
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005492:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005494:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005498:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800549c:	680c      	ldr	r4, [r1, #0]
 800549e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054a0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054a4:	688c      	ldr	r4, [r1, #8]
 80054a6:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054a8:	4c1d      	ldr	r4, [pc, #116]	; (8005520 <TIM_OC1_SetConfig+0x9c>)
 80054aa:	42a0      	cmp	r0, r4
 80054ac:	d00f      	beq.n	80054ce <TIM_OC1_SetConfig+0x4a>
 80054ae:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80054b2:	42a0      	cmp	r0, r4
 80054b4:	d00b      	beq.n	80054ce <TIM_OC1_SetConfig+0x4a>
 80054b6:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80054ba:	42a0      	cmp	r0, r4
 80054bc:	d007      	beq.n	80054ce <TIM_OC1_SetConfig+0x4a>
 80054be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80054c2:	42a0      	cmp	r0, r4
 80054c4:	d003      	beq.n	80054ce <TIM_OC1_SetConfig+0x4a>
 80054c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80054ca:	42a0      	cmp	r0, r4
 80054cc:	d105      	bne.n	80054da <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054ce:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054d2:	68cc      	ldr	r4, [r1, #12]
 80054d4:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054d6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054da:	4c11      	ldr	r4, [pc, #68]	; (8005520 <TIM_OC1_SetConfig+0x9c>)
 80054dc:	42a0      	cmp	r0, r4
 80054de:	d00f      	beq.n	8005500 <TIM_OC1_SetConfig+0x7c>
 80054e0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80054e4:	42a0      	cmp	r0, r4
 80054e6:	d00b      	beq.n	8005500 <TIM_OC1_SetConfig+0x7c>
 80054e8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80054ec:	42a0      	cmp	r0, r4
 80054ee:	d007      	beq.n	8005500 <TIM_OC1_SetConfig+0x7c>
 80054f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80054f4:	42a0      	cmp	r0, r4
 80054f6:	d003      	beq.n	8005500 <TIM_OC1_SetConfig+0x7c>
 80054f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80054fc:	42a0      	cmp	r0, r4
 80054fe:	d107      	bne.n	8005510 <TIM_OC1_SetConfig+0x8c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005500:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005504:	694c      	ldr	r4, [r1, #20]
 8005506:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800550a:	698d      	ldr	r5, [r1, #24]
 800550c:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005510:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005512:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005514:	684a      	ldr	r2, [r1, #4]
 8005516:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005518:	6203      	str	r3, [r0, #32]
}
 800551a:	bc30      	pop	{r4, r5}
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40012c00 	.word	0x40012c00

08005524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005526:	6a03      	ldr	r3, [r0, #32]
 8005528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005532:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005534:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005538:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800553c:	680d      	ldr	r5, [r1, #0]
 800553e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005544:	688d      	ldr	r5, [r1, #8]
 8005546:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800554a:	4d18      	ldr	r5, [pc, #96]	; (80055ac <TIM_OC3_SetConfig+0x88>)
 800554c:	42a8      	cmp	r0, r5
 800554e:	d003      	beq.n	8005558 <TIM_OC3_SetConfig+0x34>
 8005550:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005554:	42a8      	cmp	r0, r5
 8005556:	d106      	bne.n	8005566 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800555c:	68cd      	ldr	r5, [r1, #12]
 800555e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005566:	4d11      	ldr	r5, [pc, #68]	; (80055ac <TIM_OC3_SetConfig+0x88>)
 8005568:	42a8      	cmp	r0, r5
 800556a:	d00f      	beq.n	800558c <TIM_OC3_SetConfig+0x68>
 800556c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005570:	42a8      	cmp	r0, r5
 8005572:	d00b      	beq.n	800558c <TIM_OC3_SetConfig+0x68>
 8005574:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005578:	42a8      	cmp	r0, r5
 800557a:	d007      	beq.n	800558c <TIM_OC3_SetConfig+0x68>
 800557c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005580:	42a8      	cmp	r0, r5
 8005582:	d003      	beq.n	800558c <TIM_OC3_SetConfig+0x68>
 8005584:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005588:	42a8      	cmp	r0, r5
 800558a:	d107      	bne.n	800559c <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800558c:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005590:	694c      	ldr	r4, [r1, #20]
 8005592:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005596:	698c      	ldr	r4, [r1, #24]
 8005598:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800559e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055a0:	684a      	ldr	r2, [r1, #4]
 80055a2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a4:	6203      	str	r3, [r0, #32]
}
 80055a6:	bc30      	pop	{r4, r5}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40012c00 	.word	0x40012c00

080055b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055b2:	6a03      	ldr	r3, [r0, #32]
 80055b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80055c4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c8:	680d      	ldr	r5, [r1, #0]
 80055ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055d2:	688d      	ldr	r5, [r1, #8]
 80055d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d8:	4d0f      	ldr	r5, [pc, #60]	; (8005618 <TIM_OC4_SetConfig+0x68>)
 80055da:	42a8      	cmp	r0, r5
 80055dc:	d00f      	beq.n	80055fe <TIM_OC4_SetConfig+0x4e>
 80055de:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80055e2:	42a8      	cmp	r0, r5
 80055e4:	d00b      	beq.n	80055fe <TIM_OC4_SetConfig+0x4e>
 80055e6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80055ea:	42a8      	cmp	r0, r5
 80055ec:	d007      	beq.n	80055fe <TIM_OC4_SetConfig+0x4e>
 80055ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055f2:	42a8      	cmp	r0, r5
 80055f4:	d003      	beq.n	80055fe <TIM_OC4_SetConfig+0x4e>
 80055f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055fa:	42a8      	cmp	r0, r5
 80055fc:	d104      	bne.n	8005608 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055fe:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005602:	694d      	ldr	r5, [r1, #20]
 8005604:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005608:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800560a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800560c:	684a      	ldr	r2, [r1, #4]
 800560e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005610:	6203      	str	r3, [r0, #32]
}
 8005612:	bc30      	pop	{r4, r5}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40012c00 	.word	0x40012c00

0800561c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800561e:	6a03      	ldr	r3, [r0, #32]
 8005620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005624:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005626:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005628:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800562a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800562c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005630:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005634:	680d      	ldr	r5, [r1, #0]
 8005636:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005638:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800563c:	688d      	ldr	r5, [r1, #8]
 800563e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005642:	4d0f      	ldr	r5, [pc, #60]	; (8005680 <TIM_OC5_SetConfig+0x64>)
 8005644:	42a8      	cmp	r0, r5
 8005646:	d00f      	beq.n	8005668 <TIM_OC5_SetConfig+0x4c>
 8005648:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800564c:	42a8      	cmp	r0, r5
 800564e:	d00b      	beq.n	8005668 <TIM_OC5_SetConfig+0x4c>
 8005650:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005654:	42a8      	cmp	r0, r5
 8005656:	d007      	beq.n	8005668 <TIM_OC5_SetConfig+0x4c>
 8005658:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800565c:	42a8      	cmp	r0, r5
 800565e:	d003      	beq.n	8005668 <TIM_OC5_SetConfig+0x4c>
 8005660:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005664:	42a8      	cmp	r0, r5
 8005666:	d104      	bne.n	8005672 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005668:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800566c:	694d      	ldr	r5, [r1, #20]
 800566e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005672:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005674:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005676:	684a      	ldr	r2, [r1, #4]
 8005678:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567a:	6203      	str	r3, [r0, #32]
}
 800567c:	bc30      	pop	{r4, r5}
 800567e:	4770      	bx	lr
 8005680:	40012c00 	.word	0x40012c00

08005684 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005686:	6a03      	ldr	r3, [r0, #32]
 8005688:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800568c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005692:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005694:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005698:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	680d      	ldr	r5, [r1, #0]
 800569e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056a6:	688d      	ldr	r5, [r1, #8]
 80056a8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ac:	4d0f      	ldr	r5, [pc, #60]	; (80056ec <TIM_OC6_SetConfig+0x68>)
 80056ae:	42a8      	cmp	r0, r5
 80056b0:	d00f      	beq.n	80056d2 <TIM_OC6_SetConfig+0x4e>
 80056b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80056b6:	42a8      	cmp	r0, r5
 80056b8:	d00b      	beq.n	80056d2 <TIM_OC6_SetConfig+0x4e>
 80056ba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80056be:	42a8      	cmp	r0, r5
 80056c0:	d007      	beq.n	80056d2 <TIM_OC6_SetConfig+0x4e>
 80056c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056c6:	42a8      	cmp	r0, r5
 80056c8:	d003      	beq.n	80056d2 <TIM_OC6_SetConfig+0x4e>
 80056ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056ce:	42a8      	cmp	r0, r5
 80056d0:	d104      	bne.n	80056dc <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056d2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056d6:	694d      	ldr	r5, [r1, #20]
 80056d8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056de:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056e0:	684a      	ldr	r2, [r1, #4]
 80056e2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e4:	6203      	str	r3, [r0, #32]
}
 80056e6:	bc30      	pop	{r4, r5}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40012c00 	.word	0x40012c00

080056f0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80056f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d136      	bne.n	8005768 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 80056fa:	2302      	movs	r3, #2
 80056fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005700:	6802      	ldr	r2, [r0, #0]
 8005702:	68d3      	ldr	r3, [r2, #12]
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570a:	6803      	ldr	r3, [r0, #0]
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <HAL_TIM_Base_Start_IT+0x84>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01c      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x5c>
 8005712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005716:	d019      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x5c>
 8005718:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800571c:	4293      	cmp	r3, r2
 800571e:	d015      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x5c>
 8005720:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005724:	4293      	cmp	r3, r2
 8005726:	d011      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x5c>
 8005728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800572c:	4293      	cmp	r3, r2
 800572e:	d00d      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x5c>
 8005730:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005734:	4293      	cmp	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x5c>
 8005738:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800573c:	4293      	cmp	r3, r2
 800573e:	d005      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005748:	2000      	movs	r0, #0
 800574a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574c:	6899      	ldr	r1, [r3, #8]
 800574e:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <HAL_TIM_Base_Start_IT+0x88>)
 8005750:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	2a06      	cmp	r2, #6
 8005754:	d00a      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x7c>
 8005756:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800575a:	d009      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005764:	2000      	movs	r0, #0
 8005766:	4770      	bx	lr
    return HAL_ERROR;
 8005768:	2001      	movs	r0, #1
 800576a:	4770      	bx	lr
  return HAL_OK;
 800576c:	2000      	movs	r0, #0
 800576e:	4770      	bx	lr
 8005770:	2000      	movs	r0, #0
}
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00
 8005778:	00010007 	.word	0x00010007

0800577c <HAL_TIM_PeriodElapsedCallback>:
}
 800577c:	4770      	bx	lr

0800577e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_IC_CaptureCallback>:
}
 8005780:	4770      	bx	lr

08005782 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005782:	4770      	bx	lr

08005784 <HAL_TIM_TriggerCallback>:
}
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_IRQHandler>:
{
 8005786:	b510      	push	{r4, lr}
 8005788:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800578a:	6803      	ldr	r3, [r0, #0]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	f012 0f02 	tst.w	r2, #2
 8005792:	d011      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	f012 0f02 	tst.w	r2, #2
 800579a:	d00d      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800579c:	f06f 0202 	mvn.w	r2, #2
 80057a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057a2:	2301      	movs	r3, #1
 80057a4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a6:	6803      	ldr	r3, [r0, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f013 0f03 	tst.w	r3, #3
 80057ae:	d079      	beq.n	80058a4 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80057b0:	f7ff ffe6 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b4:	2300      	movs	r3, #0
 80057b6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	f012 0f04 	tst.w	r2, #4
 80057c0:	d012      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	f012 0f04 	tst.w	r2, #4
 80057c8:	d00e      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057ca:	f06f 0204 	mvn.w	r2, #4
 80057ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057d0:	2302      	movs	r3, #2
 80057d2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80057dc:	d068      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80057de:	4620      	mov	r0, r4
 80057e0:	f7ff ffce 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e4:	2300      	movs	r3, #0
 80057e6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	f012 0f08 	tst.w	r2, #8
 80057f0:	d012      	beq.n	8005818 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	f012 0f08 	tst.w	r2, #8
 80057f8:	d00e      	beq.n	8005818 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057fa:	f06f 0208 	mvn.w	r2, #8
 80057fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005800:	2304      	movs	r3, #4
 8005802:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	f013 0f03 	tst.w	r3, #3
 800580c:	d057      	beq.n	80058be <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800580e:	4620      	mov	r0, r4
 8005810:	f7ff ffb6 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005814:	2300      	movs	r3, #0
 8005816:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	f012 0f10 	tst.w	r2, #16
 8005820:	d012      	beq.n	8005848 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	f012 0f10 	tst.w	r2, #16
 8005828:	d00e      	beq.n	8005848 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800582a:	f06f 0210 	mvn.w	r2, #16
 800582e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005830:	2308      	movs	r3, #8
 8005832:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f413 7f40 	tst.w	r3, #768	; 0x300
 800583c:	d046      	beq.n	80058cc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800583e:	4620      	mov	r0, r4
 8005840:	f7ff ff9e 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005844:	2300      	movs	r3, #0
 8005846:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	f012 0f01 	tst.w	r2, #1
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	f012 0f01 	tst.w	r2, #1
 8005858:	d13f      	bne.n	80058da <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005862:	d003      	beq.n	800586c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	f012 0f80 	tst.w	r2, #128	; 0x80
 800586a:	d13d      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	f012 0f80 	tst.w	r2, #128	; 0x80
 800587c:	d13b      	bne.n	80058f6 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005886:	d003      	beq.n	8005890 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800588e:	d139      	bne.n	8005904 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	f012 0f20 	tst.w	r2, #32
 8005898:	d003      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	f012 0f20 	tst.w	r2, #32
 80058a0:	d137      	bne.n	8005912 <HAL_TIM_IRQHandler+0x18c>
}
 80058a2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a4:	f7ff ff6b 	bl	800577e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff ff6a 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
 80058ae:	e781      	b.n	80057b4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7ff ff64 	bl	800577e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b6:	4620      	mov	r0, r4
 80058b8:	f7ff ff63 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
 80058bc:	e792      	b.n	80057e4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058be:	4620      	mov	r0, r4
 80058c0:	f7ff ff5d 	bl	800577e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c4:	4620      	mov	r0, r4
 80058c6:	f7ff ff5c 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
 80058ca:	e7a3      	b.n	8005814 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058cc:	4620      	mov	r0, r4
 80058ce:	f7ff ff56 	bl	800577e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7ff ff55 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
 80058d8:	e7b4      	b.n	8005844 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058da:	f06f 0201 	mvn.w	r2, #1
 80058de:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff ff4b 	bl	800577c <HAL_TIM_PeriodElapsedCallback>
 80058e6:	e7b8      	b.n	800585a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fa49 	bl	8005d86 <HAL_TIMEx_BreakCallback>
 80058f4:	e7ba      	b.n	800586c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 fa43 	bl	8005d88 <HAL_TIMEx_Break2Callback>
 8005902:	e7bc      	b.n	800587e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005904:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005908:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800590a:	4620      	mov	r0, r4
 800590c:	f7ff ff3a 	bl	8005784 <HAL_TIM_TriggerCallback>
 8005910:	e7be      	b.n	8005890 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005912:	f06f 0220 	mvn.w	r2, #32
 8005916:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005918:	4620      	mov	r0, r4
 800591a:	f000 fa33 	bl	8005d84 <HAL_TIMEx_CommutCallback>
}
 800591e:	e7c0      	b.n	80058a2 <HAL_TIM_IRQHandler+0x11c>

08005920 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005920:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005922:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <TIM_Base_SetConfig+0xc4>)
 8005924:	4290      	cmp	r0, r2
 8005926:	d012      	beq.n	800594e <TIM_Base_SetConfig+0x2e>
 8005928:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800592c:	d00f      	beq.n	800594e <TIM_Base_SetConfig+0x2e>
 800592e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005932:	4290      	cmp	r0, r2
 8005934:	d00b      	beq.n	800594e <TIM_Base_SetConfig+0x2e>
 8005936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800593a:	4290      	cmp	r0, r2
 800593c:	d007      	beq.n	800594e <TIM_Base_SetConfig+0x2e>
 800593e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005942:	4290      	cmp	r0, r2
 8005944:	d003      	beq.n	800594e <TIM_Base_SetConfig+0x2e>
 8005946:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800594a:	4290      	cmp	r0, r2
 800594c:	d103      	bne.n	8005956 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005952:	684a      	ldr	r2, [r1, #4]
 8005954:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005956:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <TIM_Base_SetConfig+0xc4>)
 8005958:	4290      	cmp	r0, r2
 800595a:	d01e      	beq.n	800599a <TIM_Base_SetConfig+0x7a>
 800595c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005960:	d01b      	beq.n	800599a <TIM_Base_SetConfig+0x7a>
 8005962:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005966:	4290      	cmp	r0, r2
 8005968:	d017      	beq.n	800599a <TIM_Base_SetConfig+0x7a>
 800596a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800596e:	4290      	cmp	r0, r2
 8005970:	d013      	beq.n	800599a <TIM_Base_SetConfig+0x7a>
 8005972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005976:	4290      	cmp	r0, r2
 8005978:	d00f      	beq.n	800599a <TIM_Base_SetConfig+0x7a>
 800597a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800597e:	4290      	cmp	r0, r2
 8005980:	d00b      	beq.n	800599a <TIM_Base_SetConfig+0x7a>
 8005982:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005986:	4290      	cmp	r0, r2
 8005988:	d007      	beq.n	800599a <TIM_Base_SetConfig+0x7a>
 800598a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800598e:	4290      	cmp	r0, r2
 8005990:	d003      	beq.n	800599a <TIM_Base_SetConfig+0x7a>
 8005992:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005996:	4290      	cmp	r0, r2
 8005998:	d103      	bne.n	80059a2 <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 800599a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800599e:	68ca      	ldr	r2, [r1, #12]
 80059a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a6:	694a      	ldr	r2, [r1, #20]
 80059a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80059aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ac:	688b      	ldr	r3, [r1, #8]
 80059ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059b0:	680b      	ldr	r3, [r1, #0]
 80059b2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <TIM_Base_SetConfig+0xc4>)
 80059b6:	4298      	cmp	r0, r3
 80059b8:	d00f      	beq.n	80059da <TIM_Base_SetConfig+0xba>
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	4298      	cmp	r0, r3
 80059c0:	d00b      	beq.n	80059da <TIM_Base_SetConfig+0xba>
 80059c2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80059c6:	4298      	cmp	r0, r3
 80059c8:	d007      	beq.n	80059da <TIM_Base_SetConfig+0xba>
 80059ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ce:	4298      	cmp	r0, r3
 80059d0:	d003      	beq.n	80059da <TIM_Base_SetConfig+0xba>
 80059d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059d6:	4298      	cmp	r0, r3
 80059d8:	d101      	bne.n	80059de <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80059da:	690b      	ldr	r3, [r1, #16]
 80059dc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80059de:	2301      	movs	r3, #1
 80059e0:	6143      	str	r3, [r0, #20]
}
 80059e2:	4770      	bx	lr
 80059e4:	40012c00 	.word	0x40012c00

080059e8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80059e8:	b360      	cbz	r0, 8005a44 <HAL_TIM_Base_Init+0x5c>
{
 80059ea:	b510      	push	{r4, lr}
 80059ec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80059ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059f2:	b313      	cbz	r3, 8005a3a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	2302      	movs	r3, #2
 80059f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fa:	4621      	mov	r1, r4
 80059fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8005a00:	f7ff ff8e 	bl	8005920 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005a0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005a12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005a16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005a1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005a26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a2a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005a2e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005a32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a36:	2000      	movs	r0, #0
}
 8005a38:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005a3e:	f7fc fb5f 	bl	8002100 <HAL_TIM_Base_MspInit>
 8005a42:	e7d7      	b.n	80059f4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005a44:	2001      	movs	r0, #1
}
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005a48:	b360      	cbz	r0, 8005aa4 <HAL_TIM_PWM_Init+0x5c>
{
 8005a4a:	b510      	push	{r4, lr}
 8005a4c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a52:	b313      	cbz	r3, 8005a9a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	2302      	movs	r3, #2
 8005a56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005a60:	f7ff ff5e 	bl	8005920 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005a6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005a72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005a76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005a7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a8a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005a8e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005a92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a96:	2000      	movs	r0, #0
}
 8005a98:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005a9e:	f7fc fb4f 	bl	8002140 <HAL_TIM_PWM_MspInit>
 8005aa2:	e7d7      	b.n	8005a54 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005aa4:	2001      	movs	r0, #1
}
 8005aa6:	4770      	bx	lr

08005aa8 <TIM_OC2_SetConfig>:
{
 8005aa8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aaa:	6a03      	ldr	r3, [r0, #32]
 8005aac:	f023 0310 	bic.w	r3, r3, #16
 8005ab0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005ab2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005ab4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005ab6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005abc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac0:	680d      	ldr	r5, [r1, #0]
 8005ac2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005ac6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aca:	688d      	ldr	r5, [r1, #8]
 8005acc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ad0:	4d17      	ldr	r5, [pc, #92]	; (8005b30 <TIM_OC2_SetConfig+0x88>)
 8005ad2:	42a8      	cmp	r0, r5
 8005ad4:	d003      	beq.n	8005ade <TIM_OC2_SetConfig+0x36>
 8005ad6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ada:	42a8      	cmp	r0, r5
 8005adc:	d106      	bne.n	8005aec <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae2:	68cd      	ldr	r5, [r1, #12]
 8005ae4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aec:	4d10      	ldr	r5, [pc, #64]	; (8005b30 <TIM_OC2_SetConfig+0x88>)
 8005aee:	42a8      	cmp	r0, r5
 8005af0:	d00f      	beq.n	8005b12 <TIM_OC2_SetConfig+0x6a>
 8005af2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005af6:	42a8      	cmp	r0, r5
 8005af8:	d00b      	beq.n	8005b12 <TIM_OC2_SetConfig+0x6a>
 8005afa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005afe:	42a8      	cmp	r0, r5
 8005b00:	d007      	beq.n	8005b12 <TIM_OC2_SetConfig+0x6a>
 8005b02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b06:	42a8      	cmp	r0, r5
 8005b08:	d003      	beq.n	8005b12 <TIM_OC2_SetConfig+0x6a>
 8005b0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b0e:	42a8      	cmp	r0, r5
 8005b10:	d107      	bne.n	8005b22 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b12:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b16:	694c      	ldr	r4, [r1, #20]
 8005b18:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b1c:	698c      	ldr	r4, [r1, #24]
 8005b1e:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8005b22:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005b24:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005b26:	684a      	ldr	r2, [r1, #4]
 8005b28:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005b2a:	6203      	str	r3, [r0, #32]
}
 8005b2c:	bc30      	pop	{r4, r5}
 8005b2e:	4770      	bx	lr
 8005b30:	40012c00 	.word	0x40012c00

08005b34 <HAL_TIM_PWM_ConfigChannel>:
{
 8005b34:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005b36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	f000 808c 	beq.w	8005c58 <HAL_TIM_PWM_ConfigChannel+0x124>
 8005b40:	4604      	mov	r4, r0
 8005b42:	460d      	mov	r5, r1
 8005b44:	2301      	movs	r3, #1
 8005b46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005b4a:	2a14      	cmp	r2, #20
 8005b4c:	d81e      	bhi.n	8005b8c <HAL_TIM_PWM_ConfigChannel+0x58>
 8005b4e:	e8df f002 	tbb	[pc, r2]
 8005b52:	1d0b      	.short	0x1d0b
 8005b54:	1d211d1d 	.word	0x1d211d1d
 8005b58:	1d351d1d 	.word	0x1d351d1d
 8005b5c:	1d481d1d 	.word	0x1d481d1d
 8005b60:	1d5c1d1d 	.word	0x1d5c1d1d
 8005b64:	1d1d      	.short	0x1d1d
 8005b66:	6f          	.byte	0x6f
 8005b67:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b68:	6800      	ldr	r0, [r0, #0]
 8005b6a:	f7ff fc8b 	bl	8005484 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	6993      	ldr	r3, [r2, #24]
 8005b72:	f043 0308 	orr.w	r3, r3, #8
 8005b76:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	6993      	ldr	r3, [r2, #24]
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	6993      	ldr	r3, [r2, #24]
 8005b86:	6929      	ldr	r1, [r5, #16]
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b94:	6800      	ldr	r0, [r0, #0]
 8005b96:	f7ff ff87 	bl	8005aa8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	6993      	ldr	r3, [r2, #24]
 8005b9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ba2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ba4:	6822      	ldr	r2, [r4, #0]
 8005ba6:	6993      	ldr	r3, [r2, #24]
 8005ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	6993      	ldr	r3, [r2, #24]
 8005bb2:	6929      	ldr	r1, [r5, #16]
 8005bb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005bb8:	6193      	str	r3, [r2, #24]
      break;
 8005bba:	e7e7      	b.n	8005b8c <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bbc:	6800      	ldr	r0, [r0, #0]
 8005bbe:	f7ff fcb1 	bl	8005524 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	69d3      	ldr	r3, [r2, #28]
 8005bc6:	f043 0308 	orr.w	r3, r3, #8
 8005bca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	69d3      	ldr	r3, [r2, #28]
 8005bd0:	f023 0304 	bic.w	r3, r3, #4
 8005bd4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	69d3      	ldr	r3, [r2, #28]
 8005bda:	6929      	ldr	r1, [r5, #16]
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	61d3      	str	r3, [r2, #28]
      break;
 8005be0:	e7d4      	b.n	8005b8c <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005be2:	6800      	ldr	r0, [r0, #0]
 8005be4:	f7ff fce4 	bl	80055b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005be8:	6822      	ldr	r2, [r4, #0]
 8005bea:	69d3      	ldr	r3, [r2, #28]
 8005bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005bf0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	69d3      	ldr	r3, [r2, #28]
 8005bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bfa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	69d3      	ldr	r3, [r2, #28]
 8005c00:	6929      	ldr	r1, [r5, #16]
 8005c02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c06:	61d3      	str	r3, [r2, #28]
      break;
 8005c08:	e7c0      	b.n	8005b8c <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c0a:	6800      	ldr	r0, [r0, #0]
 8005c0c:	f7ff fd06 	bl	800561c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005c14:	f043 0308 	orr.w	r3, r3, #8
 8005c18:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005c1e:	f023 0304 	bic.w	r3, r3, #4
 8005c22:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c24:	6822      	ldr	r2, [r4, #0]
 8005c26:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005c28:	6929      	ldr	r1, [r5, #16]
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8005c2e:	e7ad      	b.n	8005b8c <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c30:	6800      	ldr	r0, [r0, #0]
 8005c32:	f7ff fd27 	bl	8005684 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005c3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c3e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c40:	6822      	ldr	r2, [r4, #0]
 8005c42:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c48:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005c4e:	6929      	ldr	r1, [r5, #16]
 8005c50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c54:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8005c56:	e799      	b.n	8005b8c <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 8005c58:	2002      	movs	r0, #2
 8005c5a:	e79a      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x5e>

08005c5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d042      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8005c64:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005c66:	2301      	movs	r3, #1
 8005c68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c72:	6802      	ldr	r2, [r0, #0]
 8005c74:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c76:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c78:	4d1d      	ldr	r5, [pc, #116]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8005c7a:	42aa      	cmp	r2, r5
 8005c7c:	d003      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8005c7e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c82:	42aa      	cmp	r2, r5
 8005c84:	d103      	bne.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c8a:	684d      	ldr	r5, [r1, #4]
 8005c8c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c92:	680d      	ldr	r5, [r1, #0]
 8005c94:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c96:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c98:	6803      	ldr	r3, [r0, #0]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d016      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca4:	d013      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005ca6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00f      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005cb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005cbe:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005cc6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d104      	bne.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cce:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cd2:	688a      	ldr	r2, [r1, #8]
 8005cd4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005ce4:	4618      	mov	r0, r3
}
 8005ce6:	bc30      	pop	{r4, r5}
 8005ce8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005cea:	2002      	movs	r0, #2
}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00

08005cf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cf4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d03e      	beq.n	8005d7a <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8005cfc:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d04:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0a:	688a      	ldr	r2, [r1, #8]
 8005d0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d12:	684a      	ldr	r2, [r1, #4]
 8005d14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d1a:	680a      	ldr	r2, [r1, #0]
 8005d1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d22:	690a      	ldr	r2, [r1, #16]
 8005d24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2a:	694a      	ldr	r2, [r1, #20]
 8005d2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d32:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005d34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d36:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005d3a:	698a      	ldr	r2, [r1, #24]
 8005d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d40:	6802      	ldr	r2, [r0, #0]
 8005d42:	4c0f      	ldr	r4, [pc, #60]	; (8005d80 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8005d44:	42a2      	cmp	r2, r4
 8005d46:	d003      	beq.n	8005d50 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8005d48:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005d4c:	42a2      	cmp	r2, r4
 8005d4e:	d10c      	bne.n	8005d6a <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d54:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005d56:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d5e:	69cc      	ldr	r4, [r1, #28]
 8005d60:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d62:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d66:	6a09      	ldr	r1, [r1, #32]
 8005d68:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d6a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005d72:	4618      	mov	r0, r3
}
 8005d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d78:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005d7a:	2002      	movs	r0, #2
}
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40012c00 	.word	0x40012c00

08005d84 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d88:	4770      	bx	lr

08005d8a <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005d8a:	4770      	bx	lr

08005d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d90:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d92:	6883      	ldr	r3, [r0, #8]
 8005d94:	6902      	ldr	r2, [r0, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	6942      	ldr	r2, [r0, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	69c2      	ldr	r2, [r0, #28]
 8005d9e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	4a8e      	ldr	r2, [pc, #568]	; (8005fdc <UART_SetConfig+0x250>)
 8005da4:	4002      	ands	r2, r0
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	6853      	ldr	r3, [r2, #4]
 8005dae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005db2:	68e1      	ldr	r1, [r4, #12]
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005db8:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	4b88      	ldr	r3, [pc, #544]	; (8005fe0 <UART_SetConfig+0x254>)
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d001      	beq.n	8005dc6 <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dc2:	6a23      	ldr	r3, [r4, #32]
 8005dc4:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dc6:	6893      	ldr	r3, [r2, #8]
 8005dc8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	4a84      	ldr	r2, [pc, #528]	; (8005fe4 <UART_SetConfig+0x258>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d010      	beq.n	8005dfa <UART_SetConfig+0x6e>
 8005dd8:	4a83      	ldr	r2, [pc, #524]	; (8005fe8 <UART_SetConfig+0x25c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d021      	beq.n	8005e22 <UART_SetConfig+0x96>
 8005dde:	4a83      	ldr	r2, [pc, #524]	; (8005fec <UART_SetConfig+0x260>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d037      	beq.n	8005e54 <UART_SetConfig+0xc8>
 8005de4:	4a82      	ldr	r2, [pc, #520]	; (8005ff0 <UART_SetConfig+0x264>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d05c      	beq.n	8005ea4 <UART_SetConfig+0x118>
 8005dea:	4a82      	ldr	r2, [pc, #520]	; (8005ff4 <UART_SetConfig+0x268>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d06b      	beq.n	8005ec8 <UART_SetConfig+0x13c>
 8005df0:	4a7b      	ldr	r2, [pc, #492]	; (8005fe0 <UART_SetConfig+0x254>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d07d      	beq.n	8005ef2 <UART_SetConfig+0x166>
 8005df6:	2210      	movs	r2, #16
 8005df8:	e03a      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005dfa:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005dfe:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e02:	f002 0203 	and.w	r2, r2, #3
 8005e06:	2a03      	cmp	r2, #3
 8005e08:	d809      	bhi.n	8005e1e <UART_SetConfig+0x92>
 8005e0a:	e8df f002 	tbb	[pc, r2]
 8005e0e:	0402      	.short	0x0402
 8005e10:	0687      	.short	0x0687
 8005e12:	2201      	movs	r2, #1
 8005e14:	e02c      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005e16:	2204      	movs	r2, #4
 8005e18:	e02a      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	e028      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005e1e:	2210      	movs	r2, #16
 8005e20:	e026      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005e22:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005e26:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e2a:	f002 020c 	and.w	r2, r2, #12
 8005e2e:	2a0c      	cmp	r2, #12
 8005e30:	d80e      	bhi.n	8005e50 <UART_SetConfig+0xc4>
 8005e32:	e8df f002 	tbb	[pc, r2]
 8005e36:	0d07      	.short	0x0d07
 8005e38:	0d090d0d 	.word	0x0d090d0d
 8005e3c:	0d750d0d 	.word	0x0d750d0d
 8005e40:	0d0d      	.short	0x0d0d
 8005e42:	0b          	.byte	0x0b
 8005e43:	00          	.byte	0x00
 8005e44:	2200      	movs	r2, #0
 8005e46:	e013      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005e48:	2204      	movs	r2, #4
 8005e4a:	e011      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005e50:	2210      	movs	r2, #16
 8005e52:	e00d      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005e54:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005e58:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005e5c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005e60:	2a20      	cmp	r2, #32
 8005e62:	d05f      	beq.n	8005f24 <UART_SetConfig+0x198>
 8005e64:	d81a      	bhi.n	8005e9c <UART_SetConfig+0x110>
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	d05e      	beq.n	8005f28 <UART_SetConfig+0x19c>
 8005e6a:	2a10      	cmp	r2, #16
 8005e6c:	d15e      	bne.n	8005f2c <UART_SetConfig+0x1a0>
 8005e6e:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e70:	495b      	ldr	r1, [pc, #364]	; (8005fe0 <UART_SetConfig+0x254>)
 8005e72:	428b      	cmp	r3, r1
 8005e74:	d076      	beq.n	8005f64 <UART_SetConfig+0x1d8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e76:	69e0      	ldr	r0, [r4, #28]
 8005e78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005e7c:	f000 80a3 	beq.w	8005fc6 <UART_SetConfig+0x23a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e80:	2a08      	cmp	r2, #8
 8005e82:	f200 810e 	bhi.w	80060a2 <UART_SetConfig+0x316>
 8005e86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005e8a:	00dd      	.short	0x00dd
 8005e8c:	00db00f3 	.word	0x00db00f3
 8005e90:	00f6010c 	.word	0x00f6010c
 8005e94:	010c010c 	.word	0x010c010c
 8005e98:	00f9010c 	.word	0x00f9010c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e9c:	2a30      	cmp	r2, #48	; 0x30
 8005e9e:	d147      	bne.n	8005f30 <UART_SetConfig+0x1a4>
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	e7e5      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005ea4:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8005ea8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005eac:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005eb0:	2a80      	cmp	r2, #128	; 0x80
 8005eb2:	d03f      	beq.n	8005f34 <UART_SetConfig+0x1a8>
 8005eb4:	d804      	bhi.n	8005ec0 <UART_SetConfig+0x134>
 8005eb6:	b3fa      	cbz	r2, 8005f38 <UART_SetConfig+0x1ac>
 8005eb8:	2a40      	cmp	r2, #64	; 0x40
 8005eba:	d13f      	bne.n	8005f3c <UART_SetConfig+0x1b0>
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	e7d7      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005ec0:	2ac0      	cmp	r2, #192	; 0xc0
 8005ec2:	d13d      	bne.n	8005f40 <UART_SetConfig+0x1b4>
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	e7d3      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005ec8:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8005ecc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005ed0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005ed4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005ed8:	d034      	beq.n	8005f44 <UART_SetConfig+0x1b8>
 8005eda:	d805      	bhi.n	8005ee8 <UART_SetConfig+0x15c>
 8005edc:	b3a2      	cbz	r2, 8005f48 <UART_SetConfig+0x1bc>
 8005ede:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005ee2:	d133      	bne.n	8005f4c <UART_SetConfig+0x1c0>
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	e7c3      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005ee8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005eec:	d130      	bne.n	8005f50 <UART_SetConfig+0x1c4>
 8005eee:	2208      	movs	r2, #8
 8005ef0:	e7be      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005ef2:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8005ef6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005efa:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005efe:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005f02:	d027      	beq.n	8005f54 <UART_SetConfig+0x1c8>
 8005f04:	d805      	bhi.n	8005f12 <UART_SetConfig+0x186>
 8005f06:	b33a      	cbz	r2, 8005f58 <UART_SetConfig+0x1cc>
 8005f08:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005f0c:	d126      	bne.n	8005f5c <UART_SetConfig+0x1d0>
 8005f0e:	2204      	movs	r2, #4
 8005f10:	e7ae      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f12:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005f16:	d123      	bne.n	8005f60 <UART_SetConfig+0x1d4>
 8005f18:	2208      	movs	r2, #8
 8005f1a:	e7a9      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	e7a7      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f20:	2202      	movs	r2, #2
 8005f22:	e7a5      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f24:	2202      	movs	r2, #2
 8005f26:	e7a3      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	e7a1      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f2c:	2210      	movs	r2, #16
 8005f2e:	e79f      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f30:	2210      	movs	r2, #16
 8005f32:	e79d      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f34:	2202      	movs	r2, #2
 8005f36:	e79b      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f38:	2200      	movs	r2, #0
 8005f3a:	e799      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f3c:	2210      	movs	r2, #16
 8005f3e:	e797      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f40:	2210      	movs	r2, #16
 8005f42:	e795      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f44:	2202      	movs	r2, #2
 8005f46:	e793      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	e791      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f4c:	2210      	movs	r2, #16
 8005f4e:	e78f      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f50:	2210      	movs	r2, #16
 8005f52:	e78d      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f54:	2202      	movs	r2, #2
 8005f56:	e78b      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f58:	2200      	movs	r2, #0
 8005f5a:	e789      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	e787      	b.n	8005e70 <UART_SetConfig+0xe4>
 8005f60:	2210      	movs	r2, #16
 8005f62:	e785      	b.n	8005e70 <UART_SetConfig+0xe4>
    switch (clocksource)
 8005f64:	2a08      	cmp	r2, #8
 8005f66:	f200 808c 	bhi.w	8006082 <UART_SetConfig+0x2f6>
 8005f6a:	e8df f002 	tbb	[pc, r2]
 8005f6e:	8a08      	.short	0x8a08
 8005f70:	8a278a2a 	.word	0x8a278a2a
 8005f74:	8a8a      	.short	0x8a8a
 8005f76:	05          	.byte	0x05
 8005f77:	00          	.byte	0x00
 8005f78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005f7c:	e003      	b.n	8005f86 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f7e:	f7fe faeb 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d07f      	beq.n	8006086 <UART_SetConfig+0x2fa>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f86:	6862      	ldr	r2, [r4, #4]
 8005f88:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005f8c:	4283      	cmp	r3, r0
 8005f8e:	d87c      	bhi.n	800608a <UART_SetConfig+0x2fe>
 8005f90:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005f94:	d87b      	bhi.n	800608e <UART_SetConfig+0x302>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f96:	0e01      	lsrs	r1, r0, #24
 8005f98:	0200      	lsls	r0, r0, #8
 8005f9a:	0853      	lsrs	r3, r2, #1
 8005f9c:	18c0      	adds	r0, r0, r3
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	f141 0100 	adc.w	r1, r1, #0
 8005fa6:	f7fa fb27 	bl	80005f8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005faa:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <UART_SetConfig+0x26c>)
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d86e      	bhi.n	8006092 <UART_SetConfig+0x306>
          huart->Instance->BRR = usartdiv;
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	60d8      	str	r0, [r3, #12]
 8005fb8:	2000      	movs	r0, #0
 8005fba:	e055      	b.n	8006068 <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8005fbc:	f7fd fea8 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
        break;
 8005fc0:	e7df      	b.n	8005f82 <UART_SetConfig+0x1f6>
        pclk = (uint32_t) HSI_VALUE;
 8005fc2:	480e      	ldr	r0, [pc, #56]	; (8005ffc <UART_SetConfig+0x270>)
 8005fc4:	e7df      	b.n	8005f86 <UART_SetConfig+0x1fa>
    switch (clocksource)
 8005fc6:	2a08      	cmp	r2, #8
 8005fc8:	d865      	bhi.n	8006096 <UART_SetConfig+0x30a>
 8005fca:	e8df f002 	tbb	[pc, r2]
 8005fce:	3319      	.short	0x3319
 8005fd0:	64366405 	.word	0x64366405
 8005fd4:	6464      	.short	0x6464
 8005fd6:	1d          	.byte	0x1d
 8005fd7:	00          	.byte	0x00
 8005fd8:	4808      	ldr	r0, [pc, #32]	; (8005ffc <UART_SetConfig+0x270>)
 8005fda:	e015      	b.n	8006008 <UART_SetConfig+0x27c>
 8005fdc:	efff69f3 	.word	0xefff69f3
 8005fe0:	40008000 	.word	0x40008000
 8005fe4:	40013800 	.word	0x40013800
 8005fe8:	40004400 	.word	0x40004400
 8005fec:	40004800 	.word	0x40004800
 8005ff0:	40004c00 	.word	0x40004c00
 8005ff4:	40005000 	.word	0x40005000
 8005ff8:	000ffcff 	.word	0x000ffcff
 8005ffc:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 8006000:	f7fe faaa 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006004:	2800      	cmp	r0, #0
 8006006:	d048      	beq.n	800609a <UART_SetConfig+0x30e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006008:	6862      	ldr	r2, [r4, #4]
 800600a:	0853      	lsrs	r3, r2, #1
 800600c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006010:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006014:	f1a0 0210 	sub.w	r2, r0, #16
 8006018:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800601c:	429a      	cmp	r2, r3
 800601e:	d83e      	bhi.n	800609e <UART_SetConfig+0x312>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006020:	b283      	uxth	r3, r0
 8006022:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006026:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800602a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	60d8      	str	r0, [r3, #12]
 8006030:	2000      	movs	r0, #0
 8006032:	e019      	b.n	8006068 <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fe faa2 	bl	800457c <HAL_RCC_GetPCLK2Freq>
        break;
 8006038:	e7e4      	b.n	8006004 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetSysClockFreq();
 800603a:	f7fd fe69 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
        break;
 800603e:	e7e1      	b.n	8006004 <UART_SetConfig+0x278>
    switch (clocksource)
 8006040:	481b      	ldr	r0, [pc, #108]	; (80060b0 <UART_SetConfig+0x324>)
 8006042:	e002      	b.n	800604a <UART_SetConfig+0x2be>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006044:	f7fe fa88 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8006048:	b368      	cbz	r0, 80060a6 <UART_SetConfig+0x31a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800604a:	6863      	ldr	r3, [r4, #4]
 800604c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006050:	fbb0 f0f3 	udiv	r0, r0, r3
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006054:	f1a0 0210 	sub.w	r2, r0, #16
 8006058:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800605c:	429a      	cmp	r2, r3
 800605e:	d824      	bhi.n	80060aa <UART_SetConfig+0x31e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	b280      	uxth	r0, r0
 8006064:	60d8      	str	r0, [r3, #12]
 8006066:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800606c:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 800606e:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006070:	f7fe fa84 	bl	800457c <HAL_RCC_GetPCLK2Freq>
        break;
 8006074:	e7e8      	b.n	8006048 <UART_SetConfig+0x2bc>
        pclk = HAL_RCC_GetSysClockFreq();
 8006076:	f7fd fe4b 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
        break;
 800607a:	e7e5      	b.n	8006048 <UART_SetConfig+0x2bc>
        pclk = (uint32_t) LSE_VALUE;
 800607c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006080:	e7e3      	b.n	800604a <UART_SetConfig+0x2be>
    switch (clocksource)
 8006082:	2001      	movs	r0, #1
 8006084:	e7f0      	b.n	8006068 <UART_SetConfig+0x2dc>
 8006086:	2000      	movs	r0, #0
 8006088:	e7ee      	b.n	8006068 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 800608a:	2001      	movs	r0, #1
 800608c:	e7ec      	b.n	8006068 <UART_SetConfig+0x2dc>
 800608e:	2001      	movs	r0, #1
 8006090:	e7ea      	b.n	8006068 <UART_SetConfig+0x2dc>
          ret = HAL_ERROR;
 8006092:	2001      	movs	r0, #1
 8006094:	e7e8      	b.n	8006068 <UART_SetConfig+0x2dc>
    switch (clocksource)
 8006096:	2001      	movs	r0, #1
 8006098:	e7e6      	b.n	8006068 <UART_SetConfig+0x2dc>
 800609a:	2000      	movs	r0, #0
 800609c:	e7e4      	b.n	8006068 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 800609e:	2001      	movs	r0, #1
 80060a0:	e7e2      	b.n	8006068 <UART_SetConfig+0x2dc>
    switch (clocksource)
 80060a2:	2001      	movs	r0, #1
 80060a4:	e7e0      	b.n	8006068 <UART_SetConfig+0x2dc>
 80060a6:	2000      	movs	r0, #0
 80060a8:	e7de      	b.n	8006068 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 80060aa:	2001      	movs	r0, #1
 80060ac:	e7dc      	b.n	8006068 <UART_SetConfig+0x2dc>
 80060ae:	bf00      	nop
 80060b0:	00f42400 	.word	0x00f42400

080060b4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060b6:	f013 0f01 	tst.w	r3, #1
 80060ba:	d006      	beq.n	80060ca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060bc:	6802      	ldr	r2, [r0, #0]
 80060be:	6853      	ldr	r3, [r2, #4]
 80060c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060c4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80060c6:	430b      	orrs	r3, r1
 80060c8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060cc:	f013 0f02 	tst.w	r3, #2
 80060d0:	d006      	beq.n	80060e0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060d2:	6802      	ldr	r2, [r0, #0]
 80060d4:	6853      	ldr	r3, [r2, #4]
 80060d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80060dc:	430b      	orrs	r3, r1
 80060de:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060e2:	f013 0f04 	tst.w	r3, #4
 80060e6:	d006      	beq.n	80060f6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060e8:	6802      	ldr	r2, [r0, #0]
 80060ea:	6853      	ldr	r3, [r2, #4]
 80060ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80060f2:	430b      	orrs	r3, r1
 80060f4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060f8:	f013 0f08 	tst.w	r3, #8
 80060fc:	d006      	beq.n	800610c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060fe:	6802      	ldr	r2, [r0, #0]
 8006100:	6853      	ldr	r3, [r2, #4]
 8006102:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006106:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006108:	430b      	orrs	r3, r1
 800610a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800610c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800610e:	f013 0f10 	tst.w	r3, #16
 8006112:	d006      	beq.n	8006122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006114:	6802      	ldr	r2, [r0, #0]
 8006116:	6893      	ldr	r3, [r2, #8]
 8006118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800611e:	430b      	orrs	r3, r1
 8006120:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006122:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006124:	f013 0f20 	tst.w	r3, #32
 8006128:	d006      	beq.n	8006138 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800612a:	6802      	ldr	r2, [r0, #0]
 800612c:	6893      	ldr	r3, [r2, #8]
 800612e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006132:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006134:	430b      	orrs	r3, r1
 8006136:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006138:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800613a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006140:	6802      	ldr	r2, [r0, #0]
 8006142:	6853      	ldr	r3, [r2, #4]
 8006144:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006148:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800614a:	430b      	orrs	r3, r1
 800614c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006154:	d00b      	beq.n	800616e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006156:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006158:	f013 0f80 	tst.w	r3, #128	; 0x80
 800615c:	d006      	beq.n	800616c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800615e:	6802      	ldr	r2, [r0, #0]
 8006160:	6853      	ldr	r3, [r2, #4]
 8006162:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006166:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006168:	430b      	orrs	r3, r1
 800616a:	6053      	str	r3, [r2, #4]
  }
}
 800616c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800616e:	6802      	ldr	r2, [r0, #0]
 8006170:	6853      	ldr	r3, [r2, #4]
 8006172:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006176:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006178:	430b      	orrs	r3, r1
 800617a:	6053      	str	r3, [r2, #4]
 800617c:	e7eb      	b.n	8006156 <UART_AdvFeatureConfig+0xa2>

0800617e <UART_WaitOnFlagUntilTimeout>:
    } while ((__STREXW(val,(__IO uint32_t *)&(REG))) != 0U); \
  } while(0)

HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800617e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006182:	4605      	mov	r5, r0
 8006184:	460f      	mov	r7, r1
 8006186:	4616      	mov	r6, r2
 8006188:	4699      	mov	r9, r3
 800618a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618e:	682c      	ldr	r4, [r5, #0]
 8006190:	69e4      	ldr	r4, [r4, #28]
 8006192:	ea37 0304 	bics.w	r3, r7, r4
 8006196:	bf0c      	ite	eq
 8006198:	f04f 0c01 	moveq.w	ip, #1
 800619c:	f04f 0c00 	movne.w	ip, #0
 80061a0:	45b4      	cmp	ip, r6
 80061a2:	d153      	bne.n	800624c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80061a8:	d0f1      	beq.n	800618e <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fc ff03 	bl	8002fb4 <HAL_GetTick>
 80061ae:	eba0 0009 	sub.w	r0, r0, r9
 80061b2:	4540      	cmp	r0, r8
 80061b4:	d82d      	bhi.n	8006212 <UART_WaitOnFlagUntilTimeout+0x94>
 80061b6:	f1b8 0f00 	cmp.w	r8, #0
 80061ba:	d02a      	beq.n	8006212 <UART_WaitOnFlagUntilTimeout+0x94>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	f012 0f04 	tst.w	r2, #4
 80061c4:	d0e3      	beq.n	800618e <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80061cc:	d0df      	beq.n	800618e <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d2:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061d4:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	e852 3f00 	ldrex	r3, [r2]
 80061da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	e842 3100 	strex	r1, r3, [r2]
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d1f6      	bne.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x56>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	f102 0308 	add.w	r3, r2, #8
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	3208      	adds	r2, #8
 80061f6:	e842 3100 	strex	r1, r3, [r2]
 80061fa:	2900      	cmp	r1, #0
 80061fc:	d1f3      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 80061fe:	2320      	movs	r3, #32
 8006200:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006202:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006204:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006208:	2300      	movs	r3, #0
 800620a:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74

          return HAL_TIMEOUT;
 800620e:	2003      	movs	r0, #3
 8006210:	e01d      	b.n	800624e <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006212:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	e852 3f00 	ldrex	r3, [r2]
 8006218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	e842 3100 	strex	r1, r3, [r2]
 8006220:	2900      	cmp	r1, #0
 8006222:	d1f6      	bne.n	8006212 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006224:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	f102 0308 	add.w	r3, r2, #8
 800622a:	e853 3f00 	ldrex	r3, [r3]
 800622e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	3208      	adds	r2, #8
 8006234:	e842 3100 	strex	r1, r3, [r2]
 8006238:	2900      	cmp	r1, #0
 800623a:	d1f3      	bne.n	8006224 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800623c:	2320      	movs	r3, #32
 800623e:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006240:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8006242:	2300      	movs	r3, #0
 8006244:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8006248:	2003      	movs	r0, #3
 800624a:	e000      	b.n	800624e <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 800624c:	2000      	movs	r0, #0
}
 800624e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006252 <HAL_UART_Transmit>:
{
 8006252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800625a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800625c:	2b20      	cmp	r3, #32
 800625e:	d156      	bne.n	800630e <HAL_UART_Transmit+0xbc>
 8006260:	4604      	mov	r4, r0
 8006262:	460d      	mov	r5, r1
 8006264:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006266:	2900      	cmp	r1, #0
 8006268:	d055      	beq.n	8006316 <HAL_UART_Transmit+0xc4>
 800626a:	2a00      	cmp	r2, #0
 800626c:	d055      	beq.n	800631a <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800626e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8006272:	2b01      	cmp	r3, #1
 8006274:	d053      	beq.n	800631e <HAL_UART_Transmit+0xcc>
 8006276:	2301      	movs	r3, #1
 8006278:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627c:	2300      	movs	r3, #0
 800627e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006282:	2321      	movs	r3, #33	; 0x21
 8006284:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8006286:	f7fc fe95 	bl	8002fb4 <HAL_GetTick>
 800628a:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800628c:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8006290:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629a:	d005      	beq.n	80062a8 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 800629c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80062a0:	2300      	movs	r3, #0
 80062a2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80062a6:	e014      	b.n	80062d2 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	b113      	cbz	r3, 80062b2 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 80062ac:	f04f 0800 	mov.w	r8, #0
 80062b0:	e7f6      	b.n	80062a0 <HAL_UART_Transmit+0x4e>
      pdata16bits = (const uint16_t *) pData;
 80062b2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80062b4:	2500      	movs	r5, #0
 80062b6:	e7f3      	b.n	80062a0 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062b8:	f838 3b02 	ldrh.w	r3, [r8], #2
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c2:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80062c4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80062c8:	b292      	uxth	r2, r2
 80062ca:	3a01      	subs	r2, #1
 80062cc:	b292      	uxth	r2, r2
 80062ce:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062d2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	b173      	cbz	r3, 80062f8 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062da:	9600      	str	r6, [sp, #0]
 80062dc:	463b      	mov	r3, r7
 80062de:	2200      	movs	r2, #0
 80062e0:	2180      	movs	r1, #128	; 0x80
 80062e2:	4620      	mov	r0, r4
 80062e4:	f7ff ff4b 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 80062e8:	b9d8      	cbnz	r0, 8006322 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	d0e4      	beq.n	80062b8 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80062f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062f6:	e7e5      	b.n	80062c4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062f8:	9600      	str	r6, [sp, #0]
 80062fa:	463b      	mov	r3, r7
 80062fc:	2200      	movs	r2, #0
 80062fe:	2140      	movs	r1, #64	; 0x40
 8006300:	4620      	mov	r0, r4
 8006302:	f7ff ff3c 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 8006306:	b970      	cbnz	r0, 8006326 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8006308:	2320      	movs	r3, #32
 800630a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800630c:	e000      	b.n	8006310 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800630e:	2002      	movs	r0, #2
}
 8006310:	b002      	add	sp, #8
 8006312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8006316:	2001      	movs	r0, #1
 8006318:	e7fa      	b.n	8006310 <HAL_UART_Transmit+0xbe>
 800631a:	2001      	movs	r0, #1
 800631c:	e7f8      	b.n	8006310 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 800631e:	2002      	movs	r0, #2
 8006320:	e7f6      	b.n	8006310 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8006322:	2003      	movs	r0, #3
 8006324:	e7f4      	b.n	8006310 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8006326:	2003      	movs	r0, #3
 8006328:	e7f2      	b.n	8006310 <HAL_UART_Transmit+0xbe>

0800632a <UART_CheckIdleState>:
{
 800632a:	b530      	push	{r4, r5, lr}
 800632c:	b083      	sub	sp, #12
 800632e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006330:	2300      	movs	r3, #0
 8006332:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8006336:	f7fc fe3d 	bl	8002fb4 <HAL_GetTick>
 800633a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	f012 0f08 	tst.w	r2, #8
 8006344:	d10d      	bne.n	8006362 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f013 0f04 	tst.w	r3, #4
 800634e:	d116      	bne.n	800637e <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8006350:	2320      	movs	r3, #32
 8006352:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006354:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006356:	2000      	movs	r0, #0
 8006358:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 800635a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 800635e:	b003      	add	sp, #12
 8006360:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006362:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	4603      	mov	r3, r0
 800636a:	2200      	movs	r2, #0
 800636c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff ff04 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 8006376:	2800      	cmp	r0, #0
 8006378:	d0e5      	beq.n	8006346 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800637a:	2003      	movs	r0, #3
 800637c:	e7ef      	b.n	800635e <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800637e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	462b      	mov	r3, r5
 8006386:	2200      	movs	r2, #0
 8006388:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800638c:	4620      	mov	r0, r4
 800638e:	f7ff fef6 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 8006392:	2800      	cmp	r0, #0
 8006394:	d0dc      	beq.n	8006350 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006396:	2003      	movs	r0, #3
 8006398:	e7e1      	b.n	800635e <UART_CheckIdleState+0x34>

0800639a <HAL_UART_Init>:
  if (huart == NULL)
 800639a:	b368      	cbz	r0, 80063f8 <HAL_UART_Init+0x5e>
{
 800639c:	b510      	push	{r4, lr}
 800639e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80063a0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80063a2:	b303      	cbz	r3, 80063e6 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80063a4:	2324      	movs	r3, #36	; 0x24
 80063a6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80063a8:	6822      	ldr	r2, [r4, #0]
 80063aa:	6813      	ldr	r3, [r2, #0]
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063b2:	4620      	mov	r0, r4
 80063b4:	f7ff fcea 	bl	8005d8c <UART_SetConfig>
 80063b8:	2801      	cmp	r0, #1
 80063ba:	d013      	beq.n	80063e4 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063be:	b9bb      	cbnz	r3, 80063f0 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063c0:	6822      	ldr	r2, [r4, #0]
 80063c2:	6853      	ldr	r3, [r2, #4]
 80063c4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80063c8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	6893      	ldr	r3, [r2, #8]
 80063ce:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80063d2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	6813      	ldr	r3, [r2, #0]
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80063de:	4620      	mov	r0, r4
 80063e0:	f7ff ffa3 	bl	800632a <UART_CheckIdleState>
}
 80063e4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80063e6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80063ea:	f7ff fcce 	bl	8005d8a <HAL_UART_MspInit>
 80063ee:	e7d9      	b.n	80063a4 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff fe5f 	bl	80060b4 <UART_AdvFeatureConfig>
 80063f6:	e7e3      	b.n	80063c0 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80063f8:	2001      	movs	r0, #1
}
 80063fa:	4770      	bx	lr

080063fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80063fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006400:	f7fb ff1e 	bl	8002240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006406:	e003      	b.n	8006410 <LoopCopyDataInit>

08006408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800640a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800640c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800640e:	3104      	adds	r1, #4

08006410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006410:	480a      	ldr	r0, [pc, #40]	; (800643c <LoopForever+0xa>)
	ldr	r3, =_edata
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006418:	d3f6      	bcc.n	8006408 <CopyDataInit>
	ldr	r2, =_sbss
 800641a:	4a0a      	ldr	r2, [pc, #40]	; (8006444 <LoopForever+0x12>)
	b	LoopFillZerobss
 800641c:	e002      	b.n	8006424 <LoopFillZerobss>

0800641e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800641e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006420:	f842 3b04 	str.w	r3, [r2], #4

08006424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006424:	4b08      	ldr	r3, [pc, #32]	; (8006448 <LoopForever+0x16>)
	cmp	r2, r3
 8006426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006428:	d3f9      	bcc.n	800641e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800642a:	f000 f817 	bl	800645c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800642e:	f7fb fbf5 	bl	8001c1c <main>

08006432 <LoopForever>:

LoopForever:
    b LoopForever
 8006432:	e7fe      	b.n	8006432 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006434:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006438:	08006f28 	.word	0x08006f28
	ldr	r0, =_sdata
 800643c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006440:	20000540 	.word	0x20000540
	ldr	r2, =_sbss
 8006444:	20000540 	.word	0x20000540
	ldr	r3, = _ebss
 8006448:	20000b64 	.word	0x20000b64

0800644c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800644c:	e7fe      	b.n	800644c <ADC1_2_IRQHandler>
	...

08006450 <__errno>:
 8006450:	4b01      	ldr	r3, [pc, #4]	; (8006458 <__errno+0x8>)
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	200004d8 	.word	0x200004d8

0800645c <__libc_init_array>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	4d0d      	ldr	r5, [pc, #52]	; (8006494 <__libc_init_array+0x38>)
 8006460:	4c0d      	ldr	r4, [pc, #52]	; (8006498 <__libc_init_array+0x3c>)
 8006462:	1b64      	subs	r4, r4, r5
 8006464:	10a4      	asrs	r4, r4, #2
 8006466:	2600      	movs	r6, #0
 8006468:	42a6      	cmp	r6, r4
 800646a:	d109      	bne.n	8006480 <__libc_init_array+0x24>
 800646c:	4d0b      	ldr	r5, [pc, #44]	; (800649c <__libc_init_array+0x40>)
 800646e:	4c0c      	ldr	r4, [pc, #48]	; (80064a0 <__libc_init_array+0x44>)
 8006470:	f000 fcb4 	bl	8006ddc <_init>
 8006474:	1b64      	subs	r4, r4, r5
 8006476:	10a4      	asrs	r4, r4, #2
 8006478:	2600      	movs	r6, #0
 800647a:	42a6      	cmp	r6, r4
 800647c:	d105      	bne.n	800648a <__libc_init_array+0x2e>
 800647e:	bd70      	pop	{r4, r5, r6, pc}
 8006480:	f855 3b04 	ldr.w	r3, [r5], #4
 8006484:	4798      	blx	r3
 8006486:	3601      	adds	r6, #1
 8006488:	e7ee      	b.n	8006468 <__libc_init_array+0xc>
 800648a:	f855 3b04 	ldr.w	r3, [r5], #4
 800648e:	4798      	blx	r3
 8006490:	3601      	adds	r6, #1
 8006492:	e7f2      	b.n	800647a <__libc_init_array+0x1e>
 8006494:	08006f18 	.word	0x08006f18
 8006498:	08006f18 	.word	0x08006f18
 800649c:	08006f18 	.word	0x08006f18
 80064a0:	08006f1c 	.word	0x08006f1c

080064a4 <malloc>:
 80064a4:	4b02      	ldr	r3, [pc, #8]	; (80064b0 <malloc+0xc>)
 80064a6:	4601      	mov	r1, r0
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	f000 b88d 	b.w	80065c8 <_malloc_r>
 80064ae:	bf00      	nop
 80064b0:	200004d8 	.word	0x200004d8

080064b4 <free>:
 80064b4:	4b02      	ldr	r3, [pc, #8]	; (80064c0 <free+0xc>)
 80064b6:	4601      	mov	r1, r0
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	f000 b819 	b.w	80064f0 <_free_r>
 80064be:	bf00      	nop
 80064c0:	200004d8 	.word	0x200004d8

080064c4 <memcpy>:
 80064c4:	440a      	add	r2, r1
 80064c6:	4291      	cmp	r1, r2
 80064c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064cc:	d100      	bne.n	80064d0 <memcpy+0xc>
 80064ce:	4770      	bx	lr
 80064d0:	b510      	push	{r4, lr}
 80064d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064da:	4291      	cmp	r1, r2
 80064dc:	d1f9      	bne.n	80064d2 <memcpy+0xe>
 80064de:	bd10      	pop	{r4, pc}

080064e0 <memset>:
 80064e0:	4402      	add	r2, r0
 80064e2:	4603      	mov	r3, r0
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d100      	bne.n	80064ea <memset+0xa>
 80064e8:	4770      	bx	lr
 80064ea:	f803 1b01 	strb.w	r1, [r3], #1
 80064ee:	e7f9      	b.n	80064e4 <memset+0x4>

080064f0 <_free_r>:
 80064f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064f2:	2900      	cmp	r1, #0
 80064f4:	d044      	beq.n	8006580 <_free_r+0x90>
 80064f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064fa:	9001      	str	r0, [sp, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006502:	bfb8      	it	lt
 8006504:	18e4      	addlt	r4, r4, r3
 8006506:	f000 f91b 	bl	8006740 <__malloc_lock>
 800650a:	4a1e      	ldr	r2, [pc, #120]	; (8006584 <_free_r+0x94>)
 800650c:	9801      	ldr	r0, [sp, #4]
 800650e:	6813      	ldr	r3, [r2, #0]
 8006510:	b933      	cbnz	r3, 8006520 <_free_r+0x30>
 8006512:	6063      	str	r3, [r4, #4]
 8006514:	6014      	str	r4, [r2, #0]
 8006516:	b003      	add	sp, #12
 8006518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800651c:	f000 b916 	b.w	800674c <__malloc_unlock>
 8006520:	42a3      	cmp	r3, r4
 8006522:	d908      	bls.n	8006536 <_free_r+0x46>
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	1961      	adds	r1, r4, r5
 8006528:	428b      	cmp	r3, r1
 800652a:	bf01      	itttt	eq
 800652c:	6819      	ldreq	r1, [r3, #0]
 800652e:	685b      	ldreq	r3, [r3, #4]
 8006530:	1949      	addeq	r1, r1, r5
 8006532:	6021      	streq	r1, [r4, #0]
 8006534:	e7ed      	b.n	8006512 <_free_r+0x22>
 8006536:	461a      	mov	r2, r3
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	b10b      	cbz	r3, 8006540 <_free_r+0x50>
 800653c:	42a3      	cmp	r3, r4
 800653e:	d9fa      	bls.n	8006536 <_free_r+0x46>
 8006540:	6811      	ldr	r1, [r2, #0]
 8006542:	1855      	adds	r5, r2, r1
 8006544:	42a5      	cmp	r5, r4
 8006546:	d10b      	bne.n	8006560 <_free_r+0x70>
 8006548:	6824      	ldr	r4, [r4, #0]
 800654a:	4421      	add	r1, r4
 800654c:	1854      	adds	r4, r2, r1
 800654e:	42a3      	cmp	r3, r4
 8006550:	6011      	str	r1, [r2, #0]
 8006552:	d1e0      	bne.n	8006516 <_free_r+0x26>
 8006554:	681c      	ldr	r4, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	6053      	str	r3, [r2, #4]
 800655a:	4421      	add	r1, r4
 800655c:	6011      	str	r1, [r2, #0]
 800655e:	e7da      	b.n	8006516 <_free_r+0x26>
 8006560:	d902      	bls.n	8006568 <_free_r+0x78>
 8006562:	230c      	movs	r3, #12
 8006564:	6003      	str	r3, [r0, #0]
 8006566:	e7d6      	b.n	8006516 <_free_r+0x26>
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	1961      	adds	r1, r4, r5
 800656c:	428b      	cmp	r3, r1
 800656e:	bf04      	itt	eq
 8006570:	6819      	ldreq	r1, [r3, #0]
 8006572:	685b      	ldreq	r3, [r3, #4]
 8006574:	6063      	str	r3, [r4, #4]
 8006576:	bf04      	itt	eq
 8006578:	1949      	addeq	r1, r1, r5
 800657a:	6021      	streq	r1, [r4, #0]
 800657c:	6054      	str	r4, [r2, #4]
 800657e:	e7ca      	b.n	8006516 <_free_r+0x26>
 8006580:	b003      	add	sp, #12
 8006582:	bd30      	pop	{r4, r5, pc}
 8006584:	20000b54 	.word	0x20000b54

08006588 <sbrk_aligned>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4e0e      	ldr	r6, [pc, #56]	; (80065c4 <sbrk_aligned+0x3c>)
 800658c:	460c      	mov	r4, r1
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	4605      	mov	r5, r0
 8006592:	b911      	cbnz	r1, 800659a <sbrk_aligned+0x12>
 8006594:	f000 f894 	bl	80066c0 <_sbrk_r>
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f000 f88f 	bl	80066c0 <_sbrk_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d00a      	beq.n	80065bc <sbrk_aligned+0x34>
 80065a6:	1cc4      	adds	r4, r0, #3
 80065a8:	f024 0403 	bic.w	r4, r4, #3
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d007      	beq.n	80065c0 <sbrk_aligned+0x38>
 80065b0:	1a21      	subs	r1, r4, r0
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 f884 	bl	80066c0 <_sbrk_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d101      	bne.n	80065c0 <sbrk_aligned+0x38>
 80065bc:	f04f 34ff 	mov.w	r4, #4294967295
 80065c0:	4620      	mov	r0, r4
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	20000b58 	.word	0x20000b58

080065c8 <_malloc_r>:
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	1ccd      	adds	r5, r1, #3
 80065ce:	f025 0503 	bic.w	r5, r5, #3
 80065d2:	3508      	adds	r5, #8
 80065d4:	2d0c      	cmp	r5, #12
 80065d6:	bf38      	it	cc
 80065d8:	250c      	movcc	r5, #12
 80065da:	2d00      	cmp	r5, #0
 80065dc:	4607      	mov	r7, r0
 80065de:	db01      	blt.n	80065e4 <_malloc_r+0x1c>
 80065e0:	42a9      	cmp	r1, r5
 80065e2:	d905      	bls.n	80065f0 <_malloc_r+0x28>
 80065e4:	230c      	movs	r3, #12
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	2600      	movs	r6, #0
 80065ea:	4630      	mov	r0, r6
 80065ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f0:	4e2e      	ldr	r6, [pc, #184]	; (80066ac <_malloc_r+0xe4>)
 80065f2:	f000 f8a5 	bl	8006740 <__malloc_lock>
 80065f6:	6833      	ldr	r3, [r6, #0]
 80065f8:	461c      	mov	r4, r3
 80065fa:	bb34      	cbnz	r4, 800664a <_malloc_r+0x82>
 80065fc:	4629      	mov	r1, r5
 80065fe:	4638      	mov	r0, r7
 8006600:	f7ff ffc2 	bl	8006588 <sbrk_aligned>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	4604      	mov	r4, r0
 8006608:	d14d      	bne.n	80066a6 <_malloc_r+0xde>
 800660a:	6834      	ldr	r4, [r6, #0]
 800660c:	4626      	mov	r6, r4
 800660e:	2e00      	cmp	r6, #0
 8006610:	d140      	bne.n	8006694 <_malloc_r+0xcc>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	4631      	mov	r1, r6
 8006616:	4638      	mov	r0, r7
 8006618:	eb04 0803 	add.w	r8, r4, r3
 800661c:	f000 f850 	bl	80066c0 <_sbrk_r>
 8006620:	4580      	cmp	r8, r0
 8006622:	d13a      	bne.n	800669a <_malloc_r+0xd2>
 8006624:	6821      	ldr	r1, [r4, #0]
 8006626:	3503      	adds	r5, #3
 8006628:	1a6d      	subs	r5, r5, r1
 800662a:	f025 0503 	bic.w	r5, r5, #3
 800662e:	3508      	adds	r5, #8
 8006630:	2d0c      	cmp	r5, #12
 8006632:	bf38      	it	cc
 8006634:	250c      	movcc	r5, #12
 8006636:	4629      	mov	r1, r5
 8006638:	4638      	mov	r0, r7
 800663a:	f7ff ffa5 	bl	8006588 <sbrk_aligned>
 800663e:	3001      	adds	r0, #1
 8006640:	d02b      	beq.n	800669a <_malloc_r+0xd2>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	442b      	add	r3, r5
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	e00e      	b.n	8006668 <_malloc_r+0xa0>
 800664a:	6822      	ldr	r2, [r4, #0]
 800664c:	1b52      	subs	r2, r2, r5
 800664e:	d41e      	bmi.n	800668e <_malloc_r+0xc6>
 8006650:	2a0b      	cmp	r2, #11
 8006652:	d916      	bls.n	8006682 <_malloc_r+0xba>
 8006654:	1961      	adds	r1, r4, r5
 8006656:	42a3      	cmp	r3, r4
 8006658:	6025      	str	r5, [r4, #0]
 800665a:	bf18      	it	ne
 800665c:	6059      	strne	r1, [r3, #4]
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	bf08      	it	eq
 8006662:	6031      	streq	r1, [r6, #0]
 8006664:	5162      	str	r2, [r4, r5]
 8006666:	604b      	str	r3, [r1, #4]
 8006668:	4638      	mov	r0, r7
 800666a:	f104 060b 	add.w	r6, r4, #11
 800666e:	f000 f86d 	bl	800674c <__malloc_unlock>
 8006672:	f026 0607 	bic.w	r6, r6, #7
 8006676:	1d23      	adds	r3, r4, #4
 8006678:	1af2      	subs	r2, r6, r3
 800667a:	d0b6      	beq.n	80065ea <_malloc_r+0x22>
 800667c:	1b9b      	subs	r3, r3, r6
 800667e:	50a3      	str	r3, [r4, r2]
 8006680:	e7b3      	b.n	80065ea <_malloc_r+0x22>
 8006682:	6862      	ldr	r2, [r4, #4]
 8006684:	42a3      	cmp	r3, r4
 8006686:	bf0c      	ite	eq
 8006688:	6032      	streq	r2, [r6, #0]
 800668a:	605a      	strne	r2, [r3, #4]
 800668c:	e7ec      	b.n	8006668 <_malloc_r+0xa0>
 800668e:	4623      	mov	r3, r4
 8006690:	6864      	ldr	r4, [r4, #4]
 8006692:	e7b2      	b.n	80065fa <_malloc_r+0x32>
 8006694:	4634      	mov	r4, r6
 8006696:	6876      	ldr	r6, [r6, #4]
 8006698:	e7b9      	b.n	800660e <_malloc_r+0x46>
 800669a:	230c      	movs	r3, #12
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	4638      	mov	r0, r7
 80066a0:	f000 f854 	bl	800674c <__malloc_unlock>
 80066a4:	e7a1      	b.n	80065ea <_malloc_r+0x22>
 80066a6:	6025      	str	r5, [r4, #0]
 80066a8:	e7de      	b.n	8006668 <_malloc_r+0xa0>
 80066aa:	bf00      	nop
 80066ac:	20000b54 	.word	0x20000b54

080066b0 <realloc>:
 80066b0:	4b02      	ldr	r3, [pc, #8]	; (80066bc <realloc+0xc>)
 80066b2:	460a      	mov	r2, r1
 80066b4:	4601      	mov	r1, r0
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	f000 b84e 	b.w	8006758 <_realloc_r>
 80066bc:	200004d8 	.word	0x200004d8

080066c0 <_sbrk_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4d06      	ldr	r5, [pc, #24]	; (80066dc <_sbrk_r+0x1c>)
 80066c4:	2300      	movs	r3, #0
 80066c6:	4604      	mov	r4, r0
 80066c8:	4608      	mov	r0, r1
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	f7fb fd9a 	bl	8002204 <_sbrk>
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	d102      	bne.n	80066da <_sbrk_r+0x1a>
 80066d4:	682b      	ldr	r3, [r5, #0]
 80066d6:	b103      	cbz	r3, 80066da <_sbrk_r+0x1a>
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	20000b5c 	.word	0x20000b5c

080066e0 <siprintf>:
 80066e0:	b40e      	push	{r1, r2, r3}
 80066e2:	b500      	push	{lr}
 80066e4:	b09c      	sub	sp, #112	; 0x70
 80066e6:	ab1d      	add	r3, sp, #116	; 0x74
 80066e8:	9002      	str	r0, [sp, #8]
 80066ea:	9006      	str	r0, [sp, #24]
 80066ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066f0:	4809      	ldr	r0, [pc, #36]	; (8006718 <siprintf+0x38>)
 80066f2:	9107      	str	r1, [sp, #28]
 80066f4:	9104      	str	r1, [sp, #16]
 80066f6:	4909      	ldr	r1, [pc, #36]	; (800671c <siprintf+0x3c>)
 80066f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066fc:	9105      	str	r1, [sp, #20]
 80066fe:	6800      	ldr	r0, [r0, #0]
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	a902      	add	r1, sp, #8
 8006704:	f000 f8b2 	bl	800686c <_svfiprintf_r>
 8006708:	9b02      	ldr	r3, [sp, #8]
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	b01c      	add	sp, #112	; 0x70
 8006710:	f85d eb04 	ldr.w	lr, [sp], #4
 8006714:	b003      	add	sp, #12
 8006716:	4770      	bx	lr
 8006718:	200004d8 	.word	0x200004d8
 800671c:	ffff0208 	.word	0xffff0208

08006720 <strcat>:
 8006720:	b510      	push	{r4, lr}
 8006722:	4602      	mov	r2, r0
 8006724:	7814      	ldrb	r4, [r2, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	3201      	adds	r2, #1
 800672a:	2c00      	cmp	r4, #0
 800672c:	d1fa      	bne.n	8006724 <strcat+0x4>
 800672e:	3b01      	subs	r3, #1
 8006730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006734:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006738:	2a00      	cmp	r2, #0
 800673a:	d1f9      	bne.n	8006730 <strcat+0x10>
 800673c:	bd10      	pop	{r4, pc}
	...

08006740 <__malloc_lock>:
 8006740:	4801      	ldr	r0, [pc, #4]	; (8006748 <__malloc_lock+0x8>)
 8006742:	f000 bb27 	b.w	8006d94 <__retarget_lock_acquire_recursive>
 8006746:	bf00      	nop
 8006748:	20000b60 	.word	0x20000b60

0800674c <__malloc_unlock>:
 800674c:	4801      	ldr	r0, [pc, #4]	; (8006754 <__malloc_unlock+0x8>)
 800674e:	f000 bb22 	b.w	8006d96 <__retarget_lock_release_recursive>
 8006752:	bf00      	nop
 8006754:	20000b60 	.word	0x20000b60

08006758 <_realloc_r>:
 8006758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675c:	4680      	mov	r8, r0
 800675e:	4614      	mov	r4, r2
 8006760:	460e      	mov	r6, r1
 8006762:	b921      	cbnz	r1, 800676e <_realloc_r+0x16>
 8006764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006768:	4611      	mov	r1, r2
 800676a:	f7ff bf2d 	b.w	80065c8 <_malloc_r>
 800676e:	b92a      	cbnz	r2, 800677c <_realloc_r+0x24>
 8006770:	f7ff febe 	bl	80064f0 <_free_r>
 8006774:	4625      	mov	r5, r4
 8006776:	4628      	mov	r0, r5
 8006778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800677c:	f000 fb26 	bl	8006dcc <_malloc_usable_size_r>
 8006780:	4284      	cmp	r4, r0
 8006782:	4607      	mov	r7, r0
 8006784:	d802      	bhi.n	800678c <_realloc_r+0x34>
 8006786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800678a:	d812      	bhi.n	80067b2 <_realloc_r+0x5a>
 800678c:	4621      	mov	r1, r4
 800678e:	4640      	mov	r0, r8
 8006790:	f7ff ff1a 	bl	80065c8 <_malloc_r>
 8006794:	4605      	mov	r5, r0
 8006796:	2800      	cmp	r0, #0
 8006798:	d0ed      	beq.n	8006776 <_realloc_r+0x1e>
 800679a:	42bc      	cmp	r4, r7
 800679c:	4622      	mov	r2, r4
 800679e:	4631      	mov	r1, r6
 80067a0:	bf28      	it	cs
 80067a2:	463a      	movcs	r2, r7
 80067a4:	f7ff fe8e 	bl	80064c4 <memcpy>
 80067a8:	4631      	mov	r1, r6
 80067aa:	4640      	mov	r0, r8
 80067ac:	f7ff fea0 	bl	80064f0 <_free_r>
 80067b0:	e7e1      	b.n	8006776 <_realloc_r+0x1e>
 80067b2:	4635      	mov	r5, r6
 80067b4:	e7df      	b.n	8006776 <_realloc_r+0x1e>

080067b6 <__ssputs_r>:
 80067b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ba:	688e      	ldr	r6, [r1, #8]
 80067bc:	429e      	cmp	r6, r3
 80067be:	4682      	mov	sl, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	4690      	mov	r8, r2
 80067c4:	461f      	mov	r7, r3
 80067c6:	d838      	bhi.n	800683a <__ssputs_r+0x84>
 80067c8:	898a      	ldrh	r2, [r1, #12]
 80067ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067ce:	d032      	beq.n	8006836 <__ssputs_r+0x80>
 80067d0:	6825      	ldr	r5, [r4, #0]
 80067d2:	6909      	ldr	r1, [r1, #16]
 80067d4:	eba5 0901 	sub.w	r9, r5, r1
 80067d8:	6965      	ldr	r5, [r4, #20]
 80067da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067e2:	3301      	adds	r3, #1
 80067e4:	444b      	add	r3, r9
 80067e6:	106d      	asrs	r5, r5, #1
 80067e8:	429d      	cmp	r5, r3
 80067ea:	bf38      	it	cc
 80067ec:	461d      	movcc	r5, r3
 80067ee:	0553      	lsls	r3, r2, #21
 80067f0:	d531      	bpl.n	8006856 <__ssputs_r+0xa0>
 80067f2:	4629      	mov	r1, r5
 80067f4:	f7ff fee8 	bl	80065c8 <_malloc_r>
 80067f8:	4606      	mov	r6, r0
 80067fa:	b950      	cbnz	r0, 8006812 <__ssputs_r+0x5c>
 80067fc:	230c      	movs	r3, #12
 80067fe:	f8ca 3000 	str.w	r3, [sl]
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006812:	6921      	ldr	r1, [r4, #16]
 8006814:	464a      	mov	r2, r9
 8006816:	f7ff fe55 	bl	80064c4 <memcpy>
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	6126      	str	r6, [r4, #16]
 8006828:	6165      	str	r5, [r4, #20]
 800682a:	444e      	add	r6, r9
 800682c:	eba5 0509 	sub.w	r5, r5, r9
 8006830:	6026      	str	r6, [r4, #0]
 8006832:	60a5      	str	r5, [r4, #8]
 8006834:	463e      	mov	r6, r7
 8006836:	42be      	cmp	r6, r7
 8006838:	d900      	bls.n	800683c <__ssputs_r+0x86>
 800683a:	463e      	mov	r6, r7
 800683c:	6820      	ldr	r0, [r4, #0]
 800683e:	4632      	mov	r2, r6
 8006840:	4641      	mov	r1, r8
 8006842:	f000 faa9 	bl	8006d98 <memmove>
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	1b9b      	subs	r3, r3, r6
 800684a:	60a3      	str	r3, [r4, #8]
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	4433      	add	r3, r6
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	2000      	movs	r0, #0
 8006854:	e7db      	b.n	800680e <__ssputs_r+0x58>
 8006856:	462a      	mov	r2, r5
 8006858:	f7ff ff7e 	bl	8006758 <_realloc_r>
 800685c:	4606      	mov	r6, r0
 800685e:	2800      	cmp	r0, #0
 8006860:	d1e1      	bne.n	8006826 <__ssputs_r+0x70>
 8006862:	6921      	ldr	r1, [r4, #16]
 8006864:	4650      	mov	r0, sl
 8006866:	f7ff fe43 	bl	80064f0 <_free_r>
 800686a:	e7c7      	b.n	80067fc <__ssputs_r+0x46>

0800686c <_svfiprintf_r>:
 800686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006870:	4698      	mov	r8, r3
 8006872:	898b      	ldrh	r3, [r1, #12]
 8006874:	061b      	lsls	r3, r3, #24
 8006876:	b09d      	sub	sp, #116	; 0x74
 8006878:	4607      	mov	r7, r0
 800687a:	460d      	mov	r5, r1
 800687c:	4614      	mov	r4, r2
 800687e:	d50e      	bpl.n	800689e <_svfiprintf_r+0x32>
 8006880:	690b      	ldr	r3, [r1, #16]
 8006882:	b963      	cbnz	r3, 800689e <_svfiprintf_r+0x32>
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	f7ff fe9f 	bl	80065c8 <_malloc_r>
 800688a:	6028      	str	r0, [r5, #0]
 800688c:	6128      	str	r0, [r5, #16]
 800688e:	b920      	cbnz	r0, 800689a <_svfiprintf_r+0x2e>
 8006890:	230c      	movs	r3, #12
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	e0d1      	b.n	8006a3e <_svfiprintf_r+0x1d2>
 800689a:	2340      	movs	r3, #64	; 0x40
 800689c:	616b      	str	r3, [r5, #20]
 800689e:	2300      	movs	r3, #0
 80068a0:	9309      	str	r3, [sp, #36]	; 0x24
 80068a2:	2320      	movs	r3, #32
 80068a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ac:	2330      	movs	r3, #48	; 0x30
 80068ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a58 <_svfiprintf_r+0x1ec>
 80068b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068b6:	f04f 0901 	mov.w	r9, #1
 80068ba:	4623      	mov	r3, r4
 80068bc:	469a      	mov	sl, r3
 80068be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068c2:	b10a      	cbz	r2, 80068c8 <_svfiprintf_r+0x5c>
 80068c4:	2a25      	cmp	r2, #37	; 0x25
 80068c6:	d1f9      	bne.n	80068bc <_svfiprintf_r+0x50>
 80068c8:	ebba 0b04 	subs.w	fp, sl, r4
 80068cc:	d00b      	beq.n	80068e6 <_svfiprintf_r+0x7a>
 80068ce:	465b      	mov	r3, fp
 80068d0:	4622      	mov	r2, r4
 80068d2:	4629      	mov	r1, r5
 80068d4:	4638      	mov	r0, r7
 80068d6:	f7ff ff6e 	bl	80067b6 <__ssputs_r>
 80068da:	3001      	adds	r0, #1
 80068dc:	f000 80aa 	beq.w	8006a34 <_svfiprintf_r+0x1c8>
 80068e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e2:	445a      	add	r2, fp
 80068e4:	9209      	str	r2, [sp, #36]	; 0x24
 80068e6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 80a2 	beq.w	8006a34 <_svfiprintf_r+0x1c8>
 80068f0:	2300      	movs	r3, #0
 80068f2:	f04f 32ff 	mov.w	r2, #4294967295
 80068f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068fa:	f10a 0a01 	add.w	sl, sl, #1
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	9307      	str	r3, [sp, #28]
 8006902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006906:	931a      	str	r3, [sp, #104]	; 0x68
 8006908:	4654      	mov	r4, sl
 800690a:	2205      	movs	r2, #5
 800690c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006910:	4851      	ldr	r0, [pc, #324]	; (8006a58 <_svfiprintf_r+0x1ec>)
 8006912:	f7f9 fc65 	bl	80001e0 <memchr>
 8006916:	9a04      	ldr	r2, [sp, #16]
 8006918:	b9d8      	cbnz	r0, 8006952 <_svfiprintf_r+0xe6>
 800691a:	06d0      	lsls	r0, r2, #27
 800691c:	bf44      	itt	mi
 800691e:	2320      	movmi	r3, #32
 8006920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006924:	0711      	lsls	r1, r2, #28
 8006926:	bf44      	itt	mi
 8006928:	232b      	movmi	r3, #43	; 0x2b
 800692a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800692e:	f89a 3000 	ldrb.w	r3, [sl]
 8006932:	2b2a      	cmp	r3, #42	; 0x2a
 8006934:	d015      	beq.n	8006962 <_svfiprintf_r+0xf6>
 8006936:	9a07      	ldr	r2, [sp, #28]
 8006938:	4654      	mov	r4, sl
 800693a:	2000      	movs	r0, #0
 800693c:	f04f 0c0a 	mov.w	ip, #10
 8006940:	4621      	mov	r1, r4
 8006942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006946:	3b30      	subs	r3, #48	; 0x30
 8006948:	2b09      	cmp	r3, #9
 800694a:	d94e      	bls.n	80069ea <_svfiprintf_r+0x17e>
 800694c:	b1b0      	cbz	r0, 800697c <_svfiprintf_r+0x110>
 800694e:	9207      	str	r2, [sp, #28]
 8006950:	e014      	b.n	800697c <_svfiprintf_r+0x110>
 8006952:	eba0 0308 	sub.w	r3, r0, r8
 8006956:	fa09 f303 	lsl.w	r3, r9, r3
 800695a:	4313      	orrs	r3, r2
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	46a2      	mov	sl, r4
 8006960:	e7d2      	b.n	8006908 <_svfiprintf_r+0x9c>
 8006962:	9b03      	ldr	r3, [sp, #12]
 8006964:	1d19      	adds	r1, r3, #4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	9103      	str	r1, [sp, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	bfbb      	ittet	lt
 800696e:	425b      	neglt	r3, r3
 8006970:	f042 0202 	orrlt.w	r2, r2, #2
 8006974:	9307      	strge	r3, [sp, #28]
 8006976:	9307      	strlt	r3, [sp, #28]
 8006978:	bfb8      	it	lt
 800697a:	9204      	strlt	r2, [sp, #16]
 800697c:	7823      	ldrb	r3, [r4, #0]
 800697e:	2b2e      	cmp	r3, #46	; 0x2e
 8006980:	d10c      	bne.n	800699c <_svfiprintf_r+0x130>
 8006982:	7863      	ldrb	r3, [r4, #1]
 8006984:	2b2a      	cmp	r3, #42	; 0x2a
 8006986:	d135      	bne.n	80069f4 <_svfiprintf_r+0x188>
 8006988:	9b03      	ldr	r3, [sp, #12]
 800698a:	1d1a      	adds	r2, r3, #4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	9203      	str	r2, [sp, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	bfb8      	it	lt
 8006994:	f04f 33ff 	movlt.w	r3, #4294967295
 8006998:	3402      	adds	r4, #2
 800699a:	9305      	str	r3, [sp, #20]
 800699c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a68 <_svfiprintf_r+0x1fc>
 80069a0:	7821      	ldrb	r1, [r4, #0]
 80069a2:	2203      	movs	r2, #3
 80069a4:	4650      	mov	r0, sl
 80069a6:	f7f9 fc1b 	bl	80001e0 <memchr>
 80069aa:	b140      	cbz	r0, 80069be <_svfiprintf_r+0x152>
 80069ac:	2340      	movs	r3, #64	; 0x40
 80069ae:	eba0 000a 	sub.w	r0, r0, sl
 80069b2:	fa03 f000 	lsl.w	r0, r3, r0
 80069b6:	9b04      	ldr	r3, [sp, #16]
 80069b8:	4303      	orrs	r3, r0
 80069ba:	3401      	adds	r4, #1
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c2:	4826      	ldr	r0, [pc, #152]	; (8006a5c <_svfiprintf_r+0x1f0>)
 80069c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069c8:	2206      	movs	r2, #6
 80069ca:	f7f9 fc09 	bl	80001e0 <memchr>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d038      	beq.n	8006a44 <_svfiprintf_r+0x1d8>
 80069d2:	4b23      	ldr	r3, [pc, #140]	; (8006a60 <_svfiprintf_r+0x1f4>)
 80069d4:	bb1b      	cbnz	r3, 8006a1e <_svfiprintf_r+0x1b2>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	3307      	adds	r3, #7
 80069da:	f023 0307 	bic.w	r3, r3, #7
 80069de:	3308      	adds	r3, #8
 80069e0:	9303      	str	r3, [sp, #12]
 80069e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e4:	4433      	add	r3, r6
 80069e6:	9309      	str	r3, [sp, #36]	; 0x24
 80069e8:	e767      	b.n	80068ba <_svfiprintf_r+0x4e>
 80069ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ee:	460c      	mov	r4, r1
 80069f0:	2001      	movs	r0, #1
 80069f2:	e7a5      	b.n	8006940 <_svfiprintf_r+0xd4>
 80069f4:	2300      	movs	r3, #0
 80069f6:	3401      	adds	r4, #1
 80069f8:	9305      	str	r3, [sp, #20]
 80069fa:	4619      	mov	r1, r3
 80069fc:	f04f 0c0a 	mov.w	ip, #10
 8006a00:	4620      	mov	r0, r4
 8006a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a06:	3a30      	subs	r2, #48	; 0x30
 8006a08:	2a09      	cmp	r2, #9
 8006a0a:	d903      	bls.n	8006a14 <_svfiprintf_r+0x1a8>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0c5      	beq.n	800699c <_svfiprintf_r+0x130>
 8006a10:	9105      	str	r1, [sp, #20]
 8006a12:	e7c3      	b.n	800699c <_svfiprintf_r+0x130>
 8006a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a18:	4604      	mov	r4, r0
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e7f0      	b.n	8006a00 <_svfiprintf_r+0x194>
 8006a1e:	ab03      	add	r3, sp, #12
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	462a      	mov	r2, r5
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <_svfiprintf_r+0x1f8>)
 8006a26:	a904      	add	r1, sp, #16
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f3af 8000 	nop.w
 8006a2e:	1c42      	adds	r2, r0, #1
 8006a30:	4606      	mov	r6, r0
 8006a32:	d1d6      	bne.n	80069e2 <_svfiprintf_r+0x176>
 8006a34:	89ab      	ldrh	r3, [r5, #12]
 8006a36:	065b      	lsls	r3, r3, #25
 8006a38:	f53f af2c 	bmi.w	8006894 <_svfiprintf_r+0x28>
 8006a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a3e:	b01d      	add	sp, #116	; 0x74
 8006a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a44:	ab03      	add	r3, sp, #12
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	462a      	mov	r2, r5
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <_svfiprintf_r+0x1f8>)
 8006a4c:	a904      	add	r1, sp, #16
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f000 f87a 	bl	8006b48 <_printf_i>
 8006a54:	e7eb      	b.n	8006a2e <_svfiprintf_r+0x1c2>
 8006a56:	bf00      	nop
 8006a58:	08006edd 	.word	0x08006edd
 8006a5c:	08006ee7 	.word	0x08006ee7
 8006a60:	00000000 	.word	0x00000000
 8006a64:	080067b7 	.word	0x080067b7
 8006a68:	08006ee3 	.word	0x08006ee3

08006a6c <_printf_common>:
 8006a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a70:	4616      	mov	r6, r2
 8006a72:	4699      	mov	r9, r3
 8006a74:	688a      	ldr	r2, [r1, #8]
 8006a76:	690b      	ldr	r3, [r1, #16]
 8006a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	bfb8      	it	lt
 8006a80:	4613      	movlt	r3, r2
 8006a82:	6033      	str	r3, [r6, #0]
 8006a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a88:	4607      	mov	r7, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	b10a      	cbz	r2, 8006a92 <_printf_common+0x26>
 8006a8e:	3301      	adds	r3, #1
 8006a90:	6033      	str	r3, [r6, #0]
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	0699      	lsls	r1, r3, #26
 8006a96:	bf42      	ittt	mi
 8006a98:	6833      	ldrmi	r3, [r6, #0]
 8006a9a:	3302      	addmi	r3, #2
 8006a9c:	6033      	strmi	r3, [r6, #0]
 8006a9e:	6825      	ldr	r5, [r4, #0]
 8006aa0:	f015 0506 	ands.w	r5, r5, #6
 8006aa4:	d106      	bne.n	8006ab4 <_printf_common+0x48>
 8006aa6:	f104 0a19 	add.w	sl, r4, #25
 8006aaa:	68e3      	ldr	r3, [r4, #12]
 8006aac:	6832      	ldr	r2, [r6, #0]
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	42ab      	cmp	r3, r5
 8006ab2:	dc26      	bgt.n	8006b02 <_printf_common+0x96>
 8006ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ab8:	1e13      	subs	r3, r2, #0
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	bf18      	it	ne
 8006abe:	2301      	movne	r3, #1
 8006ac0:	0692      	lsls	r2, r2, #26
 8006ac2:	d42b      	bmi.n	8006b1c <_printf_common+0xb0>
 8006ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ac8:	4649      	mov	r1, r9
 8006aca:	4638      	mov	r0, r7
 8006acc:	47c0      	blx	r8
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d01e      	beq.n	8006b10 <_printf_common+0xa4>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	68e5      	ldr	r5, [r4, #12]
 8006ad6:	6832      	ldr	r2, [r6, #0]
 8006ad8:	f003 0306 	and.w	r3, r3, #6
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	bf08      	it	eq
 8006ae0:	1aad      	subeq	r5, r5, r2
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	6922      	ldr	r2, [r4, #16]
 8006ae6:	bf0c      	ite	eq
 8006ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aec:	2500      	movne	r5, #0
 8006aee:	4293      	cmp	r3, r2
 8006af0:	bfc4      	itt	gt
 8006af2:	1a9b      	subgt	r3, r3, r2
 8006af4:	18ed      	addgt	r5, r5, r3
 8006af6:	2600      	movs	r6, #0
 8006af8:	341a      	adds	r4, #26
 8006afa:	42b5      	cmp	r5, r6
 8006afc:	d11a      	bne.n	8006b34 <_printf_common+0xc8>
 8006afe:	2000      	movs	r0, #0
 8006b00:	e008      	b.n	8006b14 <_printf_common+0xa8>
 8006b02:	2301      	movs	r3, #1
 8006b04:	4652      	mov	r2, sl
 8006b06:	4649      	mov	r1, r9
 8006b08:	4638      	mov	r0, r7
 8006b0a:	47c0      	blx	r8
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d103      	bne.n	8006b18 <_printf_common+0xac>
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	3501      	adds	r5, #1
 8006b1a:	e7c6      	b.n	8006aaa <_printf_common+0x3e>
 8006b1c:	18e1      	adds	r1, r4, r3
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	2030      	movs	r0, #48	; 0x30
 8006b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b26:	4422      	add	r2, r4
 8006b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b30:	3302      	adds	r3, #2
 8006b32:	e7c7      	b.n	8006ac4 <_printf_common+0x58>
 8006b34:	2301      	movs	r3, #1
 8006b36:	4622      	mov	r2, r4
 8006b38:	4649      	mov	r1, r9
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	47c0      	blx	r8
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d0e6      	beq.n	8006b10 <_printf_common+0xa4>
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7d9      	b.n	8006afa <_printf_common+0x8e>
	...

08006b48 <_printf_i>:
 8006b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4c:	7e0f      	ldrb	r7, [r1, #24]
 8006b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b50:	2f78      	cmp	r7, #120	; 0x78
 8006b52:	4691      	mov	r9, r2
 8006b54:	4680      	mov	r8, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	469a      	mov	sl, r3
 8006b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b5e:	d807      	bhi.n	8006b70 <_printf_i+0x28>
 8006b60:	2f62      	cmp	r7, #98	; 0x62
 8006b62:	d80a      	bhi.n	8006b7a <_printf_i+0x32>
 8006b64:	2f00      	cmp	r7, #0
 8006b66:	f000 80d8 	beq.w	8006d1a <_printf_i+0x1d2>
 8006b6a:	2f58      	cmp	r7, #88	; 0x58
 8006b6c:	f000 80a3 	beq.w	8006cb6 <_printf_i+0x16e>
 8006b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b78:	e03a      	b.n	8006bf0 <_printf_i+0xa8>
 8006b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b7e:	2b15      	cmp	r3, #21
 8006b80:	d8f6      	bhi.n	8006b70 <_printf_i+0x28>
 8006b82:	a101      	add	r1, pc, #4	; (adr r1, 8006b88 <_printf_i+0x40>)
 8006b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b88:	08006be1 	.word	0x08006be1
 8006b8c:	08006bf5 	.word	0x08006bf5
 8006b90:	08006b71 	.word	0x08006b71
 8006b94:	08006b71 	.word	0x08006b71
 8006b98:	08006b71 	.word	0x08006b71
 8006b9c:	08006b71 	.word	0x08006b71
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006b71 	.word	0x08006b71
 8006ba8:	08006b71 	.word	0x08006b71
 8006bac:	08006b71 	.word	0x08006b71
 8006bb0:	08006b71 	.word	0x08006b71
 8006bb4:	08006d01 	.word	0x08006d01
 8006bb8:	08006c25 	.word	0x08006c25
 8006bbc:	08006ce3 	.word	0x08006ce3
 8006bc0:	08006b71 	.word	0x08006b71
 8006bc4:	08006b71 	.word	0x08006b71
 8006bc8:	08006d23 	.word	0x08006d23
 8006bcc:	08006b71 	.word	0x08006b71
 8006bd0:	08006c25 	.word	0x08006c25
 8006bd4:	08006b71 	.word	0x08006b71
 8006bd8:	08006b71 	.word	0x08006b71
 8006bdc:	08006ceb 	.word	0x08006ceb
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	1d1a      	adds	r2, r3, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	602a      	str	r2, [r5, #0]
 8006be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0a3      	b.n	8006d3c <_printf_i+0x1f4>
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	6829      	ldr	r1, [r5, #0]
 8006bf8:	0606      	lsls	r6, r0, #24
 8006bfa:	f101 0304 	add.w	r3, r1, #4
 8006bfe:	d50a      	bpl.n	8006c16 <_printf_i+0xce>
 8006c00:	680e      	ldr	r6, [r1, #0]
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	2e00      	cmp	r6, #0
 8006c06:	da03      	bge.n	8006c10 <_printf_i+0xc8>
 8006c08:	232d      	movs	r3, #45	; 0x2d
 8006c0a:	4276      	negs	r6, r6
 8006c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c10:	485e      	ldr	r0, [pc, #376]	; (8006d8c <_printf_i+0x244>)
 8006c12:	230a      	movs	r3, #10
 8006c14:	e019      	b.n	8006c4a <_printf_i+0x102>
 8006c16:	680e      	ldr	r6, [r1, #0]
 8006c18:	602b      	str	r3, [r5, #0]
 8006c1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c1e:	bf18      	it	ne
 8006c20:	b236      	sxthne	r6, r6
 8006c22:	e7ef      	b.n	8006c04 <_printf_i+0xbc>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	6820      	ldr	r0, [r4, #0]
 8006c28:	1d19      	adds	r1, r3, #4
 8006c2a:	6029      	str	r1, [r5, #0]
 8006c2c:	0601      	lsls	r1, r0, #24
 8006c2e:	d501      	bpl.n	8006c34 <_printf_i+0xec>
 8006c30:	681e      	ldr	r6, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <_printf_i+0xf2>
 8006c34:	0646      	lsls	r6, r0, #25
 8006c36:	d5fb      	bpl.n	8006c30 <_printf_i+0xe8>
 8006c38:	881e      	ldrh	r6, [r3, #0]
 8006c3a:	4854      	ldr	r0, [pc, #336]	; (8006d8c <_printf_i+0x244>)
 8006c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c3e:	bf0c      	ite	eq
 8006c40:	2308      	moveq	r3, #8
 8006c42:	230a      	movne	r3, #10
 8006c44:	2100      	movs	r1, #0
 8006c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c4a:	6865      	ldr	r5, [r4, #4]
 8006c4c:	60a5      	str	r5, [r4, #8]
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	bfa2      	ittt	ge
 8006c52:	6821      	ldrge	r1, [r4, #0]
 8006c54:	f021 0104 	bicge.w	r1, r1, #4
 8006c58:	6021      	strge	r1, [r4, #0]
 8006c5a:	b90e      	cbnz	r6, 8006c60 <_printf_i+0x118>
 8006c5c:	2d00      	cmp	r5, #0
 8006c5e:	d04d      	beq.n	8006cfc <_printf_i+0x1b4>
 8006c60:	4615      	mov	r5, r2
 8006c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c66:	fb03 6711 	mls	r7, r3, r1, r6
 8006c6a:	5dc7      	ldrb	r7, [r0, r7]
 8006c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c70:	4637      	mov	r7, r6
 8006c72:	42bb      	cmp	r3, r7
 8006c74:	460e      	mov	r6, r1
 8006c76:	d9f4      	bls.n	8006c62 <_printf_i+0x11a>
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d10b      	bne.n	8006c94 <_printf_i+0x14c>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	07de      	lsls	r6, r3, #31
 8006c80:	d508      	bpl.n	8006c94 <_printf_i+0x14c>
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	6861      	ldr	r1, [r4, #4]
 8006c86:	4299      	cmp	r1, r3
 8006c88:	bfde      	ittt	le
 8006c8a:	2330      	movle	r3, #48	; 0x30
 8006c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c94:	1b52      	subs	r2, r2, r5
 8006c96:	6122      	str	r2, [r4, #16]
 8006c98:	f8cd a000 	str.w	sl, [sp]
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	aa03      	add	r2, sp, #12
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f7ff fee2 	bl	8006a6c <_printf_common>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d14c      	bne.n	8006d46 <_printf_i+0x1fe>
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb0:	b004      	add	sp, #16
 8006cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb6:	4835      	ldr	r0, [pc, #212]	; (8006d8c <_printf_i+0x244>)
 8006cb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cbc:	6829      	ldr	r1, [r5, #0]
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cc4:	6029      	str	r1, [r5, #0]
 8006cc6:	061d      	lsls	r5, r3, #24
 8006cc8:	d514      	bpl.n	8006cf4 <_printf_i+0x1ac>
 8006cca:	07df      	lsls	r7, r3, #31
 8006ccc:	bf44      	itt	mi
 8006cce:	f043 0320 	orrmi.w	r3, r3, #32
 8006cd2:	6023      	strmi	r3, [r4, #0]
 8006cd4:	b91e      	cbnz	r6, 8006cde <_printf_i+0x196>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	f023 0320 	bic.w	r3, r3, #32
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	2310      	movs	r3, #16
 8006ce0:	e7b0      	b.n	8006c44 <_printf_i+0xfc>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	f043 0320 	orr.w	r3, r3, #32
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	2378      	movs	r3, #120	; 0x78
 8006cec:	4828      	ldr	r0, [pc, #160]	; (8006d90 <_printf_i+0x248>)
 8006cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cf2:	e7e3      	b.n	8006cbc <_printf_i+0x174>
 8006cf4:	0659      	lsls	r1, r3, #25
 8006cf6:	bf48      	it	mi
 8006cf8:	b2b6      	uxthmi	r6, r6
 8006cfa:	e7e6      	b.n	8006cca <_printf_i+0x182>
 8006cfc:	4615      	mov	r5, r2
 8006cfe:	e7bb      	b.n	8006c78 <_printf_i+0x130>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	6826      	ldr	r6, [r4, #0]
 8006d04:	6961      	ldr	r1, [r4, #20]
 8006d06:	1d18      	adds	r0, r3, #4
 8006d08:	6028      	str	r0, [r5, #0]
 8006d0a:	0635      	lsls	r5, r6, #24
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	d501      	bpl.n	8006d14 <_printf_i+0x1cc>
 8006d10:	6019      	str	r1, [r3, #0]
 8006d12:	e002      	b.n	8006d1a <_printf_i+0x1d2>
 8006d14:	0670      	lsls	r0, r6, #25
 8006d16:	d5fb      	bpl.n	8006d10 <_printf_i+0x1c8>
 8006d18:	8019      	strh	r1, [r3, #0]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	4615      	mov	r5, r2
 8006d20:	e7ba      	b.n	8006c98 <_printf_i+0x150>
 8006d22:	682b      	ldr	r3, [r5, #0]
 8006d24:	1d1a      	adds	r2, r3, #4
 8006d26:	602a      	str	r2, [r5, #0]
 8006d28:	681d      	ldr	r5, [r3, #0]
 8006d2a:	6862      	ldr	r2, [r4, #4]
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f7f9 fa56 	bl	80001e0 <memchr>
 8006d34:	b108      	cbz	r0, 8006d3a <_printf_i+0x1f2>
 8006d36:	1b40      	subs	r0, r0, r5
 8006d38:	6060      	str	r0, [r4, #4]
 8006d3a:	6863      	ldr	r3, [r4, #4]
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d44:	e7a8      	b.n	8006c98 <_printf_i+0x150>
 8006d46:	6923      	ldr	r3, [r4, #16]
 8006d48:	462a      	mov	r2, r5
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	47d0      	blx	sl
 8006d50:	3001      	adds	r0, #1
 8006d52:	d0ab      	beq.n	8006cac <_printf_i+0x164>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	079b      	lsls	r3, r3, #30
 8006d58:	d413      	bmi.n	8006d82 <_printf_i+0x23a>
 8006d5a:	68e0      	ldr	r0, [r4, #12]
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	4298      	cmp	r0, r3
 8006d60:	bfb8      	it	lt
 8006d62:	4618      	movlt	r0, r3
 8006d64:	e7a4      	b.n	8006cb0 <_printf_i+0x168>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4632      	mov	r2, r6
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	47d0      	blx	sl
 8006d70:	3001      	adds	r0, #1
 8006d72:	d09b      	beq.n	8006cac <_printf_i+0x164>
 8006d74:	3501      	adds	r5, #1
 8006d76:	68e3      	ldr	r3, [r4, #12]
 8006d78:	9903      	ldr	r1, [sp, #12]
 8006d7a:	1a5b      	subs	r3, r3, r1
 8006d7c:	42ab      	cmp	r3, r5
 8006d7e:	dcf2      	bgt.n	8006d66 <_printf_i+0x21e>
 8006d80:	e7eb      	b.n	8006d5a <_printf_i+0x212>
 8006d82:	2500      	movs	r5, #0
 8006d84:	f104 0619 	add.w	r6, r4, #25
 8006d88:	e7f5      	b.n	8006d76 <_printf_i+0x22e>
 8006d8a:	bf00      	nop
 8006d8c:	08006eee 	.word	0x08006eee
 8006d90:	08006eff 	.word	0x08006eff

08006d94 <__retarget_lock_acquire_recursive>:
 8006d94:	4770      	bx	lr

08006d96 <__retarget_lock_release_recursive>:
 8006d96:	4770      	bx	lr

08006d98 <memmove>:
 8006d98:	4288      	cmp	r0, r1
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	eb01 0402 	add.w	r4, r1, r2
 8006da0:	d902      	bls.n	8006da8 <memmove+0x10>
 8006da2:	4284      	cmp	r4, r0
 8006da4:	4623      	mov	r3, r4
 8006da6:	d807      	bhi.n	8006db8 <memmove+0x20>
 8006da8:	1e43      	subs	r3, r0, #1
 8006daa:	42a1      	cmp	r1, r4
 8006dac:	d008      	beq.n	8006dc0 <memmove+0x28>
 8006dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006db6:	e7f8      	b.n	8006daa <memmove+0x12>
 8006db8:	4402      	add	r2, r0
 8006dba:	4601      	mov	r1, r0
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	d100      	bne.n	8006dc2 <memmove+0x2a>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dca:	e7f7      	b.n	8006dbc <memmove+0x24>

08006dcc <_malloc_usable_size_r>:
 8006dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd0:	1f18      	subs	r0, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bfbc      	itt	lt
 8006dd6:	580b      	ldrlt	r3, [r1, r0]
 8006dd8:	18c0      	addlt	r0, r0, r3
 8006dda:	4770      	bx	lr

08006ddc <_init>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr

08006de8 <_fini>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr
 8006df4:	0000      	movs	r0, r0
	...
