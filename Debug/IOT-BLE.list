
IOT-BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e28  08004e28  00020458  2**0
                  CONTENTS
  4 .ARM          00000000  08004e28  08004e28  00020458  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e28  08004e28  00020458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  20000000  08004e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000458  08005290  00020458  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  08005290  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 13 .debug_info   000193cc  00000000  00000000  000204cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b78  00000000  00000000  00039897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000bc5e  00000000  00000000  0003c40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001200  00000000  00000000  00048070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e31  00000000  00000000  00049270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003a54  00000000  00000000  0004a0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b64f  00000000  00000000  0004daf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f746d  00000000  00000000  00069144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003618  00000000  00000000  001605b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00163bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000458 	.word	0x20000458
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004db4 	.word	0x08004db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000045c 	.word	0x2000045c
 80001c4:	08004db4 	.word	0x08004db4

080001c8 <fetchBleEvent>:
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
}

int fetchBleEvent(uint8_t *container, int size){
 80001c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001cc:	b088      	sub	sp, #32
 80001ce:	4606      	mov	r6, r0
 80001d0:	460d      	mov	r5, r1

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <fetchBleEvent+0xdc>)
 80001d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80001d8:	9006      	str	r0, [sp, #24]
 80001da:	f88d 101c 	strb.w	r1, [sp, #28]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80001de:	2140      	movs	r1, #64	; 0x40
 80001e0:	4831      	ldr	r0, [pc, #196]	; (80002a8 <fetchBleEvent+0xe0>)
 80001e2:	f001 ff67 	bl	80020b4 <HAL_GPIO_ReadPin>
 80001e6:	2800      	cmp	r0, #0
 80001e8:	d059      	beq.n	800029e <fetchBleEvent+0xd6>

  HAL_Delay(5);
 80001ea:	2005      	movs	r0, #5
 80001ec:	f001 fdf6 	bl	8001ddc <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80001f0:	4f2e      	ldr	r7, [pc, #184]	; (80002ac <fetchBleEvent+0xe4>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f8:	4638      	mov	r0, r7
 80001fa:	f001 ff62 	bl	80020c2 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80001fe:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80002b0 <fetchBleEvent+0xe8>
 8000202:	2401      	movs	r4, #1
 8000204:	9400      	str	r4, [sp, #0]
 8000206:	2305      	movs	r3, #5
 8000208:	aa04      	add	r2, sp, #16
 800020a:	a906      	add	r1, sp, #24
 800020c:	4640      	mov	r0, r8
 800020e:	f003 fd98 	bl	8003d42 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000212:	4622      	mov	r2, r4
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4638      	mov	r0, r7
 800021a:	f001 ff52 	bl	80020c2 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800021e:	4620      	mov	r0, r4
 8000220:	f001 fddc 	bl	8001ddc <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022a:	4638      	mov	r0, r7
 800022c:	f001 ff49 	bl	80020c2 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000230:	9400      	str	r4, [sp, #0]
 8000232:	2305      	movs	r3, #5
 8000234:	aa04      	add	r2, sp, #16
 8000236:	a906      	add	r1, sp, #24
 8000238:	4640      	mov	r0, r8
 800023a:	f003 fd82 	bl	8003d42 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 800023e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000242:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000246:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  int i;
  char dummy=0xff;
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	f88d 200f 	strb.w	r2, [sp, #15]

  if(dataSize>size){
 8000250:	42ab      	cmp	r3, r5
 8000252:	dc00      	bgt.n	8000256 <fetchBleEvent+0x8e>
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000254:	461d      	mov	r5, r3
	  dataSize=size;
  }

  if(dataSize>0){
 8000256:	2d00      	cmp	r5, #0
 8000258:	dd18      	ble.n	800028c <fetchBleEvent+0xc4>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 800025a:	2400      	movs	r4, #0
 800025c:	e008      	b.n	8000270 <fetchBleEvent+0xa8>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800025e:	2301      	movs	r3, #1
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	1932      	adds	r2, r6, r4
 8000264:	f10d 010f 	add.w	r1, sp, #15
 8000268:	4811      	ldr	r0, [pc, #68]	; (80002b0 <fetchBleEvent+0xe8>)
 800026a:	f003 fd6a 	bl	8003d42 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 800026e:	3401      	adds	r4, #1
 8000270:	42a5      	cmp	r5, r4
 8000272:	dcf4      	bgt.n	800025e <fetchBleEvent+0x96>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	480c      	ldr	r0, [pc, #48]	; (80002ac <fetchBleEvent+0xe4>)
 800027c:	f001 ff21 	bl	80020c2 <HAL_GPIO_WritePin>
  	}

  //let's stop the SPI2


  dataAvailable=0;
 8000280:	2000      	movs	r0, #0
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <fetchBleEvent+0xec>)
 8000284:	6018      	str	r0, [r3, #0]
  return BLE_OK;
  }else{
  return -2;
  }
}
 8000286:	b008      	add	sp, #32
 8000288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	4806      	ldr	r0, [pc, #24]	; (80002ac <fetchBleEvent+0xe4>)
 8000294:	f001 ff15 	bl	80020c2 <HAL_GPIO_WritePin>
        return -1;
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	e7f3      	b.n	8000286 <fetchBleEvent+0xbe>
  return -2;
 800029e:	f06f 0001 	mvn.w	r0, #1
 80002a2:	e7f0      	b.n	8000286 <fetchBleEvent+0xbe>
 80002a4:	08004dd0 	.word	0x08004dd0
 80002a8:	48001000 	.word	0x48001000
 80002ac:	48000c00 	.word	0x48000c00
 80002b0:	200005e8 	.word	0x200005e8
 80002b4:	20000734 	.word	0x20000734

080002b8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
	int j=0;

	for(j=0;j<size;j++){
 80002b8:	2300      	movs	r3, #0
 80002ba:	4293      	cmp	r3, r2
 80002bc:	da0f      	bge.n	80002de <checkEventResp+0x26>
int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80002be:	b500      	push	{lr}

		if(event[j]!=reference[j]){
 80002c0:	f810 e003 	ldrb.w	lr, [r0, r3]
 80002c4:	f811 c003 	ldrb.w	ip, [r1, r3]
 80002c8:	45e6      	cmp	lr, ip
 80002ca:	d105      	bne.n	80002d8 <checkEventResp+0x20>
	for(j=0;j<size;j++){
 80002cc:	3301      	adds	r3, #1
 80002ce:	4293      	cmp	r3, r2
 80002d0:	dbf6      	blt.n	80002c0 <checkEventResp+0x8>
			return -1;
		}
	}

return BLE_OK;
 80002d2:	2000      	movs	r0, #0
}
 80002d4:	f85d fb04 	ldr.w	pc, [sp], #4
			return -1;
 80002d8:	f04f 30ff 	mov.w	r0, #4294967295
 80002dc:	e7fa      	b.n	80002d4 <checkEventResp+0x1c>
return BLE_OK;
 80002de:	2000      	movs	r0, #0
}
 80002e0:	4770      	bx	lr
	...

080002e4 <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	4605      	mov	r5, r0
 80002ea:	460c      	mov	r4, r1

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <sendCommand+0x70>)
 80002ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002f2:	9004      	str	r0, [sp, #16]
 80002f4:	f88d 1014 	strb.w	r1, [sp, #20]
	  int result;

	do{


	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	4816      	ldr	r0, [pc, #88]	; (8000358 <sendCommand+0x74>)
 8000300:	f001 fedf 	bl	80020c2 <HAL_GPIO_WritePin>

	//wait until it is possible to write
	//while(!dataAvailable);
	HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000304:	2301      	movs	r3, #1
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2305      	movs	r3, #5
 800030a:	aa02      	add	r2, sp, #8
 800030c:	a904      	add	r1, sp, #16
 800030e:	4813      	ldr	r0, [pc, #76]	; (800035c <sendCommand+0x78>)
 8000310:	f003 fd17 	bl	8003d42 <HAL_SPI_TransmitReceive>
	int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000314:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8000318:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800031c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if(bufferSize>=size){
 8000320:	42a3      	cmp	r3, r4
 8000322:	da0e      	bge.n	8000342 <sendCommand+0x5e>
		HAL_SPI_Transmit(&hspi3,command,size,1);
		result=0;
	}else{
		result=-1;
 8000324:	f04f 36ff 	mov.w	r6, #4294967295
	}
	//HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032e:	480a      	ldr	r0, [pc, #40]	; (8000358 <sendCommand+0x74>)
 8000330:	f001 fec7 	bl	80020c2 <HAL_GPIO_WritePin>
	dataAvailable=0;
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <sendCommand+0x7c>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800033a:	2e00      	cmp	r6, #0
 800033c:	d1dc      	bne.n	80002f8 <sendCommand+0x14>

}
 800033e:	b006      	add	sp, #24
 8000340:	bd70      	pop	{r4, r5, r6, pc}
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000342:	2301      	movs	r3, #1
 8000344:	b2a2      	uxth	r2, r4
 8000346:	4629      	mov	r1, r5
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <sendCommand+0x78>)
 800034a:	f003 fbf9 	bl	8003b40 <HAL_SPI_Transmit>
		result=0;
 800034e:	2600      	movs	r6, #0
 8000350:	e7ea      	b.n	8000328 <sendCommand+0x44>
 8000352:	bf00      	nop
 8000354:	08004dd8 	.word	0x08004dd8
 8000358:	48000c00 	.word	0x48000c00
 800035c:	200005e8 	.word	0x200005e8
 8000360:	20000734 	.word	0x20000734

08000364 <setConnectable>:



}

void setConnectable(){
 8000364:	b570      	push	{r4, r5, r6, lr}
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000366:	2012      	movs	r0, #18
 8000368:	f004 fbca 	bl	8004b00 <malloc>
 800036c:	4604      	mov	r4, r0
	   memcpy(localname,deviceName,sizeof(deviceName));
 800036e:	4e2b      	ldr	r6, [pc, #172]	; (800041c <setConnectable+0xb8>)
 8000370:	4633      	mov	r3, r6
 8000372:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000374:	6020      	str	r0, [r4, #0]
 8000376:	6061      	str	r1, [r4, #4]
 8000378:	60a2      	str	r2, [r4, #8]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	7323      	strb	r3, [r4, #12]
	   localname[sizeof(deviceName)+1]=0x00;
 800037e:	2300      	movs	r3, #0
 8000380:	73a3      	strb	r3, [r4, #14]
	   localname[sizeof(deviceName)+2]=0x00;
 8000382:	73e3      	strb	r3, [r4, #15]
	   localname[sizeof(deviceName)+3]=0x00;
 8000384:	7423      	strb	r3, [r4, #16]
	   localname[sizeof(deviceName)+4]=0x00;
 8000386:	7463      	strb	r3, [r4, #17]
	   localname[sizeof(deviceName)]=0x00;
 8000388:	7363      	strb	r3, [r4, #13]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 800038a:	230e      	movs	r3, #14
 800038c:	76f3      	strb	r3, [r6, #27]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800038e:	231b      	movs	r3, #27
 8000390:	74f3      	strb	r3, [r6, #19]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000392:	201f      	movs	r0, #31
 8000394:	f004 fbb4 	bl	8004b00 <malloc>
 8000398:	4605      	mov	r5, r0
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800039a:	f106 0310 	add.w	r3, r6, #16
 800039e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80003a0:	6028      	str	r0, [r5, #0]
 80003a2:	6069      	str	r1, [r5, #4]
 80003a4:	60aa      	str	r2, [r5, #8]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	732b      	strb	r3, [r5, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80003aa:	6820      	ldr	r0, [r4, #0]
 80003ac:	6861      	ldr	r1, [r4, #4]
 80003ae:	68a2      	ldr	r2, [r4, #8]
 80003b0:	68e3      	ldr	r3, [r4, #12]
 80003b2:	f8c5 000d 	str.w	r0, [r5, #13]
 80003b6:	f8c5 1011 	str.w	r1, [r5, #17]
 80003ba:	f8c5 2015 	str.w	r2, [r5, #21]
 80003be:	f8c5 3019 	str.w	r3, [r5, #25]
 80003c2:	8a23      	ldrh	r3, [r4, #16]
 80003c4:	f8a5 301d 	strh.w	r3, [r5, #29]

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80003c8:	211f      	movs	r1, #31
 80003ca:	4628      	mov	r0, r5
 80003cc:	f7ff ff8a 	bl	80002e4 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 80003d0:	2007      	movs	r0, #7
 80003d2:	f004 fb95 	bl	8004b00 <malloc>
 80003d6:	4606      	mov	r6, r0
	   while(!dataAvailable);
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <setConnectable+0xbc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0fb      	beq.n	80003d8 <setConnectable+0x74>
	   res=fetchBleEvent(rxEvent,7);
 80003e0:	2107      	movs	r1, #7
 80003e2:	4630      	mov	r0, r6
 80003e4:	f7ff fef0 	bl	80001c8 <fetchBleEvent>
	   if(res==BLE_OK){
 80003e8:	b950      	cbnz	r0, 8000400 <setConnectable+0x9c>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80003ea:	2207      	movs	r2, #7
 80003ec:	490d      	ldr	r1, [pc, #52]	; (8000424 <setConnectable+0xc0>)
 80003ee:	4630      	mov	r0, r6
 80003f0:	f7ff ff62 	bl	80002b8 <checkEventResp>
	   if(res==BLE_OK){
 80003f4:	b920      	cbnz	r0, 8000400 <setConnectable+0x9c>
		   stackInitCompleteFlag|=0x80;
 80003f6:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <setConnectable+0xc4>)
 80003f8:	8813      	ldrh	r3, [r2, #0]
 80003fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fe:	8013      	strh	r3, [r2, #0]
	   }
	   }

	   free(rxEvent);
 8000400:	4630      	mov	r0, r6
 8000402:	f004 fb85 	bl	8004b10 <free>
	   free(discoverableCommand);
 8000406:	4628      	mov	r0, r5
 8000408:	f004 fb82 	bl	8004b10 <free>
	   free(localname);
 800040c:	4620      	mov	r0, r4
 800040e:	f004 fb7f 	bl	8004b10 <free>
	   HAL_Delay(10);
 8000412:	200a      	movs	r0, #10
 8000414:	f001 fce2 	bl	8001ddc <HAL_Delay>
}
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000
 8000420:	20000734 	.word	0x20000734
 8000424:	20000020 	.word	0x20000020
 8000428:	20000474 	.word	0x20000474

0800042c <catchBLE>:
void catchBLE(){
 800042c:	b508      	push	{r3, lr}
int result=fetchBleEvent(buffer,127);
 800042e:	217f      	movs	r1, #127	; 0x7f
 8000430:	4806      	ldr	r0, [pc, #24]	; (800044c <catchBLE+0x20>)
 8000432:	f7ff fec9 	bl	80001c8 <fetchBleEvent>
	  if(result==BLE_OK){
 8000436:	b928      	cbnz	r0, 8000444 <catchBLE+0x18>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 8000438:	2203      	movs	r2, #3
 800043a:	4905      	ldr	r1, [pc, #20]	; (8000450 <catchBLE+0x24>)
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <catchBLE+0x20>)
 800043e:	f7ff ff3b 	bl	80002b8 <checkEventResp>
 8000442:	b100      	cbz	r0, 8000446 <catchBLE+0x1a>
}
 8000444:	bd08      	pop	{r3, pc}
			  setConnectable();
 8000446:	f7ff ff8d 	bl	8000364 <setConnectable>
}
 800044a:	e7fb      	b.n	8000444 <catchBLE+0x18>
 800044c:	20000478 	.word	0x20000478
 8000450:	20000028 	.word	0x20000028

08000454 <BLE_command>:
}




int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	4617      	mov	r7, r2
 8000458:	461e      	mov	r6, r3
	   int response;

	   sendCommand(command,size);
 800045a:	f7ff ff43 	bl	80002e4 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800045e:	9d06      	ldr	r5, [sp, #24]
 8000460:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8000464:	4628      	mov	r0, r5
 8000466:	f004 fb4b 	bl	8004b00 <malloc>
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <BLE_command+0x5c>)
 800046c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104

	   long contatore=0;
 8000470:	2400      	movs	r4, #0
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000472:	2140      	movs	r1, #64	; 0x40
 8000474:	480f      	ldr	r0, [pc, #60]	; (80004b4 <BLE_command+0x60>)
 8000476:	f001 fe1d 	bl	80020b4 <HAL_GPIO_ReadPin>
 800047a:	b920      	cbnz	r0, 8000486 <BLE_command+0x32>
		   contatore++;
 800047c:	3401      	adds	r4, #1
		   if(contatore>30000){
 800047e:	f247 5030 	movw	r0, #30000	; 0x7530
 8000482:	4284      	cmp	r4, r0
 8000484:	ddf5      	ble.n	8000472 <BLE_command+0x1e>
			   break;
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000486:	4629      	mov	r1, r5
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <BLE_command+0x5c>)
 800048a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800048e:	f7ff fe9b 	bl	80001c8 <fetchBleEvent>
	   if(response==BLE_OK){
 8000492:	4604      	mov	r4, r0
 8000494:	b938      	cbnz	r0, 80004a6 <BLE_command+0x52>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000496:	4632      	mov	r2, r6
 8000498:	4639      	mov	r1, r7
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <BLE_command+0x5c>)
 800049c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 80004a0:	f7ff ff0a 	bl	80002b8 <checkEventResp>
 80004a4:	4604      	mov	r4, r0
	   }
	   HAL_Delay(10);
 80004a6:	200a      	movs	r0, #10
 80004a8:	f001 fc98 	bl	8001ddc <HAL_Delay>


	return response;
}
 80004ac:	4620      	mov	r0, r4
 80004ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004b0:	20000474 	.word	0x20000474
 80004b4:	48001000 	.word	0x48001000

080004b8 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	b083      	sub	sp, #12
 80004bc:	460d      	mov	r5, r1


	//memcpy
	memcpy(ADD_CUSTOM_SERVICE+5,UUID,16);
 80004be:	4c16      	ldr	r4, [pc, #88]	; (8000518 <addService+0x60>)
 80004c0:	f8d0 e000 	ldr.w	lr, [r0]
 80004c4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80004c8:	6881      	ldr	r1, [r0, #8]
 80004ca:	68c3      	ldr	r3, [r0, #12]
 80004cc:	f8c4 e031 	str.w	lr, [r4, #49]	; 0x31
 80004d0:	f8c4 c035 	str.w	ip, [r4, #53]	; 0x35
 80004d4:	f8c4 1039 	str.w	r1, [r4, #57]	; 0x39
 80004d8:	f8c4 303d 	str.w	r3, [r4, #61]	; 0x3d
    ADD_CUSTOM_SERVICE[22]=attributes;
 80004dc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
	   if(BLE_command(ADD_CUSTOM_SERVICE,sizeof(ADD_CUSTOM_SERVICE),ADD_CUSTOM_SERVICE_COMPLETE,sizeof(ADD_CUSTOM_SERVICE_COMPLETE),1)==BLE_OK){
 80004e0:	2301      	movs	r3, #1
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2307      	movs	r3, #7
 80004e6:	f104 0244 	add.w	r2, r4, #68	; 0x44
 80004ea:	2117      	movs	r1, #23
 80004ec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80004f0:	f7ff ffb0 	bl	8000454 <BLE_command>
 80004f4:	b940      	cbnz	r0, 8000508 <addService+0x50>
		   handle[0]=rxEvent[7];
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <addService+0x64>)
 80004f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80004fc:	79d2      	ldrb	r2, [r2, #7]
 80004fe:	702a      	strb	r2, [r5, #0]
		   handle[1]=rxEvent[8];
 8000500:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000504:	7a1b      	ldrb	r3, [r3, #8]
 8000506:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <addService+0x64>)
 800050a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800050e:	f004 faff 	bl	8004b10 <free>



}
 8000512:	b003      	add	sp, #12
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop
 8000518:	20000000 	.word	0x20000000
 800051c:	20000474 	.word	0x20000474

08000520 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	460d      	mov	r5, r1



	memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000526:	4c1b      	ldr	r4, [pc, #108]	; (8000594 <addCharacteristic+0x74>)
 8000528:	6806      	ldr	r6, [r0, #0]
 800052a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800052e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000532:	68c1      	ldr	r1, [r0, #12]
 8000534:	f8c4 6053 	str.w	r6, [r4, #83]	; 0x53
 8000538:	f8c4 e057 	str.w	lr, [r4, #87]	; 0x57
 800053c:	f8c4 c05b 	str.w	ip, [r4, #91]	; 0x5b
 8000540:	f8c4 105f 	str.w	r1, [r4, #95]	; 0x5f


	   ADD_CUSTOM_CHAR[4]= handleService[0];
 8000544:	7811      	ldrb	r1, [r2, #0]
 8000546:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	   ADD_CUSTOM_CHAR[5]= handleService[1];
 800054a:	7852      	ldrb	r2, [r2, #1]
 800054c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
	   ADD_CUSTOM_CHAR[23]= maxsize;
 8000550:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	   ADD_CUSTOM_CHAR[25]= proprieties;
 8000554:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000558:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	   if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 800055c:	2301      	movs	r3, #1
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2307      	movs	r3, #7
 8000562:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8000566:	211e      	movs	r1, #30
 8000568:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800056c:	f7ff ff72 	bl	8000454 <BLE_command>
 8000570:	b940      	cbnz	r0, 8000584 <addCharacteristic+0x64>
		   handleChar[0]=rxEvent[7];
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <addCharacteristic+0x78>)
 8000574:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000578:	79d2      	ldrb	r2, [r2, #7]
 800057a:	702a      	strb	r2, [r5, #0]
		   handleChar[1]=rxEvent[8];
 800057c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000580:	7a1b      	ldrb	r3, [r3, #8]
 8000582:	706b      	strb	r3, [r5, #1]
	    }
	   free(rxEvent);
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <addCharacteristic+0x78>)
 8000586:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800058a:	f004 fac1 	bl	8004b10 <free>





}
 800058e:	b002      	add	sp, #8
 8000590:	bd70      	pop	{r4, r5, r6, pc}
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000
 8000598:	20000474 	.word	0x20000474

0800059c <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	b083      	sub	sp, #12
 80005a0:	461e      	mov	r6, r3

	UPDATE_CHAR[3]=size+6;
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	1d9d      	adds	r5, r3, #6
 80005a6:	4c1c      	ldr	r4, [pc, #112]	; (8000618 <updateCharValue+0x7c>)
 80005a8:	f884 5077 	strb.w	r5, [r4, #119]	; 0x77
	UPDATE_CHAR[4]=handleService[0];
 80005ac:	7805      	ldrb	r5, [r0, #0]
 80005ae:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
	UPDATE_CHAR[5]=handleService[1];
 80005b2:	7840      	ldrb	r0, [r0, #1]
 80005b4:	f884 0079 	strb.w	r0, [r4, #121]	; 0x79
	UPDATE_CHAR[6]=handleChar[0];
 80005b8:	7808      	ldrb	r0, [r1, #0]
 80005ba:	f884 007a 	strb.w	r0, [r4, #122]	; 0x7a
	UPDATE_CHAR[7]=handleChar[1];
 80005be:	7849      	ldrb	r1, [r1, #1]
 80005c0:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
	UPDATE_CHAR[8]=offset;
 80005c4:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
	UPDATE_CHAR[9]=size;
 80005c8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 80005cc:	f106 070a 	add.w	r7, r6, #10
 80005d0:	4638      	mov	r0, r7
 80005d2:	f004 fa95 	bl	8004b00 <malloc>
 80005d6:	4605      	mov	r5, r0
	memcpy(commandComplete,UPDATE_CHAR,10);
 80005d8:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80005dc:	cb03      	ldmia	r3!, {r0, r1}
 80005de:	6028      	str	r0, [r5, #0]
 80005e0:	6069      	str	r1, [r5, #4]
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	812b      	strh	r3, [r5, #8]
	memcpy(commandComplete+10,data,size);
 80005e6:	4632      	mov	r2, r6
 80005e8:	9908      	ldr	r1, [sp, #32]
 80005ea:	f105 000a 	add.w	r0, r5, #10
 80005ee:	f004 fb87 	bl	8004d00 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 80005f2:	2300      	movs	r3, #0
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2307      	movs	r3, #7
 80005f8:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80005fc:	4639      	mov	r1, r7
 80005fe:	4628      	mov	r0, r5
 8000600:	f7ff ff28 	bl	8000454 <BLE_command>

	free(commandComplete);
 8000604:	4628      	mov	r0, r5
 8000606:	f004 fa83 	bl	8004b10 <free>
	free(rxEvent);
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <updateCharValue+0x80>)
 800060c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000610:	f004 fa7e 	bl	8004b10 <free>

}
 8000614:	b003      	add	sp, #12
 8000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000618:	20000000 	.word	0x20000000
 800061c:	20000474 	.word	0x20000474

08000620 <ble_init>:
void ble_init(){
 8000620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000624:	b083      	sub	sp, #12
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000626:	2006      	movs	r0, #6
 8000628:	f004 fa6a 	bl	8004b00 <malloc>
 800062c:	4bd3      	ldr	r3, [pc, #844]	; (800097c <ble_init+0x35c>)
 800062e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	while(!dataAvailable);
 8000632:	4bd3      	ldr	r3, [pc, #844]	; (8000980 <ble_init+0x360>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0fb      	beq.n	8000632 <ble_init+0x12>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800063a:	2106      	movs	r1, #6
 800063c:	f7ff fdc4 	bl	80001c8 <fetchBleEvent>
	if(res==BLE_OK){
 8000640:	b960      	cbnz	r0, 800065c <ble_init+0x3c>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 8000642:	2206      	movs	r2, #6
 8000644:	49cf      	ldr	r1, [pc, #828]	; (8000984 <ble_init+0x364>)
 8000646:	4bcd      	ldr	r3, [pc, #820]	; (800097c <ble_init+0x35c>)
 8000648:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800064c:	f7ff fe34 	bl	80002b8 <checkEventResp>
	if(res==BLE_OK){
 8000650:	b920      	cbnz	r0, 800065c <ble_init+0x3c>
	   stackInitCompleteFlag|=0x01;
 8000652:	4aca      	ldr	r2, [pc, #808]	; (800097c <ble_init+0x35c>)
 8000654:	8813      	ldrh	r3, [r2, #0]
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	8013      	strh	r3, [r2, #0]
	HAL_Delay(10);
 800065c:	200a      	movs	r0, #10
 800065e:	f001 fbbd 	bl	8001ddc <HAL_Delay>
	free(rxEvent);
 8000662:	4bc6      	ldr	r3, [pc, #792]	; (800097c <ble_init+0x35c>)
 8000664:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000668:	f004 fa52 	bl	8004b10 <free>
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 800066c:	48c6      	ldr	r0, [pc, #792]	; (8000988 <ble_init+0x368>)
 800066e:	2300      	movs	r3, #0
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	f100 028c 	add.w	r2, r0, #140	; 0x8c
 8000678:	2104      	movs	r1, #4
 800067a:	3094      	adds	r0, #148	; 0x94
 800067c:	f7ff feea 	bl	8000454 <BLE_command>
 8000680:	b920      	cbnz	r0, 800068c <ble_init+0x6c>
	   stackInitCompleteFlag|=0x02;
 8000682:	4abe      	ldr	r2, [pc, #760]	; (800097c <ble_init+0x35c>)
 8000684:	8813      	ldrh	r3, [r2, #0]
 8000686:	f043 0302 	orr.w	r3, r3, #2
 800068a:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 800068c:	4bbb      	ldr	r3, [pc, #748]	; (800097c <ble_init+0x35c>)
 800068e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000692:	f004 fa3d 	bl	8004b10 <free>
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000696:	48bc      	ldr	r0, [pc, #752]	; (8000988 <ble_init+0x368>)
 8000698:	2303      	movs	r3, #3
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2307      	movs	r3, #7
 800069e:	f100 0298 	add.w	r2, r0, #152	; 0x98
 80006a2:	4619      	mov	r1, r3
 80006a4:	30a0      	adds	r0, #160	; 0xa0
 80006a6:	f7ff fed5 	bl	8000454 <BLE_command>
 80006aa:	b990      	cbnz	r0, 80006d2 <ble_init+0xb2>
	   stackInitCompleteFlag|=0x04;
 80006ac:	4bb3      	ldr	r3, [pc, #716]	; (800097c <ble_init+0x35c>)
 80006ae:	881a      	ldrh	r2, [r3, #0]
 80006b0:	f042 0204 	orr.w	r2, r2, #4
 80006b4:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 80006b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80006ba:	f8b2 1007 	ldrh.w	r1, [r2, #7]
 80006be:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 80006c2:	f8b2 1009 	ldrh.w	r1, [r2, #9]
 80006c6:	f8a3 110c 	strh.w	r1, [r3, #268]	; 0x10c
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 80006ca:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80006ce:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	free(rxEvent);
 80006d2:	4caa      	ldr	r4, [pc, #680]	; (800097c <ble_init+0x35c>)
 80006d4:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 80006d8:	f004 fa1a 	bl	8004b10 <free>
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 80006dc:	4daa      	ldr	r5, [pc, #680]	; (8000988 <ble_init+0x368>)
 80006de:	9500      	str	r5, [sp, #0]
 80006e0:	230d      	movs	r3, #13
 80006e2:	2200      	movs	r2, #0
 80006e4:	f504 7186 	add.w	r1, r4, #268	; 0x10c
 80006e8:	f504 7084 	add.w	r0, r4, #264	; 0x108
 80006ec:	f7ff ff56 	bl	800059c <updateCharValue>
	stackInitCompleteFlag|=0x08;
 80006f0:	8823      	ldrh	r3, [r4, #0]
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 80006f8:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 80006fc:	f004 fa08 	bl	8004b10 <free>
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000700:	2300      	movs	r3, #0
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2307      	movs	r3, #7
 8000706:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 800070a:	2110      	movs	r1, #16
 800070c:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
 8000710:	f7ff fea0 	bl	8000454 <BLE_command>
 8000714:	b918      	cbnz	r0, 800071e <ble_init+0xfe>
	   stackInitCompleteFlag|=0x10;
 8000716:	8823      	ldrh	r3, [r4, #0]
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	8023      	strh	r3, [r4, #0]
	free(rxEvent);
 800071e:	4b97      	ldr	r3, [pc, #604]	; (800097c <ble_init+0x35c>)
 8000720:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8000724:	f004 f9f4 	bl	8004b10 <free>
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 8000728:	4897      	ldr	r0, [pc, #604]	; (8000988 <ble_init+0x368>)
 800072a:	2300      	movs	r3, #0
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2307      	movs	r3, #7
 8000730:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
 8000734:	2106      	movs	r1, #6
 8000736:	30c8      	adds	r0, #200	; 0xc8
 8000738:	f7ff fe8c 	bl	8000454 <BLE_command>
 800073c:	b920      	cbnz	r0, 8000748 <ble_init+0x128>
	   stackInitCompleteFlag|=0x20;
 800073e:	4a8f      	ldr	r2, [pc, #572]	; (800097c <ble_init+0x35c>)
 8000740:	8813      	ldrh	r3, [r2, #0]
 8000742:	f043 0320 	orr.w	r3, r3, #32
 8000746:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000748:	4b8c      	ldr	r3, [pc, #560]	; (800097c <ble_init+0x35c>)
 800074a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800074e:	f004 f9df 	bl	8004b10 <free>
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000752:	488d      	ldr	r0, [pc, #564]	; (8000988 <ble_init+0x368>)
 8000754:	2300      	movs	r3, #0
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2307      	movs	r3, #7
 800075a:	f100 02d0 	add.w	r2, r0, #208	; 0xd0
 800075e:	2124      	movs	r1, #36	; 0x24
 8000760:	30d8      	adds	r0, #216	; 0xd8
 8000762:	f7ff fe77 	bl	8000454 <BLE_command>
 8000766:	b920      	cbnz	r0, 8000772 <ble_init+0x152>
	   stackInitCompleteFlag|=0x40;
 8000768:	4a84      	ldr	r2, [pc, #528]	; (800097c <ble_init+0x35c>)
 800076a:	8813      	ldrh	r3, [r2, #0]
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	8013      	strh	r3, [r2, #0]
	free(rxEvent);
 8000772:	4d82      	ldr	r5, [pc, #520]	; (800097c <ble_init+0x35c>)
 8000774:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
 8000778:	f004 f9ca 	bl	8004b10 <free>
	setConnectable();
 800077c:	f7ff fdf2 	bl	8000364 <setConnectable>
	addService(UUID_SERVICE_1,CUSTOM_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000780:	f505 778a 	add.w	r7, r5, #276	; 0x114
 8000784:	4c80      	ldr	r4, [pc, #512]	; (8000988 <ble_init+0x368>)
 8000786:	220f      	movs	r2, #15
 8000788:	4639      	mov	r1, r7
 800078a:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 800078e:	f7ff fe93 	bl	80004b8 <addService>
	addCharacteristic(UUID_CHAR_1,CUSTOM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(22),READABLE);
 8000792:	f505 768c 	add.w	r6, r5, #280	; 0x118
 8000796:	f04f 0802 	mov.w	r8, #2
 800079a:	f8cd 8000 	str.w	r8, [sp]
 800079e:	2316      	movs	r3, #22
 80007a0:	463a      	mov	r2, r7
 80007a2:	4631      	mov	r1, r6
 80007a4:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 80007a8:	f7ff feba 	bl	8000520 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,CUSTOM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(22),VALUE1);
 80007ac:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2316      	movs	r3, #22
 80007b4:	2200      	movs	r2, #0
 80007b6:	4631      	mov	r1, r6
 80007b8:	4638      	mov	r0, r7
 80007ba:	f7ff feef 	bl	800059c <updateCharValue>
	addCharacteristic(UUID_CHAR_TEMP,TEMP_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 80007be:	f505 798e 	add.w	r9, r5, #284	; 0x11c
 80007c2:	2612      	movs	r6, #18
 80007c4:	9600      	str	r6, [sp, #0]
 80007c6:	2311      	movs	r3, #17
 80007c8:	463a      	mov	r2, r7
 80007ca:	4649      	mov	r1, r9
 80007cc:	f504 709a 	add.w	r0, r4, #308	; 0x134
 80007d0:	f7ff fea6 	bl	8000520 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),VALUE_TEMP);
 80007d4:	f504 73a2 	add.w	r3, r4, #324	; 0x144
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2311      	movs	r3, #17
 80007dc:	2200      	movs	r2, #0
 80007de:	4649      	mov	r1, r9
 80007e0:	4638      	mov	r0, r7
 80007e2:	f7ff fedb 	bl	800059c <updateCharValue>
	addCharacteristic(UUID_CHAR_HUM,HUM_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(16),READABLE|NOTIFIBLE);
 80007e6:	f505 7990 	add.w	r9, r5, #288	; 0x120
 80007ea:	9600      	str	r6, [sp, #0]
 80007ec:	2310      	movs	r3, #16
 80007ee:	463a      	mov	r2, r7
 80007f0:	4649      	mov	r1, r9
 80007f2:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80007f6:	f7ff fe93 	bl	8000520 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,0,SET_CONTENT_LENGTH(16),VALUE_HUM);
 80007fa:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2310      	movs	r3, #16
 8000802:	2200      	movs	r2, #0
 8000804:	4649      	mov	r1, r9
 8000806:	4638      	mov	r0, r7
 8000808:	f7ff fec8 	bl	800059c <updateCharValue>
	addCharacteristic(UUID_CHAR_PRESS,PRESS_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(18),READABLE|NOTIFIBLE);
 800080c:	f505 7992 	add.w	r9, r5, #292	; 0x124
 8000810:	9600      	str	r6, [sp, #0]
 8000812:	4633      	mov	r3, r6
 8000814:	463a      	mov	r2, r7
 8000816:	4649      	mov	r1, r9
 8000818:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800081c:	f7ff fe80 	bl	8000520 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,0,SET_CONTENT_LENGTH(18),VALUE_PRESS);
 8000820:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4633      	mov	r3, r6
 8000828:	2200      	movs	r2, #0
 800082a:	4649      	mov	r1, r9
 800082c:	4638      	mov	r0, r7
 800082e:	f7ff feb5 	bl	800059c <updateCharValue>
	addCharacteristic(UUID_CHAR_TOF_VALUE,TOF_CHAR_HANDLE,CUSTOM_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),READABLE|NOTIFIBLE);
 8000832:	f505 7994 	add.w	r9, r5, #296	; 0x128
 8000836:	9600      	str	r6, [sp, #0]
 8000838:	2314      	movs	r3, #20
 800083a:	463a      	mov	r2, r7
 800083c:	4649      	mov	r1, r9
 800083e:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8000842:	f7ff fe6d 	bl	8000520 <addCharacteristic>
	updateCharValue(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,0,SET_CONTENT_LENGTH(20),TOF_VALUE);
 8000846:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2314      	movs	r3, #20
 800084e:	2200      	movs	r2, #0
 8000850:	4649      	mov	r1, r9
 8000852:	4638      	mov	r0, r7
 8000854:	f7ff fea2 	bl	800059c <updateCharValue>
	 addService(UUID_INERTIAL_SERVICE,INERTIAL_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3+3+3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 8000858:	f505 7796 	add.w	r7, r5, #300	; 0x12c
 800085c:	220c      	movs	r2, #12
 800085e:	4639      	mov	r1, r7
 8000860:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 8000864:	f7ff fe28 	bl	80004b8 <addService>
	 addCharacteristic(UUID_CHAR_INERTIAL_NAME,NAME_INERTIAL_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(24),READABLE);
 8000868:	f505 7998 	add.w	r9, r5, #304	; 0x130
 800086c:	f8cd 8000 	str.w	r8, [sp]
 8000870:	2318      	movs	r3, #24
 8000872:	463a      	mov	r2, r7
 8000874:	4649      	mov	r1, r9
 8000876:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800087a:	f7ff fe51 	bl	8000520 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,NAME_INERTIAL_HANDLE,0,SET_CONTENT_LENGTH(24),NAME_INERTIAL_VALUE);
 800087e:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2318      	movs	r3, #24
 8000886:	2200      	movs	r2, #0
 8000888:	4649      	mov	r1, r9
 800088a:	4638      	mov	r0, r7
 800088c:	f7ff fe86 	bl	800059c <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCX,ACCX_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000890:	f505 799a 	add.w	r9, r5, #308	; 0x134
 8000894:	9600      	str	r6, [sp, #0]
 8000896:	2311      	movs	r3, #17
 8000898:	463a      	mov	r2, r7
 800089a:	4649      	mov	r1, r9
 800089c:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 80008a0:	f7ff fe3e 	bl	8000520 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCX_INERTIAL_VALUE);
 80008a4:	f504 7302 	add.w	r3, r4, #520	; 0x208
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2311      	movs	r3, #17
 80008ac:	2200      	movs	r2, #0
 80008ae:	4649      	mov	r1, r9
 80008b0:	4638      	mov	r0, r7
 80008b2:	f7ff fe73 	bl	800059c <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCY,ACCY_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 80008b6:	f505 799c 	add.w	r9, r5, #312	; 0x138
 80008ba:	9600      	str	r6, [sp, #0]
 80008bc:	2311      	movs	r3, #17
 80008be:	463a      	mov	r2, r7
 80008c0:	4649      	mov	r1, r9
 80008c2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80008c6:	f7ff fe2b 	bl	8000520 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCY_INERTIAL_VALUE);
 80008ca:	f504 730b 	add.w	r3, r4, #556	; 0x22c
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2311      	movs	r3, #17
 80008d2:	2200      	movs	r2, #0
 80008d4:	4649      	mov	r1, r9
 80008d6:	4638      	mov	r0, r7
 80008d8:	f7ff fe60 	bl	800059c <updateCharValue>
	 addCharacteristic(UUID_CHAR_INERTIAL_ACCZ,ACCZ_CHAR_HANDLE,INERTIAL_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 80008dc:	f505 799e 	add.w	r9, r5, #316	; 0x13c
 80008e0:	9600      	str	r6, [sp, #0]
 80008e2:	2311      	movs	r3, #17
 80008e4:	463a      	mov	r2, r7
 80008e6:	4649      	mov	r1, r9
 80008e8:	f504 7010 	add.w	r0, r4, #576	; 0x240
 80008ec:	f7ff fe18 	bl	8000520 <addCharacteristic>
	updateCharValue(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),ACCZ_INERTIAL_VALUE);
 80008f0:	f504 7314 	add.w	r3, r4, #592	; 0x250
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2311      	movs	r3, #17
 80008f8:	2200      	movs	r2, #0
 80008fa:	4649      	mov	r1, r9
 80008fc:	4638      	mov	r0, r7
 80008fe:	f7ff fe4d 	bl	800059c <updateCharValue>
	 addService(UUID_MAGNETIC_SERVICE,MAGNETIC_SERVICE_HANDLE,SET_ATTRIBUTES(1+2+3*3));//1 the service 2 the readable char e 3x3 the readable notifiable chars
 8000902:	f505 77a0 	add.w	r7, r5, #320	; 0x140
 8000906:	220c      	movs	r2, #12
 8000908:	4639      	mov	r1, r7
 800090a:	f504 7019 	add.w	r0, r4, #612	; 0x264
 800090e:	f7ff fdd3 	bl	80004b8 <addService>
	 addCharacteristic(UUID_CHAR_MAGNETIC_NAME,NAME_MAGNETIC_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(23),READABLE);
 8000912:	f505 79a2 	add.w	r9, r5, #324	; 0x144
 8000916:	f8cd 8000 	str.w	r8, [sp]
 800091a:	2317      	movs	r3, #23
 800091c:	463a      	mov	r2, r7
 800091e:	4649      	mov	r1, r9
 8000920:	f504 701d 	add.w	r0, r4, #628	; 0x274
 8000924:	f7ff fdfc 	bl	8000520 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,NAME_MAGNETIC_HANDLE,0,SET_CONTENT_LENGTH(23),NAME_MAGNETIC_VALUE);
 8000928:	f504 7321 	add.w	r3, r4, #644	; 0x284
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2317      	movs	r3, #23
 8000930:	2200      	movs	r2, #0
 8000932:	4649      	mov	r1, r9
 8000934:	4638      	mov	r0, r7
 8000936:	f7ff fe31 	bl	800059c <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGX,MAGX_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 800093a:	f505 78a4 	add.w	r8, r5, #328	; 0x148
 800093e:	9600      	str	r6, [sp, #0]
 8000940:	2311      	movs	r3, #17
 8000942:	463a      	mov	r2, r7
 8000944:	4641      	mov	r1, r8
 8000946:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 800094a:	f7ff fde9 	bl	8000520 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),X_VALUE);
 800094e:	f504 732b 	add.w	r3, r4, #684	; 0x2ac
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2311      	movs	r3, #17
 8000956:	2200      	movs	r2, #0
 8000958:	4641      	mov	r1, r8
 800095a:	4638      	mov	r0, r7
 800095c:	f7ff fe1e 	bl	800059c <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGY,MAGY_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 8000960:	f505 78a6 	add.w	r8, r5, #332	; 0x14c
 8000964:	9600      	str	r6, [sp, #0]
 8000966:	2311      	movs	r3, #17
 8000968:	463a      	mov	r2, r7
 800096a:	4641      	mov	r1, r8
 800096c:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
 8000970:	f7ff fdd6 	bl	8000520 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Y_VALUE);
 8000974:	f504 7334 	add.w	r3, r4, #720	; 0x2d0
 8000978:	e008      	b.n	800098c <ble_init+0x36c>
 800097a:	bf00      	nop
 800097c:	20000474 	.word	0x20000474
 8000980:	20000734 	.word	0x20000734
 8000984:	20000084 	.word	0x20000084
 8000988:	20000000 	.word	0x20000000
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	2311      	movs	r3, #17
 8000990:	2200      	movs	r2, #0
 8000992:	4641      	mov	r1, r8
 8000994:	4638      	mov	r0, r7
 8000996:	f7ff fe01 	bl	800059c <updateCharValue>
	 addCharacteristic(UUID_CHAR_MAGNETIC_MAGZ,MAGZ_CHAR_HANDLE,MAGNETIC_SERVICE_HANDLE,SET_CONTENT_LENGTH(17),READABLE|NOTIFIBLE);
 800099a:	f505 75a8 	add.w	r5, r5, #336	; 0x150
 800099e:	9600      	str	r6, [sp, #0]
 80009a0:	2311      	movs	r3, #17
 80009a2:	463a      	mov	r2, r7
 80009a4:	4629      	mov	r1, r5
 80009a6:	f504 7039 	add.w	r0, r4, #740	; 0x2e4
 80009aa:	f7ff fdb9 	bl	8000520 <addCharacteristic>
	updateCharValue(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,0,SET_CONTENT_LENGTH(17),Z_VALUE);
 80009ae:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
 80009b2:	9400      	str	r4, [sp, #0]
 80009b4:	2311      	movs	r3, #17
 80009b6:	2200      	movs	r2, #0
 80009b8:	4629      	mov	r1, r5
 80009ba:	4638      	mov	r0, r7
 80009bc:	f7ff fdee 	bl	800059c <updateCharValue>
}
 80009c0:	b003      	add	sp, #12
 80009c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009c6:	bf00      	nop

080009c8 <updateSignedMillesimal>:
void updateSignedMillesimal(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, int16_t data){
 80009c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	4607      	mov	r7, r0
 80009d0:	4688      	mov	r8, r1
 80009d2:	4614      	mov	r4, r2
 80009d4:	461e      	mov	r6, r3
 80009d6:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
    newstring=(uint8_t*)malloc(offset+7);
 80009da:	f103 0907 	add.w	r9, r3, #7
 80009de:	4648      	mov	r0, r9
 80009e0:	f004 f88e 	bl	8004b00 <malloc>
 80009e4:	4605      	mov	r5, r0
    memcpy(newstring,defaultValue,offset);
 80009e6:	4632      	mov	r2, r6
 80009e8:	4621      	mov	r1, r4
 80009ea:	f004 f989 	bl	8004d00 <memcpy>
	if(data<0){
 80009ee:	f1ba 0f00 	cmp.w	sl, #0
 80009f2:	db67      	blt.n	8000ac4 <updateSignedMillesimal+0xfc>
	numberInChar[0]=43;
 80009f4:	232b      	movs	r3, #43	; 0x2b
 80009f6:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=data/1000;
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <updateSignedMillesimal+0x188>)
 80009fc:	fb83 230a 	smull	r2, r3, r3, sl
 8000a00:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8000a04:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(data-numberInChar[1]*1000)/100;
 8000a0e:	4c51      	ldr	r4, [pc, #324]	; (8000b54 <updateSignedMillesimal+0x18c>)
 8000a10:	fb02 f404 	mul.w	r4, r2, r4
 8000a14:	eb0a 0304 	add.w	r3, sl, r4
 8000a18:	494f      	ldr	r1, [pc, #316]	; (8000b58 <updateSignedMillesimal+0x190>)
 8000a1a:	fb81 0103 	smull	r0, r1, r1, r3
 8000a1e:	17db      	asrs	r3, r3, #31
 8000a20:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(data-numberInChar[2]*100-numberInChar[1]*1000)/10;
 8000a2a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000a2e:	fb01 a103 	mla	r1, r1, r3, sl
 8000a32:	440c      	add	r4, r1
 8000a34:	4949      	ldr	r1, [pc, #292]	; (8000b5c <updateSignedMillesimal+0x194>)
 8000a36:	fb81 0104 	smull	r0, r1, r1, r4
 8000a3a:	17e4      	asrs	r4, r4, #31
 8000a3c:	ebc4 04a1 	rsb	r4, r4, r1, asr #2
 8000a40:	b2e4      	uxtb	r4, r4
 8000a42:	f88d 400b 	strb.w	r4, [sp, #11]
    numberInChar[4]=(data-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 8000a46:	ebc4 1144 	rsb	r1, r4, r4, lsl #5
 8000a4a:	ebc4 0181 	rsb	r1, r4, r1, lsl #2
 8000a4e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8000a52:	ebc3 0ccc 	rsb	ip, r3, ip, lsl #3
 8000a56:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a5a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
 8000a5e:	44d4      	add	ip, sl
 8000a60:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8000a64:	00c9      	lsls	r1, r1, #3
 8000a66:	fa51 fc8c 	uxtab	ip, r1, ip
 8000a6a:	fa5f fc8c 	uxtb.w	ip, ip
 8000a6e:	f88d c00c 	strb.w	ip, [sp, #12]
    if(numberInChar[1]==0){
 8000a72:	b37a      	cbz	r2, 8000ad4 <updateSignedMillesimal+0x10c>
        numberInChar[1]+='0';
 8000a74:	3230      	adds	r2, #48	; 0x30
 8000a76:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 8000a7a:	3330      	adds	r3, #48	; 0x30
 8000a7c:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 8000a80:	3430      	adds	r4, #48	; 0x30
 8000a82:	f88d 400b 	strb.w	r4, [sp, #11]
    	numberInChar[4]+='0';
 8000a86:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000a8a:	f88d c00c 	strb.w	ip, [sp, #12]
    	numberInChar[5]='\"';
 8000a8e:	2322      	movs	r3, #34	; 0x22
 8000a90:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 8000a94:	237d      	movs	r3, #125	; 0x7d
 8000a96:	f88d 300e 	strb.w	r3, [sp, #14]
	int flagEmpty=0;
 8000a9a:	2400      	movs	r4, #0
    memcpy(newstring+offset,numberInChar,7-flagEmpty);
 8000a9c:	f1c4 0207 	rsb	r2, r4, #7
 8000aa0:	a902      	add	r1, sp, #8
 8000aa2:	19a8      	adds	r0, r5, r6
 8000aa4:	f004 f92c 	bl	8004d00 <memcpy>
	updateCharValue(service, characteristic, 0,offset+7-flagEmpty, newstring);
 8000aa8:	9500      	str	r5, [sp, #0]
 8000aaa:	eba9 0304 	sub.w	r3, r9, r4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4641      	mov	r1, r8
 8000ab2:	4638      	mov	r0, r7
 8000ab4:	f7ff fd72 	bl	800059c <updateCharValue>
	free(newstring);
 8000ab8:	4628      	mov	r0, r5
 8000aba:	f004 f829 	bl	8004b10 <free>
}
 8000abe:	b004      	add	sp, #16
 8000ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numberInChar[0]=45;
 8000ac4:	232d      	movs	r3, #45	; 0x2d
 8000ac6:	f88d 3008 	strb.w	r3, [sp, #8]
    data=-data;
 8000aca:	f1ca 0a00 	rsb	sl, sl, #0
 8000ace:	fa0f fa8a 	sxth.w	sl, sl
 8000ad2:	e792      	b.n	80009fa <updateSignedMillesimal+0x32>
    	if(numberInChar[2]==0){
 8000ad4:	bb3b      	cbnz	r3, 8000b26 <updateSignedMillesimal+0x15e>
        	if(numberInChar[3]==0){
 8000ad6:	b994      	cbnz	r4, 8000afe <updateSignedMillesimal+0x136>
        numberInChar[1]='0'+numberInChar[4];
 8000ad8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000adc:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='\"';
 8000ae0:	2322      	movs	r3, #34	; 0x22
 8000ae2:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='}';
 8000ae6:	237d      	movs	r3, #125	; 0x7d
 8000ae8:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]=' ';
 8000aec:	2320      	movs	r3, #32
 8000aee:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 8000af2:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8000af6:	f88d 300e 	strb.w	r3, [sp, #14]
        		flagEmpty++;
 8000afa:	2403      	movs	r4, #3
    }break;
 8000afc:	e7ce      	b.n	8000a9c <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[3];
 8000afe:	3430      	adds	r4, #48	; 0x30
 8000b00:	f88d 4009 	strb.w	r4, [sp, #9]
    	numberInChar[2]='0'+numberInChar[4];
 8000b04:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000b08:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='\"';
 8000b0c:	2322      	movs	r3, #34	; 0x22
 8000b0e:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='}';
 8000b12:	237d      	movs	r3, #125	; 0x7d
 8000b14:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]=' ';
 8000b18:	2320      	movs	r3, #32
 8000b1a:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8000b1e:	f88d 300e 	strb.w	r3, [sp, #14]
    		flagEmpty++;
 8000b22:	2402      	movs	r4, #2
    }break;
 8000b24:	e7ba      	b.n	8000a9c <updateSignedMillesimal+0xd4>
        numberInChar[1]='0'+numberInChar[2];
 8000b26:	3330      	adds	r3, #48	; 0x30
 8000b28:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 8000b2c:	3430      	adds	r4, #48	; 0x30
 8000b2e:	f88d 400a 	strb.w	r4, [sp, #10]
    	numberInChar[3]='0'+numberInChar[4];
 8000b32:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000b36:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='\"';
 8000b3a:	2322      	movs	r3, #34	; 0x22
 8000b3c:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 8000b40:	237d      	movs	r3, #125	; 0x7d
 8000b42:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8000b46:	2320      	movs	r3, #32
 8000b48:	f88d 300e 	strb.w	r3, [sp, #14]
    	flagEmpty++;
 8000b4c:	2401      	movs	r4, #1
    }break;
 8000b4e:	e7a5      	b.n	8000a9c <updateSignedMillesimal+0xd4>
 8000b50:	10624dd3 	.word	0x10624dd3
 8000b54:	fffffc18 	.word	0xfffffc18
 8000b58:	51eb851f 	.word	0x51eb851f
 8000b5c:	66666667 	.word	0x66666667

08000b60 <updateSignedFloat>:
void updateSignedFloat(uint8_t *service, uint8_t*characteristic,uint8_t *defaultValue,uint8_t offset, float data){
 8000b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b64:	ed2d 8b02 	vpush	{d8}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	4606      	mov	r6, r0
 8000b6c:	460f      	mov	r7, r1
 8000b6e:	4691      	mov	r9, r2
 8000b70:	461d      	mov	r5, r3
 8000b72:	eeb0 8a40 	vmov.f32	s16, s0
	 newstring=(uint8_t*)malloc(offset+8);
 8000b76:	f103 0808 	add.w	r8, r3, #8
 8000b7a:	4640      	mov	r0, r8
 8000b7c:	f003 ffc0 	bl	8004b00 <malloc>
 8000b80:	4604      	mov	r4, r0
	 memcpy(newstring,defaultValue,offset);
 8000b82:	462a      	mov	r2, r5
 8000b84:	4649      	mov	r1, r9
 8000b86:	f004 f8bb 	bl	8004d00 <memcpy>
    int16_t newdata=(int16_t)(data*10);
 8000b8a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8000b8e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000b92:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8000b96:	ee18 3a10 	vmov	r3, s16
 8000b9a:	b219      	sxth	r1, r3
	if(newdata<0){
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	db6f      	blt.n	8000c80 <updateSignedFloat+0x120>
	numberInChar[0]=43;
 8000ba0:	232b      	movs	r3, #43	; 0x2b
 8000ba2:	f88d 3008 	strb.w	r3, [sp, #8]
	numberInChar[1]=newdata/1000;
 8000ba6:	4b53      	ldr	r3, [pc, #332]	; (8000cf4 <updateSignedFloat+0x194>)
 8000ba8:	fb83 2301 	smull	r2, r3, r3, r1
 8000bac:	17ca      	asrs	r2, r1, #31
 8000bae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	f88d 2009 	strb.w	r2, [sp, #9]
    numberInChar[2]=(newdata-numberInChar[1]*1000)/100;
 8000bb8:	4b4f      	ldr	r3, [pc, #316]	; (8000cf8 <updateSignedFloat+0x198>)
 8000bba:	fb03 fc02 	mul.w	ip, r3, r2
 8000bbe:	eb01 030c 	add.w	r3, r1, ip
 8000bc2:	484e      	ldr	r0, [pc, #312]	; (8000cfc <updateSignedFloat+0x19c>)
 8000bc4:	fb80 e003 	smull	lr, r0, r0, r3
 8000bc8:	17db      	asrs	r3, r3, #31
 8000bca:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f88d 300a 	strb.w	r3, [sp, #10]
    numberInChar[3]=(newdata-numberInChar[2]*100-numberInChar[1]*1000)/10;
 8000bd4:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8000bd8:	fb00 1003 	mla	r0, r0, r3, r1
 8000bdc:	4484      	add	ip, r0
 8000bde:	4848      	ldr	r0, [pc, #288]	; (8000d00 <updateSignedFloat+0x1a0>)
 8000be0:	fb80 e00c 	smull	lr, r0, r0, ip
 8000be4:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8000be8:	ebcc 0ca0 	rsb	ip, ip, r0, asr #2
 8000bec:	fa5f fc8c 	uxtb.w	ip, ip
 8000bf0:	f88d c00b 	strb.w	ip, [sp, #11]
    numberInChar[5]=(newdata-numberInChar[2]*100-numberInChar[3]*10-numberInChar[1]*1000);
 8000bf4:	ebcc 104c 	rsb	r0, ip, ip, lsl #5
 8000bf8:	ebcc 0080 	rsb	r0, ip, r0, lsl #2
 8000bfc:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8000c00:	ebc3 0ece 	rsb	lr, r3, lr, lsl #3
 8000c04:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c08:	eb0e 0e40 	add.w	lr, lr, r0, lsl #1
 8000c0c:	448e      	add	lr, r1
 8000c0e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8000c12:	00c9      	lsls	r1, r1, #3
 8000c14:	fa51 fe8e 	uxtab	lr, r1, lr
 8000c18:	fa5f fe8e 	uxtb.w	lr, lr
 8000c1c:	f88d e00d 	strb.w	lr, [sp, #13]
    if(numberInChar[1]==0){
 8000c20:	b3a2      	cbz	r2, 8000c8c <updateSignedFloat+0x12c>
        numberInChar[1]+='0';
 8000c22:	3230      	adds	r2, #48	; 0x30
 8000c24:	f88d 2009 	strb.w	r2, [sp, #9]
    	numberInChar[2]+='0';
 8000c28:	3330      	adds	r3, #48	; 0x30
 8000c2a:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]+='0';
 8000c2e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000c32:	f88d c00b 	strb.w	ip, [sp, #11]
    	numberInChar[4]='.';
 8000c36:	232e      	movs	r3, #46	; 0x2e
 8000c38:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]+='0';
 8000c3c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8000c40:	f88d e00d 	strb.w	lr, [sp, #13]
    	numberInChar[6]='\"';
 8000c44:	2322      	movs	r3, #34	; 0x22
 8000c46:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]='}';
 8000c4a:	237d      	movs	r3, #125	; 0x7d
 8000c4c:	f88d 300f 	strb.w	r3, [sp, #15]
	int flagEmpty=0;
 8000c50:	f04f 0900 	mov.w	r9, #0
    memcpy(newstring+offset,numberInChar,8-flagEmpty);
 8000c54:	f1c9 0208 	rsb	r2, r9, #8
 8000c58:	a902      	add	r1, sp, #8
 8000c5a:	1960      	adds	r0, r4, r5
 8000c5c:	f004 f850 	bl	8004d00 <memcpy>
	updateCharValue(service, characteristic, 0, offset+8-flagEmpty, newstring);
 8000c60:	9400      	str	r4, [sp, #0]
 8000c62:	eba8 0309 	sub.w	r3, r8, r9
 8000c66:	2200      	movs	r2, #0
 8000c68:	4639      	mov	r1, r7
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f7ff fc96 	bl	800059c <updateCharValue>
	free(newstring);
 8000c70:	4620      	mov	r0, r4
 8000c72:	f003 ff4d 	bl	8004b10 <free>
}
 8000c76:	b005      	add	sp, #20
 8000c78:	ecbd 8b02 	vpop	{d8}
 8000c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    numberInChar[0]=45;
 8000c80:	232d      	movs	r3, #45	; 0x2d
 8000c82:	f88d 3008 	strb.w	r3, [sp, #8]
    newdata=-newdata;
 8000c86:	4249      	negs	r1, r1
 8000c88:	b209      	sxth	r1, r1
 8000c8a:	e78c      	b.n	8000ba6 <updateSignedFloat+0x46>
    	if(numberInChar[2]==0){
 8000c8c:	b9c3      	cbnz	r3, 8000cc0 <updateSignedFloat+0x160>
        numberInChar[1]='0'+numberInChar[3];
 8000c8e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000c92:	f88d c009 	strb.w	ip, [sp, #9]
    	numberInChar[2]='.';
 8000c96:	232e      	movs	r3, #46	; 0x2e
 8000c98:	f88d 300a 	strb.w	r3, [sp, #10]
    	numberInChar[3]='0'+numberInChar[5];
 8000c9c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8000ca0:	f88d e00b 	strb.w	lr, [sp, #11]
    	numberInChar[4]='\"';
 8000ca4:	2322      	movs	r3, #34	; 0x22
 8000ca6:	f88d 300c 	strb.w	r3, [sp, #12]
    	numberInChar[5]='}';
 8000caa:	237d      	movs	r3, #125	; 0x7d
 8000cac:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]=' ';
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 8000cb6:	f88d 300f 	strb.w	r3, [sp, #15]
    		flagEmpty++;
 8000cba:	f04f 0902 	mov.w	r9, #2
    }break;
 8000cbe:	e7c9      	b.n	8000c54 <updateSignedFloat+0xf4>
        numberInChar[1]='0'+numberInChar[2];
 8000cc0:	3330      	adds	r3, #48	; 0x30
 8000cc2:	f88d 3009 	strb.w	r3, [sp, #9]
    	numberInChar[2]='0'+numberInChar[3];
 8000cc6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000cca:	f88d c00a 	strb.w	ip, [sp, #10]
    	numberInChar[3]='.';
 8000cce:	232e      	movs	r3, #46	; 0x2e
 8000cd0:	f88d 300b 	strb.w	r3, [sp, #11]
    	numberInChar[4]='0'+numberInChar[5];
 8000cd4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8000cd8:	f88d e00c 	strb.w	lr, [sp, #12]
    	numberInChar[5]='\"';
 8000cdc:	2322      	movs	r3, #34	; 0x22
 8000cde:	f88d 300d 	strb.w	r3, [sp, #13]
    	numberInChar[6]='}';
 8000ce2:	237d      	movs	r3, #125	; 0x7d
 8000ce4:	f88d 300e 	strb.w	r3, [sp, #14]
    	numberInChar[7]=' ';
 8000ce8:	2320      	movs	r3, #32
 8000cea:	f88d 300f 	strb.w	r3, [sp, #15]
    	flagEmpty++;
 8000cee:	f04f 0901 	mov.w	r9, #1
    }break;
 8000cf2:	e7af      	b.n	8000c54 <updateSignedFloat+0xf4>
 8000cf4:	10624dd3 	.word	0x10624dd3
 8000cf8:	fffffc18 	.word	0xfffffc18
 8000cfc:	51eb851f 	.word	0x51eb851f
 8000d00:	66666667 	.word	0x66666667

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d08:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	2400      	movs	r4, #0
 8000d0c:	9405      	str	r4, [sp, #20]
 8000d0e:	9406      	str	r4, [sp, #24]
 8000d10:	9407      	str	r4, [sp, #28]
 8000d12:	9408      	str	r4, [sp, #32]
 8000d14:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <MX_GPIO_Init+0x100>)
 8000d18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d1a:	f042 0210 	orr.w	r2, r2, #16
 8000d1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d22:	f002 0210 	and.w	r2, r2, #16
 8000d26:	9200      	str	r2, [sp, #0]
 8000d28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d2c:	f042 0202 	orr.w	r2, r2, #2
 8000d30:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d34:	f002 0202 	and.w	r2, r2, #2
 8000d38:	9201      	str	r2, [sp, #4]
 8000d3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3e:	f042 0208 	orr.w	r2, r2, #8
 8000d42:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d46:	f002 0208 	and.w	r2, r2, #8
 8000d4a:	9202      	str	r2, [sp, #8]
 8000d4c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d50:	f042 0204 	orr.w	r2, r2, #4
 8000d54:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d58:	f002 0204 	and.w	r2, r2, #4
 8000d5c:	9203      	str	r2, [sp, #12]
 8000d5e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	9304      	str	r3, [sp, #16]
 8000d70:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8000d72:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8000e14 <MX_GPIO_Init+0x110>
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	f001 f9a0 	bl	80020c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port, TOF_RESET_Pin, GPIO_PIN_RESET);
 8000d82:	4e21      	ldr	r6, [pc, #132]	; (8000e08 <MX_GPIO_Init+0x104>)
 8000d84:	4622      	mov	r2, r4
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	4630      	mov	r0, r6
 8000d8a:	f001 f99a 	bl	80020c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f001 f993 	bl	80020c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000d9c:	2740      	movs	r7, #64	; 0x40
 8000d9e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_GPIO_Init+0x108>)
 8000da2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000da6:	a905      	add	r1, sp, #20
 8000da8:	4819      	ldr	r0, [pc, #100]	; (8000e10 <MX_GPIO_Init+0x10c>)
 8000daa:	f001 f897 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8000dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2501      	movs	r5, #1
 8000db6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	a905      	add	r1, sp, #20
 8000dc0:	4640      	mov	r0, r8
 8000dc2:	f001 f88b 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_RESET_Pin */
  GPIO_InitStruct.Pin = TOF_RESET_Pin;
 8000dc6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(TOF_RESET_GPIO_Port, &GPIO_InitStruct);
 8000dce:	a905      	add	r1, sp, #20
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	f001 f883 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RESET_Pin */
  GPIO_InitStruct.Pin = BLE_RESET_Pin;
 8000dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dda:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BLE_RESET_GPIO_Port, &GPIO_InitStruct);
 8000de2:	a905      	add	r1, sp, #20
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f001 f878 	bl	8001edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000dec:	4622      	mov	r2, r4
 8000dee:	4621      	mov	r1, r4
 8000df0:	2017      	movs	r0, #23
 8000df2:	f001 f819 	bl	8001e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000df6:	2017      	movs	r0, #23
 8000df8:	f001 f84e 	bl	8001e98 <HAL_NVIC_EnableIRQ>

}
 8000dfc:	b00a      	add	sp, #40	; 0x28
 8000dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000800 	.word	0x48000800
 8000e0c:	10110000 	.word	0x10110000
 8000e10:	48001000 	.word	0x48001000
 8000e14:	48000c00 	.word	0x48000c00

08000e18 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <Error_Handler+0x2>

08000e1c <MX_SPI3_Init>:
{
 8000e1c:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <MX_SPI3_Init+0x40>)
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_SPI3_Init+0x44>)
 8000e22:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e24:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e28:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e32:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e34:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e36:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e3e:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e40:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e42:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e44:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e46:	2207      	movs	r2, #7
 8000e48:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e4a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e50:	f002 fe07 	bl	8003a62 <HAL_SPI_Init>
 8000e54:	b900      	cbnz	r0, 8000e58 <MX_SPI3_Init+0x3c>
}
 8000e56:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e58:	f7ff ffde 	bl	8000e18 <Error_Handler>
 8000e5c:	200005e8 	.word	0x200005e8
 8000e60:	40003c00 	.word	0x40003c00

08000e64 <MX_I2C2_Init>:
{
 8000e64:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8000e66:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <MX_I2C2_Init+0x4c>)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_I2C2_Init+0x50>)
 8000e6a:	6643      	str	r3, [r0, #100]	; 0x64
  hi2c2.Init.Timing = 0x2000090E;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_I2C2_Init+0x54>)
 8000e6e:	6683      	str	r3, [r0, #104]	; 0x68
  hi2c2.Init.OwnAddress1 = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	66c3      	str	r3, [r0, #108]	; 0x6c
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e74:	2201      	movs	r2, #1
 8000e76:	6702      	str	r2, [r0, #112]	; 0x70
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	6743      	str	r3, [r0, #116]	; 0x74
  hi2c2.Init.OwnAddress2 = 0;
 8000e7a:	6783      	str	r3, [r0, #120]	; 0x78
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e7c:	67c3      	str	r3, [r0, #124]	; 0x7c
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e86:	3064      	adds	r0, #100	; 0x64
 8000e88:	f001 fa6f 	bl	800236a <HAL_I2C_Init>
 8000e8c:	b950      	cbnz	r0, 8000ea4 <MX_I2C2_Init+0x40>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	480a      	ldr	r0, [pc, #40]	; (8000ebc <MX_I2C2_Init+0x58>)
 8000e92:	f001 fc45 	bl	8002720 <HAL_I2CEx_ConfigAnalogFilter>
 8000e96:	b938      	cbnz	r0, 8000ea8 <MX_I2C2_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <MX_I2C2_Init+0x58>)
 8000e9c:	f001 fc6e 	bl	800277c <HAL_I2CEx_ConfigDigitalFilter>
 8000ea0:	b920      	cbnz	r0, 8000eac <MX_I2C2_Init+0x48>
}
 8000ea2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ea4:	f7ff ffb8 	bl	8000e18 <Error_Handler>
    Error_Handler();
 8000ea8:	f7ff ffb6 	bl	8000e18 <Error_Handler>
    Error_Handler();
 8000eac:	f7ff ffb4 	bl	8000e18 <Error_Handler>
 8000eb0:	200005e8 	.word	0x200005e8
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	2000090e 	.word	0x2000090e
 8000ebc:	2000064c 	.word	0x2000064c

08000ec0 <MX_TIM6_Init>:
{
 8000ec0:	b500      	push	{lr}
 8000ec2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	9303      	str	r3, [sp, #12]
  htim6.Instance = TIM6;
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_TIM6_Init+0x54>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <MX_TIM6_Init+0x58>)
 8000ed0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  htim6.Init.Prescaler = 3999;
 8000ed4:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000ed8:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  htim6.Init.Period = 1000;
 8000ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee4:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eec:	30b0      	adds	r0, #176	; 0xb0
 8000eee:	f003 fb47 	bl	8004580 <HAL_TIM_Base_Init>
 8000ef2:	b950      	cbnz	r0, 8000f0a <MX_TIM6_Init+0x4a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000efa:	a901      	add	r1, sp, #4
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM6_Init+0x5c>)
 8000efe:	f003 fd3d 	bl	800497c <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	b920      	cbnz	r0, 8000f0e <MX_TIM6_Init+0x4e>
}
 8000f04:	b005      	add	sp, #20
 8000f06:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f0a:	f7ff ff85 	bl	8000e18 <Error_Handler>
    Error_Handler();
 8000f0e:	f7ff ff83 	bl	8000e18 <Error_Handler>
 8000f12:	bf00      	nop
 8000f14:	200005e8 	.word	0x200005e8
 8000f18:	40001000 	.word	0x40001000
 8000f1c:	20000698 	.word	0x20000698

08000f20 <MX_TIM15_Init>:
{
 8000f20:	b510      	push	{r4, lr}
 8000f22:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	2400      	movs	r4, #0
 8000f26:	9413      	str	r4, [sp, #76]	; 0x4c
 8000f28:	9414      	str	r4, [sp, #80]	; 0x50
 8000f2a:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2c:	940c      	str	r4, [sp, #48]	; 0x30
 8000f2e:	940d      	str	r4, [sp, #52]	; 0x34
 8000f30:	940e      	str	r4, [sp, #56]	; 0x38
 8000f32:	940f      	str	r4, [sp, #60]	; 0x3c
 8000f34:	9410      	str	r4, [sp, #64]	; 0x40
 8000f36:	9411      	str	r4, [sp, #68]	; 0x44
 8000f38:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f3a:	222c      	movs	r2, #44	; 0x2c
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	a801      	add	r0, sp, #4
 8000f40:	f003 fe9a 	bl	8004c78 <memset>
  htim15.Instance = TIM15;
 8000f44:	4824      	ldr	r0, [pc, #144]	; (8000fd8 <MX_TIM15_Init+0xb8>)
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_TIM15_Init+0xbc>)
 8000f48:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
  htim15.Init.Prescaler = 100;
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
  htim15.Init.Period = 500;
 8000f56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f5a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	f8c0 410c 	str.w	r4, [r0, #268]	; 0x10c
  htim15.Init.RepetitionCounter = 0;
 8000f62:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f6a:	30fc      	adds	r0, #252	; 0xfc
 8000f6c:	f003 fb38 	bl	80045e0 <HAL_TIM_PWM_Init>
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d129      	bne.n	8000fc8 <MX_TIM15_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f7a:	a913      	add	r1, sp, #76	; 0x4c
 8000f7c:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <MX_TIM15_Init+0xc0>)
 8000f7e:	f003 fcfd 	bl	800497c <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	bb18      	cbnz	r0, 8000fcc <MX_TIM15_Init+0xac>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f84:	2360      	movs	r3, #96	; 0x60
 8000f86:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f88:	2200      	movs	r2, #0
 8000f8a:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8c:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f8e:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f90:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f92:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f94:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f96:	a90c      	add	r1, sp, #48	; 0x30
 8000f98:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <MX_TIM15_Init+0xc0>)
 8000f9a:	f003 fb97 	bl	80046cc <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	b9b8      	cbnz	r0, 8000fd0 <MX_TIM15_Init+0xb0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fa4:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fa6:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fa8:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000faa:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fb2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb4:	a901      	add	r1, sp, #4
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <MX_TIM15_Init+0xc0>)
 8000fb8:	f003 fd2c 	bl	8004a14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbc:	b950      	cbnz	r0, 8000fd4 <MX_TIM15_Init+0xb4>
  HAL_TIM_MspPostInit(&htim15);
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <MX_TIM15_Init+0xc0>)
 8000fc0:	f000 fe36 	bl	8001c30 <HAL_TIM_MspPostInit>
}
 8000fc4:	b016      	add	sp, #88	; 0x58
 8000fc6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000fc8:	f7ff ff26 	bl	8000e18 <Error_Handler>
    Error_Handler();
 8000fcc:	f7ff ff24 	bl	8000e18 <Error_Handler>
    Error_Handler();
 8000fd0:	f7ff ff22 	bl	8000e18 <Error_Handler>
    Error_Handler();
 8000fd4:	f7ff ff20 	bl	8000e18 <Error_Handler>
 8000fd8:	200005e8 	.word	0x200005e8
 8000fdc:	40014000 	.word	0x40014000
 8000fe0:	200006e4 	.word	0x200006e4

08000fe4 <SystemClock_Config>:
{
 8000fe4:	b500      	push	{lr}
 8000fe6:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe8:	2244      	movs	r2, #68	; 0x44
 8000fea:	2100      	movs	r1, #0
 8000fec:	a827      	add	r0, sp, #156	; 0x9c
 8000fee:	f003 fe43 	bl	8004c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	9122      	str	r1, [sp, #136]	; 0x88
 8000ff6:	9123      	str	r1, [sp, #140]	; 0x8c
 8000ff8:	9124      	str	r1, [sp, #144]	; 0x90
 8000ffa:	9125      	str	r1, [sp, #148]	; 0x94
 8000ffc:	9126      	str	r1, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffe:	2288      	movs	r2, #136	; 0x88
 8001000:	4668      	mov	r0, sp
 8001002:	f003 fe39 	bl	8004c78 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001006:	2310      	movs	r3, #16
 8001008:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800100a:	2301      	movs	r3, #1
 800100c:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 800100e:	2370      	movs	r3, #112	; 0x70
 8001010:	932f      	str	r3, [sp, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	a827      	add	r0, sp, #156	; 0x9c
 8001014:	f001 fcd0 	bl	80029b8 <HAL_RCC_OscConfig>
 8001018:	b9d0      	cbnz	r0, 8001050 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101a:	230f      	movs	r3, #15
 800101c:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800101e:	2100      	movs	r1, #0
 8001020:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001022:	9124      	str	r1, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001024:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001026:	9126      	str	r1, [sp, #152]	; 0x98
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001028:	a822      	add	r0, sp, #136	; 0x88
 800102a:	f001 ffdb 	bl	8002fe4 <HAL_RCC_ClockConfig>
 800102e:	b988      	cbnz	r0, 8001054 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	4668      	mov	r0, sp
 800103a:	f002 f9df 	bl	80033fc <HAL_RCCEx_PeriphCLKConfig>
 800103e:	b958      	cbnz	r0, 8001058 <SystemClock_Config+0x74>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001040:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001044:	f001 fbce 	bl	80027e4 <HAL_PWREx_ControlVoltageScaling>
 8001048:	b940      	cbnz	r0, 800105c <SystemClock_Config+0x78>
}
 800104a:	b039      	add	sp, #228	; 0xe4
 800104c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001050:	f7ff fee2 	bl	8000e18 <Error_Handler>
    Error_Handler();
 8001054:	f7ff fee0 	bl	8000e18 <Error_Handler>
    Error_Handler();
 8001058:	f7ff fede 	bl	8000e18 <Error_Handler>
    Error_Handler();
 800105c:	f7ff fedc 	bl	8000e18 <Error_Handler>

08001060 <main>:
{
 8001060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001064:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001066:	f000 fe97 	bl	8001d98 <HAL_Init>
  SystemClock_Config();
 800106a:	f7ff ffbb 	bl	8000fe4 <SystemClock_Config>
  MX_GPIO_Init();
 800106e:	f7ff fe49 	bl	8000d04 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001072:	f7ff fed3 	bl	8000e1c <MX_SPI3_Init>
  MX_I2C2_Init();
 8001076:	f7ff fef5 	bl	8000e64 <MX_I2C2_Init>
  MX_TIM6_Init();
 800107a:	f7ff ff21 	bl	8000ec0 <MX_TIM6_Init>
  MX_TIM15_Init();
 800107e:	f7ff ff4f 	bl	8000f20 <MX_TIM15_Init>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f001 f819 	bl	80020c2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001090:	200a      	movs	r0, #10
 8001092:	f000 fea3 	bl	8001ddc <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f001 f80f 	bl	80020c2 <HAL_GPIO_WritePin>
  ble_init();
 80010a4:	f7ff fabc 	bl	8000620 <ble_init>
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port,TOF_RESET_Pin,GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2140      	movs	r1, #64	; 0x40
 80010ac:	485f      	ldr	r0, [pc, #380]	; (800122c <main+0x1cc>)
 80010ae:	f001 f808 	bl	80020c2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f000 fe92 	bl	8001ddc <HAL_Delay>
  startToF();
 80010b8:	f000 fb3e 	bl	8001738 <startToF>
  initLPS22hh();
 80010bc:	f000 f8e4 	bl	8001288 <initLPS22hh>
  int distanceComplete=0;
 80010c0:	2500      	movs	r5, #0
 80010c2:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim6);
 80010c4:	4c5a      	ldr	r4, [pc, #360]	; (8001230 <main+0x1d0>)
 80010c6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80010ca:	f003 f8dd 	bl	8004288 <HAL_TIM_Base_Start_IT>
  initHTS221();
 80010ce:	f000 f945 	bl	800135c <initHTS221>
  init_accelerometer();
 80010d2:	f000 fb77 	bl	80017c4 <init_accelerometer>
  init_magnetometer();
 80010d6:	f000 fc33 	bl	8001940 <init_magnetometer>
  HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80010da:	4629      	mov	r1, r5
 80010dc:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 80010e0:	f003 fb98 	bl	8004814 <HAL_TIM_PWM_Start>
 80010e4:	e004      	b.n	80010f0 <main+0x90>
		  if(update){
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <main+0x1d0>)
 80010e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010ec:	b94b      	cbnz	r3, 8001102 <main+0xa2>
	  __WFI();
 80010ee:	bf30      	wfi
	  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){//if an event occurs let's catch it
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4850      	ldr	r0, [pc, #320]	; (8001234 <main+0x1d4>)
 80010f4:	f000 ffde 	bl	80020b4 <HAL_GPIO_ReadPin>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d0f4      	beq.n	80010e6 <main+0x86>
		  catchBLE();
 80010fc:	f7ff f996 	bl	800042c <catchBLE>
 8001100:	e7f5      	b.n	80010ee <main+0x8e>
			  update=0;
 8001102:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <main+0x1d0>)
 8001104:	2200      	movs	r2, #0
 8001106:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			  getDistance(&distanceComplete);
 800110a:	a809      	add	r0, sp, #36	; 0x24
 800110c:	f000 fb28 	bl	8001760 <getDistance>
			  updateSignedMillesimal(CUSTOM_SERVICE_HANDLE,TOF_CHAR_HANDLE,TOF_VALUE,13,distanceComplete);
 8001110:	4c49      	ldr	r4, [pc, #292]	; (8001238 <main+0x1d8>)
 8001112:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	230d      	movs	r3, #13
 800111a:	4a48      	ldr	r2, [pc, #288]	; (800123c <main+0x1dc>)
 800111c:	4948      	ldr	r1, [pc, #288]	; (8001240 <main+0x1e0>)
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff fc52 	bl	80009c8 <updateSignedMillesimal>
			  HAL_Delay(10);
 8001124:	200a      	movs	r0, #10
 8001126:	f000 fe59 	bl	8001ddc <HAL_Delay>
			  getTemperature(&temp);
 800112a:	a806      	add	r0, sp, #24
 800112c:	f000 fabe 	bl	80016ac <getTemperature>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,TEMP_CHAR_HANDLE,VALUE_TEMP,9,temp);
 8001130:	ed9d 0a06 	vldr	s0, [sp, #24]
 8001134:	2309      	movs	r3, #9
 8001136:	4a43      	ldr	r2, [pc, #268]	; (8001244 <main+0x1e4>)
 8001138:	4943      	ldr	r1, [pc, #268]	; (8001248 <main+0x1e8>)
 800113a:	4620      	mov	r0, r4
 800113c:	f7ff fd10 	bl	8000b60 <updateSignedFloat>
			  HAL_Delay(10);
 8001140:	200a      	movs	r0, #10
 8001142:	f000 fe4b 	bl	8001ddc <HAL_Delay>
			  getHumidity(&hum);
 8001146:	a807      	add	r0, sp, #28
 8001148:	f000 fa6a 	bl	8001620 <getHumidity>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,HUM_CHAR_HANDLE,VALUE_HUM,8,hum);
 800114c:	ed9d 0a07 	vldr	s0, [sp, #28]
 8001150:	2308      	movs	r3, #8
 8001152:	4a3e      	ldr	r2, [pc, #248]	; (800124c <main+0x1ec>)
 8001154:	493e      	ldr	r1, [pc, #248]	; (8001250 <main+0x1f0>)
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff fd02 	bl	8000b60 <updateSignedFloat>
			  HAL_Delay(10);
 800115c:	200a      	movs	r0, #10
 800115e:	f000 fe3d 	bl	8001ddc <HAL_Delay>
			  getAxisAccelerometer(&accx,&accy,&accz);
 8001162:	f10d 0212 	add.w	r2, sp, #18
 8001166:	a905      	add	r1, sp, #20
 8001168:	f10d 0016 	add.w	r0, sp, #22
 800116c:	f000 fb3e 	bl	80017ec <getAxisAccelerometer>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCX_CHAR_HANDLE,X_VALUE,10,accx);
 8001170:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001284 <main+0x224>
 8001174:	4d37      	ldr	r5, [pc, #220]	; (8001254 <main+0x1f4>)
 8001176:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	230a      	movs	r3, #10
 800117e:	4642      	mov	r2, r8
 8001180:	4935      	ldr	r1, [pc, #212]	; (8001258 <main+0x1f8>)
 8001182:	4628      	mov	r0, r5
 8001184:	f7ff fc20 	bl	80009c8 <updateSignedMillesimal>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCY_CHAR_HANDLE,Y_VALUE,10,accy);
 8001188:	4f34      	ldr	r7, [pc, #208]	; (800125c <main+0x1fc>)
 800118a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	230a      	movs	r3, #10
 8001192:	463a      	mov	r2, r7
 8001194:	4932      	ldr	r1, [pc, #200]	; (8001260 <main+0x200>)
 8001196:	4628      	mov	r0, r5
 8001198:	f7ff fc16 	bl	80009c8 <updateSignedMillesimal>
			  updateSignedMillesimal(INERTIAL_SERVICE_HANDLE,ACCZ_CHAR_HANDLE,Z_VALUE,10,accz);
 800119c:	4e31      	ldr	r6, [pc, #196]	; (8001264 <main+0x204>)
 800119e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	230a      	movs	r3, #10
 80011a6:	4632      	mov	r2, r6
 80011a8:	492f      	ldr	r1, [pc, #188]	; (8001268 <main+0x208>)
 80011aa:	4628      	mov	r0, r5
 80011ac:	f7ff fc0c 	bl	80009c8 <updateSignedMillesimal>
			  getPressure(&press);
 80011b0:	a808      	add	r0, sp, #32
 80011b2:	f000 f87d 	bl	80012b0 <getPressure>
			  updateSignedFloat(CUSTOM_SERVICE_HANDLE,PRESS_CHAR_HANDLE,VALUE_PRESS,10,press);
 80011b6:	ed9d 0a08 	vldr	s0, [sp, #32]
 80011ba:	230a      	movs	r3, #10
 80011bc:	4a2b      	ldr	r2, [pc, #172]	; (800126c <main+0x20c>)
 80011be:	492c      	ldr	r1, [pc, #176]	; (8001270 <main+0x210>)
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fccd 	bl	8000b60 <updateSignedFloat>
              HAL_Delay(10);
 80011c6:	200a      	movs	r0, #10
 80011c8:	f000 fe08 	bl	8001ddc <HAL_Delay>
			  getAxisMagnetometer(&magx,&magy,&magz);
 80011cc:	aa03      	add	r2, sp, #12
 80011ce:	f10d 010e 	add.w	r1, sp, #14
 80011d2:	a804      	add	r0, sp, #16
 80011d4:	f000 fbc6 	bl	8001964 <getAxisMagnetometer>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGX_CHAR_HANDLE,X_VALUE,10,magx);
 80011d8:	4c26      	ldr	r4, [pc, #152]	; (8001274 <main+0x214>)
 80011da:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	230a      	movs	r3, #10
 80011e2:	4642      	mov	r2, r8
 80011e4:	4924      	ldr	r1, [pc, #144]	; (8001278 <main+0x218>)
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff fbee 	bl	80009c8 <updateSignedMillesimal>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGY_CHAR_HANDLE,Y_VALUE,10,magy);
 80011ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	230a      	movs	r3, #10
 80011f4:	463a      	mov	r2, r7
 80011f6:	4921      	ldr	r1, [pc, #132]	; (800127c <main+0x21c>)
 80011f8:	4620      	mov	r0, r4
 80011fa:	f7ff fbe5 	bl	80009c8 <updateSignedMillesimal>
			  updateSignedMillesimal(MAGNETIC_SERVICE_HANDLE,MAGZ_CHAR_HANDLE,Z_VALUE,10,magz);
 80011fe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	230a      	movs	r3, #10
 8001206:	4632      	mov	r2, r6
 8001208:	491d      	ldr	r1, [pc, #116]	; (8001280 <main+0x220>)
 800120a:	4620      	mov	r0, r4
 800120c:	f7ff fbdc 	bl	80009c8 <updateSignedMillesimal>
			  startToF();
 8001210:	f000 fa92 	bl	8001738 <startToF>
			  pwm=distanceComplete;
 8001214:	9b09      	ldr	r3, [sp, #36]	; 0x24
			  if(distanceComplete>500){
 8001216:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800121a:	dd01      	ble.n	8001220 <main+0x1c0>
				  pwm=500;
 800121c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
			  __HAL_TIM_SetCompare(&htim15,TIM_CHANNEL_1,pwm);
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <main+0x1d0>)
 8001222:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
 8001226:	6353      	str	r3, [r2, #52]	; 0x34
 8001228:	e761      	b.n	80010ee <main+0x8e>
 800122a:	bf00      	nop
 800122c:	48000800 	.word	0x48000800
 8001230:	200005e8 	.word	0x200005e8
 8001234:	48001000 	.word	0x48001000
 8001238:	20000588 	.word	0x20000588
 800123c:	200001ac 	.word	0x200001ac
 8001240:	2000059c 	.word	0x2000059c
 8001244:	20000144 	.word	0x20000144
 8001248:	20000590 	.word	0x20000590
 800124c:	20000168 	.word	0x20000168
 8001250:	20000594 	.word	0x20000594
 8001254:	200005a0 	.word	0x200005a0
 8001258:	200005a8 	.word	0x200005a8
 800125c:	200002d0 	.word	0x200002d0
 8001260:	200005ac 	.word	0x200005ac
 8001264:	200002f4 	.word	0x200002f4
 8001268:	200005b0 	.word	0x200005b0
 800126c:	20000188 	.word	0x20000188
 8001270:	20000598 	.word	0x20000598
 8001274:	200005b4 	.word	0x200005b4
 8001278:	200005bc 	.word	0x200005bc
 800127c:	200005c0 	.word	0x200005c0
 8001280:	200005c4 	.word	0x200005c4
 8001284:	200002ac 	.word	0x200002ac

08001288 <initLPS22hh>:
int16_t H_0_lsb=0;
int16_t H_1_lsb=0;
float mh=0;


void initLPS22hh(){
 8001288:	b500      	push	{lr}
 800128a:	b085      	sub	sp, #20
	uint8_t addressWrite=0xba;
	uint8_t turnOn[]={0x10,0x20};//The address of the register and the value of the register to turn on the sensor
 800128c:	f242 0310 	movw	r3, #8208	; 0x2010
 8001290:	f8ad 300c 	strh.w	r3, [sp, #12]

    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001294:	2301      	movs	r3, #1
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2302      	movs	r3, #2
 800129a:	aa03      	add	r2, sp, #12
 800129c:	21ba      	movs	r1, #186	; 0xba
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <initLPS22hh+0x24>)
 80012a0:	f001 f8c2 	bl	8002428 <HAL_I2C_Master_Transmit>
}
 80012a4:	b005      	add	sp, #20
 80012a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012aa:	bf00      	nop
 80012ac:	2000064c 	.word	0x2000064c

080012b0 <getPressure>:

void getPressure(float *pressure){
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	b087      	sub	sp, #28
 80012b4:	4607      	mov	r7, r0

	int lsb;
	uint8_t addressWrite=0xba;
	uint8_t addressRead=0xbb;
	uint8_t pressXL[]={0x28};
 80012b6:	2328      	movs	r3, #40	; 0x28
 80012b8:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t pressL[]={0x29};
 80012bc:	2329      	movs	r3, #41	; 0x29
 80012be:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t pressH[]={0x2a};
 80012c2:	232a      	movs	r3, #42	; 0x2a
 80012c4:	f88d 300c 	strb.w	r3, [sp, #12]
	uint8_t data[2];

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressXL,2,1);
 80012c8:	4d22      	ldr	r5, [pc, #136]	; (8001354 <getPressure+0xa4>)
 80012ca:	2601      	movs	r6, #1
 80012cc:	9600      	str	r6, [sp, #0]
 80012ce:	2302      	movs	r3, #2
 80012d0:	aa05      	add	r2, sp, #20
 80012d2:	21ba      	movs	r1, #186	; 0xba
 80012d4:	4628      	mov	r0, r5
 80012d6:	f001 f8a7 	bl	8002428 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2,addressRead,data,2,1);
 80012da:	9600      	str	r6, [sp, #0]
 80012dc:	2302      	movs	r3, #2
 80012de:	aa02      	add	r2, sp, #8
 80012e0:	21bb      	movs	r1, #187	; 0xbb
 80012e2:	4628      	mov	r0, r5
 80012e4:	f001 f8a0 	bl	8002428 <HAL_I2C_Master_Transmit>
	lsb=data[0];
 80012e8:	f89d 4008 	ldrb.w	r4, [sp, #8]

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressL,2,1);
 80012ec:	9600      	str	r6, [sp, #0]
 80012ee:	2302      	movs	r3, #2
 80012f0:	aa04      	add	r2, sp, #16
 80012f2:	21ba      	movs	r1, #186	; 0xba
 80012f4:	4628      	mov	r0, r5
 80012f6:	f001 f897 	bl	8002428 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2,addressRead,data,2,1);
 80012fa:	9600      	str	r6, [sp, #0]
 80012fc:	2302      	movs	r3, #2
 80012fe:	aa02      	add	r2, sp, #8
 8001300:	21bb      	movs	r1, #187	; 0xbb
 8001302:	4628      	mov	r0, r5
 8001304:	f001 f890 	bl	8002428 <HAL_I2C_Master_Transmit>
	lsb|=data[0]<<8;
 8001308:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800130c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,pressH,2,1);
 8001310:	9600      	str	r6, [sp, #0]
 8001312:	2302      	movs	r3, #2
 8001314:	aa03      	add	r2, sp, #12
 8001316:	21ba      	movs	r1, #186	; 0xba
 8001318:	4628      	mov	r0, r5
 800131a:	f001 f885 	bl	8002428 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2,addressRead,data,2,1);
 800131e:	9600      	str	r6, [sp, #0]
 8001320:	2302      	movs	r3, #2
 8001322:	aa02      	add	r2, sp, #8
 8001324:	21bb      	movs	r1, #187	; 0xbb
 8001326:	4628      	mov	r0, r5
 8001328:	f001 f87e 	bl	8002428 <HAL_I2C_Master_Transmit>
	lsb|=data[0]<<16;
 800132c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16


	if(lsb>8388607){
 8001334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001338:	db00      	blt.n	800133c <getPressure+0x8c>
		lsb=lsb-1;
		lsb=~lsb;
 800133a:	425b      	negs	r3, r3
	}

	*pressure=((float)lsb)/((float)(4096));
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001344:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001358 <getPressure+0xa8>
 8001348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134c:	edc7 7a00 	vstr	s15, [r7]

}
 8001350:	b007      	add	sp, #28
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001354:	2000064c 	.word	0x2000064c
 8001358:	39800000 	.word	0x39800000

0800135c <initHTS221>:

void initHTS221(){
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	b08e      	sub	sp, #56	; 0x38
	uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	uint8_t turnOn[]={0x20,0x81};//The address of the register and the value of the register to turn on the sensor
 8001360:	f248 1320 	movw	r3, #33056	; 0x8120
 8001364:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    uint8_t data[2];

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001368:	4eab      	ldr	r6, [pc, #684]	; (8001618 <initHTS221+0x2bc>)
 800136a:	2401      	movs	r4, #1
 800136c:	9400      	str	r4, [sp, #0]
 800136e:	2302      	movs	r3, #2
 8001370:	aa0d      	add	r2, sp, #52	; 0x34
 8001372:	21be      	movs	r1, #190	; 0xbe
 8001374:	4630      	mov	r0, r6
 8001376:	f001 f857 	bl	8002428 <HAL_I2C_Master_Transmit>


    uint8_t tempMinAddress[]={0x32};
 800137a:	2332      	movs	r3, #50	; 0x32
 800137c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    uint8_t tempMaxAddress[]={0x33};
 8001380:	2333      	movs	r3, #51	; 0x33
 8001382:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    //reading low temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMinAddress,1,1);
 8001386:	9400      	str	r4, [sp, #0]
 8001388:	4623      	mov	r3, r4
 800138a:	aa0b      	add	r2, sp, #44	; 0x2c
 800138c:	21be      	movs	r1, #190	; 0xbe
 800138e:	4630      	mov	r0, r6
 8001390:	f001 f84a 	bl	8002428 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001394:	9400      	str	r4, [sp, #0]
 8001396:	4623      	mov	r3, r4
 8001398:	aa0c      	add	r2, sp, #48	; 0x30
 800139a:	21bf      	movs	r1, #191	; 0xbf
 800139c:	4630      	mov	r0, r6
 800139e:	f001 f901 	bl	80025a4 <HAL_I2C_Master_Receive>
    T_C0=data[0];
 80013a2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80013a6:	4d9d      	ldr	r5, [pc, #628]	; (800161c <initHTS221+0x2c0>)
 80013a8:	602b      	str	r3, [r5, #0]

    //reading high temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMaxAddress,1,1);
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	4623      	mov	r3, r4
 80013ae:	aa0a      	add	r2, sp, #40	; 0x28
 80013b0:	21be      	movs	r1, #190	; 0xbe
 80013b2:	4630      	mov	r0, r6
 80013b4:	f001 f838 	bl	8002428 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80013b8:	9400      	str	r4, [sp, #0]
 80013ba:	4623      	mov	r3, r4
 80013bc:	aa0c      	add	r2, sp, #48	; 0x30
 80013be:	21bf      	movs	r1, #191	; 0xbf
 80013c0:	4630      	mov	r0, r6
 80013c2:	f001 f8ef 	bl	80025a4 <HAL_I2C_Master_Receive>
    T_C1=data[0];
 80013c6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80013ca:	606b      	str	r3, [r5, #4]

	uint8_t MSB_temp[]={0x35};
 80013cc:	2335      	movs	r3, #53	; 0x35
 80013ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MSB_temp,1,1);
 80013d2:	9400      	str	r4, [sp, #0]
 80013d4:	4623      	mov	r3, r4
 80013d6:	aa09      	add	r2, sp, #36	; 0x24
 80013d8:	21be      	movs	r1, #190	; 0xbe
 80013da:	4630      	mov	r0, r6
 80013dc:	f001 f824 	bl	8002428 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80013e0:	9400      	str	r4, [sp, #0]
 80013e2:	4623      	mov	r3, r4
 80013e4:	aa0c      	add	r2, sp, #48	; 0x30
 80013e6:	21bf      	movs	r1, #191	; 0xbf
 80013e8:	4630      	mov	r0, r6
 80013ea:	f001 f8db 	bl	80025a4 <HAL_I2C_Master_Receive>

	T_C0|=((data[0]&0x03)<<8);
 80013ee:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80013f2:	021a      	lsls	r2, r3, #8
 80013f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80013f8:	6829      	ldr	r1, [r5, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	602a      	str	r2, [r5, #0]
	T_C1|=(((data[0]&0x0c)>>2)<<8);
 80013fe:	109b      	asrs	r3, r3, #2
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001406:	6869      	ldr	r1, [r5, #4]
 8001408:	430b      	orrs	r3, r1
 800140a:	606b      	str	r3, [r5, #4]

	T_C0=T_C0>>3;
 800140c:	10d2      	asrs	r2, r2, #3
 800140e:	602a      	str	r2, [r5, #0]
	T_C1=T_C1>>3;
 8001410:	10db      	asrs	r3, r3, #3
 8001412:	606b      	str	r3, [r5, #4]

	uint8_t ADC0L[]={0x3c};
 8001414:	233c      	movs	r3, #60	; 0x3c
 8001416:	f88d 3020 	strb.w	r3, [sp, #32]
	uint8_t ADC0H[]={0x3d};
 800141a:	233d      	movs	r3, #61	; 0x3d
 800141c:	f88d 301c 	strb.w	r3, [sp, #28]
	//get the calibration adc min
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 8001420:	9400      	str	r4, [sp, #0]
 8001422:	4623      	mov	r3, r4
 8001424:	aa08      	add	r2, sp, #32
 8001426:	21be      	movs	r1, #190	; 0xbe
 8001428:	4630      	mov	r0, r6
 800142a:	f000 fffd 	bl	8002428 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800142e:	9400      	str	r4, [sp, #0]
 8001430:	4623      	mov	r3, r4
 8001432:	aa0c      	add	r2, sp, #48	; 0x30
 8001434:	21bf      	movs	r1, #191	; 0xbf
 8001436:	4630      	mov	r0, r6
 8001438:	f001 f8b4 	bl	80025a4 <HAL_I2C_Master_Receive>
	T_C0_lsb=data[0];
 800143c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001440:	812b      	strh	r3, [r5, #8]

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 8001442:	9400      	str	r4, [sp, #0]
 8001444:	4623      	mov	r3, r4
 8001446:	aa07      	add	r2, sp, #28
 8001448:	21be      	movs	r1, #190	; 0xbe
 800144a:	4630      	mov	r0, r6
 800144c:	f000 ffec 	bl	8002428 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001450:	9400      	str	r4, [sp, #0]
 8001452:	4623      	mov	r3, r4
 8001454:	aa0c      	add	r2, sp, #48	; 0x30
 8001456:	21bf      	movs	r1, #191	; 0xbf
 8001458:	4630      	mov	r0, r6
 800145a:	f001 f8a3 	bl	80025a4 <HAL_I2C_Master_Receive>
	T_C0_lsb|=data[0]<<8;
 800145e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001462:	892b      	ldrh	r3, [r5, #8]
 8001464:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001468:	812b      	strh	r3, [r5, #8]


    uint8_t ADC1L[]={0x3e};
 800146a:	233e      	movs	r3, #62	; 0x3e
 800146c:	f88d 3018 	strb.w	r3, [sp, #24]
    uint8_t ADC1H[]={0x3f};
 8001470:	233f      	movs	r3, #63	; 0x3f
 8001472:	f88d 3014 	strb.w	r3, [sp, #20]
    //leggo temperatura
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 8001476:	9400      	str	r4, [sp, #0]
 8001478:	4623      	mov	r3, r4
 800147a:	aa06      	add	r2, sp, #24
 800147c:	21be      	movs	r1, #190	; 0xbe
 800147e:	4630      	mov	r0, r6
 8001480:	f000 ffd2 	bl	8002428 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001484:	9400      	str	r4, [sp, #0]
 8001486:	4623      	mov	r3, r4
 8001488:	aa0c      	add	r2, sp, #48	; 0x30
 800148a:	21bf      	movs	r1, #191	; 0xbf
 800148c:	4630      	mov	r0, r6
 800148e:	f001 f889 	bl	80025a4 <HAL_I2C_Master_Receive>
    T_C1_lsb=data[0];
 8001492:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001496:	816b      	strh	r3, [r5, #10]

    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 8001498:	9400      	str	r4, [sp, #0]
 800149a:	4623      	mov	r3, r4
 800149c:	aa05      	add	r2, sp, #20
 800149e:	21be      	movs	r1, #190	; 0xbe
 80014a0:	4630      	mov	r0, r6
 80014a2:	f000 ffc1 	bl	8002428 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80014a6:	9400      	str	r4, [sp, #0]
 80014a8:	4623      	mov	r3, r4
 80014aa:	aa0c      	add	r2, sp, #48	; 0x30
 80014ac:	21bf      	movs	r1, #191	; 0xbf
 80014ae:	4630      	mov	r0, r6
 80014b0:	f001 f878 	bl	80025a4 <HAL_I2C_Master_Receive>
    T_C1_lsb|=data[0]<<8;
 80014b4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80014b8:	896b      	ldrh	r3, [r5, #10]
 80014ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014be:	b21b      	sxth	r3, r3
 80014c0:	816b      	strh	r3, [r5, #10]

    m=((float)(T_C1-T_C0))/((float)(T_C1_lsb-T_C0_lsb));
 80014c2:	686a      	ldr	r2, [r5, #4]
 80014c4:	6829      	ldr	r1, [r5, #0]
 80014c6:	1a52      	subs	r2, r2, r1
 80014c8:	ee07 2a90 	vmov	s15, r2
 80014cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d0:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014e2:	edc5 6a03 	vstr	s13, [r5, #12]


    uint8_t HumMinAddress[]={0x30};
 80014e6:	2330      	movs	r3, #48	; 0x30
 80014e8:	f88d 3010 	strb.w	r3, [sp, #16]
     uint8_t HumMaxAddress[]={0x31};
 80014ec:	2331      	movs	r3, #49	; 0x31
 80014ee:	f88d 300c 	strb.w	r3, [sp, #12]
     //reading low temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMinAddress,1,1);
 80014f2:	9400      	str	r4, [sp, #0]
 80014f4:	4623      	mov	r3, r4
 80014f6:	aa04      	add	r2, sp, #16
 80014f8:	21be      	movs	r1, #190	; 0xbe
 80014fa:	4630      	mov	r0, r6
 80014fc:	f000 ff94 	bl	8002428 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001500:	9400      	str	r4, [sp, #0]
 8001502:	4623      	mov	r3, r4
 8001504:	aa0c      	add	r2, sp, #48	; 0x30
 8001506:	21bf      	movs	r1, #191	; 0xbf
 8001508:	4630      	mov	r0, r6
 800150a:	f001 f84b 	bl	80025a4 <HAL_I2C_Master_Receive>
     H_0=data[0];
 800150e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001512:	742b      	strb	r3, [r5, #16]

     //reading high temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMaxAddress,1,1);
 8001514:	9400      	str	r4, [sp, #0]
 8001516:	4623      	mov	r3, r4
 8001518:	aa03      	add	r2, sp, #12
 800151a:	21be      	movs	r1, #190	; 0xbe
 800151c:	4630      	mov	r0, r6
 800151e:	f000 ff83 	bl	8002428 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001522:	9400      	str	r4, [sp, #0]
 8001524:	4623      	mov	r3, r4
 8001526:	aa0c      	add	r2, sp, #48	; 0x30
 8001528:	21bf      	movs	r1, #191	; 0xbf
 800152a:	4630      	mov	r0, r6
 800152c:	f001 f83a 	bl	80025a4 <HAL_I2C_Master_Receive>
     H_1=data[0];
 8001530:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001534:	746b      	strb	r3, [r5, #17]


 	H_0=H_0>>1;
 8001536:	7c2a      	ldrb	r2, [r5, #16]
 8001538:	40e2      	lsrs	r2, r4
 800153a:	742a      	strb	r2, [r5, #16]
 	H_1=H_1>>1;
 800153c:	40e3      	lsrs	r3, r4
 800153e:	746b      	strb	r3, [r5, #17]

 	ADC0L[0]=0x36;
 8001540:	2336      	movs	r3, #54	; 0x36
 8001542:	f88d 3020 	strb.w	r3, [sp, #32]
 	ADC0H[0]=0x37;
 8001546:	2337      	movs	r3, #55	; 0x37
 8001548:	f88d 301c 	strb.w	r3, [sp, #28]
 	//get the calibration adc min
 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 800154c:	9400      	str	r4, [sp, #0]
 800154e:	4623      	mov	r3, r4
 8001550:	aa08      	add	r2, sp, #32
 8001552:	21be      	movs	r1, #190	; 0xbe
 8001554:	4630      	mov	r0, r6
 8001556:	f000 ff67 	bl	8002428 <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800155a:	9400      	str	r4, [sp, #0]
 800155c:	4623      	mov	r3, r4
 800155e:	aa0c      	add	r2, sp, #48	; 0x30
 8001560:	21bf      	movs	r1, #191	; 0xbf
 8001562:	4630      	mov	r0, r6
 8001564:	f001 f81e 	bl	80025a4 <HAL_I2C_Master_Receive>
 	H_0_lsb=data[0];
 8001568:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800156c:	826b      	strh	r3, [r5, #18]

 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 800156e:	9400      	str	r4, [sp, #0]
 8001570:	4623      	mov	r3, r4
 8001572:	aa07      	add	r2, sp, #28
 8001574:	21be      	movs	r1, #190	; 0xbe
 8001576:	4630      	mov	r0, r6
 8001578:	f000 ff56 	bl	8002428 <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800157c:	9400      	str	r4, [sp, #0]
 800157e:	4623      	mov	r3, r4
 8001580:	aa0c      	add	r2, sp, #48	; 0x30
 8001582:	21bf      	movs	r1, #191	; 0xbf
 8001584:	4630      	mov	r0, r6
 8001586:	f001 f80d 	bl	80025a4 <HAL_I2C_Master_Receive>
 	H_0_lsb|=data[0]<<8;
 800158a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800158e:	8a6b      	ldrh	r3, [r5, #18]
 8001590:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001594:	826b      	strh	r3, [r5, #18]


    ADC1L[0]=0x3a;
 8001596:	233a      	movs	r3, #58	; 0x3a
 8001598:	f88d 3018 	strb.w	r3, [sp, #24]
    ADC1H[0]=0x3b;
 800159c:	233b      	movs	r3, #59	; 0x3b
 800159e:	f88d 3014 	strb.w	r3, [sp, #20]
     //leggo temperatura
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 80015a2:	9400      	str	r4, [sp, #0]
 80015a4:	4623      	mov	r3, r4
 80015a6:	aa06      	add	r2, sp, #24
 80015a8:	21be      	movs	r1, #190	; 0xbe
 80015aa:	4630      	mov	r0, r6
 80015ac:	f000 ff3c 	bl	8002428 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80015b0:	9400      	str	r4, [sp, #0]
 80015b2:	4623      	mov	r3, r4
 80015b4:	aa0c      	add	r2, sp, #48	; 0x30
 80015b6:	21bf      	movs	r1, #191	; 0xbf
 80015b8:	4630      	mov	r0, r6
 80015ba:	f000 fff3 	bl	80025a4 <HAL_I2C_Master_Receive>
     H_1_lsb=data[0];
 80015be:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80015c2:	82ab      	strh	r3, [r5, #20]

     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 80015c4:	9400      	str	r4, [sp, #0]
 80015c6:	4623      	mov	r3, r4
 80015c8:	aa05      	add	r2, sp, #20
 80015ca:	21be      	movs	r1, #190	; 0xbe
 80015cc:	4630      	mov	r0, r6
 80015ce:	f000 ff2b 	bl	8002428 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80015d2:	9400      	str	r4, [sp, #0]
 80015d4:	4623      	mov	r3, r4
 80015d6:	aa0c      	add	r2, sp, #48	; 0x30
 80015d8:	21bf      	movs	r1, #191	; 0xbf
 80015da:	4630      	mov	r0, r6
 80015dc:	f000 ffe2 	bl	80025a4 <HAL_I2C_Master_Receive>
     H_1_lsb|=data[0]<<8;
 80015e0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80015e4:	8aab      	ldrh	r3, [r5, #20]
 80015e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	82ab      	strh	r3, [r5, #20]

     mh=((float)(H_1-H_0))/((float)(H_1_lsb-H_0_lsb));
 80015ee:	7c6a      	ldrb	r2, [r5, #17]
 80015f0:	7c29      	ldrb	r1, [r5, #16]
 80015f2:	1a52      	subs	r2, r2, r1
 80015f4:	ee07 2a90 	vmov	s15, r2
 80015f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fc:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800160e:	edc5 6a06 	vstr	s13, [r5, #24]



}
 8001612:	b00e      	add	sp, #56	; 0x38
 8001614:	bd70      	pop	{r4, r5, r6, pc}
 8001616:	bf00      	nop
 8001618:	2000064c 	.word	0x2000064c
 800161c:	20000738 	.word	0x20000738

08001620 <getHumidity>:

void getHumidity(float *humidity){
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	4607      	mov	r7, r0

    uint8_t humL[]={0x28};
 8001626:	2328      	movs	r3, #40	; 0x28
 8001628:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t humH[]={0x29};
 800162c:	2329      	movs	r3, #41	; 0x29
 800162e:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t hum;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humL,1,1);
 8001632:	4e1c      	ldr	r6, [pc, #112]	; (80016a4 <getHumidity+0x84>)
 8001634:	2401      	movs	r4, #1
 8001636:	9400      	str	r4, [sp, #0]
 8001638:	4623      	mov	r3, r4
 800163a:	aa05      	add	r2, sp, #20
 800163c:	21be      	movs	r1, #190	; 0xbe
 800163e:	4630      	mov	r0, r6
 8001640:	f000 fef2 	bl	8002428 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001644:	9400      	str	r4, [sp, #0]
 8001646:	4623      	mov	r3, r4
 8001648:	aa03      	add	r2, sp, #12
 800164a:	21bf      	movs	r1, #191	; 0xbf
 800164c:	4630      	mov	r0, r6
 800164e:	f000 ffa9 	bl	80025a4 <HAL_I2C_Master_Receive>
    hum=data[0];
 8001652:	f89d 500c 	ldrb.w	r5, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humH,1,1);
 8001656:	9400      	str	r4, [sp, #0]
 8001658:	4623      	mov	r3, r4
 800165a:	aa04      	add	r2, sp, #16
 800165c:	21be      	movs	r1, #190	; 0xbe
 800165e:	4630      	mov	r0, r6
 8001660:	f000 fee2 	bl	8002428 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001664:	9400      	str	r4, [sp, #0]
 8001666:	4623      	mov	r3, r4
 8001668:	aa03      	add	r2, sp, #12
 800166a:	21bf      	movs	r1, #191	; 0xbf
 800166c:	4630      	mov	r0, r6
 800166e:	f000 ff99 	bl	80025a4 <HAL_I2C_Master_Receive>
    hum|=data[0]<<1;
 8001672:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001676:	ea45 0343 	orr.w	r3, r5, r3, lsl #1
 800167a:	ee07 3a90 	vmov	s15, r3

    *humidity=H_0+mh*hum;
 800167e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <getHumidity+0x88>)
 8001684:	ed93 7a06 	vldr	s14, [r3, #24]
 8001688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168c:	7c1b      	ldrb	r3, [r3, #16]
 800168e:	ee07 3a10 	vmov	s14, r3
 8001692:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169a:	edc7 7a00 	vstr	s15, [r7]

}
 800169e:	b007      	add	sp, #28
 80016a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000064c 	.word	0x2000064c
 80016a8:	20000738 	.word	0x20000738

080016ac <getTemperature>:



void getTemperature(float *temperature){
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	b087      	sub	sp, #28
 80016b0:	4607      	mov	r7, r0

    uint8_t tempL[]={0x2A};
 80016b2:	232a      	movs	r3, #42	; 0x2a
 80016b4:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t tempH[]={0x2B};
 80016b8:	232b      	movs	r3, #43	; 0x2b
 80016ba:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t temp;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempL,1,1);
 80016be:	4e1c      	ldr	r6, [pc, #112]	; (8001730 <getTemperature+0x84>)
 80016c0:	2501      	movs	r5, #1
 80016c2:	9500      	str	r5, [sp, #0]
 80016c4:	462b      	mov	r3, r5
 80016c6:	aa05      	add	r2, sp, #20
 80016c8:	21be      	movs	r1, #190	; 0xbe
 80016ca:	4630      	mov	r0, r6
 80016cc:	f000 feac 	bl	8002428 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	462b      	mov	r3, r5
 80016d4:	aa03      	add	r2, sp, #12
 80016d6:	21bf      	movs	r1, #191	; 0xbf
 80016d8:	4630      	mov	r0, r6
 80016da:	f000 ff63 	bl	80025a4 <HAL_I2C_Master_Receive>
    temp=data[0];
 80016de:	f89d 400c 	ldrb.w	r4, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempH,1,1);
 80016e2:	9500      	str	r5, [sp, #0]
 80016e4:	462b      	mov	r3, r5
 80016e6:	aa04      	add	r2, sp, #16
 80016e8:	21be      	movs	r1, #190	; 0xbe
 80016ea:	4630      	mov	r0, r6
 80016ec:	f000 fe9c 	bl	8002428 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80016f0:	9500      	str	r5, [sp, #0]
 80016f2:	462b      	mov	r3, r5
 80016f4:	aa03      	add	r2, sp, #12
 80016f6:	21bf      	movs	r1, #191	; 0xbf
 80016f8:	4630      	mov	r0, r6
 80016fa:	f000 ff53 	bl	80025a4 <HAL_I2C_Master_Receive>
    temp|=data[0]<<8;
 80016fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001702:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001706:	b224      	sxth	r4, r4

    *temperature=T_C0+m*temp;
 8001708:	ee07 4a90 	vmov	s15, r4
 800170c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <getTemperature+0x88>)
 8001712:	ed93 7a03 	vldr	s14, [r3, #12]
 8001716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171a:	ed93 7a00 	vldr	s14, [r3]
 800171e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001726:	edc7 7a00 	vstr	s15, [r7]

}
 800172a:	b007      	add	sp, #28
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800172e:	bf00      	nop
 8001730:	2000064c 	.word	0x2000064c
 8001734:	20000738 	.word	0x20000738

08001738 <startToF>:


void startToF(){
 8001738:	b500      	push	{lr}
 800173a:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x52;
	 uint8_t turnOn[]={0x00,0x01};
 800173c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001740:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001744:	2301      	movs	r3, #1
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2302      	movs	r3, #2
 800174a:	aa03      	add	r2, sp, #12
 800174c:	2152      	movs	r1, #82	; 0x52
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <startToF+0x24>)
 8001750:	f000 fe6a 	bl	8002428 <HAL_I2C_Master_Transmit>
}
 8001754:	b005      	add	sp, #20
 8001756:	f85d fb04 	ldr.w	pc, [sp], #4
 800175a:	bf00      	nop
 800175c:	2000064c 	.word	0x2000064c

08001760 <getDistance>:

void getDistance(int *distance){
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	4604      	mov	r4, r0
	 uint8_t addressWrite=0x52;
	  uint8_t addressRead=0x53;
	  uint8_t resultAddress[]={0x1e};
 8001766:	231e      	movs	r3, #30
 8001768:	f88d 300c 	strb.w	r3, [sp, #12]
	  uint8_t rawData[]={0,0};
 800176c:	2300      	movs	r3, #0
 800176e:	f8ad 3008 	strh.w	r3, [sp, #8]

	  HAL_I2C_Master_Transmit(&hi2c2,addressWrite,resultAddress,1,1);
 8001772:	4e13      	ldr	r6, [pc, #76]	; (80017c0 <getDistance+0x60>)
 8001774:	2501      	movs	r5, #1
 8001776:	9500      	str	r5, [sp, #0]
 8001778:	462b      	mov	r3, r5
 800177a:	aa03      	add	r2, sp, #12
 800177c:	2152      	movs	r1, #82	; 0x52
 800177e:	4630      	mov	r0, r6
 8001780:	f000 fe52 	bl	8002428 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2,addressRead,rawData,2,1);
 8001784:	9500      	str	r5, [sp, #0]
 8001786:	2302      	movs	r3, #2
 8001788:	aa02      	add	r2, sp, #8
 800178a:	2153      	movs	r1, #83	; 0x53
 800178c:	4630      	mov	r0, r6
 800178e:	f000 ff09 	bl	80025a4 <HAL_I2C_Master_Receive>
	  *distance=(rawData[0]<<8)+rawData[1]-20;
 8001792:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001796:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800179a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800179e:	3b14      	subs	r3, #20
 80017a0:	6023      	str	r3, [r4, #0]

	  if(*distance<0){
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db08      	blt.n	80017b8 <getDistance+0x58>
		  *distance=0;
	  }
	  if(*distance>2000){
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017ac:	dd02      	ble.n	80017b4 <getDistance+0x54>
		  *distance=2000;
 80017ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80017b2:	6023      	str	r3, [r4, #0]
	  }
}
 80017b4:	b004      	add	sp, #16
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
		  *distance=0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	6023      	str	r3, [r4, #0]
 80017bc:	e7f3      	b.n	80017a6 <getDistance+0x46>
 80017be:	bf00      	nop
 80017c0:	2000064c 	.word	0x2000064c

080017c4 <init_accelerometer>:



void init_accelerometer(){
 80017c4:	b500      	push	{lr}
 80017c6:	b085      	sub	sp, #20

	 uint8_t addressWrite=0xd4;
	 uint8_t turnOn[]={0x10,0x10};
 80017c8:	f241 0310 	movw	r3, #4112	; 0x1010
 80017cc:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 80017d0:	2301      	movs	r3, #1
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2302      	movs	r3, #2
 80017d6:	aa03      	add	r2, sp, #12
 80017d8:	21d4      	movs	r1, #212	; 0xd4
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <init_accelerometer+0x24>)
 80017dc:	f000 fe24 	bl	8002428 <HAL_I2C_Master_Transmit>


	}
 80017e0:	b005      	add	sp, #20
 80017e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e6:	bf00      	nop
 80017e8:	2000064c 	.word	0x2000064c

080017ec <getAxisAccelerometer>:


void getAxisAccelerometer(int16_t *accx, int16_t *accy, int16_t *accz){
 80017ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	4680      	mov	r8, r0
 80017f4:	460f      	mov	r7, r1
 80017f6:	4616      	mov	r6, r2
	 uint8_t ACCcmd[1];
	 uint8_t ACCread[1];


	   //ACC X
	   ACCcmd[0]=0x28;
 80017f8:	2328      	movs	r3, #40	; 0x28
 80017fa:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 80017fe:	4d4f      	ldr	r5, [pc, #316]	; (800193c <getAxisAccelerometer+0x150>)
 8001800:	2401      	movs	r4, #1
 8001802:	9400      	str	r4, [sp, #0]
 8001804:	4623      	mov	r3, r4
 8001806:	aa03      	add	r2, sp, #12
 8001808:	21d4      	movs	r1, #212	; 0xd4
 800180a:	4628      	mov	r0, r5
 800180c:	f000 fe0c 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001810:	9400      	str	r4, [sp, #0]
 8001812:	4623      	mov	r3, r4
 8001814:	aa02      	add	r2, sp, #8
 8001816:	21d5      	movs	r1, #213	; 0xd5
 8001818:	4628      	mov	r0, r5
 800181a:	f000 fec3 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *accx=ACCread[0];
 800181e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001822:	f8a8 3000 	strh.w	r3, [r8]

	   ACCcmd[0]=0x29;
 8001826:	2329      	movs	r3, #41	; 0x29
 8001828:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 800182c:	9400      	str	r4, [sp, #0]
 800182e:	4623      	mov	r3, r4
 8001830:	aa03      	add	r2, sp, #12
 8001832:	21d4      	movs	r1, #212	; 0xd4
 8001834:	4628      	mov	r0, r5
 8001836:	f000 fdf7 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 800183a:	9400      	str	r4, [sp, #0]
 800183c:	4623      	mov	r3, r4
 800183e:	aa02      	add	r2, sp, #8
 8001840:	21d5      	movs	r1, #213	; 0xd5
 8001842:	4628      	mov	r0, r5
 8001844:	f000 feae 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *accx|=((ACCread[0])<<8);
 8001848:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800184c:	f8b8 3000 	ldrh.w	r3, [r8]
 8001850:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001854:	f8a8 3000 	strh.w	r3, [r8]



	   //ACC Y

	   ACCcmd[0]=0x2a;
 8001858:	232a      	movs	r3, #42	; 0x2a
 800185a:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 800185e:	9400      	str	r4, [sp, #0]
 8001860:	4623      	mov	r3, r4
 8001862:	aa03      	add	r2, sp, #12
 8001864:	21d4      	movs	r1, #212	; 0xd4
 8001866:	4628      	mov	r0, r5
 8001868:	f000 fdde 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 800186c:	9400      	str	r4, [sp, #0]
 800186e:	4623      	mov	r3, r4
 8001870:	aa02      	add	r2, sp, #8
 8001872:	21d5      	movs	r1, #213	; 0xd5
 8001874:	4628      	mov	r0, r5
 8001876:	f000 fe95 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *accy=ACCread[0];
 800187a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800187e:	803b      	strh	r3, [r7, #0]

	   ACCcmd[0]=0x2b;
 8001880:	232b      	movs	r3, #43	; 0x2b
 8001882:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001886:	9400      	str	r4, [sp, #0]
 8001888:	4623      	mov	r3, r4
 800188a:	aa03      	add	r2, sp, #12
 800188c:	21d4      	movs	r1, #212	; 0xd4
 800188e:	4628      	mov	r0, r5
 8001890:	f000 fdca 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001894:	9400      	str	r4, [sp, #0]
 8001896:	4623      	mov	r3, r4
 8001898:	aa02      	add	r2, sp, #8
 800189a:	21d5      	movs	r1, #213	; 0xd5
 800189c:	4628      	mov	r0, r5
 800189e:	f000 fe81 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *accy|=((ACCread[0])<<8);
 80018a2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80018a6:	883b      	ldrh	r3, [r7, #0]
 80018a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018ac:	803b      	strh	r3, [r7, #0]



	   //ACC Z

	   ACCcmd[0]=0x2c;
 80018ae:	232c      	movs	r3, #44	; 0x2c
 80018b0:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 80018b4:	9400      	str	r4, [sp, #0]
 80018b6:	4623      	mov	r3, r4
 80018b8:	aa03      	add	r2, sp, #12
 80018ba:	21d4      	movs	r1, #212	; 0xd4
 80018bc:	4628      	mov	r0, r5
 80018be:	f000 fdb3 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 80018c2:	9400      	str	r4, [sp, #0]
 80018c4:	4623      	mov	r3, r4
 80018c6:	aa02      	add	r2, sp, #8
 80018c8:	21d5      	movs	r1, #213	; 0xd5
 80018ca:	4628      	mov	r0, r5
 80018cc:	f000 fe6a 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *accz=ACCread[0];
 80018d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80018d4:	8033      	strh	r3, [r6, #0]

	   ACCcmd[0]=0x2d;
 80018d6:	232d      	movs	r3, #45	; 0x2d
 80018d8:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 80018dc:	9400      	str	r4, [sp, #0]
 80018de:	4623      	mov	r3, r4
 80018e0:	aa03      	add	r2, sp, #12
 80018e2:	21d4      	movs	r1, #212	; 0xd4
 80018e4:	4628      	mov	r0, r5
 80018e6:	f000 fd9f 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 80018ea:	9400      	str	r4, [sp, #0]
 80018ec:	4623      	mov	r3, r4
 80018ee:	aa02      	add	r2, sp, #8
 80018f0:	21d5      	movs	r1, #213	; 0xd5
 80018f2:	4628      	mov	r0, r5
 80018f4:	f000 fe56 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *accz|=((ACCread[0])<<8);
 80018f8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80018fc:	8833      	ldrh	r3, [r6, #0]
 80018fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001902:	8033      	strh	r3, [r6, #0]

	   *accx=*accx/16;
 8001904:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db11      	blt.n	8001930 <getAxisAccelerometer+0x144>
 800190c:	111b      	asrs	r3, r3, #4
 800190e:	f8a8 3000 	strh.w	r3, [r8]
	   *accy=*accy/16;
 8001912:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0c      	blt.n	8001934 <getAxisAccelerometer+0x148>
 800191a:	111b      	asrs	r3, r3, #4
 800191c:	803b      	strh	r3, [r7, #0]
	   *accz=*accz/16;
 800191e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db08      	blt.n	8001938 <getAxisAccelerometer+0x14c>
 8001926:	111b      	asrs	r3, r3, #4
 8001928:	8033      	strh	r3, [r6, #0]



}
 800192a:	b004      	add	sp, #16
 800192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *accx=*accx/16;
 8001930:	330f      	adds	r3, #15
 8001932:	e7eb      	b.n	800190c <getAxisAccelerometer+0x120>
	   *accy=*accy/16;
 8001934:	330f      	adds	r3, #15
 8001936:	e7f0      	b.n	800191a <getAxisAccelerometer+0x12e>
	   *accz=*accz/16;
 8001938:	330f      	adds	r3, #15
 800193a:	e7f4      	b.n	8001926 <getAxisAccelerometer+0x13a>
 800193c:	2000064c 	.word	0x2000064c

08001940 <init_magnetometer>:
	counter++;
	}
	return counter;
}

void init_magnetometer(){
 8001940:	b500      	push	{lr}
 8001942:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x3c;
	 uint8_t turnOn[]={0x22,0x00};
 8001944:	2322      	movs	r3, #34	; 0x22
 8001946:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 800194a:	2301      	movs	r3, #1
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2302      	movs	r3, #2
 8001950:	aa03      	add	r2, sp, #12
 8001952:	213c      	movs	r1, #60	; 0x3c
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <init_magnetometer+0x20>)
 8001956:	f000 fd67 	bl	8002428 <HAL_I2C_Master_Transmit>


}
 800195a:	b005      	add	sp, #20
 800195c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001960:	2000064c 	.word	0x2000064c

08001964 <getAxisMagnetometer>:


void getAxisMagnetometer(int16_t *magx, int16_t *magy, int16_t *magz){
 8001964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	4680      	mov	r8, r0
 800196c:	460f      	mov	r7, r1
 800196e:	4616      	mov	r6, r2

	 uint8_t MAGcmd[1];
	 uint8_t MAGread[1];

	   //MAG X
	   MAGcmd[0]=0x28;
 8001970:	2328      	movs	r3, #40	; 0x28
 8001972:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001976:	4d4f      	ldr	r5, [pc, #316]	; (8001ab4 <getAxisMagnetometer+0x150>)
 8001978:	2401      	movs	r4, #1
 800197a:	9400      	str	r4, [sp, #0]
 800197c:	4623      	mov	r3, r4
 800197e:	aa03      	add	r2, sp, #12
 8001980:	213c      	movs	r1, #60	; 0x3c
 8001982:	4628      	mov	r0, r5
 8001984:	f000 fd50 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001988:	9400      	str	r4, [sp, #0]
 800198a:	4623      	mov	r3, r4
 800198c:	aa02      	add	r2, sp, #8
 800198e:	213d      	movs	r1, #61	; 0x3d
 8001990:	4628      	mov	r0, r5
 8001992:	f000 fe07 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *magx=MAGread[0];
 8001996:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800199a:	f8a8 3000 	strh.w	r3, [r8]

	   MAGcmd[0]=0x29;
 800199e:	2329      	movs	r3, #41	; 0x29
 80019a0:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80019a4:	9400      	str	r4, [sp, #0]
 80019a6:	4623      	mov	r3, r4
 80019a8:	aa03      	add	r2, sp, #12
 80019aa:	213c      	movs	r1, #60	; 0x3c
 80019ac:	4628      	mov	r0, r5
 80019ae:	f000 fd3b 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80019b2:	9400      	str	r4, [sp, #0]
 80019b4:	4623      	mov	r3, r4
 80019b6:	aa02      	add	r2, sp, #8
 80019b8:	213d      	movs	r1, #61	; 0x3d
 80019ba:	4628      	mov	r0, r5
 80019bc:	f000 fdf2 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *magx|=((MAGread[0])<<8);
 80019c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80019c4:	f8b8 3000 	ldrh.w	r3, [r8]
 80019c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019cc:	f8a8 3000 	strh.w	r3, [r8]

	   //MAG Y
	   MAGcmd[0]=0x2a;
 80019d0:	232a      	movs	r3, #42	; 0x2a
 80019d2:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80019d6:	9400      	str	r4, [sp, #0]
 80019d8:	4623      	mov	r3, r4
 80019da:	aa03      	add	r2, sp, #12
 80019dc:	213c      	movs	r1, #60	; 0x3c
 80019de:	4628      	mov	r0, r5
 80019e0:	f000 fd22 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80019e4:	9400      	str	r4, [sp, #0]
 80019e6:	4623      	mov	r3, r4
 80019e8:	aa02      	add	r2, sp, #8
 80019ea:	213d      	movs	r1, #61	; 0x3d
 80019ec:	4628      	mov	r0, r5
 80019ee:	f000 fdd9 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *magy=MAGread[0];
 80019f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80019f6:	803b      	strh	r3, [r7, #0]

	   MAGcmd[0]=0x2b;
 80019f8:	232b      	movs	r3, #43	; 0x2b
 80019fa:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80019fe:	9400      	str	r4, [sp, #0]
 8001a00:	4623      	mov	r3, r4
 8001a02:	aa03      	add	r2, sp, #12
 8001a04:	213c      	movs	r1, #60	; 0x3c
 8001a06:	4628      	mov	r0, r5
 8001a08:	f000 fd0e 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001a0c:	9400      	str	r4, [sp, #0]
 8001a0e:	4623      	mov	r3, r4
 8001a10:	aa02      	add	r2, sp, #8
 8001a12:	213d      	movs	r1, #61	; 0x3d
 8001a14:	4628      	mov	r0, r5
 8001a16:	f000 fdc5 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *magy|=((MAGread[0])<<8);
 8001a1a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001a1e:	883b      	ldrh	r3, [r7, #0]
 8001a20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a24:	803b      	strh	r3, [r7, #0]

	   //MAG Z
	   MAGcmd[0]=0x2c;
 8001a26:	232c      	movs	r3, #44	; 0x2c
 8001a28:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001a2c:	9400      	str	r4, [sp, #0]
 8001a2e:	4623      	mov	r3, r4
 8001a30:	aa03      	add	r2, sp, #12
 8001a32:	213c      	movs	r1, #60	; 0x3c
 8001a34:	4628      	mov	r0, r5
 8001a36:	f000 fcf7 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001a3a:	9400      	str	r4, [sp, #0]
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	aa02      	add	r2, sp, #8
 8001a40:	213d      	movs	r1, #61	; 0x3d
 8001a42:	4628      	mov	r0, r5
 8001a44:	f000 fdae 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *magz=MAGread[0];
 8001a48:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001a4c:	8033      	strh	r3, [r6, #0]

	   MAGcmd[0]=0x2d;
 8001a4e:	232d      	movs	r3, #45	; 0x2d
 8001a50:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001a54:	9400      	str	r4, [sp, #0]
 8001a56:	4623      	mov	r3, r4
 8001a58:	aa03      	add	r2, sp, #12
 8001a5a:	213c      	movs	r1, #60	; 0x3c
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	f000 fce3 	bl	8002428 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001a62:	9400      	str	r4, [sp, #0]
 8001a64:	4623      	mov	r3, r4
 8001a66:	aa02      	add	r2, sp, #8
 8001a68:	213d      	movs	r1, #61	; 0x3d
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f000 fd9a 	bl	80025a4 <HAL_I2C_Master_Receive>
	   *magz|=((MAGread[0])<<8);
 8001a70:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001a74:	8833      	ldrh	r3, [r6, #0]
 8001a76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a7a:	8033      	strh	r3, [r6, #0]

	   *magx=*magx/8;
 8001a7c:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db11      	blt.n	8001aa8 <getAxisMagnetometer+0x144>
 8001a84:	10db      	asrs	r3, r3, #3
 8001a86:	f8a8 3000 	strh.w	r3, [r8]
	   *magy=*magy/8;
 8001a8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0c      	blt.n	8001aac <getAxisMagnetometer+0x148>
 8001a92:	10db      	asrs	r3, r3, #3
 8001a94:	803b      	strh	r3, [r7, #0]
	   *magz=*magz/8;
 8001a96:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db08      	blt.n	8001ab0 <getAxisMagnetometer+0x14c>
 8001a9e:	10db      	asrs	r3, r3, #3
 8001aa0:	8033      	strh	r3, [r6, #0]



}
 8001aa2:	b004      	add	sp, #16
 8001aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *magx=*magx/8;
 8001aa8:	3307      	adds	r3, #7
 8001aaa:	e7eb      	b.n	8001a84 <getAxisMagnetometer+0x120>
	   *magy=*magy/8;
 8001aac:	3307      	adds	r3, #7
 8001aae:	e7f0      	b.n	8001a92 <getAxisMagnetometer+0x12e>
	   *magz=*magz/8;
 8001ab0:	3307      	adds	r3, #7
 8001ab2:	e7f4      	b.n	8001a9e <getAxisMagnetometer+0x13a>
 8001ab4:	2000064c 	.word	0x2000064c

08001ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_MspInit+0x2c>)
 8001abc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	661a      	str	r2, [r3, #96]	; 0x60
 8001ac4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ac6:	f002 0201 	and.w	r2, r2, #1
 8001aca:	9200      	str	r2, [sp, #0]
 8001acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ad0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ad4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae0:	b002      	add	sp, #8
 8001ae2:	4770      	bx	lr
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae8:	b510      	push	{r4, lr}
 8001aea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	2300      	movs	r3, #0
 8001aee:	9303      	str	r3, [sp, #12]
 8001af0:	9304      	str	r3, [sp, #16]
 8001af2:	9305      	str	r3, [sp, #20]
 8001af4:	9306      	str	r3, [sp, #24]
 8001af6:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8001af8:	6802      	ldr	r2, [r0, #0]
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_I2C_MspInit+0x64>)
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b00:	b008      	add	sp, #32
 8001b02:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	4c12      	ldr	r4, [pc, #72]	; (8001b50 <HAL_I2C_MspInit+0x68>)
 8001b06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001b0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	a903      	add	r1, sp, #12
 8001b30:	4808      	ldr	r0, [pc, #32]	; (8001b54 <HAL_I2C_MspInit+0x6c>)
 8001b32:	f000 f9d3 	bl	8001edc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	9b02      	ldr	r3, [sp, #8]
}
 8001b48:	e7da      	b.n	8001b00 <HAL_I2C_MspInit+0x18>
 8001b4a:	bf00      	nop
 8001b4c:	40005800 	.word	0x40005800
 8001b50:	40021000 	.word	0x40021000
 8001b54:	48000400 	.word	0x48000400

08001b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b58:	b500      	push	{lr}
 8001b5a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9303      	str	r3, [sp, #12]
 8001b60:	9304      	str	r3, [sp, #16]
 8001b62:	9305      	str	r3, [sp, #20]
 8001b64:	9306      	str	r3, [sp, #24]
 8001b66:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 8001b68:	6802      	ldr	r2, [r0, #0]
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_SPI_MspInit+0x64>)
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d002      	beq.n	8001b76 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b70:	b009      	add	sp, #36	; 0x24
 8001b72:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b76:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001b7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b80:	659a      	str	r2, [r3, #88]	; 0x58
 8001b82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b84:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001b88:	9201      	str	r2, [sp, #4]
 8001b8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b8e:	f042 0204 	orr.w	r2, r2, #4
 8001b92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b9e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ba2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bac:	2306      	movs	r3, #6
 8001bae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	a903      	add	r1, sp, #12
 8001bb2:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <HAL_SPI_MspInit+0x68>)
 8001bb4:	f000 f992 	bl	8001edc <HAL_GPIO_Init>
}
 8001bb8:	e7da      	b.n	8001b70 <HAL_SPI_MspInit+0x18>
 8001bba:	bf00      	nop
 8001bbc:	40003c00 	.word	0x40003c00
 8001bc0:	48000800 	.word	0x48000800

08001bc4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8001bc4:	6802      	ldr	r2, [r0, #0]
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d000      	beq.n	8001bce <HAL_TIM_Base_MspInit+0xa>
 8001bcc:	4770      	bx	lr
{
 8001bce:	b500      	push	{lr}
 8001bd0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bd2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001bd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bd8:	f042 0210 	orr.w	r2, r2, #16
 8001bdc:	659a      	str	r2, [r3, #88]	; 0x58
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	4611      	mov	r1, r2
 8001bec:	2036      	movs	r0, #54	; 0x36
 8001bee:	f000 f91b 	bl	8001e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bf2:	2036      	movs	r0, #54	; 0x36
 8001bf4:	f000 f950 	bl	8001e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001bf8:	b003      	add	sp, #12
 8001bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bfe:	bf00      	nop
 8001c00:	40001000 	.word	0x40001000

08001c04 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM15)
 8001c04:	6802      	ldr	r2, [r0, #0]
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_TIM_PWM_MspInit+0x28>)
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d000      	beq.n	8001c0e <HAL_TIM_PWM_MspInit+0xa>
 8001c0c:	4770      	bx	lr
{
 8001c0e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001c10:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8001c14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c1a:	661a      	str	r2, [r3, #96]	; 0x60
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001c26:	b002      	add	sp, #8
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40014000 	.word	0x40014000

08001c30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c30:	b500      	push	{lr}
 8001c32:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	2300      	movs	r3, #0
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	9302      	str	r3, [sp, #8]
 8001c3a:	9303      	str	r3, [sp, #12]
 8001c3c:	9304      	str	r3, [sp, #16]
 8001c3e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM15)
 8001c40:	6802      	ldr	r2, [r0, #0]
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_TIM_MspPostInit+0x4c>)
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d002      	beq.n	8001c4e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001c48:	b007      	add	sp, #28
 8001c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8001c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c54:	f042 0202 	orr.w	r2, r2, #2
 8001c58:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001c6e:	230e      	movs	r3, #14
 8001c70:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	a901      	add	r1, sp, #4
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <HAL_TIM_MspPostInit+0x50>)
 8001c76:	f000 f931 	bl	8001edc <HAL_GPIO_Init>
}
 8001c7a:	e7e5      	b.n	8001c48 <HAL_TIM_MspPostInit+0x18>
 8001c7c:	40014000 	.word	0x40014000
 8001c80:	48000400 	.word	0x48000400

08001c84 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <NMI_Handler>

08001c86 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <HardFault_Handler>

08001c88 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler>

08001c8a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <BusFault_Handler>

08001c8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler>

08001c8e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	4770      	bx	lr

08001c90 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	4770      	bx	lr

08001c92 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c96:	f000 f88f 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9a:	bd08      	pop	{r3, pc}

08001c9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	dataAvailable=1;
 8001c9e:	4b03      	ldr	r3, [pc, #12]	; (8001cac <EXTI9_5_IRQHandler+0x10>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ca4:	2040      	movs	r0, #64	; 0x40
 8001ca6:	f000 fa13 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001caa:	bd08      	pop	{r3, pc}
 8001cac:	20000734 	.word	0x20000734

08001cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
update=1;
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <TIM6_DAC_IRQHandler+0x10>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <TIM6_DAC_IRQHandler+0x14>)
 8001cba:	f002 fb30 	bl	800431e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cbe:	bd08      	pop	{r3, pc}
 8001cc0:	20000730 	.word	0x20000730
 8001cc4:	20000698 	.word	0x20000698

08001cc8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001cc8:	b508      	push	{r3, lr}
 8001cca:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <_sbrk+0x34>)
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	b142      	cbz	r2, 8001ce4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <_sbrk+0x34>)
 8001cd4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001cd6:	4403      	add	r3, r0
 8001cd8:	466a      	mov	r2, sp
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d806      	bhi.n	8001cec <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001cde:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <_sbrk+0x34>)
 8001ce0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001ce2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001ce4:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <_sbrk+0x34>)
 8001ce6:	4906      	ldr	r1, [pc, #24]	; (8001d00 <_sbrk+0x38>)
 8001ce8:	6011      	str	r1, [r2, #0]
 8001cea:	e7f2      	b.n	8001cd2 <_sbrk+0xa>
		errno = ENOMEM;
 8001cec:	f002 ffdc 	bl	8004ca8 <__errno>
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	e7f3      	b.n	8001ce2 <_sbrk+0x1a>
 8001cfa:	bf00      	nop
 8001cfc:	20000754 	.word	0x20000754
 8001d00:	200008a8 	.word	0x200008a8

08001d04 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	490f      	ldr	r1, [pc, #60]	; (8001d44 <SystemInit+0x40>)
 8001d06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <SystemInit+0x44>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001d26:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d38:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d3a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d40:	608b      	str	r3, [r1, #8]
#endif
}
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_InitTick+0x44>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b90b      	cbnz	r3, 8001d56 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d52:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001d54:	4770      	bx	lr
{
 8001d56:	b510      	push	{r4, lr}
 8001d58:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d62:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_InitTick+0x48>)
 8001d64:	6810      	ldr	r0, [r2, #0]
 8001d66:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d6a:	f000 f8a3 	bl	8001eb4 <HAL_SYSTICK_Config>
 8001d6e:	b968      	cbnz	r0, 8001d8c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d70:	2c0f      	cmp	r4, #15
 8001d72:	d901      	bls.n	8001d78 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001d74:	2001      	movs	r0, #1
 8001d76:	e00a      	b.n	8001d8e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f000 f852 	bl	8001e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <HAL_InitTick+0x44>)
 8001d86:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d88:	2000      	movs	r0, #0
 8001d8a:	e000      	b.n	8001d8e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001d8c:	2001      	movs	r0, #1
}
 8001d8e:	bd10      	pop	{r4, pc}
 8001d90:	200003fc 	.word	0x200003fc
 8001d94:	200003f8 	.word	0x200003f8

08001d98 <HAL_Init>:
{
 8001d98:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	f000 f832 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff ffd3 	bl	8001d4c <HAL_InitTick>
 8001da6:	b110      	cbz	r0, 8001dae <HAL_Init+0x16>
    status = HAL_ERROR;
 8001da8:	2401      	movs	r4, #1
}
 8001daa:	4620      	mov	r0, r4
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	4604      	mov	r4, r0
    HAL_MspInit();
 8001db0:	f7ff fe82 	bl	8001ab8 <HAL_MspInit>
 8001db4:	e7f9      	b.n	8001daa <HAL_Init+0x12>
	...

08001db8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_IncTick+0x10>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4a03      	ldr	r2, [pc, #12]	; (8001dcc <HAL_IncTick+0x14>)
 8001dbe:	6811      	ldr	r1, [r2, #0]
 8001dc0:	440b      	add	r3, r1
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200003fc 	.word	0x200003fc
 8001dcc:	2000075c 	.word	0x2000075c

08001dd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001dd0:	4b01      	ldr	r3, [pc, #4]	; (8001dd8 <HAL_GetTick+0x8>)
 8001dd2:	6818      	ldr	r0, [r3, #0]
}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	2000075c 	.word	0x2000075c

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b538      	push	{r3, r4, r5, lr}
 8001dde:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff fff6 	bl	8001dd0 <HAL_GetTick>
 8001de4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001dea:	d002      	beq.n	8001df2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_Delay+0x24>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df2:	f7ff ffed 	bl	8001dd0 <HAL_GetTick>
 8001df6:	1b40      	subs	r0, r0, r5
 8001df8:	42a0      	cmp	r0, r4
 8001dfa:	d3fa      	bcc.n	8001df2 <HAL_Delay+0x16>
  {
  }
}
 8001dfc:	bd38      	pop	{r3, r4, r5, pc}
 8001dfe:	bf00      	nop
 8001e00:	200003fc 	.word	0x200003fc

08001e04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e0c:	041b      	lsls	r3, r3, #16
 8001e0e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	0200      	lsls	r0, r0, #8
 8001e12:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e16:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e20:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_NVIC_SetPriority+0x68>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e32:	f1c3 0c07 	rsb	ip, r3, #7
 8001e36:	f1bc 0f04 	cmp.w	ip, #4
 8001e3a:	bf28      	it	cs
 8001e3c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e40:	f103 0e04 	add.w	lr, r3, #4
 8001e44:	f1be 0f06 	cmp.w	lr, #6
 8001e48:	d918      	bls.n	8001e7c <HAL_NVIC_SetPriority+0x54>
 8001e4a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 3eff 	mov.w	lr, #4294967295
 8001e50:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001e54:	ea21 010c 	bic.w	r1, r1, ip
 8001e58:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5a:	fa0e fe03 	lsl.w	lr, lr, r3
 8001e5e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e62:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8001e64:	2800      	cmp	r0, #0
 8001e66:	db0b      	blt.n	8001e80 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001e70:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001e74:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e78:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e7e5      	b.n	8001e4c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	f000 000f 	and.w	r0, r0, #15
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <HAL_NVIC_SetPriority+0x6c>)
 8001e8a:	541a      	strb	r2, [r3, r0]
 8001e8c:	e7f4      	b.n	8001e78 <HAL_NVIC_SetPriority+0x50>
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00
 8001e94:	e000ed14 	.word	0xe000ed14

08001e98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	db07      	blt.n	8001eac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9c:	f000 021f 	and.w	r2, r0, #31
 8001ea0:	0940      	lsrs	r0, r0, #5
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	4a02      	ldr	r2, [pc, #8]	; (8001eb0 <HAL_NVIC_EnableIRQ+0x18>)
 8001ea8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	3801      	subs	r0, #1
 8001eb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001eba:	d20b      	bcs.n	8001ed4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ec0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <HAL_SYSTICK_Config+0x24>)
 8001ec4:	21f0      	movs	r1, #240	; 0xf0
 8001ec6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eca:	2000      	movs	r0, #0
 8001ecc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	2207      	movs	r2, #7
 8001ed0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ed4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ede:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001ee0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	e03f      	b.n	8001f64 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ee4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ee6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001eea:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8001eee:	409c      	lsls	r4, r3
 8001ef0:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 8001ef2:	62c4      	str	r4, [r0, #44]	; 0x2c
 8001ef4:	e062      	b.n	8001fbc <HAL_GPIO_Init+0xe0>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef6:	2406      	movs	r4, #6
 8001ef8:	e000      	b.n	8001efc <HAL_GPIO_Init+0x20>
 8001efa:	2400      	movs	r4, #0
 8001efc:	40b4      	lsls	r4, r6
 8001efe:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f00:	3502      	adds	r5, #2
 8001f02:	4e68      	ldr	r6, [pc, #416]	; (80020a4 <HAL_GPIO_Init+0x1c8>)
 8001f04:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f08:	4c67      	ldr	r4, [pc, #412]	; (80020a8 <HAL_GPIO_Init+0x1cc>)
 8001f0a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001f0c:	43d4      	mvns	r4, r2
 8001f0e:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f12:	684f      	ldr	r7, [r1, #4]
 8001f14:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001f18:	d001      	beq.n	8001f1e <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 8001f1a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001f1e:	4d62      	ldr	r5, [pc, #392]	; (80020a8 <HAL_GPIO_Init+0x1cc>)
 8001f20:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001f22:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001f24:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f28:	684f      	ldr	r7, [r1, #4]
 8001f2a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001f2e:	d001      	beq.n	8001f34 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8001f30:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001f34:	4d5c      	ldr	r5, [pc, #368]	; (80020a8 <HAL_GPIO_Init+0x1cc>)
 8001f36:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f38:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001f3a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3e:	684f      	ldr	r7, [r1, #4]
 8001f40:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001f44:	d001      	beq.n	8001f4a <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8001f46:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001f4a:	4d57      	ldr	r5, [pc, #348]	; (80020a8 <HAL_GPIO_Init+0x1cc>)
 8001f4c:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001f4e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001f50:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f52:	684e      	ldr	r6, [r1, #4]
 8001f54:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001f58:	d001      	beq.n	8001f5e <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 8001f5a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001f5e:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_GPIO_Init+0x1cc>)
 8001f60:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001f62:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f64:	680a      	ldr	r2, [r1, #0]
 8001f66:	fa32 f403 	lsrs.w	r4, r2, r3
 8001f6a:	f000 8098 	beq.w	800209e <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f6e:	f04f 0c01 	mov.w	ip, #1
 8001f72:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8001f76:	ea1c 0202 	ands.w	r2, ip, r2
 8001f7a:	d0f2      	beq.n	8001f62 <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f7c:	684c      	ldr	r4, [r1, #4]
 8001f7e:	1e65      	subs	r5, r4, #1
 8001f80:	2d01      	cmp	r5, #1
 8001f82:	d903      	bls.n	8001f8c <HAL_GPIO_Init+0xb0>
 8001f84:	2c11      	cmp	r4, #17
 8001f86:	d001      	beq.n	8001f8c <HAL_GPIO_Init+0xb0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f88:	2c12      	cmp	r4, #18
 8001f8a:	d112      	bne.n	8001fb2 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8001f8c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f8e:	005e      	lsls	r6, r3, #1
 8001f90:	2403      	movs	r4, #3
 8001f92:	40b4      	lsls	r4, r6
 8001f94:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f98:	68cc      	ldr	r4, [r1, #12]
 8001f9a:	40b4      	lsls	r4, r6
 8001f9c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001f9e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001fa0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fa2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fa6:	684c      	ldr	r4, [r1, #4]
 8001fa8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001fac:	409c      	lsls	r4, r3
 8001fae:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001fb0:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fb2:	684c      	ldr	r4, [r1, #4]
 8001fb4:	f004 0503 	and.w	r5, r4, #3
 8001fb8:	2d03      	cmp	r5, #3
 8001fba:	d093      	beq.n	8001ee4 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8001fbc:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fbe:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001fc2:	2403      	movs	r4, #3
 8001fc4:	fa04 f40e 	lsl.w	r4, r4, lr
 8001fc8:	ea6f 0c04 	mvn.w	ip, r4
 8001fcc:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fd0:	688c      	ldr	r4, [r1, #8]
 8001fd2:	fa04 f40e 	lsl.w	r4, r4, lr
 8001fd6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001fd8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	684c      	ldr	r4, [r1, #4]
 8001fdc:	2c02      	cmp	r4, #2
 8001fde:	d001      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001fe0:	2c12      	cmp	r4, #18
 8001fe2:	d10f      	bne.n	8002004 <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3u];
 8001fe4:	08dd      	lsrs	r5, r3, #3
 8001fe6:	3508      	adds	r5, #8
 8001fe8:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fec:	f003 0607 	and.w	r6, r3, #7
 8001ff0:	00b6      	lsls	r6, r6, #2
 8001ff2:	240f      	movs	r4, #15
 8001ff4:	40b4      	lsls	r4, r6
 8001ff6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ffa:	690c      	ldr	r4, [r1, #16]
 8001ffc:	40b4      	lsls	r4, r6
 8001ffe:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8002000:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8002004:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002006:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800200a:	684c      	ldr	r4, [r1, #4]
 800200c:	f004 0403 	and.w	r4, r4, #3
 8002010:	fa04 f40e 	lsl.w	r4, r4, lr
 8002014:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002018:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201a:	684c      	ldr	r4, [r1, #4]
 800201c:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002020:	d09f      	beq.n	8001f62 <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	4c22      	ldr	r4, [pc, #136]	; (80020ac <HAL_GPIO_Init+0x1d0>)
 8002024:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002026:	f045 0501 	orr.w	r5, r5, #1
 800202a:	6625      	str	r5, [r4, #96]	; 0x60
 800202c:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800202e:	f004 0401 	and.w	r4, r4, #1
 8002032:	9401      	str	r4, [sp, #4]
 8002034:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002036:	089d      	lsrs	r5, r3, #2
 8002038:	1cae      	adds	r6, r5, #2
 800203a:	4c1a      	ldr	r4, [pc, #104]	; (80020a4 <HAL_GPIO_Init+0x1c8>)
 800203c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002040:	f003 0603 	and.w	r6, r3, #3
 8002044:	00b6      	lsls	r6, r6, #2
 8002046:	240f      	movs	r4, #15
 8002048:	40b4      	lsls	r4, r6
 800204a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800204e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002052:	f43f af52 	beq.w	8001efa <HAL_GPIO_Init+0x1e>
 8002056:	4c16      	ldr	r4, [pc, #88]	; (80020b0 <HAL_GPIO_Init+0x1d4>)
 8002058:	42a0      	cmp	r0, r4
 800205a:	d016      	beq.n	800208a <HAL_GPIO_Init+0x1ae>
 800205c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002060:	42a0      	cmp	r0, r4
 8002062:	d014      	beq.n	800208e <HAL_GPIO_Init+0x1b2>
 8002064:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002068:	42a0      	cmp	r0, r4
 800206a:	d012      	beq.n	8002092 <HAL_GPIO_Init+0x1b6>
 800206c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002070:	42a0      	cmp	r0, r4
 8002072:	d010      	beq.n	8002096 <HAL_GPIO_Init+0x1ba>
 8002074:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002078:	42a0      	cmp	r0, r4
 800207a:	d00e      	beq.n	800209a <HAL_GPIO_Init+0x1be>
 800207c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002080:	42a0      	cmp	r0, r4
 8002082:	f43f af38 	beq.w	8001ef6 <HAL_GPIO_Init+0x1a>
 8002086:	2407      	movs	r4, #7
 8002088:	e738      	b.n	8001efc <HAL_GPIO_Init+0x20>
 800208a:	2401      	movs	r4, #1
 800208c:	e736      	b.n	8001efc <HAL_GPIO_Init+0x20>
 800208e:	2402      	movs	r4, #2
 8002090:	e734      	b.n	8001efc <HAL_GPIO_Init+0x20>
 8002092:	2403      	movs	r4, #3
 8002094:	e732      	b.n	8001efc <HAL_GPIO_Init+0x20>
 8002096:	2404      	movs	r4, #4
 8002098:	e730      	b.n	8001efc <HAL_GPIO_Init+0x20>
 800209a:	2405      	movs	r4, #5
 800209c:	e72e      	b.n	8001efc <HAL_GPIO_Init+0x20>
  }
}
 800209e:	b003      	add	sp, #12
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40010400 	.word	0x40010400
 80020ac:	40021000 	.word	0x40021000
 80020b0:	48000400 	.word	0x48000400

080020b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020b4:	6903      	ldr	r3, [r0, #16]
 80020b6:	4219      	tst	r1, r3
 80020b8:	d001      	beq.n	80020be <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80020ba:	2001      	movs	r0, #1
 80020bc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020be:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80020c0:	4770      	bx	lr

080020c2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c2:	b10a      	cbz	r2, 80020c8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c4:	6181      	str	r1, [r0, #24]
 80020c6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020c8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80020d0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	4203      	tst	r3, r0
 80020d8:	d100      	bne.n	80020dc <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80020da:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020dc:	4b02      	ldr	r3, [pc, #8]	; (80020e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e0:	f7ff fff4 	bl	80020cc <HAL_GPIO_EXTI_Callback>
}
 80020e4:	e7f9      	b.n	80020da <HAL_GPIO_EXTI_IRQHandler+0xa>
 80020e6:	bf00      	nop
 80020e8:	40010400 	.word	0x40010400

080020ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020ec:	6803      	ldr	r3, [r0, #0]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	f012 0f02 	tst.w	r2, #2
 80020f4:	d001      	beq.n	80020fa <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020f6:	2200      	movs	r2, #0
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020fa:	6803      	ldr	r3, [r0, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	f012 0f01 	tst.w	r2, #1
 8002102:	d103      	bne.n	800210c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	619a      	str	r2, [r3, #24]
  }
}
 800210c:	4770      	bx	lr

0800210e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800210e:	b430      	push	{r4, r5}
 8002110:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002112:	6804      	ldr	r4, [r0, #0]
 8002114:	6860      	ldr	r0, [r4, #4]
 8002116:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 800211a:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 800211e:	f04c 7c7f 	orr.w	ip, ip, #66846720	; 0x3fc0000
 8002122:	f44c 3c58 	orr.w	ip, ip, #221184	; 0x36000
 8002126:	f44c 7c7f 	orr.w	ip, ip, #1020	; 0x3fc
 800212a:	f04c 0c03 	orr.w	ip, ip, #3
 800212e:	ea20 000c 	bic.w	r0, r0, ip
 8002132:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002136:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800213a:	4319      	orrs	r1, r3
 800213c:	4329      	orrs	r1, r5
 800213e:	4308      	orrs	r0, r1
 8002140:	6060      	str	r0, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002142:	bc30      	pop	{r4, r5}
 8002144:	4770      	bx	lr

08002146 <I2C_IsAcknowledgeFailed>:
{
 8002146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002148:	4605      	mov	r5, r0
 800214a:	460e      	mov	r6, r1
 800214c:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800214e:	6803      	ldr	r3, [r0, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f013 0f10 	tst.w	r3, #16
 8002156:	d101      	bne.n	800215c <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8002158:	2000      	movs	r0, #0
}
 800215a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	699c      	ldr	r4, [r3, #24]
 8002160:	f014 0f20 	tst.w	r4, #32
 8002164:	d117      	bne.n	8002196 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002166:	f1b6 3fff 	cmp.w	r6, #4294967295
 800216a:	d0f7      	beq.n	800215c <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216c:	f7ff fe30 	bl	8001dd0 <HAL_GetTick>
 8002170:	1bc0      	subs	r0, r0, r7
 8002172:	42b0      	cmp	r0, r6
 8002174:	d801      	bhi.n	800217a <I2C_IsAcknowledgeFailed+0x34>
 8002176:	2e00      	cmp	r6, #0
 8002178:	d1f0      	bne.n	800215c <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800217a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002182:	2320      	movs	r3, #32
 8002184:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002188:	2300      	movs	r3, #0
 800218a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800218e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8002192:	2001      	movs	r0, #1
 8002194:	e7e1      	b.n	800215a <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002196:	2210      	movs	r2, #16
 8002198:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800219a:	682b      	ldr	r3, [r5, #0]
 800219c:	2420      	movs	r4, #32
 800219e:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80021a0:	4628      	mov	r0, r5
 80021a2:	f7ff ffa3 	bl	80020ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80021a6:	682a      	ldr	r2, [r5, #0]
 80021a8:	6853      	ldr	r3, [r2, #4]
 80021aa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80021ae:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80021b2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021bc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021c4:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80021ce:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 80021d2:	2001      	movs	r0, #1
 80021d4:	e7c1      	b.n	800215a <I2C_IsAcknowledgeFailed+0x14>

080021d6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80021d6:	b570      	push	{r4, r5, r6, lr}
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
 80021dc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f013 0f02 	tst.w	r3, #2
 80021e6:	d11d      	bne.n	8002224 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e8:	4632      	mov	r2, r6
 80021ea:	4629      	mov	r1, r5
 80021ec:	4620      	mov	r0, r4
 80021ee:	f7ff ffaa 	bl	8002146 <I2C_IsAcknowledgeFailed>
 80021f2:	b9c8      	cbnz	r0, 8002228 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80021f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021f8:	d0f1      	beq.n	80021de <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021fa:	f7ff fde9 	bl	8001dd0 <HAL_GetTick>
 80021fe:	1b80      	subs	r0, r0, r6
 8002200:	42a8      	cmp	r0, r5
 8002202:	d801      	bhi.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002204:	2d00      	cmp	r5, #0
 8002206:	d1ea      	bne.n	80021de <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800220a:	f043 0320 	orr.w	r3, r3, #32
 800220e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002210:	2320      	movs	r3, #32
 8002212:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002216:	2300      	movs	r3, #0
 8002218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800221c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002220:	2001      	movs	r0, #1
 8002222:	e000      	b.n	8002226 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002224:	2000      	movs	r0, #0
}
 8002226:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002228:	2001      	movs	r0, #1
 800222a:	e7fc      	b.n	8002226 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800222c <I2C_WaitOnFlagUntilTimeout>:
{
 800222c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002230:	4606      	mov	r6, r0
 8002232:	4688      	mov	r8, r1
 8002234:	4617      	mov	r7, r2
 8002236:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002238:	6834      	ldr	r4, [r6, #0]
 800223a:	69a4      	ldr	r4, [r4, #24]
 800223c:	ea38 0404 	bics.w	r4, r8, r4
 8002240:	bf0c      	ite	eq
 8002242:	2401      	moveq	r4, #1
 8002244:	2400      	movne	r4, #0
 8002246:	42bc      	cmp	r4, r7
 8002248:	d118      	bne.n	800227c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800224a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800224e:	d0f3      	beq.n	8002238 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002250:	f7ff fdbe 	bl	8001dd0 <HAL_GetTick>
 8002254:	9b06      	ldr	r3, [sp, #24]
 8002256:	1ac0      	subs	r0, r0, r3
 8002258:	42a8      	cmp	r0, r5
 800225a:	d801      	bhi.n	8002260 <I2C_WaitOnFlagUntilTimeout+0x34>
 800225c:	2d00      	cmp	r5, #0
 800225e:	d1eb      	bne.n	8002238 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002262:	f043 0320 	orr.w	r3, r3, #32
 8002266:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002268:	2320      	movs	r3, #32
 800226a:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800226e:	2300      	movs	r3, #0
 8002270:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002274:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8002278:	2001      	movs	r0, #1
 800227a:	e000      	b.n	800227e <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800227c:	2000      	movs	r0, #0
}
 800227e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002282 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002282:	b570      	push	{r4, r5, r6, lr}
 8002284:	4605      	mov	r5, r0
 8002286:	460c      	mov	r4, r1
 8002288:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f013 0f20 	tst.w	r3, #32
 8002292:	d11a      	bne.n	80022ca <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002294:	4632      	mov	r2, r6
 8002296:	4621      	mov	r1, r4
 8002298:	4628      	mov	r0, r5
 800229a:	f7ff ff54 	bl	8002146 <I2C_IsAcknowledgeFailed>
 800229e:	b9b0      	cbnz	r0, 80022ce <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a0:	f7ff fd96 	bl	8001dd0 <HAL_GetTick>
 80022a4:	1b80      	subs	r0, r0, r6
 80022a6:	42a0      	cmp	r0, r4
 80022a8:	d801      	bhi.n	80022ae <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80022aa:	2c00      	cmp	r4, #0
 80022ac:	d1ed      	bne.n	800228a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80022b0:	f043 0320 	orr.w	r3, r3, #32
 80022b4:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	2320      	movs	r3, #32
 80022b8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	2300      	movs	r3, #0
 80022be:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80022c2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
}
 80022c8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80022ca:	2000      	movs	r0, #0
 80022cc:	e7fc      	b.n	80022c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80022ce:	2001      	movs	r0, #1
 80022d0:	e7fa      	b.n	80022c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080022d2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80022d2:	b570      	push	{r4, r5, r6, lr}
 80022d4:	4604      	mov	r4, r0
 80022d6:	460d      	mov	r5, r1
 80022d8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f013 0f04 	tst.w	r3, #4
 80022e2:	d13e      	bne.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e4:	4632      	mov	r2, r6
 80022e6:	4629      	mov	r1, r5
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7ff ff2c 	bl	8002146 <I2C_IsAcknowledgeFailed>
 80022ee:	4601      	mov	r1, r0
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d138      	bne.n	8002366 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	f012 0f20 	tst.w	r2, #32
 80022fc:	d113      	bne.n	8002326 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7ff fd67 	bl	8001dd0 <HAL_GetTick>
 8002302:	1b80      	subs	r0, r0, r6
 8002304:	42a8      	cmp	r0, r5
 8002306:	d801      	bhi.n	800230c <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8002308:	2d00      	cmp	r5, #0
 800230a:	d1e6      	bne.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800230e:	f043 0320 	orr.w	r3, r3, #32
 8002312:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002314:	2320      	movs	r3, #32
 8002316:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800231a:	2300      	movs	r3, #0
 800231c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002320:	2101      	movs	r1, #1
}
 8002322:	4608      	mov	r0, r1
 8002324:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	f012 0f04 	tst.w	r2, #4
 800232c:	d002      	beq.n	8002334 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800232e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002330:	2a00      	cmp	r2, #0
 8002332:	d1f6      	bne.n	8002322 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002334:	2220      	movs	r2, #32
 8002336:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002338:	6821      	ldr	r1, [r4, #0]
 800233a:	684b      	ldr	r3, [r1, #4]
 800233c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002340:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002344:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234e:	2300      	movs	r3, #0
 8002350:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002352:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800235a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800235e:	2101      	movs	r1, #1
 8002360:	e7df      	b.n	8002322 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8002362:	2100      	movs	r1, #0
 8002364:	e7dd      	b.n	8002322 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8002366:	2101      	movs	r1, #1
 8002368:	e7db      	b.n	8002322 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

0800236a <HAL_I2C_Init>:
  if (hi2c == NULL)
 800236a:	2800      	cmp	r0, #0
 800236c:	d059      	beq.n	8002422 <HAL_I2C_Init+0xb8>
{
 800236e:	b510      	push	{r4, lr}
 8002370:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002372:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002376:	2b00      	cmp	r3, #0
 8002378:	d043      	beq.n	8002402 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800237a:	2324      	movs	r3, #36	; 0x24
 800237c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002380:	6822      	ldr	r2, [r4, #0]
 8002382:	6813      	ldr	r3, [r2, #0]
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800238a:	6863      	ldr	r3, [r4, #4]
 800238c:	6822      	ldr	r2, [r4, #0]
 800238e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002392:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	6893      	ldr	r3, [r2, #8]
 8002398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800239c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800239e:	68e3      	ldr	r3, [r4, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d033      	beq.n	800240c <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023a4:	68a3      	ldr	r3, [r4, #8]
 80023a6:	6822      	ldr	r2, [r4, #0]
 80023a8:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80023ac:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023ae:	68e3      	ldr	r3, [r4, #12]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d031      	beq.n	8002418 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023b4:	6822      	ldr	r2, [r4, #0]
 80023b6:	6853      	ldr	r3, [r2, #4]
 80023b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c0:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023c2:	6822      	ldr	r2, [r4, #0]
 80023c4:	68d3      	ldr	r3, [r2, #12]
 80023c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023ca:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023cc:	6923      	ldr	r3, [r4, #16]
 80023ce:	6962      	ldr	r2, [r4, #20]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	69a1      	ldr	r1, [r4, #24]
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023da:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023dc:	69e3      	ldr	r3, [r4, #28]
 80023de:	6a21      	ldr	r1, [r4, #32]
 80023e0:	6822      	ldr	r2, [r4, #0]
 80023e2:	430b      	orrs	r3, r1
 80023e4:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80023e6:	6822      	ldr	r2, [r4, #0]
 80023e8:	6813      	ldr	r3, [r2, #0]
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	2000      	movs	r0, #0
 80023f2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	2320      	movs	r3, #32
 80023f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002400:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002402:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002406:	f7ff fb6f 	bl	8001ae8 <HAL_I2C_MspInit>
 800240a:	e7b6      	b.n	800237a <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800240c:	68a3      	ldr	r3, [r4, #8]
 800240e:	6822      	ldr	r2, [r4, #0]
 8002410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002414:	6093      	str	r3, [r2, #8]
 8002416:	e7ca      	b.n	80023ae <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	e7c8      	b.n	80023b4 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002422:	2001      	movs	r0, #1
}
 8002424:	4770      	bx	lr
	...

08002428 <HAL_I2C_Master_Transmit>:
{
 8002428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	460f      	mov	r7, r1
 8002430:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002432:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002436:	b2c9      	uxtb	r1, r1
 8002438:	2920      	cmp	r1, #32
 800243a:	f040 80a3 	bne.w	8002584 <HAL_I2C_Master_Transmit+0x15c>
 800243e:	4604      	mov	r4, r0
 8002440:	4690      	mov	r8, r2
 8002442:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002444:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002448:	2b01      	cmp	r3, #1
 800244a:	f000 809f 	beq.w	800258c <HAL_I2C_Master_Transmit+0x164>
 800244e:	f04f 0a01 	mov.w	sl, #1
 8002452:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002456:	f7ff fcbb 	bl	8001dd0 <HAL_GetTick>
 800245a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800245c:	9000      	str	r0, [sp, #0]
 800245e:	2319      	movs	r3, #25
 8002460:	4652      	mov	r2, sl
 8002462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff fee0 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 800246c:	2800      	cmp	r0, #0
 800246e:	f040 808f 	bne.w	8002590 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002472:	2321      	movs	r3, #33	; 0x21
 8002474:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002478:	2310      	movs	r3, #16
 800247a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247e:	2300      	movs	r3, #0
 8002480:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002482:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002486:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800248a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	2bff      	cmp	r3, #255	; 0xff
 8002492:	d90a      	bls.n	80024aa <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_I2C_Master_Transmit+0x178>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a0:	4639      	mov	r1, r7
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7ff fe33 	bl	800210e <I2C_TransferConfig>
 80024a8:	e018      	b.n	80024dc <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80024aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024ac:	b292      	uxth	r2, r2
 80024ae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_I2C_Master_Transmit+0x178>)
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	4639      	mov	r1, r7
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff fe26 	bl	800210e <I2C_TransferConfig>
 80024c2:	e00b      	b.n	80024dc <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80024c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024c6:	b292      	uxth	r2, r2
 80024c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	4639      	mov	r1, r7
 80024d6:	4620      	mov	r0, r4
 80024d8:	f7ff fe19 	bl	800210e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d033      	beq.n	800254c <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e4:	462a      	mov	r2, r5
 80024e6:	4631      	mov	r1, r6
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7ff fe74 	bl	80021d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d150      	bne.n	8002594 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80024fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024fc:	3301      	adds	r3, #1
 80024fe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002500:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29b      	uxth	r3, r3
 8002508:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800250a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29b      	uxth	r3, r3
 8002510:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002512:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002514:	b292      	uxth	r2, r2
 8002516:	2a00      	cmp	r2, #0
 8002518:	d0e0      	beq.n	80024dc <HAL_I2C_Master_Transmit+0xb4>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1de      	bne.n	80024dc <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800251e:	9500      	str	r5, [sp, #0]
 8002520:	4633      	mov	r3, r6
 8002522:	2200      	movs	r2, #0
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff fe80 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 800252c:	bba0      	cbnz	r0, 8002598 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800252e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	2bff      	cmp	r3, #255	; 0xff
 8002534:	d9c6      	bls.n	80024c4 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002536:	22ff      	movs	r2, #255	; 0xff
 8002538:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800253a:	2300      	movs	r3, #0
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002542:	4639      	mov	r1, r7
 8002544:	4620      	mov	r0, r4
 8002546:	f7ff fde2 	bl	800210e <I2C_TransferConfig>
 800254a:	e7c7      	b.n	80024dc <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254c:	462a      	mov	r2, r5
 800254e:	4631      	mov	r1, r6
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff fe96 	bl	8002282 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002556:	bb08      	cbnz	r0, 800259c <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	2220      	movs	r2, #32
 800255c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800255e:	6821      	ldr	r1, [r4, #0]
 8002560:	684b      	ldr	r3, [r1, #4]
 8002562:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002566:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800256a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002574:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002578:	2300      	movs	r3, #0
 800257a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800257e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002582:	e000      	b.n	8002586 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8002584:	2002      	movs	r0, #2
}
 8002586:	b002      	add	sp, #8
 8002588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800258c:	2002      	movs	r0, #2
 800258e:	e7fa      	b.n	8002586 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8002590:	2001      	movs	r0, #1
 8002592:	e7f8      	b.n	8002586 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8002594:	2001      	movs	r0, #1
 8002596:	e7f6      	b.n	8002586 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8002598:	2001      	movs	r0, #1
 800259a:	e7f4      	b.n	8002586 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800259c:	2001      	movs	r0, #1
 800259e:	e7f2      	b.n	8002586 <HAL_I2C_Master_Transmit+0x15e>
 80025a0:	80002000 	.word	0x80002000

080025a4 <HAL_I2C_Master_Receive>:
{
 80025a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	460f      	mov	r7, r1
 80025ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80025b2:	b2c9      	uxtb	r1, r1
 80025b4:	2920      	cmp	r1, #32
 80025b6:	f040 80a2 	bne.w	80026fe <HAL_I2C_Master_Receive+0x15a>
 80025ba:	4604      	mov	r4, r0
 80025bc:	4690      	mov	r8, r2
 80025be:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80025c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f000 809e 	beq.w	8002706 <HAL_I2C_Master_Receive+0x162>
 80025ca:	f04f 0a01 	mov.w	sl, #1
 80025ce:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80025d2:	f7ff fbfd 	bl	8001dd0 <HAL_GetTick>
 80025d6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d8:	9000      	str	r0, [sp, #0]
 80025da:	2319      	movs	r3, #25
 80025dc:	4652      	mov	r2, sl
 80025de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7ff fe22 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	f040 808e 	bne.w	800270a <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025ee:	2322      	movs	r3, #34	; 0x22
 80025f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025f4:	2310      	movs	r3, #16
 80025f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80025fe:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002602:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002606:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002608:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	2bff      	cmp	r3, #255	; 0xff
 800260e:	d90a      	bls.n	8002626 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002614:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_I2C_Master_Receive+0x178>)
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800261c:	4639      	mov	r1, r7
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff fd75 	bl	800210e <I2C_TransferConfig>
 8002624:	e018      	b.n	8002658 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8002626:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002628:	b292      	uxth	r2, r2
 800262a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800262c:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_I2C_Master_Receive+0x178>)
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	4639      	mov	r1, r7
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff fd68 	bl	800210e <I2C_TransferConfig>
 800263e:	e00b      	b.n	8002658 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8002640:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002642:	b292      	uxth	r2, r2
 8002644:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	4639      	mov	r1, r7
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff fd5b 	bl	800210e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002658:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d032      	beq.n	80026c6 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002660:	462a      	mov	r2, r5
 8002662:	4631      	mov	r1, r6
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff fe34 	bl	80022d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800266a:	2800      	cmp	r0, #0
 800266c:	d14f      	bne.n	800270e <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002674:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002678:	3301      	adds	r3, #1
 800267a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800267c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800267e:	3a01      	subs	r2, #1
 8002680:	b292      	uxth	r2, r2
 8002682:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002684:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29b      	uxth	r3, r3
 800268c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800268e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0e0      	beq.n	8002658 <HAL_I2C_Master_Receive+0xb4>
 8002696:	2a00      	cmp	r2, #0
 8002698:	d1de      	bne.n	8002658 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	9500      	str	r5, [sp, #0]
 800269c:	4633      	mov	r3, r6
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff fdc3 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 80026a6:	bba0      	cbnz	r0, 8002712 <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2bff      	cmp	r3, #255	; 0xff
 80026ae:	d9c7      	bls.n	8002640 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026b4:	2300      	movs	r3, #0
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026bc:	4639      	mov	r1, r7
 80026be:	4620      	mov	r0, r4
 80026c0:	f7ff fd25 	bl	800210e <I2C_TransferConfig>
 80026c4:	e7c8      	b.n	8002658 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c6:	462a      	mov	r2, r5
 80026c8:	4631      	mov	r1, r6
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff fdd9 	bl	8002282 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026d0:	bb08      	cbnz	r0, 8002716 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	2220      	movs	r2, #32
 80026d6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80026d8:	6821      	ldr	r1, [r4, #0]
 80026da:	684b      	ldr	r3, [r1, #4]
 80026dc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80026e0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80026e4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80026f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80026fc:	e000      	b.n	8002700 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 80026fe:	2002      	movs	r0, #2
}
 8002700:	b002      	add	sp, #8
 8002702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002706:	2002      	movs	r0, #2
 8002708:	e7fa      	b.n	8002700 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	e7f8      	b.n	8002700 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 800270e:	2001      	movs	r0, #1
 8002710:	e7f6      	b.n	8002700 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8002712:	2001      	movs	r0, #1
 8002714:	e7f4      	b.n	8002700 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8002716:	2001      	movs	r0, #1
 8002718:	e7f2      	b.n	8002700 <HAL_I2C_Master_Receive+0x15c>
 800271a:	bf00      	nop
 800271c:	80002400 	.word	0x80002400

08002720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002720:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002722:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	2a20      	cmp	r2, #32
 800272a:	d123      	bne.n	8002774 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002730:	2a01      	cmp	r2, #1
 8002732:	d021      	beq.n	8002778 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002734:	2201      	movs	r2, #1
 8002736:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800273a:	2224      	movs	r2, #36	; 0x24
 800273c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002740:	6800      	ldr	r0, [r0, #0]
 8002742:	6802      	ldr	r2, [r0, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	6802      	ldr	r2, [r0, #0]
 800274e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002752:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	6802      	ldr	r2, [r0, #0]
 8002758:	4311      	orrs	r1, r2
 800275a:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	680a      	ldr	r2, [r1, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002766:	2220      	movs	r2, #32
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	2000      	movs	r0, #0
 800276e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002772:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002774:	2002      	movs	r0, #2
 8002776:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002778:	2002      	movs	r0, #2
  }
}
 800277a:	4770      	bx	lr

0800277c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800277c:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	2a20      	cmp	r2, #32
 8002786:	d121      	bne.n	80027cc <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002788:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800278c:	2a01      	cmp	r2, #1
 800278e:	d01f      	beq.n	80027d0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002790:	2201      	movs	r2, #1
 8002792:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279c:	6800      	ldr	r0, [r0, #0]
 800279e:	6802      	ldr	r2, [r0, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027aa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027b2:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	680a      	ldr	r2, [r1, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80027ca:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2002      	movs	r0, #2
 80027ce:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80027d0:	2002      	movs	r0, #2
  }
}
 80027d2:	4770      	bx	lr

080027d4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <HAL_PWREx_GetVoltageRange+0xc>)
 80027d6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80027d8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40007000 	.word	0x40007000

080027e4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80027e8:	d00f      	beq.n	800280a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d034      	beq.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80027fa:	6813      	ldr	r3, [r2, #0]
 80027fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002804:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002806:	2000      	movs	r0, #0
 8002808:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002816:	d020      	beq.n	800285a <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002818:	4a13      	ldr	r2, [pc, #76]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002824:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2232      	movs	r2, #50	; 0x32
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0c9b      	lsrs	r3, r3, #18
 8002838:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800283a:	e000      	b.n	800283e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800283c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002840:	6952      	ldr	r2, [r2, #20]
 8002842:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002846:	d001      	beq.n	800284c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f7      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002854:	d103      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8002856:	2000      	movs	r0, #0
 8002858:	4770      	bx	lr
 800285a:	2000      	movs	r0, #0
 800285c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800285e:	2003      	movs	r0, #3
 8002860:	4770      	bx	lr
  return HAL_OK;
 8002862:	2000      	movs	r0, #0
}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40007000 	.word	0x40007000
 800286c:	200003f8 	.word	0x200003f8
 8002870:	431bde83 	.word	0x431bde83

08002874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002874:	b530      	push	{r4, r5, lr}
 8002876:	b083      	sub	sp, #12
 8002878:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002882:	d00b      	beq.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002884:	f7ff ffa6 	bl	80027d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002888:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800288c:	d017      	beq.n	80028be <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800288e:	2c80      	cmp	r4, #128	; 0x80
 8002890:	d81f      	bhi.n	80028d2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002892:	d02d      	beq.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002894:	2c70      	cmp	r4, #112	; 0x70
 8002896:	d02d      	beq.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002898:	2100      	movs	r1, #0
 800289a:	e01b      	b.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800289c:	4d17      	ldr	r5, [pc, #92]	; (80028fc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800289e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	65ab      	str	r3, [r5, #88]	; 0x58
 80028a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80028b0:	f7ff ff90 	bl	80027d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80028b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80028bc:	e7e4      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80028be:	2c80      	cmp	r4, #128	; 0x80
 80028c0:	d903      	bls.n	80028ca <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80028c2:	2ca0      	cmp	r4, #160	; 0xa0
 80028c4:	d903      	bls.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80028c6:	2102      	movs	r1, #2
 80028c8:	e004      	b.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028ca:	2100      	movs	r1, #0
 80028cc:	e002      	b.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80028ce:	2101      	movs	r1, #1
 80028d0:	e000      	b.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80028d2:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80028d6:	6813      	ldr	r3, [r2, #0]
 80028d8:	f023 0307 	bic.w	r3, r3, #7
 80028dc:	430b      	orrs	r3, r1
 80028de:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028e0:	6813      	ldr	r3, [r2, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	428b      	cmp	r3, r1
 80028e8:	d106      	bne.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80028ea:	2000      	movs	r0, #0
}
 80028ec:	b003      	add	sp, #12
 80028ee:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80028f0:	2102      	movs	r1, #2
 80028f2:	e7ef      	b.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f4:	2101      	movs	r1, #1
 80028f6:	e7ed      	b.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80028f8:	2001      	movs	r0, #1
 80028fa:	e7f7      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x78>
 80028fc:	40021000 	.word	0x40021000
 8002900:	40022000 	.word	0x40022000

08002904 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002904:	4a28      	ldr	r2, [pc, #160]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002906:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800290e:	f013 030c 	ands.w	r3, r3, #12
 8002912:	d00a      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x26>
 8002914:	2b0c      	cmp	r3, #12
 8002916:	d006      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002918:	2b04      	cmp	r3, #4
 800291a:	d01f      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800291c:	2b08      	cmp	r3, #8
 800291e:	d020      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002920:	2000      	movs	r0, #0
 8002922:	4602      	mov	r2, r0
 8002924:	e010      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002926:	2a01      	cmp	r2, #1
 8002928:	d1f6      	bne.n	8002918 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800292a:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	f012 0f08 	tst.w	r2, #8
 8002932:	d10c      	bne.n	800294e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002934:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002936:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800293a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800293e:	491b      	ldr	r1, [pc, #108]	; (80029ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8002940:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002944:	b143      	cbz	r3, 8002958 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002946:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002948:	2b0c      	cmp	r3, #12
 800294a:	d00d      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x64>
}
 800294c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800294e:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002956:	e7f2      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002958:	4610      	mov	r0, r2
 800295a:	e7f5      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 800295c:	4814      	ldr	r0, [pc, #80]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800295e:	2200      	movs	r2, #0
 8002960:	e7f2      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002962:	4814      	ldr	r0, [pc, #80]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002964:	2200      	movs	r2, #0
 8002966:	e7ef      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002970:	2b02      	cmp	r3, #2
 8002972:	d016      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x9e>
 8002974:	2b03      	cmp	r3, #3
 8002976:	d100      	bne.n	800297a <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800297a:	490b      	ldr	r1, [pc, #44]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800297c:	68cb      	ldr	r3, [r1, #12]
 800297e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002982:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002984:	68c8      	ldr	r0, [r1, #12]
 8002986:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800298a:	fb02 f000 	mul.w	r0, r2, r0
 800298e:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002992:	68cb      	ldr	r3, [r1, #12]
 8002994:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002998:	3301      	adds	r3, #1
 800299a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 800299c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80029a0:	e7d4      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80029a2:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xac>)
 80029a4:	e7e9      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x76>
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	08004de0 	.word	0x08004de0
 80029b0:	00f42400 	.word	0x00f42400
 80029b4:	007a1200 	.word	0x007a1200

080029b8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80029b8:	2800      	cmp	r0, #0
 80029ba:	f000 82fc 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x5fe>
{
 80029be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c0:	b083      	sub	sp, #12
 80029c2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c4:	4b96      	ldr	r3, [pc, #600]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 80029c6:	689d      	ldr	r5, [r3, #8]
 80029c8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029cc:	68de      	ldr	r6, [r3, #12]
 80029ce:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029d2:	6803      	ldr	r3, [r0, #0]
 80029d4:	f013 0f10 	tst.w	r3, #16
 80029d8:	d05a      	beq.n	8002a90 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029da:	b1e5      	cbz	r5, 8002a16 <HAL_RCC_OscConfig+0x5e>
 80029dc:	2d0c      	cmp	r5, #12
 80029de:	d018      	beq.n	8002a12 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e0:	69a3      	ldr	r3, [r4, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80bb 	beq.w	8002b5e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80029e8:	4a8d      	ldr	r2, [pc, #564]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 80029ea:	6813      	ldr	r3, [r2, #0]
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80029f2:	f7ff f9ed 	bl	8001dd0 <HAL_GetTick>
 80029f6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f8:	4b89      	ldr	r3, [pc, #548]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f013 0f02 	tst.w	r3, #2
 8002a00:	f040 809a 	bne.w	8002b38 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a04:	f7ff f9e4 	bl	8001dd0 <HAL_GetTick>
 8002a08:	1bc0      	subs	r0, r0, r7
 8002a0a:	2802      	cmp	r0, #2
 8002a0c:	d9f4      	bls.n	80029f8 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8002a0e:	2003      	movs	r0, #3
 8002a10:	e2dc      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a12:	2e01      	cmp	r6, #1
 8002a14:	d1e4      	bne.n	80029e0 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a16:	4b82      	ldr	r3, [pc, #520]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f013 0f02 	tst.w	r3, #2
 8002a1e:	d003      	beq.n	8002a28 <HAL_RCC_OscConfig+0x70>
 8002a20:	69a3      	ldr	r3, [r4, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 82c9 	beq.w	8002fba <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a28:	6a20      	ldr	r0, [r4, #32]
 8002a2a:	4b7d      	ldr	r3, [pc, #500]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f013 0f08 	tst.w	r3, #8
 8002a32:	d05b      	beq.n	8002aec <HAL_RCC_OscConfig+0x134>
 8002a34:	4b7a      	ldr	r3, [pc, #488]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3c:	4298      	cmp	r0, r3
 8002a3e:	d85c      	bhi.n	8002afa <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a40:	4b77      	ldr	r3, [pc, #476]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	f042 0208 	orr.w	r2, r2, #8
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a50:	6a21      	ldr	r1, [r4, #32]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a5c:	69e1      	ldr	r1, [r4, #28]
 8002a5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a62:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a64:	2d00      	cmp	r5, #0
 8002a66:	d060      	beq.n	8002b2a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a68:	f7ff ff4c 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8002a6c:	4b6c      	ldr	r3, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a74:	4a6b      	ldr	r2, [pc, #428]	; (8002c24 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	40d8      	lsrs	r0, r3
 8002a7e:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_OscConfig+0x270>)
 8002a80:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002a82:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x274>)
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	f7ff f961 	bl	8001d4c <HAL_InitTick>
        if(status != HAL_OK)
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	f040 829e 	bne.w	8002fcc <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	f013 0f01 	tst.w	r3, #1
 8002a96:	f000 8081 	beq.w	8002b9c <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a9a:	2d08      	cmp	r5, #8
 8002a9c:	d075      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1d2>
 8002a9e:	2d0c      	cmp	r5, #12
 8002aa0:	d071      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	6863      	ldr	r3, [r4, #4]
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	f000 8097 	beq.w	8002bda <HAL_RCC_OscConfig+0x222>
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	f000 8099 	beq.w	8002be6 <HAL_RCC_OscConfig+0x22e>
 8002ab4:	4b5a      	ldr	r3, [pc, #360]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ac4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac6:	6863      	ldr	r3, [r4, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8099 	beq.w	8002c00 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8002ace:	f7ff f97f 	bl	8001dd0 <HAL_GetTick>
 8002ad2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad4:	4b52      	ldr	r3, [pc, #328]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002adc:	d15e      	bne.n	8002b9c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ade:	f7ff f977 	bl	8001dd0 <HAL_GetTick>
 8002ae2:	1bc0      	subs	r0, r0, r7
 8002ae4:	2864      	cmp	r0, #100	; 0x64
 8002ae6:	d9f5      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002ae8:	2003      	movs	r0, #3
 8002aea:	e26f      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aec:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af8:	e7a0      	b.n	8002a3c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002afa:	f7ff febb 	bl	8002874 <RCC_SetFlashLatencyFromMSIRange>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	f040 825d 	bne.w	8002fbe <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b04:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	f042 0208 	orr.w	r2, r2, #8
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b14:	6a21      	ldr	r1, [r4, #32]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002b20:	69e1      	ldr	r1, [r4, #28]
 8002b22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	e79e      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b2a:	6a20      	ldr	r0, [r4, #32]
 8002b2c:	f7ff fea2 	bl	8002874 <RCC_SetFlashLatencyFromMSIRange>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d099      	beq.n	8002a68 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8002b34:	2001      	movs	r0, #1
 8002b36:	e249      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b38:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	f042 0208 	orr.w	r2, r2, #8
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b48:	6a21      	ldr	r1, [r4, #32]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002b54:	69e1      	ldr	r1, [r4, #28]
 8002b56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	e798      	b.n	8002a90 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8002b5e:	4a30      	ldr	r2, [pc, #192]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002b60:	6813      	ldr	r3, [r2, #0]
 8002b62:	f023 0301 	bic.w	r3, r3, #1
 8002b66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b68:	f7ff f932 	bl	8001dd0 <HAL_GetTick>
 8002b6c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f013 0f02 	tst.w	r3, #2
 8002b76:	d08b      	beq.n	8002a90 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b78:	f7ff f92a 	bl	8001dd0 <HAL_GetTick>
 8002b7c:	1bc0      	subs	r0, r0, r7
 8002b7e:	2802      	cmp	r0, #2
 8002b80:	d9f5      	bls.n	8002b6e <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8002b82:	2003      	movs	r0, #3
 8002b84:	e222      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b86:	2e03      	cmp	r6, #3
 8002b88:	d18b      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8a:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b92:	d003      	beq.n	8002b9c <HAL_RCC_OscConfig+0x1e4>
 8002b94:	6863      	ldr	r3, [r4, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8213 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	f013 0f02 	tst.w	r3, #2
 8002ba2:	d058      	beq.n	8002c56 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ba4:	2d04      	cmp	r5, #4
 8002ba6:	d045      	beq.n	8002c34 <HAL_RCC_OscConfig+0x27c>
 8002ba8:	2d0c      	cmp	r5, #12
 8002baa:	d041      	beq.n	8002c30 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bac:	68e3      	ldr	r3, [r4, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d077      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8002bb2:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002bb4:	6813      	ldr	r3, [r2, #0]
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002bbc:	f7ff f908 	bl	8001dd0 <HAL_GetTick>
 8002bc0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc2:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002bca:	d161      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7ff f900 	bl	8001dd0 <HAL_GetTick>
 8002bd0:	1b80      	subs	r0, r0, r6
 8002bd2:	2802      	cmp	r0, #2
 8002bd4:	d9f5      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	e1f8      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002bdc:	6813      	ldr	r3, [r2, #0]
 8002bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	e76f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10e>
 8002be6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bea:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e762      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8002c00:	f7ff f8e6 	bl	8001dd0 <HAL_GetTick>
 8002c04:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCC_OscConfig+0x268>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c0e:	d0c5      	beq.n	8002b9c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7ff f8de 	bl	8001dd0 <HAL_GetTick>
 8002c14:	1bc0      	subs	r0, r0, r7
 8002c16:	2864      	cmp	r0, #100	; 0x64
 8002c18:	d9f5      	bls.n	8002c06 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	e1d6      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
 8002c24:	08004e10 	.word	0x08004e10
 8002c28:	200003f8 	.word	0x200003f8
 8002c2c:	20000400 	.word	0x20000400
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c30:	2e02      	cmp	r6, #2
 8002c32:	d1bb      	bne.n	8002bac <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c34:	4b95      	ldr	r3, [pc, #596]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_OscConfig+0x28e>
 8002c3e:	68e3      	ldr	r3, [r4, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 81c0 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4a91      	ldr	r2, [pc, #580]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002c48:	6853      	ldr	r3, [r2, #4]
 8002c4a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002c4e:	6921      	ldr	r1, [r4, #16]
 8002c50:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002c54:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	f013 0f08 	tst.w	r3, #8
 8002c5c:	d04c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5e:	6963      	ldr	r3, [r4, #20]
 8002c60:	b39b      	cbz	r3, 8002cca <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8002c62:	4a8a      	ldr	r2, [pc, #552]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002c64:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c70:	f7ff f8ae 	bl	8001dd0 <HAL_GetTick>
 8002c74:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c76:	4b85      	ldr	r3, [pc, #532]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7c:	f013 0f02 	tst.w	r3, #2
 8002c80:	d13a      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c82:	f7ff f8a5 	bl	8001dd0 <HAL_GetTick>
 8002c86:	1b80      	subs	r0, r0, r6
 8002c88:	2802      	cmp	r0, #2
 8002c8a:	d9f4      	bls.n	8002c76 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	e19d      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4a7e      	ldr	r2, [pc, #504]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002c92:	6853      	ldr	r3, [r2, #4]
 8002c94:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002c98:	6921      	ldr	r1, [r4, #16]
 8002c9a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002c9e:	6053      	str	r3, [r2, #4]
 8002ca0:	e7d9      	b.n	8002c56 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4a7a      	ldr	r2, [pc, #488]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002ca4:	6813      	ldr	r3, [r2, #0]
 8002ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002caa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cac:	f7ff f890 	bl	8001dd0 <HAL_GetTick>
 8002cb0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb2:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002cba:	d0cc      	beq.n	8002c56 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7ff f888 	bl	8001dd0 <HAL_GetTick>
 8002cc0:	1b80      	subs	r0, r0, r6
 8002cc2:	2802      	cmp	r0, #2
 8002cc4:	d9f5      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8002cc6:	2003      	movs	r0, #3
 8002cc8:	e180      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 8002cca:	4a70      	ldr	r2, [pc, #448]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002ccc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002cd8:	f7ff f87a 	bl	8001dd0 <HAL_GetTick>
 8002cdc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cde:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce4:	f013 0f02 	tst.w	r3, #2
 8002ce8:	d006      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cea:	f7ff f871 	bl	8001dd0 <HAL_GetTick>
 8002cee:	1b80      	subs	r0, r0, r6
 8002cf0:	2802      	cmp	r0, #2
 8002cf2:	d9f4      	bls.n	8002cde <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8002cf4:	2003      	movs	r0, #3
 8002cf6:	e169      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	f013 0f04 	tst.w	r3, #4
 8002cfe:	d07a      	beq.n	8002df6 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d00:	4b62      	ldr	r3, [pc, #392]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d08:	d136      	bne.n	8002d78 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002d0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d12:	659a      	str	r2, [r3, #88]	; 0x58
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d1e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d20:	4b5b      	ldr	r3, [pc, #364]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d28:	d028      	beq.n	8002d7c <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2a:	68a3      	ldr	r3, [r4, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d039      	beq.n	8002da4 <HAL_RCC_OscConfig+0x3ec>
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d03f      	beq.n	8002db4 <HAL_RCC_OscConfig+0x3fc>
 8002d34:	4b55      	ldr	r3, [pc, #340]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002d36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002d42:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4e:	68a3      	ldr	r3, [r4, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d03d      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8002d54:	f7ff f83c 	bl	8001dd0 <HAL_GetTick>
 8002d58:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5a:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f013 0f02 	tst.w	r3, #2
 8002d64:	d146      	bne.n	8002df4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7ff f833 	bl	8001dd0 <HAL_GetTick>
 8002d6a:	1bc0      	subs	r0, r0, r7
 8002d6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d70:	4298      	cmp	r0, r3
 8002d72:	d9f2      	bls.n	8002d5a <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8002d74:	2003      	movs	r0, #3
 8002d76:	e129      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 8002d78:	2600      	movs	r6, #0
 8002d7a:	e7d1      	b.n	8002d20 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d7c:	4a44      	ldr	r2, [pc, #272]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002d7e:	6813      	ldr	r3, [r2, #0]
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002d86:	f7ff f823 	bl	8001dd0 <HAL_GetTick>
 8002d8a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8c:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d94:	d1c9      	bne.n	8002d2a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7ff f81b 	bl	8001dd0 <HAL_GetTick>
 8002d9a:	1bc0      	subs	r0, r0, r7
 8002d9c:	2802      	cmp	r0, #2
 8002d9e:	d9f5      	bls.n	8002d8c <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8002da0:	2003      	movs	r0, #3
 8002da2:	e113      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da4:	4a39      	ldr	r2, [pc, #228]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002da6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002db2:	e7cc      	b.n	8002d4e <HAL_RCC_OscConfig+0x396>
 8002db4:	4b35      	ldr	r3, [pc, #212]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002db6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002dba:	f042 0204 	orr.w	r2, r2, #4
 8002dbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002dc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002dce:	e7be      	b.n	8002d4e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fffe 	bl	8001dd0 <HAL_GetTick>
 8002dd4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f013 0f02 	tst.w	r3, #2
 8002de0:	d008      	beq.n	8002df4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe fff5 	bl	8001dd0 <HAL_GetTick>
 8002de6:	1bc0      	subs	r0, r0, r7
 8002de8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dec:	4298      	cmp	r0, r3
 8002dee:	d9f2      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002df0:	2003      	movs	r0, #3
 8002df2:	e0eb      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 8002df4:	bb6e      	cbnz	r6, 8002e52 <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80e6 	beq.w	8002fca <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d02d      	beq.n	8002e5e <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e02:	2d0c      	cmp	r5, #12
 8002e04:	f000 80e8 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002e10:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8002e18:	d104      	bne.n	8002e24 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002e1c:	68d3      	ldr	r3, [r2, #12]
 8002e1e:	f023 0303 	bic.w	r3, r3, #3
 8002e22:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e24:	4a19      	ldr	r2, [pc, #100]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002e26:	68d3      	ldr	r3, [r2, #12]
 8002e28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e30:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002e32:	f7fe ffcd 	bl	8001dd0 <HAL_GetTick>
 8002e36:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e40:	f000 80b7 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe ffc4 	bl	8001dd0 <HAL_GetTick>
 8002e48:	1b00      	subs	r0, r0, r4
 8002e4a:	2802      	cmp	r0, #2
 8002e4c:	d9f4      	bls.n	8002e38 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8002e4e:	2003      	movs	r0, #3
 8002e50:	e0bc      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e52:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002e54:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e5c:	e7cb      	b.n	8002df6 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002e60:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	f003 0103 	and.w	r1, r3, #3
 8002e66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e68:	4291      	cmp	r1, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6c:	2d0c      	cmp	r5, #12
 8002e6e:	f000 80af 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002e7a:	f040 80ab 	bne.w	8002fd4 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e7e:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e86:	d031      	beq.n	8002eec <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
 8002e8a:	e09f      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002e9a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002ea0:	d1e4      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ea8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002eac:	d1de      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eae:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002eb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002eb4:	3a07      	subs	r2, #7
 8002eb6:	bf18      	it	ne
 8002eb8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eba:	4291      	cmp	r1, r2
 8002ebc:	d1d6      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ebe:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002ec2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ec4:	0852      	lsrs	r2, r2, #1
 8002ec6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ec8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002ecc:	d1ce      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ece:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002ed2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ed4:	0852      	lsrs	r2, r2, #1
 8002ed6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002edc:	d1c6      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ede:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <HAL_RCC_OscConfig+0x624>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ee6:	d04a      	beq.n	8002f7e <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8002ee8:	2000      	movs	r0, #0
 8002eea:	e06f      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8002eec:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <HAL_RCC_OscConfig+0x624>)
 8002eee:	6813      	ldr	r3, [r2, #0]
 8002ef0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002ef6:	f7fe ff6b 	bl	8001dd0 <HAL_GetTick>
 8002efa:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efc:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <HAL_RCC_OscConfig+0x624>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f04:	d006      	beq.n	8002f14 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f06:	f7fe ff63 	bl	8001dd0 <HAL_GetTick>
 8002f0a:	1b40      	subs	r0, r0, r5
 8002f0c:	2802      	cmp	r0, #2
 8002f0e:	d9f5      	bls.n	8002efc <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 8002f10:	2003      	movs	r0, #3
 8002f12:	e05b      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f14:	4a31      	ldr	r2, [pc, #196]	; (8002fdc <HAL_RCC_OscConfig+0x624>)
 8002f16:	68d3      	ldr	r3, [r2, #12]
 8002f18:	4931      	ldr	r1, [pc, #196]	; (8002fe0 <HAL_RCC_OscConfig+0x628>)
 8002f1a:	4019      	ands	r1, r3
 8002f1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002f20:	3801      	subs	r0, #1
 8002f22:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002f26:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f28:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f2c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f2e:	0840      	lsrs	r0, r0, #1
 8002f30:	3801      	subs	r0, #1
 8002f32:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002f36:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f38:	0840      	lsrs	r0, r0, #1
 8002f3a:	3801      	subs	r0, #1
 8002f3c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002f40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002f42:	0900      	lsrs	r0, r0, #4
 8002f44:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8002f48:	4319      	orrs	r1, r3
 8002f4a:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002f4c:	6813      	ldr	r3, [r2, #0]
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f52:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f54:	68d3      	ldr	r3, [r2, #12]
 8002f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8002f5c:	f7fe ff38 	bl	8001dd0 <HAL_GetTick>
 8002f60:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_RCC_OscConfig+0x624>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe ff30 	bl	8001dd0 <HAL_GetTick>
 8002f70:	1b00      	subs	r0, r0, r4
 8002f72:	2802      	cmp	r0, #2
 8002f74:	d9f5      	bls.n	8002f62 <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 8002f76:	2003      	movs	r0, #3
 8002f78:	e028      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	e026      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_RCC_OscConfig+0x624>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002f86:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002f8e:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8002f90:	f7fe ff1e 	bl	8001dd0 <HAL_GetTick>
 8002f94:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_RCC_OscConfig+0x624>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe ff16 	bl	8001dd0 <HAL_GetTick>
 8002fa4:	1b03      	subs	r3, r0, r4
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d9f5      	bls.n	8002f96 <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 8002faa:	2003      	movs	r0, #3
 8002fac:	e00e      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e00c      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
}
 8002fb8:	4770      	bx	lr
        return HAL_ERROR;
 8002fba:	2001      	movs	r0, #1
 8002fbc:	e006      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	e004      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	e002      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8002fca:	2000      	movs	r0, #0
}
 8002fcc:	b003      	add	sp, #12
 8002fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	e7fb      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	e7f9      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8002fd8:	2001      	movs	r0, #1
 8002fda:	e7f7      	b.n	8002fcc <HAL_RCC_OscConfig+0x614>
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	f99d808c 	.word	0xf99d808c

08002fe4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	f000 8098 	beq.w	800311a <HAL_RCC_ClockConfig+0x136>
{
 8002fea:	b570      	push	{r4, r5, r6, lr}
 8002fec:	460c      	mov	r4, r1
 8002fee:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b4e      	ldr	r3, [pc, #312]	; (800312c <HAL_RCC_ClockConfig+0x148>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	428b      	cmp	r3, r1
 8002ffa:	d20b      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffc:	4a4b      	ldr	r2, [pc, #300]	; (800312c <HAL_RCC_ClockConfig+0x148>)
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	f023 0307 	bic.w	r3, r3, #7
 8003004:	430b      	orrs	r3, r1
 8003006:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003008:	6813      	ldr	r3, [r2, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	428b      	cmp	r3, r1
 8003010:	f040 8085 	bne.w	800311e <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003014:	682b      	ldr	r3, [r5, #0]
 8003016:	f013 0f01 	tst.w	r3, #1
 800301a:	d039      	beq.n	8003090 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301c:	686b      	ldr	r3, [r5, #4]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d009      	beq.n	8003036 <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003022:	2b02      	cmp	r3, #2
 8003024:	d026      	beq.n	8003074 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003026:	bb63      	cbnz	r3, 8003082 <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003028:	4a41      	ldr	r2, [pc, #260]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	f012 0f02 	tst.w	r2, #2
 8003030:	d106      	bne.n	8003040 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8003032:	2001      	movs	r0, #1
 8003034:	e070      	b.n	8003118 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	4a3e      	ldr	r2, [pc, #248]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800303e:	d070      	beq.n	8003122 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003040:	493b      	ldr	r1, [pc, #236]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 8003042:	688a      	ldr	r2, [r1, #8]
 8003044:	f022 0203 	bic.w	r2, r2, #3
 8003048:	4313      	orrs	r3, r2
 800304a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800304c:	f7fe fec0 	bl	8001dd0 <HAL_GetTick>
 8003050:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	4b37      	ldr	r3, [pc, #220]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	686a      	ldr	r2, [r5, #4]
 800305c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003060:	d016      	beq.n	8003090 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003062:	f7fe feb5 	bl	8001dd0 <HAL_GetTick>
 8003066:	1b80      	subs	r0, r0, r6
 8003068:	f241 3388 	movw	r3, #5000	; 0x1388
 800306c:	4298      	cmp	r0, r3
 800306e:	d9f0      	bls.n	8003052 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8003070:	2003      	movs	r0, #3
 8003072:	e051      	b.n	8003118 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003074:	4a2e      	ldr	r2, [pc, #184]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800307c:	d1e0      	bne.n	8003040 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 800307e:	2001      	movs	r0, #1
 8003080:	e04a      	b.n	8003118 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003082:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800308a:	d1d9      	bne.n	8003040 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 800308c:	2001      	movs	r0, #1
 800308e:	e043      	b.n	8003118 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	f013 0f02 	tst.w	r3, #2
 8003096:	d006      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4a25      	ldr	r2, [pc, #148]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 800309a:	6893      	ldr	r3, [r2, #8]
 800309c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a0:	68a9      	ldr	r1, [r5, #8]
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a6:	4b21      	ldr	r3, [pc, #132]	; (800312c <HAL_RCC_ClockConfig+0x148>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	42a3      	cmp	r3, r4
 80030b0:	d90a      	bls.n	80030c8 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4a1e      	ldr	r2, [pc, #120]	; (800312c <HAL_RCC_ClockConfig+0x148>)
 80030b4:	6813      	ldr	r3, [r2, #0]
 80030b6:	f023 0307 	bic.w	r3, r3, #7
 80030ba:	4323      	orrs	r3, r4
 80030bc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	6813      	ldr	r3, [r2, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	42a3      	cmp	r3, r4
 80030c6:	d12e      	bne.n	8003126 <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	f013 0f04 	tst.w	r3, #4
 80030ce:	d006      	beq.n	80030de <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4a17      	ldr	r2, [pc, #92]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 80030d2:	6893      	ldr	r3, [r2, #8]
 80030d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030d8:	68e9      	ldr	r1, [r5, #12]
 80030da:	430b      	orrs	r3, r1
 80030dc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030de:	682b      	ldr	r3, [r5, #0]
 80030e0:	f013 0f08 	tst.w	r3, #8
 80030e4:	d007      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 80030e8:	6893      	ldr	r3, [r2, #8]
 80030ea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80030ee:	6929      	ldr	r1, [r5, #16]
 80030f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030f4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f6:	f7ff fc05 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <HAL_RCC_ClockConfig+0x14c>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <HAL_RCC_ClockConfig+0x150>)
 8003104:	5cd3      	ldrb	r3, [r2, r3]
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	40d8      	lsrs	r0, r3
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x154>)
 800310e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x158>)
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	f7fe fe1a 	bl	8001d4c <HAL_InitTick>
}
 8003118:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800311a:	2001      	movs	r0, #1
}
 800311c:	4770      	bx	lr
      return HAL_ERROR;
 800311e:	2001      	movs	r0, #1
 8003120:	e7fa      	b.n	8003118 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 8003122:	2001      	movs	r0, #1
 8003124:	e7f8      	b.n	8003118 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 8003126:	2001      	movs	r0, #1
 8003128:	e7f6      	b.n	8003118 <HAL_RCC_ClockConfig+0x134>
 800312a:	bf00      	nop
 800312c:	40022000 	.word	0x40022000
 8003130:	40021000 	.word	0x40021000
 8003134:	08004e10 	.word	0x08004e10
 8003138:	200003f8 	.word	0x200003f8
 800313c:	20000400 	.word	0x20000400

08003140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	4604      	mov	r4, r0
 8003144:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003146:	4b59      	ldr	r3, [pc, #356]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f013 0f03 	tst.w	r3, #3
 800314e:	d018      	beq.n	8003182 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003150:	4b56      	ldr	r3, [pc, #344]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	6802      	ldr	r2, [r0, #0]
 800315a:	4293      	cmp	r3, r2
 800315c:	d002      	beq.n	8003164 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800315e:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8003160:	4628      	mov	r0, r5
 8003162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003164:	2a00      	cmp	r2, #0
 8003166:	f000 809e 	beq.w	80032a6 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800316a:	4b50      	ldr	r3, [pc, #320]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003172:	3301      	adds	r3, #1
 8003174:	6842      	ldr	r2, [r0, #4]
       ||
 8003176:	4293      	cmp	r3, r2
 8003178:	d001      	beq.n	800317e <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 800317a:	2501      	movs	r5, #1
 800317c:	e7f0      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2500      	movs	r5, #0
 8003180:	e009      	b.n	8003196 <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 8003182:	6803      	ldr	r3, [r0, #0]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d057      	beq.n	8003238 <RCCEx_PLLSAI1_Config+0xf8>
 8003188:	2b03      	cmp	r3, #3
 800318a:	d05c      	beq.n	8003246 <RCCEx_PLLSAI1_Config+0x106>
 800318c:	2b01      	cmp	r3, #1
 800318e:	d042      	beq.n	8003216 <RCCEx_PLLSAI1_Config+0xd6>
 8003190:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8003192:	2d00      	cmp	r5, #0
 8003194:	d1e4      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8003196:	4a45      	ldr	r2, [pc, #276]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 8003198:	6813      	ldr	r3, [r2, #0]
 800319a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800319e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80031a0:	f7fe fe16 	bl	8001dd0 <HAL_GetTick>
 80031a4:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80031ae:	d005      	beq.n	80031bc <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031b0:	f7fe fe0e 	bl	8001dd0 <HAL_GetTick>
 80031b4:	1b83      	subs	r3, r0, r6
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d9f5      	bls.n	80031a6 <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 80031ba:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80031bc:	2d00      	cmp	r5, #0
 80031be:	d1cf      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80031c0:	2f00      	cmp	r7, #0
 80031c2:	d14e      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c4:	4939      	ldr	r1, [pc, #228]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 80031c6:	690b      	ldr	r3, [r1, #16]
 80031c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d0:	68a0      	ldr	r0, [r4, #8]
 80031d2:	68e2      	ldr	r2, [r4, #12]
 80031d4:	0912      	lsrs	r2, r2, #4
 80031d6:	0452      	lsls	r2, r2, #17
 80031d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80031dc:	4313      	orrs	r3, r2
 80031de:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80031e0:	4a32      	ldr	r2, [pc, #200]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80031ea:	f7fe fdf1 	bl	8001dd0 <HAL_GetTick>
 80031ee:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031f0:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80031f8:	d105      	bne.n	8003206 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031fa:	f7fe fde9 	bl	8001dd0 <HAL_GetTick>
 80031fe:	1b83      	subs	r3, r0, r6
 8003200:	2b02      	cmp	r3, #2
 8003202:	d9f5      	bls.n	80031f0 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8003204:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8003206:	2d00      	cmp	r5, #0
 8003208:	d1aa      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800320a:	4a28      	ldr	r2, [pc, #160]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 800320c:	6913      	ldr	r3, [r2, #16]
 800320e:	69a1      	ldr	r1, [r4, #24]
 8003210:	430b      	orrs	r3, r1
 8003212:	6113      	str	r3, [r2, #16]
 8003214:	e7a4      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003216:	4a25      	ldr	r2, [pc, #148]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	f012 0f02 	tst.w	r2, #2
 800321e:	d01e      	beq.n	800325e <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003220:	4822      	ldr	r0, [pc, #136]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 8003222:	68c2      	ldr	r2, [r0, #12]
 8003224:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003228:	6861      	ldr	r1, [r4, #4]
 800322a:	3901      	subs	r1, #1
 800322c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003230:	4313      	orrs	r3, r2
 8003232:	60c3      	str	r3, [r0, #12]
 8003234:	2500      	movs	r5, #0
 8003236:	e7ac      	b.n	8003192 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003238:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003240:	d1ee      	bne.n	8003220 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 8003242:	2501      	movs	r5, #1
 8003244:	e7a5      	b.n	8003192 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003246:	4a19      	ldr	r2, [pc, #100]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800324e:	d1e7      	bne.n	8003220 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003258:	d1e2      	bne.n	8003220 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 800325a:	2501      	movs	r5, #1
 800325c:	e799      	b.n	8003192 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 800325e:	2501      	movs	r5, #1
 8003260:	e797      	b.n	8003192 <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 8003262:	2f01      	cmp	r7, #1
 8003264:	d00f      	beq.n	8003286 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003266:	4811      	ldr	r0, [pc, #68]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 8003268:	6902      	ldr	r2, [r0, #16]
 800326a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800326e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003272:	68a1      	ldr	r1, [r4, #8]
 8003274:	6963      	ldr	r3, [r4, #20]
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	3b01      	subs	r3, #1
 800327a:	065b      	lsls	r3, r3, #25
 800327c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003280:	431a      	orrs	r2, r3
 8003282:	6102      	str	r2, [r0, #16]
 8003284:	e7ac      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003286:	4809      	ldr	r0, [pc, #36]	; (80032ac <RCCEx_PLLSAI1_Config+0x16c>)
 8003288:	6902      	ldr	r2, [r0, #16]
 800328a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800328e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003292:	68a1      	ldr	r1, [r4, #8]
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	3b01      	subs	r3, #1
 800329a:	055b      	lsls	r3, r3, #21
 800329c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032a0:	431a      	orrs	r2, r3
 80032a2:	6102      	str	r2, [r0, #16]
 80032a4:	e79c      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 80032a6:	2501      	movs	r5, #1
 80032a8:	e75a      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x20>
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000

080032b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	4604      	mov	r4, r0
 80032b4:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032b6:	4b50      	ldr	r3, [pc, #320]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f013 0f03 	tst.w	r3, #3
 80032be:	d018      	beq.n	80032f2 <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032c0:	4b4d      	ldr	r3, [pc, #308]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	6802      	ldr	r2, [r0, #0]
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d002      	beq.n	80032d4 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80032ce:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80032d0:	4628      	mov	r0, r5
 80032d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80032d4:	2a00      	cmp	r2, #0
 80032d6:	f000 808c 	beq.w	80033f2 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032da:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80032e2:	3301      	adds	r3, #1
 80032e4:	6842      	ldr	r2, [r0, #4]
       ||
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d001      	beq.n	80032ee <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 80032ea:	2501      	movs	r5, #1
 80032ec:	e7f0      	b.n	80032d0 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2500      	movs	r5, #0
 80032f0:	e009      	b.n	8003306 <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 80032f2:	6803      	ldr	r3, [r0, #0]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d057      	beq.n	80033a8 <RCCEx_PLLSAI2_Config+0xf8>
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d05c      	beq.n	80033b6 <RCCEx_PLLSAI2_Config+0x106>
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d042      	beq.n	8003386 <RCCEx_PLLSAI2_Config+0xd6>
 8003300:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8003302:	2d00      	cmp	r5, #0
 8003304:	d1e4      	bne.n	80032d0 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8003306:	4a3c      	ldr	r2, [pc, #240]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 8003308:	6813      	ldr	r3, [r2, #0]
 800330a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003310:	f7fe fd5e 	bl	8001dd0 <HAL_GetTick>
 8003314:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003316:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800331e:	d005      	beq.n	800332c <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003320:	f7fe fd56 	bl	8001dd0 <HAL_GetTick>
 8003324:	1b83      	subs	r3, r0, r6
 8003326:	2b02      	cmp	r3, #2
 8003328:	d9f5      	bls.n	8003316 <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 800332a:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800332c:	2d00      	cmp	r5, #0
 800332e:	d1cf      	bne.n	80032d0 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8003330:	2f00      	cmp	r7, #0
 8003332:	d14e      	bne.n	80033d2 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003334:	4930      	ldr	r1, [pc, #192]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 8003336:	694b      	ldr	r3, [r1, #20]
 8003338:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800333c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003340:	68a0      	ldr	r0, [r4, #8]
 8003342:	68e2      	ldr	r2, [r4, #12]
 8003344:	0912      	lsrs	r2, r2, #4
 8003346:	0452      	lsls	r2, r2, #17
 8003348:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800334c:	4313      	orrs	r3, r2
 800334e:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003350:	4a29      	ldr	r2, [pc, #164]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 8003352:	6813      	ldr	r3, [r2, #0]
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800335a:	f7fe fd39 	bl	8001dd0 <HAL_GetTick>
 800335e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003368:	d105      	bne.n	8003376 <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800336a:	f7fe fd31 	bl	8001dd0 <HAL_GetTick>
 800336e:	1b83      	subs	r3, r0, r6
 8003370:	2b02      	cmp	r3, #2
 8003372:	d9f5      	bls.n	8003360 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 8003374:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8003376:	2d00      	cmp	r5, #0
 8003378:	d1aa      	bne.n	80032d0 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800337a:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 800337c:	6953      	ldr	r3, [r2, #20]
 800337e:	6961      	ldr	r1, [r4, #20]
 8003380:	430b      	orrs	r3, r1
 8003382:	6153      	str	r3, [r2, #20]
 8003384:	e7a4      	b.n	80032d0 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003386:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	f012 0f02 	tst.w	r2, #2
 800338e:	d01e      	beq.n	80033ce <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003390:	4819      	ldr	r0, [pc, #100]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 8003392:	68c2      	ldr	r2, [r0, #12]
 8003394:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003398:	6861      	ldr	r1, [r4, #4]
 800339a:	3901      	subs	r1, #1
 800339c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60c3      	str	r3, [r0, #12]
 80033a4:	2500      	movs	r5, #0
 80033a6:	e7ac      	b.n	8003302 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033a8:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80033b0:	d1ee      	bne.n	8003390 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 80033b2:	2501      	movs	r5, #1
 80033b4:	e7a5      	b.n	8003302 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033b6:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80033be:	d1e7      	bne.n	8003390 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033c0:	4a0d      	ldr	r2, [pc, #52]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80033c8:	d1e2      	bne.n	8003390 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 80033ca:	2501      	movs	r5, #1
 80033cc:	e799      	b.n	8003302 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 80033ce:	2501      	movs	r5, #1
 80033d0:	e797      	b.n	8003302 <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033d2:	4809      	ldr	r0, [pc, #36]	; (80033f8 <RCCEx_PLLSAI2_Config+0x148>)
 80033d4:	6942      	ldr	r2, [r0, #20]
 80033d6:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80033da:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80033de:	68a1      	ldr	r1, [r4, #8]
 80033e0:	6923      	ldr	r3, [r4, #16]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	3b01      	subs	r3, #1
 80033e6:	065b      	lsls	r3, r3, #25
 80033e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80033ec:	431a      	orrs	r2, r3
 80033ee:	6142      	str	r2, [r0, #20]
 80033f0:	e7ae      	b.n	8003350 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 80033f2:	2501      	movs	r5, #1
 80033f4:	e76c      	b.n	80032d0 <RCCEx_PLLSAI2_Config+0x20>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000

080033fc <HAL_RCCEx_PeriphCLKConfig>:
{
 80033fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003404:	6803      	ldr	r3, [r0, #0]
 8003406:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800340a:	d033      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 800340c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800340e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003412:	d01f      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003414:	d80c      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003416:	b323      	cbz	r3, 8003462 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341c:	d105      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800341e:	2100      	movs	r1, #0
 8003420:	3020      	adds	r0, #32
 8003422:	f7ff ff45 	bl	80032b0 <RCCEx_PLLSAI2_Config>
 8003426:	4606      	mov	r6, r0
      break;
 8003428:	e020      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800342a:	2701      	movs	r7, #1
 800342c:	463e      	mov	r6, r7
 800342e:	e023      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003434:	d10b      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003436:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003438:	4a60      	ldr	r2, [pc, #384]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800343a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800343e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003442:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003444:	430b      	orrs	r3, r1
 8003446:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800344a:	2700      	movs	r7, #0
 800344c:	e014      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800344e:	2701      	movs	r7, #1
 8003450:	463e      	mov	r6, r7
 8003452:	e011      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003454:	4a59      	ldr	r2, [pc, #356]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003456:	68d3      	ldr	r3, [r2, #12]
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800345e:	2600      	movs	r6, #0
 8003460:	e7ea      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003462:	2100      	movs	r1, #0
 8003464:	3004      	adds	r0, #4
 8003466:	f7ff fe6b 	bl	8003140 <RCCEx_PLLSAI1_Config>
 800346a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800346c:	2e00      	cmp	r6, #0
 800346e:	d0e3      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003470:	4637      	mov	r7, r6
 8003472:	e001      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003474:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003476:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800347e:	d030      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003480:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003486:	d01f      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003488:	d80d      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800348a:	b31b      	cbz	r3, 80034d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d106      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003492:	2100      	movs	r1, #0
 8003494:	f104 0020 	add.w	r0, r4, #32
 8003498:	f7ff ff0a 	bl	80032b0 <RCCEx_PLLSAI2_Config>
 800349c:	4606      	mov	r6, r0
      break;
 800349e:	e005      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 80034a0:	2701      	movs	r7, #1
 80034a2:	463e      	mov	r6, r7
 80034a4:	e01d      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 80034a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034aa:	d10a      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 80034ac:	b9c6      	cbnz	r6, 80034e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ae:	4a43      	ldr	r2, [pc, #268]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80034b4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80034b8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80034ba:	430b      	orrs	r3, r1
 80034bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80034c0:	e00f      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 80034c2:	2701      	movs	r7, #1
 80034c4:	463e      	mov	r6, r7
 80034c6:	e00c      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034c8:	4a3c      	ldr	r2, [pc, #240]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034ca:	68d3      	ldr	r3, [r2, #12]
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	60d3      	str	r3, [r2, #12]
      break;
 80034d2:	e7eb      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034d4:	2100      	movs	r1, #0
 80034d6:	1d20      	adds	r0, r4, #4
 80034d8:	f7ff fe32 	bl	8003140 <RCCEx_PLLSAI1_Config>
 80034dc:	4606      	mov	r6, r0
      break;
 80034de:	e7e5      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80034e0:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034e8:	d071      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ea:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80034f2:	d14e      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034fc:	659a      	str	r2, [r3, #88]	; 0x58
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003508:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350c:	4a2c      	ldr	r2, [pc, #176]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800350e:	6813      	ldr	r3, [r2, #0]
 8003510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003514:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003516:	f7fe fc5b 	bl	8001dd0 <HAL_GetTick>
 800351a:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800351c:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003524:	d105      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003526:	f7fe fc53 	bl	8001dd0 <HAL_GetTick>
 800352a:	1b40      	subs	r0, r0, r5
 800352c:	2802      	cmp	r0, #2
 800352e:	d9f5      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8003530:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8003532:	2e00      	cmp	r6, #0
 8003534:	d146      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800353c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003540:	d016      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003542:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003546:	429a      	cmp	r2, r3
 8003548:	d012      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800354c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003554:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003558:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800355c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003560:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003564:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003568:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003570:	f013 0f01 	tst.w	r3, #1
 8003574:	d110      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 8003576:	2e00      	cmp	r6, #0
 8003578:	f040 8127 	bne.w	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357c:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800357e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003586:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800358a:	430b      	orrs	r3, r1
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003590:	e019      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 8003592:	f04f 0800 	mov.w	r8, #0
 8003596:	e7b9      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8003598:	f7fe fc1a 	bl	8001dd0 <HAL_GetTick>
 800359c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a4:	f013 0f02 	tst.w	r3, #2
 80035a8:	d1e5      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fe fc11 	bl	8001dd0 <HAL_GetTick>
 80035ae:	1b40      	subs	r0, r0, r5
 80035b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80035b4:	4298      	cmp	r0, r3
 80035b6:	d9f2      	bls.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 80035b8:	2603      	movs	r6, #3
 80035ba:	e7dc      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40007000 	.word	0x40007000
      status = ret;
 80035c4:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 80035c6:	f1b8 0f00 	cmp.w	r8, #0
 80035ca:	f040 8100 	bne.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	f013 0f01 	tst.w	r3, #1
 80035d4:	d008      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d6:	4a9d      	ldr	r2, [pc, #628]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035dc:	f023 0303 	bic.w	r3, r3, #3
 80035e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80035e2:	430b      	orrs	r3, r1
 80035e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	f013 0f02 	tst.w	r3, #2
 80035ee:	d008      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f0:	4a96      	ldr	r2, [pc, #600]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035f6:	f023 030c 	bic.w	r3, r3, #12
 80035fa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80035fc:	430b      	orrs	r3, r1
 80035fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	f013 0f04 	tst.w	r3, #4
 8003608:	d008      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800360a:	4a90      	ldr	r2, [pc, #576]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800360c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003610:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003614:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003616:	430b      	orrs	r3, r1
 8003618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f013 0f08 	tst.w	r3, #8
 8003622:	d008      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003624:	4a89      	ldr	r2, [pc, #548]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003626:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800362a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800362e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003630:	430b      	orrs	r3, r1
 8003632:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	f013 0f10 	tst.w	r3, #16
 800363c:	d008      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800363e:	4a83      	ldr	r2, [pc, #524]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003640:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800364a:	430b      	orrs	r3, r1
 800364c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	f013 0f20 	tst.w	r3, #32
 8003656:	d008      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003658:	4a7c      	ldr	r2, [pc, #496]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800365a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800365e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003662:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003664:	430b      	orrs	r3, r1
 8003666:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003672:	4a76      	ldr	r2, [pc, #472]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003674:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003678:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800367c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800367e:	430b      	orrs	r3, r1
 8003680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800368a:	d008      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800368c:	4a6f      	ldr	r2, [pc, #444]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800368e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003692:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003696:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003698:	430b      	orrs	r3, r1
 800369a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036a4:	d008      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a6:	4a69      	ldr	r2, [pc, #420]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036b0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80036b2:	430b      	orrs	r3, r1
 80036b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c0:	4a62      	ldr	r2, [pc, #392]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036ca:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80036cc:	430b      	orrs	r3, r1
 80036ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036d8:	d008      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036da:	4a5c      	ldr	r2, [pc, #368]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80036e4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80036e6:	430b      	orrs	r3, r1
 80036e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80036f2:	d00f      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f4:	4a55      	ldr	r2, [pc, #340]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036fa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80036fe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003700:	430b      	orrs	r3, r1
 8003702:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003706:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800370c:	d065      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800370e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003712:	d067      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800371a:	d00f      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800371c:	4a4b      	ldr	r2, [pc, #300]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800371e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003722:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003726:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003728:	430b      	orrs	r3, r1
 800372a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800372e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003734:	d05e      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373a:	d060      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003742:	d00f      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003744:	4a41      	ldr	r2, [pc, #260]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003746:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800374a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800374e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003750:	430b      	orrs	r3, r1
 8003752:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003756:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800375c:	d057      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800375e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003762:	d059      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800376a:	d00f      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800376c:	4a37      	ldr	r2, [pc, #220]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800376e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003772:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003776:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003778:	430b      	orrs	r3, r1
 800377a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800377e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003784:	d050      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800378a:	d055      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003794:	4a2d      	ldr	r2, [pc, #180]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003796:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800379a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800379e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80037a0:	430b      	orrs	r3, r1
 80037a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037ac:	d009      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ae:	4a27      	ldr	r2, [pc, #156]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037b8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80037bc:	430b      	orrs	r3, r1
 80037be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80037c2:	4638      	mov	r0, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80037ca:	4637      	mov	r7, r6
 80037cc:	e6fb      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4a1f      	ldr	r2, [pc, #124]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6593      	str	r3, [r2, #88]	; 0x58
 80037d8:	e6f9      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037da:	68d3      	ldr	r3, [r2, #12]
 80037dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e0:	60d3      	str	r3, [r2, #12]
 80037e2:	e797      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e4:	2101      	movs	r1, #1
 80037e6:	1d20      	adds	r0, r4, #4
 80037e8:	f7ff fcaa 	bl	8003140 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d091      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 80037f0:	4607      	mov	r7, r0
 80037f2:	e78f      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f4:	68d3      	ldr	r3, [r2, #12]
 80037f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e79e      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037fe:	2101      	movs	r1, #1
 8003800:	1d20      	adds	r0, r4, #4
 8003802:	f7ff fc9d 	bl	8003140 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003806:	2800      	cmp	r0, #0
 8003808:	d098      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 800380a:	4607      	mov	r7, r0
 800380c:	e796      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800380e:	68d3      	ldr	r3, [r2, #12]
 8003810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003814:	60d3      	str	r3, [r2, #12]
 8003816:	e7a5      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003818:	2101      	movs	r1, #1
 800381a:	1d20      	adds	r0, r4, #4
 800381c:	f7ff fc90 	bl	8003140 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003820:	2800      	cmp	r0, #0
 8003822:	d09f      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8003824:	4607      	mov	r7, r0
 8003826:	e79d      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003828:	2102      	movs	r1, #2
 800382a:	1d20      	adds	r0, r4, #4
 800382c:	f7ff fc88 	bl	8003140 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003830:	2800      	cmp	r0, #0
 8003832:	d0ab      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8003834:	4607      	mov	r7, r0
 8003836:	e7a9      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003838:	2102      	movs	r1, #2
 800383a:	f104 0020 	add.w	r0, r4, #32
 800383e:	f7ff fd37 	bl	80032b0 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8003842:	2800      	cmp	r0, #0
 8003844:	d0a2      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8003846:	4607      	mov	r7, r0
 8003848:	e7a0      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x390>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000

08003850 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	4605      	mov	r5, r0
 8003858:	4688      	mov	r8, r1
 800385a:	4617      	mov	r7, r2
 800385c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800385e:	f7fe fab7 	bl	8001dd0 <HAL_GetTick>
 8003862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003864:	1a1b      	subs	r3, r3, r0
 8003866:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800386a:	f7fe fab1 	bl	8001dd0 <HAL_GetTick>
 800386e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003878:	fb09 f303 	mul.w	r3, r9, r3
 800387c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800387e:	682b      	ldr	r3, [r5, #0]
 8003880:	689c      	ldr	r4, [r3, #8]
 8003882:	ea38 0404 	bics.w	r4, r8, r4
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	42bb      	cmp	r3, r7
 800388e:	d040      	beq.n	8003912 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003890:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003894:	d0f3      	beq.n	800387e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003896:	f7fe fa9b 	bl	8001dd0 <HAL_GetTick>
 800389a:	eba0 000a 	sub.w	r0, r0, sl
 800389e:	4548      	cmp	r0, r9
 80038a0:	d20a      	bcs.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0x68>
 80038a2:	f1b9 0f00 	cmp.w	r9, #0
 80038a6:	d007      	beq.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038a8:	9a01      	ldr	r2, [sp, #4]
 80038aa:	b102      	cbz	r2, 80038ae <SPI_WaitFlagStateUntilTimeout+0x5e>
 80038ac:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80038ae:	9b01      	ldr	r3, [sp, #4]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	4691      	mov	r9, r2
 80038b6:	e7e2      	b.n	800387e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b8:	682a      	ldr	r2, [r5, #0]
 80038ba:	6853      	ldr	r3, [r2, #4]
 80038bc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80038c0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c2:	686b      	ldr	r3, [r5, #4]
 80038c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c8:	d00b      	beq.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d0:	d014      	beq.n	80038fc <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80038d8:	2300      	movs	r3, #0
 80038da:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80038de:	2003      	movs	r0, #3
 80038e0:	e018      	b.n	8003914 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e2:	68ab      	ldr	r3, [r5, #8]
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e8:	d002      	beq.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ee:	d1ec      	bne.n	80038ca <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80038f0:	682a      	ldr	r2, [r5, #0]
 80038f2:	6813      	ldr	r3, [r2, #0]
 80038f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e7e6      	b.n	80038ca <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80038fc:	682a      	ldr	r2, [r5, #0]
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	682a      	ldr	r2, [r5, #0]
 8003908:	6813      	ldr	r3, [r2, #0]
 800390a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	e7df      	b.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8003912:	2000      	movs	r0, #0
}
 8003914:	b002      	add	sp, #8
 8003916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800391a:	bf00      	nop
 800391c:	200003f8 	.word	0x200003f8

08003920 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	4607      	mov	r7, r0
 8003928:	460d      	mov	r5, r1
 800392a:	4616      	mov	r6, r2
 800392c:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800392e:	f7fe fa4f 	bl	8001dd0 <HAL_GetTick>
 8003932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003934:	1a1b      	subs	r3, r3, r0
 8003936:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 800393a:	f7fe fa49 	bl	8001dd0 <HAL_GetTick>
 800393e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003940:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <SPI_WaitFifoStateUntilTimeout+0xdc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003948:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800394c:	0d1b      	lsrs	r3, r3, #20
 800394e:	fb09 f303 	mul.w	r3, r9, r3
 8003952:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003954:	e002      	b.n	800395c <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8003956:	f1b8 3fff 	cmp.w	r8, #4294967295
 800395a:	d10c      	bne.n	8003976 <SPI_WaitFifoStateUntilTimeout+0x56>
  while ((hspi->Instance->SR & Fifo) != State)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689c      	ldr	r4, [r3, #8]
 8003960:	ea04 0c05 	and.w	ip, r4, r5
 8003964:	45b4      	cmp	ip, r6
 8003966:	d044      	beq.n	80039f2 <SPI_WaitFifoStateUntilTimeout+0xd2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003968:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800396c:	d1f3      	bne.n	8003956 <SPI_WaitFifoStateUntilTimeout+0x36>
 800396e:	2e00      	cmp	r6, #0
 8003970:	d1f1      	bne.n	8003956 <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003972:	7b1b      	ldrb	r3, [r3, #12]
 8003974:	e7ef      	b.n	8003956 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003976:	f7fe fa2b 	bl	8001dd0 <HAL_GetTick>
 800397a:	eba0 000a 	sub.w	r0, r0, sl
 800397e:	4548      	cmp	r0, r9
 8003980:	d20a      	bcs.n	8003998 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003982:	f1b9 0f00 	cmp.w	r9, #0
 8003986:	d007      	beq.n	8003998 <SPI_WaitFifoStateUntilTimeout+0x78>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003988:	9a01      	ldr	r2, [sp, #4]
 800398a:	b102      	cbz	r2, 800398e <SPI_WaitFifoStateUntilTimeout+0x6e>
 800398c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 800398e:	9b01      	ldr	r3, [sp, #4]
 8003990:	3b01      	subs	r3, #1
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	4691      	mov	r9, r2
 8003996:	e7e1      	b.n	800395c <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	6853      	ldr	r3, [r2, #4]
 800399c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80039a0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039a8:	d00b      	beq.n	80039c2 <SPI_WaitFifoStateUntilTimeout+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b0:	d014      	beq.n	80039dc <SPI_WaitFifoStateUntilTimeout+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 80039be:	2003      	movs	r0, #3
 80039c0:	e018      	b.n	80039f4 <SPI_WaitFifoStateUntilTimeout+0xd4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c8:	d002      	beq.n	80039d0 <SPI_WaitFifoStateUntilTimeout+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ce:	d1ec      	bne.n	80039aa <SPI_WaitFifoStateUntilTimeout+0x8a>
          __HAL_SPI_DISABLE(hspi);
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e7e6      	b.n	80039aa <SPI_WaitFifoStateUntilTimeout+0x8a>
          SPI_RESET_CRC(hspi);
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	6813      	ldr	r3, [r2, #0]
 80039e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	6813      	ldr	r3, [r2, #0]
 80039ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e7df      	b.n	80039b2 <SPI_WaitFifoStateUntilTimeout+0x92>
    }
  }

  return HAL_OK;
 80039f2:	2000      	movs	r0, #0
}
 80039f4:	b002      	add	sp, #8
 80039f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fa:	bf00      	nop
 80039fc:	200003f8 	.word	0x200003f8

08003a00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	4604      	mov	r4, r0
 8003a06:	460d      	mov	r5, r1
 8003a08:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a0a:	9200      	str	r2, [sp, #0]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a14:	f7ff ff84 	bl	8003920 <SPI_WaitFifoStateUntilTimeout>
 8003a18:	b9b0      	cbnz	r0, 8003a48 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1a:	9600      	str	r6, [sp, #0]
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	4620      	mov	r0, r4
 8003a24:	f7ff ff14 	bl	8003850 <SPI_WaitFlagStateUntilTimeout>
 8003a28:	b9a8      	cbnz	r0, 8003a56 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a2a:	9600      	str	r6, [sp, #0]
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7ff ff73 	bl	8003920 <SPI_WaitFifoStateUntilTimeout>
 8003a3a:	b150      	cbz	r0, 8003a52 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a3e:	f043 0320 	orr.w	r3, r3, #32
 8003a42:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a44:	2003      	movs	r0, #3
 8003a46:	e004      	b.n	8003a52 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a48:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a4a:	f043 0320 	orr.w	r3, r3, #32
 8003a4e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a50:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003a52:	b002      	add	sp, #8
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a56:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a58:	f043 0320 	orr.w	r3, r3, #32
 8003a5c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a5e:	2003      	movs	r0, #3
 8003a60:	e7f7      	b.n	8003a52 <SPI_EndRxTxTransaction+0x52>

08003a62 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d06a      	beq.n	8003b3c <HAL_SPI_Init+0xda>
{
 8003a66:	b510      	push	{r4, lr}
 8003a68:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003a6c:	b933      	cbnz	r3, 8003a7c <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a6e:	6843      	ldr	r3, [r0, #4]
 8003a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a74:	d005      	beq.n	8003a82 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61c3      	str	r3, [r0, #28]
 8003a7a:	e002      	b.n	8003a82 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a80:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a86:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d04d      	beq.n	8003b2a <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a9e:	68e3      	ldr	r3, [r4, #12]
 8003aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aa4:	d947      	bls.n	8003b36 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aa6:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003aa8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003aac:	d004      	beq.n	8003ab8 <HAL_SPI_Init+0x56>
 8003aae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab2:	d001      	beq.n	8003ab8 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003abe:	68a1      	ldr	r1, [r4, #8]
 8003ac0:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6921      	ldr	r1, [r4, #16]
 8003ac8:	f001 0102 	and.w	r1, r1, #2
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6961      	ldr	r1, [r4, #20]
 8003ad0:	f001 0101 	and.w	r1, r1, #1
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	69a1      	ldr	r1, [r4, #24]
 8003ad8:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003adc:	430b      	orrs	r3, r1
 8003ade:	69e1      	ldr	r1, [r4, #28]
 8003ae0:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6a21      	ldr	r1, [r4, #32]
 8003ae8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003aec:	430b      	orrs	r3, r1
 8003aee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003af0:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003afa:	8b63      	ldrh	r3, [r4, #26]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b02:	f001 0110 	and.w	r1, r1, #16
 8003b06:	430b      	orrs	r3, r1
 8003b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b0a:	f001 0108 	and.w	r1, r1, #8
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	68e1      	ldr	r1, [r4, #12]
 8003b12:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003b16:	430b      	orrs	r3, r1
 8003b18:	6821      	ldr	r1, [r4, #0]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b1e:	2000      	movs	r0, #0
 8003b20:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003b28:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003b2a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f7fe f812 	bl	8001b58 <HAL_SPI_MspInit>
 8003b34:	e7ab      	b.n	8003a8e <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b3a:	e7b5      	b.n	8003aa8 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003b3c:	2001      	movs	r0, #1
}
 8003b3e:	4770      	bx	lr

08003b40 <HAL_SPI_Transmit>:
{
 8003b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b44:	b083      	sub	sp, #12
 8003b46:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003b48:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	f000 80f6 	beq.w	8003d3e <HAL_SPI_Transmit+0x1fe>
 8003b52:	4604      	mov	r4, r0
 8003b54:	4688      	mov	r8, r1
 8003b56:	4691      	mov	r9, r2
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003b5e:	f7fe f937 	bl	8001dd0 <HAL_GetTick>
 8003b62:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003b64:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003b68:	b2f6      	uxtb	r6, r6
 8003b6a:	2e01      	cmp	r6, #1
 8003b6c:	f040 80d4 	bne.w	8003d18 <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8003b70:	f1b8 0f00 	cmp.w	r8, #0
 8003b74:	f000 80d1 	beq.w	8003d1a <HAL_SPI_Transmit+0x1da>
 8003b78:	f1b9 0f00 	cmp.w	r9, #0
 8003b7c:	f000 80cd 	beq.w	8003d1a <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b80:	2303      	movs	r3, #3
 8003b82:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b8a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b8e:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b92:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b96:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b98:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b9c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ba0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ba2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba4:	68a3      	ldr	r3, [r4, #8]
 8003ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003baa:	d01e      	beq.n	8003bea <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003bb4:	d103      	bne.n	8003bbe <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bbc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bbe:	68e3      	ldr	r3, [r4, #12]
 8003bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bc4:	d942      	bls.n	8003c4c <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc6:	6863      	ldr	r3, [r4, #4]
 8003bc8:	b113      	cbz	r3, 8003bd0 <HAL_SPI_Transmit+0x90>
 8003bca:	f1b9 0f01 	cmp.w	r9, #1
 8003bce:	d123      	bne.n	8003c18 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	8812      	ldrh	r2, [r2, #0]
 8003bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bda:	3302      	adds	r3, #2
 8003bdc:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003bde:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003be8:	e016      	b.n	8003c18 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8003bea:	6822      	ldr	r2, [r4, #0]
 8003bec:	6813      	ldr	r3, [r2, #0]
 8003bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003bf4:	6822      	ldr	r2, [r4, #0]
 8003bf6:	6813      	ldr	r3, [r2, #0]
 8003bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e7d5      	b.n	8003bac <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c00:	f7fe f8e6 	bl	8001dd0 <HAL_GetTick>
 8003c04:	1bc0      	subs	r0, r0, r7
 8003c06:	42a8      	cmp	r0, r5
 8003c08:	d303      	bcc.n	8003c12 <HAL_SPI_Transmit+0xd2>
 8003c0a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c0e:	f040 808e 	bne.w	8003d2e <HAL_SPI_Transmit+0x1ee>
 8003c12:	2d00      	cmp	r5, #0
 8003c14:	f000 808d 	beq.w	8003d32 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 8003c18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d066      	beq.n	8003cee <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	f012 0f02 	tst.w	r2, #2
 8003c28:	d0ea      	beq.n	8003c00 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c2c:	8812      	ldrh	r2, [r2, #0]
 8003c2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c32:	3302      	adds	r3, #2
 8003c34:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003c36:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003c3a:	fa1f fc8c 	uxth.w	ip, ip
 8003c3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003c42:	fa1f fc8c 	uxth.w	ip, ip
 8003c46:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003c4a:	e7e5      	b.n	8003c18 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4c:	6863      	ldr	r3, [r4, #4]
 8003c4e:	b113      	cbz	r3, 8003c56 <HAL_SPI_Transmit+0x116>
 8003c50:	f1b9 0f01 	cmp.w	r9, #1
 8003c54:	d133      	bne.n	8003cbe <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 8003c56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d90c      	bls.n	8003c78 <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	8812      	ldrh	r2, [r2, #0]
 8003c64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c68:	3302      	adds	r3, #2
 8003c6a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b02      	subs	r3, #2
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c76:	e022      	b.n	8003cbe <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003c80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c82:	3301      	adds	r3, #1
 8003c84:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003c86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c90:	e015      	b.n	8003cbe <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003c9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003ca8:	e009      	b.n	8003cbe <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003caa:	f7fe f891 	bl	8001dd0 <HAL_GetTick>
 8003cae:	1bc0      	subs	r0, r0, r7
 8003cb0:	42a8      	cmp	r0, r5
 8003cb2:	d302      	bcc.n	8003cba <HAL_SPI_Transmit+0x17a>
 8003cb4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003cb8:	d13d      	bne.n	8003d36 <HAL_SPI_Transmit+0x1f6>
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	d03d      	beq.n	8003d3a <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8003cbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	b1a3      	cbz	r3, 8003cee <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	6893      	ldr	r3, [r2, #8]
 8003cc8:	f013 0f02 	tst.w	r3, #2
 8003ccc:	d0ed      	beq.n	8003caa <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8003cce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d9dd      	bls.n	8003c92 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cde:	3302      	adds	r3, #2
 8003ce0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ce2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b02      	subs	r3, #2
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003cec:	e7e7      	b.n	8003cbe <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cee:	463a      	mov	r2, r7
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff fe84 	bl	8003a00 <SPI_EndRxTxTransaction>
 8003cf8:	b108      	cbz	r0, 8003cfe <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cfe:	68a3      	ldr	r3, [r4, #8]
 8003d00:	b933      	cbnz	r3, 8003d10 <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	9201      	str	r2, [sp, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d12:	b913      	cbnz	r3, 8003d1a <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d14:	2600      	movs	r6, #0
 8003d16:	e000      	b.n	8003d1a <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 8003d18:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d20:	2300      	movs	r3, #0
 8003d22:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003d26:	4630      	mov	r0, r6
 8003d28:	b003      	add	sp, #12
 8003d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003d2e:	2603      	movs	r6, #3
 8003d30:	e7f3      	b.n	8003d1a <HAL_SPI_Transmit+0x1da>
 8003d32:	2603      	movs	r6, #3
 8003d34:	e7f1      	b.n	8003d1a <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 8003d36:	2603      	movs	r6, #3
 8003d38:	e7ef      	b.n	8003d1a <HAL_SPI_Transmit+0x1da>
 8003d3a:	2603      	movs	r6, #3
 8003d3c:	e7ed      	b.n	8003d1a <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8003d3e:	2602      	movs	r6, #2
 8003d40:	e7f1      	b.n	8003d26 <HAL_SPI_Transmit+0x1e6>

08003d42 <HAL_SPI_TransmitReceive>:
{
 8003d42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d46:	461f      	mov	r7, r3
 8003d48:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003d4a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	f000 8164 	beq.w	800401c <HAL_SPI_TransmitReceive+0x2da>
 8003d54:	4604      	mov	r4, r0
 8003d56:	4688      	mov	r8, r1
 8003d58:	4691      	mov	r9, r2
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003d60:	f7fe f836 	bl	8001dd0 <HAL_GetTick>
 8003d64:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003d66:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003d6a:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003d6c:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d00a      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x46>
 8003d72:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003d76:	f040 8138 	bne.w	8003fea <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d7a:	68a2      	ldr	r2, [r4, #8]
 8003d7c:	2a00      	cmp	r2, #0
 8003d7e:	f040 813d 	bne.w	8003ffc <HAL_SPI_TransmitReceive+0x2ba>
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	f040 813c 	bne.w	8004000 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d88:	f1b8 0f00 	cmp.w	r8, #0
 8003d8c:	f000 813a 	beq.w	8004004 <HAL_SPI_TransmitReceive+0x2c2>
 8003d90:	f1b9 0f00 	cmp.w	r9, #0
 8003d94:	f000 8138 	beq.w	8004008 <HAL_SPI_TransmitReceive+0x2c6>
 8003d98:	2f00      	cmp	r7, #0
 8003d9a:	f000 8137 	beq.w	800400c <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d9e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003da8:	2305      	movs	r3, #5
 8003daa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003db2:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003db6:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003dba:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dbe:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003dc2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003dc4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003dc6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003dc8:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003dca:	68e3      	ldr	r3, [r4, #12]
 8003dcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dd0:	d801      	bhi.n	8003dd6 <HAL_SPI_TransmitReceive+0x94>
 8003dd2:	2f01      	cmp	r7, #1
 8003dd4:	d923      	bls.n	8003e1e <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	6853      	ldr	r3, [r2, #4]
 8003dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dde:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003de8:	d103      	bne.n	8003df2 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003df2:	68e3      	ldr	r3, [r4, #12]
 8003df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003df8:	d958      	bls.n	8003eac <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfa:	6863      	ldr	r3, [r4, #4]
 8003dfc:	b10b      	cbz	r3, 8003e02 <HAL_SPI_TransmitReceive+0xc0>
 8003dfe:	2f01      	cmp	r7, #1
 8003e00:	d10b      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	8812      	ldrh	r2, [r2, #0]
 8003e08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003e10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003e1a:	2701      	movs	r7, #1
 8003e1c:	e031      	b.n	8003e82 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e1e:	6822      	ldr	r2, [r4, #0]
 8003e20:	6853      	ldr	r3, [r2, #4]
 8003e22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e26:	6053      	str	r3, [r2, #4]
 8003e28:	e7da      	b.n	8003de0 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e2c:	8812      	ldrh	r2, [r2, #0]
 8003e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e32:	3302      	adds	r3, #2
 8003e34:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003e40:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	f012 0f01 	tst.w	r2, #1
 8003e4a:	d011      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x12e>
 8003e4c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003e50:	b292      	uxth	r2, r2
 8003e52:	b16a      	cbz	r2, 8003e70 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003e60:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003e6e:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e70:	f7fd ffae 	bl	8001dd0 <HAL_GetTick>
 8003e74:	1b83      	subs	r3, r0, r6
 8003e76:	42ab      	cmp	r3, r5
 8003e78:	d303      	bcc.n	8003e82 <HAL_SPI_TransmitReceive+0x140>
 8003e7a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003e7e:	f040 80c7 	bne.w	8004010 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	b92b      	cbnz	r3, 8003e94 <HAL_SPI_TransmitReceive+0x152>
 8003e88:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80a1 	beq.w	8003fd6 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	f012 0f02 	tst.w	r2, #2
 8003e9c:	d0d1      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x100>
 8003e9e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	2a00      	cmp	r2, #0
 8003ea4:	d0cd      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x100>
 8003ea6:	2f00      	cmp	r7, #0
 8003ea8:	d0cb      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x100>
 8003eaa:	e7be      	b.n	8003e2a <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eac:	6863      	ldr	r3, [r4, #4]
 8003eae:	b10b      	cbz	r3, 8003eb4 <HAL_SPI_TransmitReceive+0x172>
 8003eb0:	2f01      	cmp	r7, #1
 8003eb2:	d10f      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8003eb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d90d      	bls.n	8003ed8 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ebc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	8812      	ldrh	r2, [r2, #0]
 8003ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003eca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b02      	subs	r3, #2
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003ed4:	2701      	movs	r7, #1
 8003ed6:	e049      	b.n	8003f6c <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003ee6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003ef0:	e7f0      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003ef2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	2a01      	cmp	r2, #1
 8003ef8:	d90c      	bls.n	8003f14 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003efc:	8812      	ldrh	r2, [r2, #0]
 8003efe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f02:	3302      	adds	r3, #2
 8003f04:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b02      	subs	r3, #2
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003f10:	2700      	movs	r7, #0
 8003f12:	e03d      	b.n	8003f90 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003f20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003f2a:	2700      	movs	r7, #0
 8003f2c:	e030      	b.n	8003f90 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	6853      	ldr	r3, [r2, #4]
 8003f32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f36:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003f38:	2701      	movs	r7, #1
 8003f3a:	e00d      	b.n	8003f58 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f3e:	7b1b      	ldrb	r3, [r3, #12]
 8003f40:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f44:	3301      	adds	r3, #1
 8003f46:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003f48:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003f56:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f58:	f7fd ff3a 	bl	8001dd0 <HAL_GetTick>
 8003f5c:	1b80      	subs	r0, r0, r6
 8003f5e:	42a8      	cmp	r0, r5
 8003f60:	d302      	bcc.n	8003f68 <HAL_SPI_TransmitReceive+0x226>
 8003f62:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f66:	d155      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x2d2>
 8003f68:	2d00      	cmp	r5, #0
 8003f6a:	d055      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	b923      	cbnz	r3, 8003f7c <HAL_SPI_TransmitReceive+0x23a>
 8003f72:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d02c      	beq.n	8003fd6 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	f012 0f02 	tst.w	r2, #2
 8003f84:	d004      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0x24e>
 8003f86:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003f88:	b292      	uxth	r2, r2
 8003f8a:	b10a      	cbz	r2, 8003f90 <HAL_SPI_TransmitReceive+0x24e>
 8003f8c:	2f00      	cmp	r7, #0
 8003f8e:	d1b0      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	f012 0f01 	tst.w	r2, #1
 8003f98:	d0de      	beq.n	8003f58 <HAL_SPI_TransmitReceive+0x216>
 8003f9a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	2a00      	cmp	r2, #0
 8003fa2:	d0d9      	beq.n	8003f58 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8003fa4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	2a01      	cmp	r2, #1
 8003fac:	d9c6      	bls.n	8003f3c <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003fba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b02      	subs	r3, #2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003fc8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d9ad      	bls.n	8003f2e <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8003fd2:	2701      	movs	r7, #1
 8003fd4:	e7c0      	b.n	8003f58 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f7ff fd10 	bl	8003a00 <SPI_EndRxTxTransaction>
 8003fe0:	b120      	cbz	r0, 8003fec <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	e000      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003fea:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003ffc:	2002      	movs	r0, #2
 8003ffe:	e7f5      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2aa>
 8004000:	2002      	movs	r0, #2
 8004002:	e7f3      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8004004:	2001      	movs	r0, #1
 8004006:	e7f1      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2aa>
 8004008:	2001      	movs	r0, #1
 800400a:	e7ef      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2aa>
 800400c:	2001      	movs	r0, #1
 800400e:	e7ed      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8004010:	2003      	movs	r0, #3
 8004012:	e7eb      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8004014:	2003      	movs	r0, #3
 8004016:	e7e9      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2aa>
 8004018:	2003      	movs	r0, #3
 800401a:	e7e7      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 800401c:	2002      	movs	r0, #2
 800401e:	e7eb      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x2b6>

08004020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004022:	6a03      	ldr	r3, [r0, #32]
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402e:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	680d      	ldr	r5, [r1, #0]
 800403a:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800403c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004040:	688b      	ldr	r3, [r1, #8]
 8004042:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004044:	4a1c      	ldr	r2, [pc, #112]	; (80040b8 <TIM_OC1_SetConfig+0x98>)
 8004046:	4290      	cmp	r0, r2
 8004048:	d00f      	beq.n	800406a <TIM_OC1_SetConfig+0x4a>
 800404a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800404e:	4290      	cmp	r0, r2
 8004050:	d00b      	beq.n	800406a <TIM_OC1_SetConfig+0x4a>
 8004052:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004056:	4290      	cmp	r0, r2
 8004058:	d007      	beq.n	800406a <TIM_OC1_SetConfig+0x4a>
 800405a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800405e:	4290      	cmp	r0, r2
 8004060:	d003      	beq.n	800406a <TIM_OC1_SetConfig+0x4a>
 8004062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004066:	4290      	cmp	r0, r2
 8004068:	d105      	bne.n	8004076 <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800406a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800406e:	68ca      	ldr	r2, [r1, #12]
 8004070:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004072:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <TIM_OC1_SetConfig+0x98>)
 8004078:	4290      	cmp	r0, r2
 800407a:	d00f      	beq.n	800409c <TIM_OC1_SetConfig+0x7c>
 800407c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004080:	4290      	cmp	r0, r2
 8004082:	d00b      	beq.n	800409c <TIM_OC1_SetConfig+0x7c>
 8004084:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004088:	4290      	cmp	r0, r2
 800408a:	d007      	beq.n	800409c <TIM_OC1_SetConfig+0x7c>
 800408c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004090:	4290      	cmp	r0, r2
 8004092:	d003      	beq.n	800409c <TIM_OC1_SetConfig+0x7c>
 8004094:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004098:	4290      	cmp	r0, r2
 800409a:	d105      	bne.n	80040a8 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a0:	694a      	ldr	r2, [r1, #20]
 80040a2:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040a4:	698c      	ldr	r4, [r1, #24]
 80040a6:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040aa:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ac:	684a      	ldr	r2, [r1, #4]
 80040ae:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b0:	6203      	str	r3, [r0, #32]
}
 80040b2:	bc30      	pop	{r4, r5}
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00

080040bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040be:	6a03      	ldr	r3, [r0, #32]
 80040c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040d0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d4:	680d      	ldr	r5, [r1, #0]
 80040d6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040dc:	688a      	ldr	r2, [r1, #8]
 80040de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040e2:	4a18      	ldr	r2, [pc, #96]	; (8004144 <TIM_OC3_SetConfig+0x88>)
 80040e4:	4290      	cmp	r0, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_OC3_SetConfig+0x34>
 80040e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ec:	4290      	cmp	r0, r2
 80040ee:	d106      	bne.n	80040fe <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040f4:	68ca      	ldr	r2, [r1, #12]
 80040f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fe:	4a11      	ldr	r2, [pc, #68]	; (8004144 <TIM_OC3_SetConfig+0x88>)
 8004100:	4290      	cmp	r0, r2
 8004102:	d00f      	beq.n	8004124 <TIM_OC3_SetConfig+0x68>
 8004104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004108:	4290      	cmp	r0, r2
 800410a:	d00b      	beq.n	8004124 <TIM_OC3_SetConfig+0x68>
 800410c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004110:	4290      	cmp	r0, r2
 8004112:	d007      	beq.n	8004124 <TIM_OC3_SetConfig+0x68>
 8004114:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004118:	4290      	cmp	r0, r2
 800411a:	d003      	beq.n	8004124 <TIM_OC3_SetConfig+0x68>
 800411c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004120:	4290      	cmp	r0, r2
 8004122:	d107      	bne.n	8004134 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004124:	f424 5240 	bic.w	r2, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004128:	694c      	ldr	r4, [r1, #20]
 800412a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800412e:	698c      	ldr	r4, [r1, #24]
 8004130:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004134:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004136:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004138:	684a      	ldr	r2, [r1, #4]
 800413a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	6203      	str	r3, [r0, #32]
}
 800413e:	bc30      	pop	{r4, r5}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00

08004148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414a:	6a03      	ldr	r3, [r0, #32]
 800414c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004150:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004156:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004158:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800415c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004160:	680d      	ldr	r5, [r1, #0]
 8004162:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800416a:	688d      	ldr	r5, [r1, #8]
 800416c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004170:	4d0f      	ldr	r5, [pc, #60]	; (80041b0 <TIM_OC4_SetConfig+0x68>)
 8004172:	42a8      	cmp	r0, r5
 8004174:	d00f      	beq.n	8004196 <TIM_OC4_SetConfig+0x4e>
 8004176:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800417a:	42a8      	cmp	r0, r5
 800417c:	d00b      	beq.n	8004196 <TIM_OC4_SetConfig+0x4e>
 800417e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004182:	42a8      	cmp	r0, r5
 8004184:	d007      	beq.n	8004196 <TIM_OC4_SetConfig+0x4e>
 8004186:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800418a:	42a8      	cmp	r0, r5
 800418c:	d003      	beq.n	8004196 <TIM_OC4_SetConfig+0x4e>
 800418e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004192:	42a8      	cmp	r0, r5
 8004194:	d104      	bne.n	80041a0 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004196:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800419a:	694d      	ldr	r5, [r1, #20]
 800419c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a4:	684a      	ldr	r2, [r1, #4]
 80041a6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	6203      	str	r3, [r0, #32]
}
 80041aa:	bc30      	pop	{r4, r5}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40012c00 	.word	0x40012c00

080041b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041b6:	6a03      	ldr	r3, [r0, #32]
 80041b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041c2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041cc:	680d      	ldr	r5, [r1, #0]
 80041ce:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041d4:	688a      	ldr	r2, [r1, #8]
 80041d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	4a0f      	ldr	r2, [pc, #60]	; (8004218 <TIM_OC5_SetConfig+0x64>)
 80041dc:	4290      	cmp	r0, r2
 80041de:	d00f      	beq.n	8004200 <TIM_OC5_SetConfig+0x4c>
 80041e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e4:	4290      	cmp	r0, r2
 80041e6:	d00b      	beq.n	8004200 <TIM_OC5_SetConfig+0x4c>
 80041e8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80041ec:	4290      	cmp	r0, r2
 80041ee:	d007      	beq.n	8004200 <TIM_OC5_SetConfig+0x4c>
 80041f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041f4:	4290      	cmp	r0, r2
 80041f6:	d003      	beq.n	8004200 <TIM_OC5_SetConfig+0x4c>
 80041f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041fc:	4290      	cmp	r0, r2
 80041fe:	d104      	bne.n	800420a <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004200:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004204:	694a      	ldr	r2, [r1, #20]
 8004206:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800420c:	6545      	str	r5, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800420e:	684a      	ldr	r2, [r1, #4]
 8004210:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	6203      	str	r3, [r0, #32]
}
 8004214:	bc30      	pop	{r4, r5}
 8004216:	4770      	bx	lr
 8004218:	40012c00 	.word	0x40012c00

0800421c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800421e:	6a03      	ldr	r3, [r0, #32]
 8004220:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004224:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800422a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800422c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004230:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	680d      	ldr	r5, [r1, #0]
 8004236:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800423a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800423e:	688d      	ldr	r5, [r1, #8]
 8004240:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004244:	4d0f      	ldr	r5, [pc, #60]	; (8004284 <TIM_OC6_SetConfig+0x68>)
 8004246:	42a8      	cmp	r0, r5
 8004248:	d00f      	beq.n	800426a <TIM_OC6_SetConfig+0x4e>
 800424a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800424e:	42a8      	cmp	r0, r5
 8004250:	d00b      	beq.n	800426a <TIM_OC6_SetConfig+0x4e>
 8004252:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004256:	42a8      	cmp	r0, r5
 8004258:	d007      	beq.n	800426a <TIM_OC6_SetConfig+0x4e>
 800425a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800425e:	42a8      	cmp	r0, r5
 8004260:	d003      	beq.n	800426a <TIM_OC6_SetConfig+0x4e>
 8004262:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004266:	42a8      	cmp	r0, r5
 8004268:	d104      	bne.n	8004274 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800426a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800426e:	694d      	ldr	r5, [r1, #20]
 8004270:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004274:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004276:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004278:	684a      	ldr	r2, [r1, #4]
 800427a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427c:	6203      	str	r3, [r0, #32]
}
 800427e:	bc30      	pop	{r4, r5}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40012c00 	.word	0x40012c00

08004288 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004288:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d136      	bne.n	8004300 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8004292:	2302      	movs	r3, #2
 8004294:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004298:	6802      	ldr	r2, [r0, #0]
 800429a:	68d3      	ldr	r3, [r2, #12]
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	6803      	ldr	r3, [r0, #0]
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_TIM_Base_Start_IT+0x84>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01c      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x5c>
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d019      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x5c>
 80042b0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d015      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x5c>
 80042b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042bc:	4293      	cmp	r3, r2
 80042be:	d011      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x5c>
 80042c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00d      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x5c>
 80042c8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x5c>
 80042d0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d005      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80042e0:	2000      	movs	r0, #0
 80042e2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e4:	6899      	ldr	r1, [r3, #8]
 80042e6:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <HAL_TIM_Base_Start_IT+0x88>)
 80042e8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ea:	2a06      	cmp	r2, #6
 80042ec:	d00a      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x7c>
 80042ee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80042f2:	d009      	beq.n	8004308 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80042fc:	2000      	movs	r0, #0
 80042fe:	4770      	bx	lr
    return HAL_ERROR;
 8004300:	2001      	movs	r0, #1
 8004302:	4770      	bx	lr
  return HAL_OK;
 8004304:	2000      	movs	r0, #0
 8004306:	4770      	bx	lr
 8004308:	2000      	movs	r0, #0
}
 800430a:	4770      	bx	lr
 800430c:	40012c00 	.word	0x40012c00
 8004310:	00010007 	.word	0x00010007

08004314 <HAL_TIM_PeriodElapsedCallback>:
}
 8004314:	4770      	bx	lr

08004316 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_IC_CaptureCallback>:
}
 8004318:	4770      	bx	lr

0800431a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_TriggerCallback>:
}
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_IRQHandler>:
{
 800431e:	b510      	push	{r4, lr}
 8004320:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004322:	6803      	ldr	r3, [r0, #0]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	f012 0f02 	tst.w	r2, #2
 800432a:	d011      	beq.n	8004350 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	f012 0f02 	tst.w	r2, #2
 8004332:	d00d      	beq.n	8004350 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004334:	f06f 0202 	mvn.w	r2, #2
 8004338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800433a:	2301      	movs	r3, #1
 800433c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800433e:	6803      	ldr	r3, [r0, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f013 0f03 	tst.w	r3, #3
 8004346:	d079      	beq.n	800443c <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004348:	f7ff ffe6 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434c:	2300      	movs	r3, #0
 800434e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	f012 0f04 	tst.w	r2, #4
 8004358:	d012      	beq.n	8004380 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	f012 0f04 	tst.w	r2, #4
 8004360:	d00e      	beq.n	8004380 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004362:	f06f 0204 	mvn.w	r2, #4
 8004366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004368:	2302      	movs	r3, #2
 800436a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004374:	d068      	beq.n	8004448 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff ffce 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437c:	2300      	movs	r3, #0
 800437e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	f012 0f08 	tst.w	r2, #8
 8004388:	d012      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	f012 0f08 	tst.w	r2, #8
 8004390:	d00e      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004392:	f06f 0208 	mvn.w	r2, #8
 8004396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004398:	2304      	movs	r3, #4
 800439a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f013 0f03 	tst.w	r3, #3
 80043a4:	d057      	beq.n	8004456 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7ff ffb6 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ac:	2300      	movs	r3, #0
 80043ae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	f012 0f10 	tst.w	r2, #16
 80043b8:	d012      	beq.n	80043e0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	f012 0f10 	tst.w	r2, #16
 80043c0:	d00e      	beq.n	80043e0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c2:	f06f 0210 	mvn.w	r2, #16
 80043c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c8:	2308      	movs	r3, #8
 80043ca:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80043d4:	d046      	beq.n	8004464 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7ff ff9e 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043dc:	2300      	movs	r3, #0
 80043de:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	f012 0f01 	tst.w	r2, #1
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	f012 0f01 	tst.w	r2, #1
 80043f0:	d13f      	bne.n	8004472 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80043fa:	d003      	beq.n	8004404 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004402:	d13d      	bne.n	8004480 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	f412 7f80 	tst.w	r2, #256	; 0x100
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004414:	d13b      	bne.n	800448e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800441e:	d003      	beq.n	8004428 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004426:	d139      	bne.n	800449c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	f012 0f20 	tst.w	r2, #32
 8004430:	d003      	beq.n	800443a <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	f012 0f20 	tst.w	r2, #32
 8004438:	d137      	bne.n	80044aa <HAL_TIM_IRQHandler+0x18c>
}
 800443a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800443c:	f7ff ff6b 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004440:	4620      	mov	r0, r4
 8004442:	f7ff ff6a 	bl	800431a <HAL_TIM_PWM_PulseFinishedCallback>
 8004446:	e781      	b.n	800434c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff ff64 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444e:	4620      	mov	r0, r4
 8004450:	f7ff ff63 	bl	800431a <HAL_TIM_PWM_PulseFinishedCallback>
 8004454:	e792      	b.n	800437c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	4620      	mov	r0, r4
 8004458:	f7ff ff5d 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	4620      	mov	r0, r4
 800445e:	f7ff ff5c 	bl	800431a <HAL_TIM_PWM_PulseFinishedCallback>
 8004462:	e7a3      	b.n	80043ac <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff ff56 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446a:	4620      	mov	r0, r4
 800446c:	f7ff ff55 	bl	800431a <HAL_TIM_PWM_PulseFinishedCallback>
 8004470:	e7b4      	b.n	80043dc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004472:	f06f 0201 	mvn.w	r2, #1
 8004476:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004478:	4620      	mov	r0, r4
 800447a:	f7ff ff4b 	bl	8004314 <HAL_TIM_PeriodElapsedCallback>
 800447e:	e7b8      	b.n	80043f2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004484:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004486:	4620      	mov	r0, r4
 8004488:	f000 fb0d 	bl	8004aa6 <HAL_TIMEx_BreakCallback>
 800448c:	e7ba      	b.n	8004404 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800448e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004492:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004494:	4620      	mov	r0, r4
 8004496:	f000 fb07 	bl	8004aa8 <HAL_TIMEx_Break2Callback>
 800449a:	e7bc      	b.n	8004416 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800449c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7ff ff3a 	bl	800431c <HAL_TIM_TriggerCallback>
 80044a8:	e7be      	b.n	8004428 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044aa:	f06f 0220 	mvn.w	r2, #32
 80044ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80044b0:	4620      	mov	r0, r4
 80044b2:	f000 faf7 	bl	8004aa4 <HAL_TIMEx_CommutCallback>
}
 80044b6:	e7c0      	b.n	800443a <HAL_TIM_IRQHandler+0x11c>

080044b8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80044b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ba:	4a30      	ldr	r2, [pc, #192]	; (800457c <TIM_Base_SetConfig+0xc4>)
 80044bc:	4290      	cmp	r0, r2
 80044be:	d012      	beq.n	80044e6 <TIM_Base_SetConfig+0x2e>
 80044c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80044c4:	d00f      	beq.n	80044e6 <TIM_Base_SetConfig+0x2e>
 80044c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80044ca:	4290      	cmp	r0, r2
 80044cc:	d00b      	beq.n	80044e6 <TIM_Base_SetConfig+0x2e>
 80044ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044d2:	4290      	cmp	r0, r2
 80044d4:	d007      	beq.n	80044e6 <TIM_Base_SetConfig+0x2e>
 80044d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044da:	4290      	cmp	r0, r2
 80044dc:	d003      	beq.n	80044e6 <TIM_Base_SetConfig+0x2e>
 80044de:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80044e2:	4290      	cmp	r0, r2
 80044e4:	d103      	bne.n	80044ee <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044ea:	684a      	ldr	r2, [r1, #4]
 80044ec:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ee:	4a23      	ldr	r2, [pc, #140]	; (800457c <TIM_Base_SetConfig+0xc4>)
 80044f0:	4290      	cmp	r0, r2
 80044f2:	d01e      	beq.n	8004532 <TIM_Base_SetConfig+0x7a>
 80044f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80044f8:	d01b      	beq.n	8004532 <TIM_Base_SetConfig+0x7a>
 80044fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80044fe:	4290      	cmp	r0, r2
 8004500:	d017      	beq.n	8004532 <TIM_Base_SetConfig+0x7a>
 8004502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004506:	4290      	cmp	r0, r2
 8004508:	d013      	beq.n	8004532 <TIM_Base_SetConfig+0x7a>
 800450a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800450e:	4290      	cmp	r0, r2
 8004510:	d00f      	beq.n	8004532 <TIM_Base_SetConfig+0x7a>
 8004512:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004516:	4290      	cmp	r0, r2
 8004518:	d00b      	beq.n	8004532 <TIM_Base_SetConfig+0x7a>
 800451a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800451e:	4290      	cmp	r0, r2
 8004520:	d007      	beq.n	8004532 <TIM_Base_SetConfig+0x7a>
 8004522:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004526:	4290      	cmp	r0, r2
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0x7a>
 800452a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800452e:	4290      	cmp	r0, r2
 8004530:	d103      	bne.n	800453a <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004536:	68ca      	ldr	r2, [r1, #12]
 8004538:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453e:	694a      	ldr	r2, [r1, #20]
 8004540:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004542:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	688b      	ldr	r3, [r1, #8]
 8004546:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004548:	680b      	ldr	r3, [r1, #0]
 800454a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <TIM_Base_SetConfig+0xc4>)
 800454e:	4298      	cmp	r0, r3
 8004550:	d00f      	beq.n	8004572 <TIM_Base_SetConfig+0xba>
 8004552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004556:	4298      	cmp	r0, r3
 8004558:	d00b      	beq.n	8004572 <TIM_Base_SetConfig+0xba>
 800455a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800455e:	4298      	cmp	r0, r3
 8004560:	d007      	beq.n	8004572 <TIM_Base_SetConfig+0xba>
 8004562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004566:	4298      	cmp	r0, r3
 8004568:	d003      	beq.n	8004572 <TIM_Base_SetConfig+0xba>
 800456a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800456e:	4298      	cmp	r0, r3
 8004570:	d101      	bne.n	8004576 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8004572:	690b      	ldr	r3, [r1, #16]
 8004574:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004576:	2301      	movs	r3, #1
 8004578:	6143      	str	r3, [r0, #20]
}
 800457a:	4770      	bx	lr
 800457c:	40012c00 	.word	0x40012c00

08004580 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004580:	b360      	cbz	r0, 80045dc <HAL_TIM_Base_Init+0x5c>
{
 8004582:	b510      	push	{r4, lr}
 8004584:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004586:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800458a:	b313      	cbz	r3, 80045d2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	2302      	movs	r3, #2
 800458e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004592:	4621      	mov	r1, r4
 8004594:	f851 0b04 	ldr.w	r0, [r1], #4
 8004598:	f7ff ff8e 	bl	80044b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800459c:	2301      	movs	r3, #1
 800459e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80045a6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80045aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80045ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80045b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80045be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80045c6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80045ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80045ce:	2000      	movs	r0, #0
}
 80045d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80045d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80045d6:	f7fd faf5 	bl	8001bc4 <HAL_TIM_Base_MspInit>
 80045da:	e7d7      	b.n	800458c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80045dc:	2001      	movs	r0, #1
}
 80045de:	4770      	bx	lr

080045e0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80045e0:	b360      	cbz	r0, 800463c <HAL_TIM_PWM_Init+0x5c>
{
 80045e2:	b510      	push	{r4, lr}
 80045e4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80045e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80045ea:	b313      	cbz	r3, 8004632 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	2302      	movs	r3, #2
 80045ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f2:	4621      	mov	r1, r4
 80045f4:	f851 0b04 	ldr.w	r0, [r1], #4
 80045f8:	f7ff ff5e 	bl	80044b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004606:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800460a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800460e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004612:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800461e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004622:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004626:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800462a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800462e:	2000      	movs	r0, #0
}
 8004630:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004632:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004636:	f7fd fae5 	bl	8001c04 <HAL_TIM_PWM_MspInit>
 800463a:	e7d7      	b.n	80045ec <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800463c:	2001      	movs	r0, #1
}
 800463e:	4770      	bx	lr

08004640 <TIM_OC2_SetConfig>:
{
 8004640:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004642:	6a03      	ldr	r3, [r0, #32]
 8004644:	f023 0310 	bic.w	r3, r3, #16
 8004648:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800464a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800464c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800464e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004650:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004654:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	680d      	ldr	r5, [r1, #0]
 800465a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800465e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004662:	688d      	ldr	r5, [r1, #8]
 8004664:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004668:	4d17      	ldr	r5, [pc, #92]	; (80046c8 <TIM_OC2_SetConfig+0x88>)
 800466a:	42a8      	cmp	r0, r5
 800466c:	d003      	beq.n	8004676 <TIM_OC2_SetConfig+0x36>
 800466e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004672:	42a8      	cmp	r0, r5
 8004674:	d106      	bne.n	8004684 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800467a:	68cd      	ldr	r5, [r1, #12]
 800467c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004684:	4d10      	ldr	r5, [pc, #64]	; (80046c8 <TIM_OC2_SetConfig+0x88>)
 8004686:	42a8      	cmp	r0, r5
 8004688:	d00f      	beq.n	80046aa <TIM_OC2_SetConfig+0x6a>
 800468a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800468e:	42a8      	cmp	r0, r5
 8004690:	d00b      	beq.n	80046aa <TIM_OC2_SetConfig+0x6a>
 8004692:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004696:	42a8      	cmp	r0, r5
 8004698:	d007      	beq.n	80046aa <TIM_OC2_SetConfig+0x6a>
 800469a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800469e:	42a8      	cmp	r0, r5
 80046a0:	d003      	beq.n	80046aa <TIM_OC2_SetConfig+0x6a>
 80046a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80046a6:	42a8      	cmp	r0, r5
 80046a8:	d107      	bne.n	80046ba <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046aa:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ae:	694c      	ldr	r4, [r1, #20]
 80046b0:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b4:	698c      	ldr	r4, [r1, #24]
 80046b6:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80046ba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80046bc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80046be:	684a      	ldr	r2, [r1, #4]
 80046c0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80046c2:	6203      	str	r3, [r0, #32]
}
 80046c4:	bc30      	pop	{r4, r5}
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00

080046cc <HAL_TIM_PWM_ConfigChannel>:
{
 80046cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80046ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	f000 808c 	beq.w	80047f0 <HAL_TIM_PWM_ConfigChannel+0x124>
 80046d8:	4604      	mov	r4, r0
 80046da:	460d      	mov	r5, r1
 80046dc:	2301      	movs	r3, #1
 80046de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80046e2:	2a14      	cmp	r2, #20
 80046e4:	d81e      	bhi.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x58>
 80046e6:	e8df f002 	tbb	[pc, r2]
 80046ea:	1d0b      	.short	0x1d0b
 80046ec:	1d211d1d 	.word	0x1d211d1d
 80046f0:	1d351d1d 	.word	0x1d351d1d
 80046f4:	1d481d1d 	.word	0x1d481d1d
 80046f8:	1d5c1d1d 	.word	0x1d5c1d1d
 80046fc:	1d1d      	.short	0x1d1d
 80046fe:	6f          	.byte	0x6f
 80046ff:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004700:	6800      	ldr	r0, [r0, #0]
 8004702:	f7ff fc8d 	bl	8004020 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004706:	6822      	ldr	r2, [r4, #0]
 8004708:	6993      	ldr	r3, [r2, #24]
 800470a:	f043 0308 	orr.w	r3, r3, #8
 800470e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004710:	6822      	ldr	r2, [r4, #0]
 8004712:	6993      	ldr	r3, [r2, #24]
 8004714:	f023 0304 	bic.w	r3, r3, #4
 8004718:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	6993      	ldr	r3, [r2, #24]
 800471e:	6929      	ldr	r1, [r5, #16]
 8004720:	430b      	orrs	r3, r1
 8004722:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8004724:	2000      	movs	r0, #0
 8004726:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800472a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800472c:	6800      	ldr	r0, [r0, #0]
 800472e:	f7ff ff87 	bl	8004640 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	6993      	ldr	r3, [r2, #24]
 8004736:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800473a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	6993      	ldr	r3, [r2, #24]
 8004740:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004744:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	6993      	ldr	r3, [r2, #24]
 800474a:	6929      	ldr	r1, [r5, #16]
 800474c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004750:	6193      	str	r3, [r2, #24]
      break;
 8004752:	e7e7      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004754:	6800      	ldr	r0, [r0, #0]
 8004756:	f7ff fcb1 	bl	80040bc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	69d3      	ldr	r3, [r2, #28]
 800475e:	f043 0308 	orr.w	r3, r3, #8
 8004762:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004764:	6822      	ldr	r2, [r4, #0]
 8004766:	69d3      	ldr	r3, [r2, #28]
 8004768:	f023 0304 	bic.w	r3, r3, #4
 800476c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	69d3      	ldr	r3, [r2, #28]
 8004772:	6929      	ldr	r1, [r5, #16]
 8004774:	430b      	orrs	r3, r1
 8004776:	61d3      	str	r3, [r2, #28]
      break;
 8004778:	e7d4      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477a:	6800      	ldr	r0, [r0, #0]
 800477c:	f7ff fce4 	bl	8004148 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004780:	6822      	ldr	r2, [r4, #0]
 8004782:	69d3      	ldr	r3, [r2, #28]
 8004784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004788:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	69d3      	ldr	r3, [r2, #28]
 800478e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004792:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004794:	6822      	ldr	r2, [r4, #0]
 8004796:	69d3      	ldr	r3, [r2, #28]
 8004798:	6929      	ldr	r1, [r5, #16]
 800479a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800479e:	61d3      	str	r3, [r2, #28]
      break;
 80047a0:	e7c0      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047a2:	6800      	ldr	r0, [r0, #0]
 80047a4:	f7ff fd06 	bl	80041b4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047a8:	6822      	ldr	r2, [r4, #0]
 80047aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80047ac:	f043 0308 	orr.w	r3, r3, #8
 80047b0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80047b6:	f023 0304 	bic.w	r3, r3, #4
 80047ba:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80047c0:	6929      	ldr	r1, [r5, #16]
 80047c2:	430b      	orrs	r3, r1
 80047c4:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80047c6:	e7ad      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047c8:	6800      	ldr	r0, [r0, #0]
 80047ca:	f7ff fd27 	bl	800421c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80047d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047d6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047d8:	6822      	ldr	r2, [r4, #0]
 80047da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80047dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047e0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80047e6:	6929      	ldr	r1, [r5, #16]
 80047e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047ec:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80047ee:	e799      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 80047f0:	2002      	movs	r0, #2
 80047f2:	e79a      	b.n	800472a <HAL_TIM_PWM_ConfigChannel+0x5e>

080047f4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047f4:	f001 011f 	and.w	r1, r1, #31
 80047f8:	f04f 0c01 	mov.w	ip, #1
 80047fc:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004800:	6a03      	ldr	r3, [r0, #32]
 8004802:	ea23 030c 	bic.w	r3, r3, ip
 8004806:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004808:	6a03      	ldr	r3, [r0, #32]
 800480a:	408a      	lsls	r2, r1
 800480c:	4313      	orrs	r3, r2
 800480e:	6203      	str	r3, [r0, #32]
}
 8004810:	4770      	bx	lr
	...

08004814 <HAL_TIM_PWM_Start>:
{
 8004814:	b510      	push	{r4, lr}
 8004816:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004818:	2910      	cmp	r1, #16
 800481a:	d83c      	bhi.n	8004896 <HAL_TIM_PWM_Start+0x82>
 800481c:	e8df f001 	tbb	[pc, r1]
 8004820:	3b3b3b09 	.word	0x3b3b3b09
 8004824:	3b3b3b1f 	.word	0x3b3b3b1f
 8004828:	3b3b3b26 	.word	0x3b3b3b26
 800482c:	3b3b3b2d 	.word	0x3b3b3b2d
 8004830:	34          	.byte	0x34
 8004831:	00          	.byte	0x00
 8004832:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004836:	b2db      	uxtb	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	bf18      	it	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	f040 8092 	bne.w	8004968 <HAL_TIM_PWM_Start+0x154>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004844:	2910      	cmp	r1, #16
 8004846:	d87d      	bhi.n	8004944 <HAL_TIM_PWM_Start+0x130>
 8004848:	e8df f001 	tbb	[pc, r1]
 800484c:	7c7c7c2c 	.word	0x7c7c7c2c
 8004850:	7c7c7c6c 	.word	0x7c7c7c6c
 8004854:	7c7c7c70 	.word	0x7c7c7c70
 8004858:	7c7c7c74 	.word	0x7c7c7c74
 800485c:	78          	.byte	0x78
 800485d:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800485e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004862:	b2db      	uxtb	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	bf18      	it	ne
 8004868:	2301      	movne	r3, #1
 800486a:	e7e8      	b.n	800483e <HAL_TIM_PWM_Start+0x2a>
 800486c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004870:	b2db      	uxtb	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	bf18      	it	ne
 8004876:	2301      	movne	r3, #1
 8004878:	e7e1      	b.n	800483e <HAL_TIM_PWM_Start+0x2a>
 800487a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800487e:	b2db      	uxtb	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	bf18      	it	ne
 8004884:	2301      	movne	r3, #1
 8004886:	e7da      	b.n	800483e <HAL_TIM_PWM_Start+0x2a>
 8004888:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800488c:	b2db      	uxtb	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	bf18      	it	ne
 8004892:	2301      	movne	r3, #1
 8004894:	e7d3      	b.n	800483e <HAL_TIM_PWM_Start+0x2a>
 8004896:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800489a:	b2db      	uxtb	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	bf18      	it	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	e7cc      	b.n	800483e <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a4:	2302      	movs	r3, #2
 80048a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048aa:	2201      	movs	r2, #1
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	f7ff ffa1 	bl	80047f4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	4a2f      	ldr	r2, [pc, #188]	; (8004974 <HAL_TIM_PWM_Start+0x160>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00f      	beq.n	80048da <HAL_TIM_PWM_Start+0xc6>
 80048ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00b      	beq.n	80048da <HAL_TIM_PWM_Start+0xc6>
 80048c2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d007      	beq.n	80048da <HAL_TIM_PWM_Start+0xc6>
 80048ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <HAL_TIM_PWM_Start+0xc6>
 80048d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d103      	bne.n	80048e2 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 80048da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048e0:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	4a23      	ldr	r2, [pc, #140]	; (8004974 <HAL_TIM_PWM_Start+0x160>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d030      	beq.n	800494c <HAL_TIM_PWM_Start+0x138>
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d02d      	beq.n	800494c <HAL_TIM_PWM_Start+0x138>
 80048f0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d029      	beq.n	800494c <HAL_TIM_PWM_Start+0x138>
 80048f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d025      	beq.n	800494c <HAL_TIM_PWM_Start+0x138>
 8004900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004904:	4293      	cmp	r3, r2
 8004906:	d021      	beq.n	800494c <HAL_TIM_PWM_Start+0x138>
 8004908:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800490c:	4293      	cmp	r3, r2
 800490e:	d01d      	beq.n	800494c <HAL_TIM_PWM_Start+0x138>
 8004910:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004914:	4293      	cmp	r3, r2
 8004916:	d019      	beq.n	800494c <HAL_TIM_PWM_Start+0x138>
    __HAL_TIM_ENABLE(htim);
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004920:	2000      	movs	r0, #0
 8004922:	e022      	b.n	800496a <HAL_TIM_PWM_Start+0x156>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004924:	2302      	movs	r3, #2
 8004926:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800492a:	e7be      	b.n	80048aa <HAL_TIM_PWM_Start+0x96>
 800492c:	2302      	movs	r3, #2
 800492e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004932:	e7ba      	b.n	80048aa <HAL_TIM_PWM_Start+0x96>
 8004934:	2302      	movs	r3, #2
 8004936:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800493a:	e7b6      	b.n	80048aa <HAL_TIM_PWM_Start+0x96>
 800493c:	2302      	movs	r3, #2
 800493e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004942:	e7b2      	b.n	80048aa <HAL_TIM_PWM_Start+0x96>
 8004944:	2302      	movs	r3, #2
 8004946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800494a:	e7ae      	b.n	80048aa <HAL_TIM_PWM_Start+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <HAL_TIM_PWM_Start+0x164>)
 8004950:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	2a06      	cmp	r2, #6
 8004954:	d00a      	beq.n	800496c <HAL_TIM_PWM_Start+0x158>
 8004956:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800495a:	d009      	beq.n	8004970 <HAL_TIM_PWM_Start+0x15c>
      __HAL_TIM_ENABLE(htim);
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004964:	2000      	movs	r0, #0
 8004966:	e000      	b.n	800496a <HAL_TIM_PWM_Start+0x156>
    return HAL_ERROR;
 8004968:	2001      	movs	r0, #1
}
 800496a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800496c:	2000      	movs	r0, #0
 800496e:	e7fc      	b.n	800496a <HAL_TIM_PWM_Start+0x156>
 8004970:	2000      	movs	r0, #0
 8004972:	e7fa      	b.n	800496a <HAL_TIM_PWM_Start+0x156>
 8004974:	40012c00 	.word	0x40012c00
 8004978:	00010007 	.word	0x00010007

0800497c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800497c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004980:	2a01      	cmp	r2, #1
 8004982:	d042      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8004984:	b430      	push	{r4, r5}
 8004986:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004988:	2201      	movs	r2, #1
 800498a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498e:	2202      	movs	r2, #2
 8004990:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004994:	6800      	ldr	r0, [r0, #0]
 8004996:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004998:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800499a:	4d1d      	ldr	r5, [pc, #116]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800499c:	42a8      	cmp	r0, r5
 800499e:	d003      	beq.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80049a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80049a4:	42a8      	cmp	r0, r5
 80049a6:	d103      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049a8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049ac:	684d      	ldr	r5, [r1, #4]
 80049ae:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b4:	680d      	ldr	r5, [r1, #0]
 80049b6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049b8:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4814      	ldr	r0, [pc, #80]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80049be:	4282      	cmp	r2, r0
 80049c0:	d016      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049c2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80049c6:	d013      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049c8:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 80049cc:	4282      	cmp	r2, r0
 80049ce:	d00f      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049d0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80049d4:	4282      	cmp	r2, r0
 80049d6:	d00b      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049d8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80049dc:	4282      	cmp	r2, r0
 80049de:	d007      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049e0:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 80049e4:	4282      	cmp	r2, r0
 80049e6:	d003      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049e8:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 80049ec:	4282      	cmp	r2, r0
 80049ee:	d104      	bne.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049f4:	6889      	ldr	r1, [r1, #8]
 80049f6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8004a06:	bc30      	pop	{r4, r5}
 8004a08:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a0a:	2002      	movs	r0, #2
}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40012c00 	.word	0x40012c00

08004a14 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d03e      	beq.n	8004a9a <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8004a1c:	b410      	push	{r4}
 8004a1e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8004a20:	2301      	movs	r3, #1
 8004a22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a26:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2c:	6888      	ldr	r0, [r1, #8]
 8004a2e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a34:	6848      	ldr	r0, [r1, #4]
 8004a36:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a3c:	6808      	ldr	r0, [r1, #0]
 8004a3e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a44:	6908      	ldr	r0, [r1, #16]
 8004a46:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a4c:	6948      	ldr	r0, [r1, #20]
 8004a4e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a54:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004a56:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a58:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004a5c:	6988      	ldr	r0, [r1, #24]
 8004a5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a62:	6810      	ldr	r0, [r2, #0]
 8004a64:	4c0e      	ldr	r4, [pc, #56]	; (8004aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8004a66:	42a0      	cmp	r0, r4
 8004a68:	d003      	beq.n	8004a72 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8004a6a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004a6e:	42a0      	cmp	r0, r4
 8004a70:	d10c      	bne.n	8004a8c <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a76:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004a78:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a80:	69cc      	ldr	r4, [r1, #28]
 8004a82:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004a84:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004a88:	6a09      	ldr	r1, [r1, #32]
 8004a8a:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a8c:	6443      	str	r3, [r0, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8004a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a98:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a9a:	2002      	movs	r0, #2
}
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40012c00 	.word	0x40012c00

08004aa4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004aa8:	4770      	bx	lr
	...

08004aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ae4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ab0:	f7fd f928 	bl	8001d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ab4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ab6:	e003      	b.n	8004ac0 <LoopCopyDataInit>

08004ab8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004aba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004abc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004abe:	3104      	adds	r1, #4

08004ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ac0:	480a      	ldr	r0, [pc, #40]	; (8004aec <LoopForever+0xa>)
	ldr	r3, =_edata
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ac4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004ac6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ac8:	d3f6      	bcc.n	8004ab8 <CopyDataInit>
	ldr	r2, =_sbss
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004acc:	e002      	b.n	8004ad4 <LoopFillZerobss>

08004ace <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004ace:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ad0:	f842 3b04 	str.w	r3, [r2], #4

08004ad4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <LoopForever+0x16>)
	cmp	r2, r3
 8004ad6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004ad8:	d3f9      	bcc.n	8004ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ada:	f000 f8eb 	bl	8004cb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ade:	f7fc fabf 	bl	8001060 <main>

08004ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ae2:	e7fe      	b.n	8004ae2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004ae4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004ae8:	08004e38 	.word	0x08004e38
	ldr	r0, =_sdata
 8004aec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004af0:	20000458 	.word	0x20000458
	ldr	r2, =_sbss
 8004af4:	20000458 	.word	0x20000458
	ldr	r3, = _ebss
 8004af8:	200008a8 	.word	0x200008a8

08004afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004afc:	e7fe      	b.n	8004afc <ADC1_2_IRQHandler>
	...

08004b00 <malloc>:
 8004b00:	4b02      	ldr	r3, [pc, #8]	; (8004b0c <malloc+0xc>)
 8004b02:	4601      	mov	r1, r0
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	f000 b82b 	b.w	8004b60 <_malloc_r>
 8004b0a:	bf00      	nop
 8004b0c:	20000450 	.word	0x20000450

08004b10 <free>:
 8004b10:	4b02      	ldr	r3, [pc, #8]	; (8004b1c <free+0xc>)
 8004b12:	4601      	mov	r1, r0
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	f000 b901 	b.w	8004d1c <_free_r>
 8004b1a:	bf00      	nop
 8004b1c:	20000450 	.word	0x20000450

08004b20 <sbrk_aligned>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	4e0e      	ldr	r6, [pc, #56]	; (8004b5c <sbrk_aligned+0x3c>)
 8004b24:	460c      	mov	r4, r1
 8004b26:	6831      	ldr	r1, [r6, #0]
 8004b28:	4605      	mov	r5, r0
 8004b2a:	b911      	cbnz	r1, 8004b32 <sbrk_aligned+0x12>
 8004b2c:	f000 f8ac 	bl	8004c88 <_sbrk_r>
 8004b30:	6030      	str	r0, [r6, #0]
 8004b32:	4621      	mov	r1, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	f000 f8a7 	bl	8004c88 <_sbrk_r>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d00a      	beq.n	8004b54 <sbrk_aligned+0x34>
 8004b3e:	1cc4      	adds	r4, r0, #3
 8004b40:	f024 0403 	bic.w	r4, r4, #3
 8004b44:	42a0      	cmp	r0, r4
 8004b46:	d007      	beq.n	8004b58 <sbrk_aligned+0x38>
 8004b48:	1a21      	subs	r1, r4, r0
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 f89c 	bl	8004c88 <_sbrk_r>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d101      	bne.n	8004b58 <sbrk_aligned+0x38>
 8004b54:	f04f 34ff 	mov.w	r4, #4294967295
 8004b58:	4620      	mov	r0, r4
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	20000764 	.word	0x20000764

08004b60 <_malloc_r>:
 8004b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b64:	1ccd      	adds	r5, r1, #3
 8004b66:	f025 0503 	bic.w	r5, r5, #3
 8004b6a:	3508      	adds	r5, #8
 8004b6c:	2d0c      	cmp	r5, #12
 8004b6e:	bf38      	it	cc
 8004b70:	250c      	movcc	r5, #12
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	4607      	mov	r7, r0
 8004b76:	db01      	blt.n	8004b7c <_malloc_r+0x1c>
 8004b78:	42a9      	cmp	r1, r5
 8004b7a:	d905      	bls.n	8004b88 <_malloc_r+0x28>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	2600      	movs	r6, #0
 8004b82:	4630      	mov	r0, r6
 8004b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c5c <_malloc_r+0xfc>
 8004b8c:	f000 f868 	bl	8004c60 <__malloc_lock>
 8004b90:	f8d8 3000 	ldr.w	r3, [r8]
 8004b94:	461c      	mov	r4, r3
 8004b96:	bb5c      	cbnz	r4, 8004bf0 <_malloc_r+0x90>
 8004b98:	4629      	mov	r1, r5
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	f7ff ffc0 	bl	8004b20 <sbrk_aligned>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	d155      	bne.n	8004c52 <_malloc_r+0xf2>
 8004ba6:	f8d8 4000 	ldr.w	r4, [r8]
 8004baa:	4626      	mov	r6, r4
 8004bac:	2e00      	cmp	r6, #0
 8004bae:	d145      	bne.n	8004c3c <_malloc_r+0xdc>
 8004bb0:	2c00      	cmp	r4, #0
 8004bb2:	d048      	beq.n	8004c46 <_malloc_r+0xe6>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4638      	mov	r0, r7
 8004bba:	eb04 0903 	add.w	r9, r4, r3
 8004bbe:	f000 f863 	bl	8004c88 <_sbrk_r>
 8004bc2:	4581      	cmp	r9, r0
 8004bc4:	d13f      	bne.n	8004c46 <_malloc_r+0xe6>
 8004bc6:	6821      	ldr	r1, [r4, #0]
 8004bc8:	1a6d      	subs	r5, r5, r1
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f7ff ffa7 	bl	8004b20 <sbrk_aligned>
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d037      	beq.n	8004c46 <_malloc_r+0xe6>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	442b      	add	r3, r5
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d038      	beq.n	8004c56 <_malloc_r+0xf6>
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	42a2      	cmp	r2, r4
 8004be8:	d12b      	bne.n	8004c42 <_malloc_r+0xe2>
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	e00f      	b.n	8004c10 <_malloc_r+0xb0>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	1b52      	subs	r2, r2, r5
 8004bf4:	d41f      	bmi.n	8004c36 <_malloc_r+0xd6>
 8004bf6:	2a0b      	cmp	r2, #11
 8004bf8:	d917      	bls.n	8004c2a <_malloc_r+0xca>
 8004bfa:	1961      	adds	r1, r4, r5
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	6025      	str	r5, [r4, #0]
 8004c00:	bf18      	it	ne
 8004c02:	6059      	strne	r1, [r3, #4]
 8004c04:	6863      	ldr	r3, [r4, #4]
 8004c06:	bf08      	it	eq
 8004c08:	f8c8 1000 	streq.w	r1, [r8]
 8004c0c:	5162      	str	r2, [r4, r5]
 8004c0e:	604b      	str	r3, [r1, #4]
 8004c10:	4638      	mov	r0, r7
 8004c12:	f104 060b 	add.w	r6, r4, #11
 8004c16:	f000 f829 	bl	8004c6c <__malloc_unlock>
 8004c1a:	f026 0607 	bic.w	r6, r6, #7
 8004c1e:	1d23      	adds	r3, r4, #4
 8004c20:	1af2      	subs	r2, r6, r3
 8004c22:	d0ae      	beq.n	8004b82 <_malloc_r+0x22>
 8004c24:	1b9b      	subs	r3, r3, r6
 8004c26:	50a3      	str	r3, [r4, r2]
 8004c28:	e7ab      	b.n	8004b82 <_malloc_r+0x22>
 8004c2a:	42a3      	cmp	r3, r4
 8004c2c:	6862      	ldr	r2, [r4, #4]
 8004c2e:	d1dd      	bne.n	8004bec <_malloc_r+0x8c>
 8004c30:	f8c8 2000 	str.w	r2, [r8]
 8004c34:	e7ec      	b.n	8004c10 <_malloc_r+0xb0>
 8004c36:	4623      	mov	r3, r4
 8004c38:	6864      	ldr	r4, [r4, #4]
 8004c3a:	e7ac      	b.n	8004b96 <_malloc_r+0x36>
 8004c3c:	4634      	mov	r4, r6
 8004c3e:	6876      	ldr	r6, [r6, #4]
 8004c40:	e7b4      	b.n	8004bac <_malloc_r+0x4c>
 8004c42:	4613      	mov	r3, r2
 8004c44:	e7cc      	b.n	8004be0 <_malloc_r+0x80>
 8004c46:	230c      	movs	r3, #12
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f000 f80e 	bl	8004c6c <__malloc_unlock>
 8004c50:	e797      	b.n	8004b82 <_malloc_r+0x22>
 8004c52:	6025      	str	r5, [r4, #0]
 8004c54:	e7dc      	b.n	8004c10 <_malloc_r+0xb0>
 8004c56:	605b      	str	r3, [r3, #4]
 8004c58:	deff      	udf	#255	; 0xff
 8004c5a:	bf00      	nop
 8004c5c:	20000760 	.word	0x20000760

08004c60 <__malloc_lock>:
 8004c60:	4801      	ldr	r0, [pc, #4]	; (8004c68 <__malloc_lock+0x8>)
 8004c62:	f000 b84b 	b.w	8004cfc <__retarget_lock_acquire_recursive>
 8004c66:	bf00      	nop
 8004c68:	200008a4 	.word	0x200008a4

08004c6c <__malloc_unlock>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	; (8004c74 <__malloc_unlock+0x8>)
 8004c6e:	f000 b846 	b.w	8004cfe <__retarget_lock_release_recursive>
 8004c72:	bf00      	nop
 8004c74:	200008a4 	.word	0x200008a4

08004c78 <memset>:
 8004c78:	4402      	add	r2, r0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d100      	bne.n	8004c82 <memset+0xa>
 8004c80:	4770      	bx	lr
 8004c82:	f803 1b01 	strb.w	r1, [r3], #1
 8004c86:	e7f9      	b.n	8004c7c <memset+0x4>

08004c88 <_sbrk_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d06      	ldr	r5, [pc, #24]	; (8004ca4 <_sbrk_r+0x1c>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	f7fd f818 	bl	8001cc8 <_sbrk>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_sbrk_r+0x1a>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_sbrk_r+0x1a>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	200008a0 	.word	0x200008a0

08004ca8 <__errno>:
 8004ca8:	4b01      	ldr	r3, [pc, #4]	; (8004cb0 <__errno+0x8>)
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000450 	.word	0x20000450

08004cb4 <__libc_init_array>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	4d0d      	ldr	r5, [pc, #52]	; (8004cec <__libc_init_array+0x38>)
 8004cb8:	4c0d      	ldr	r4, [pc, #52]	; (8004cf0 <__libc_init_array+0x3c>)
 8004cba:	1b64      	subs	r4, r4, r5
 8004cbc:	10a4      	asrs	r4, r4, #2
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	42a6      	cmp	r6, r4
 8004cc2:	d109      	bne.n	8004cd8 <__libc_init_array+0x24>
 8004cc4:	4d0b      	ldr	r5, [pc, #44]	; (8004cf4 <__libc_init_array+0x40>)
 8004cc6:	4c0c      	ldr	r4, [pc, #48]	; (8004cf8 <__libc_init_array+0x44>)
 8004cc8:	f000 f874 	bl	8004db4 <_init>
 8004ccc:	1b64      	subs	r4, r4, r5
 8004cce:	10a4      	asrs	r4, r4, #2
 8004cd0:	2600      	movs	r6, #0
 8004cd2:	42a6      	cmp	r6, r4
 8004cd4:	d105      	bne.n	8004ce2 <__libc_init_array+0x2e>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cdc:	4798      	blx	r3
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7ee      	b.n	8004cc0 <__libc_init_array+0xc>
 8004ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce6:	4798      	blx	r3
 8004ce8:	3601      	adds	r6, #1
 8004cea:	e7f2      	b.n	8004cd2 <__libc_init_array+0x1e>
 8004cec:	08004e28 	.word	0x08004e28
 8004cf0:	08004e28 	.word	0x08004e28
 8004cf4:	08004e28 	.word	0x08004e28
 8004cf8:	08004e2c 	.word	0x08004e2c

08004cfc <__retarget_lock_acquire_recursive>:
 8004cfc:	4770      	bx	lr

08004cfe <__retarget_lock_release_recursive>:
 8004cfe:	4770      	bx	lr

08004d00 <memcpy>:
 8004d00:	440a      	add	r2, r1
 8004d02:	4291      	cmp	r1, r2
 8004d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d08:	d100      	bne.n	8004d0c <memcpy+0xc>
 8004d0a:	4770      	bx	lr
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d16:	4291      	cmp	r1, r2
 8004d18:	d1f9      	bne.n	8004d0e <memcpy+0xe>
 8004d1a:	bd10      	pop	{r4, pc}

08004d1c <_free_r>:
 8004d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d1e:	2900      	cmp	r1, #0
 8004d20:	d044      	beq.n	8004dac <_free_r+0x90>
 8004d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d26:	9001      	str	r0, [sp, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d2e:	bfb8      	it	lt
 8004d30:	18e4      	addlt	r4, r4, r3
 8004d32:	f7ff ff95 	bl	8004c60 <__malloc_lock>
 8004d36:	4a1e      	ldr	r2, [pc, #120]	; (8004db0 <_free_r+0x94>)
 8004d38:	9801      	ldr	r0, [sp, #4]
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	b933      	cbnz	r3, 8004d4c <_free_r+0x30>
 8004d3e:	6063      	str	r3, [r4, #4]
 8004d40:	6014      	str	r4, [r2, #0]
 8004d42:	b003      	add	sp, #12
 8004d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d48:	f7ff bf90 	b.w	8004c6c <__malloc_unlock>
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	d908      	bls.n	8004d62 <_free_r+0x46>
 8004d50:	6825      	ldr	r5, [r4, #0]
 8004d52:	1961      	adds	r1, r4, r5
 8004d54:	428b      	cmp	r3, r1
 8004d56:	bf01      	itttt	eq
 8004d58:	6819      	ldreq	r1, [r3, #0]
 8004d5a:	685b      	ldreq	r3, [r3, #4]
 8004d5c:	1949      	addeq	r1, r1, r5
 8004d5e:	6021      	streq	r1, [r4, #0]
 8004d60:	e7ed      	b.n	8004d3e <_free_r+0x22>
 8004d62:	461a      	mov	r2, r3
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b10b      	cbz	r3, 8004d6c <_free_r+0x50>
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	d9fa      	bls.n	8004d62 <_free_r+0x46>
 8004d6c:	6811      	ldr	r1, [r2, #0]
 8004d6e:	1855      	adds	r5, r2, r1
 8004d70:	42a5      	cmp	r5, r4
 8004d72:	d10b      	bne.n	8004d8c <_free_r+0x70>
 8004d74:	6824      	ldr	r4, [r4, #0]
 8004d76:	4421      	add	r1, r4
 8004d78:	1854      	adds	r4, r2, r1
 8004d7a:	42a3      	cmp	r3, r4
 8004d7c:	6011      	str	r1, [r2, #0]
 8004d7e:	d1e0      	bne.n	8004d42 <_free_r+0x26>
 8004d80:	681c      	ldr	r4, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	6053      	str	r3, [r2, #4]
 8004d86:	440c      	add	r4, r1
 8004d88:	6014      	str	r4, [r2, #0]
 8004d8a:	e7da      	b.n	8004d42 <_free_r+0x26>
 8004d8c:	d902      	bls.n	8004d94 <_free_r+0x78>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	6003      	str	r3, [r0, #0]
 8004d92:	e7d6      	b.n	8004d42 <_free_r+0x26>
 8004d94:	6825      	ldr	r5, [r4, #0]
 8004d96:	1961      	adds	r1, r4, r5
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	bf04      	itt	eq
 8004d9c:	6819      	ldreq	r1, [r3, #0]
 8004d9e:	685b      	ldreq	r3, [r3, #4]
 8004da0:	6063      	str	r3, [r4, #4]
 8004da2:	bf04      	itt	eq
 8004da4:	1949      	addeq	r1, r1, r5
 8004da6:	6021      	streq	r1, [r4, #0]
 8004da8:	6054      	str	r4, [r2, #4]
 8004daa:	e7ca      	b.n	8004d42 <_free_r+0x26>
 8004dac:	b003      	add	sp, #12
 8004dae:	bd30      	pop	{r4, r5, pc}
 8004db0:	20000760 	.word	0x20000760

08004db4 <_init>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	bf00      	nop
 8004db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dba:	bc08      	pop	{r3}
 8004dbc:	469e      	mov	lr, r3
 8004dbe:	4770      	bx	lr

08004dc0 <_fini>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr
 8004dcc:	0000      	movs	r0, r0
	...
